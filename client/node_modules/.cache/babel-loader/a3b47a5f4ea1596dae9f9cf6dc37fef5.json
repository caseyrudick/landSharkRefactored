{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar createLine = require('regl-line2d');\n\nvar Registry = require('../../registry');\n\nvar prepareRegl = require('../../lib/prepare_regl');\n\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\n\nvar Cartesian = require('../../plots/cartesian');\n\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\n\nvar shouldShowZeroLine = require('../../plots/cartesian/axes').shouldShowZeroLine;\n\nvar SPLOM = 'splom';\n\nfunction plot(gd) {\n  var fullLayout = gd._fullLayout;\n\n  var _module = Registry.getModule(SPLOM);\n\n  var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n  var success = prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint']);\n  if (!success) return;\n\n  if (fullLayout._hasOnlyLargeSploms) {\n    updateGrid(gd);\n  }\n\n  _module.plot(gd, {}, splomCalcData);\n}\n\nfunction drag(gd) {\n  var cd = gd.calcdata;\n  var fullLayout = gd._fullLayout;\n\n  if (fullLayout._hasOnlyLargeSploms) {\n    updateGrid(gd);\n  }\n\n  for (var i = 0; i < cd.length; i++) {\n    var cd0 = cd[i][0];\n    var trace = cd0.trace;\n    var scene = fullLayout._splomScenes[trace.uid];\n\n    if (trace.type === 'splom' && scene && scene.matrix) {\n      dragOne(gd, trace, scene);\n    }\n  }\n}\n\nfunction dragOne(gd, trace, scene) {\n  var visibleLength = scene.matrixOptions.data.length;\n  var visibleDims = trace._visibleDims;\n  var ranges = scene.viewOpts.ranges = new Array(visibleLength);\n\n  for (var k = 0; k < visibleDims.length; k++) {\n    var i = visibleDims[k];\n    var rng = ranges[k] = new Array(4);\n    var xa = getFromId(gd, trace._diag[i][0]);\n\n    if (xa) {\n      rng[0] = xa.r2l(xa.range[0]);\n      rng[2] = xa.r2l(xa.range[1]);\n    }\n\n    var ya = getFromId(gd, trace._diag[i][1]);\n\n    if (ya) {\n      rng[1] = ya.r2l(ya.range[0]);\n      rng[3] = ya.r2l(ya.range[1]);\n    }\n  }\n\n  if (scene.selectBatch.length || scene.unselectBatch.length) {\n    scene.matrix.update({\n      ranges: ranges\n    }, {\n      ranges: ranges\n    });\n  } else {\n    scene.matrix.update({\n      ranges: ranges\n    });\n  }\n}\n\nfunction updateGrid(gd) {\n  var fullLayout = gd._fullLayout;\n\n  var regl = fullLayout._glcanvas.data()[0].regl;\n\n  var splomGrid = fullLayout._splomGrid;\n\n  if (!splomGrid) {\n    splomGrid = fullLayout._splomGrid = createLine(regl);\n  }\n\n  splomGrid.update(makeGridData(gd));\n}\n\nfunction makeGridData(gd) {\n  var fullLayout = gd._fullLayout;\n  var gs = fullLayout._size;\n  var fullView = [0, 0, fullLayout.width, fullLayout.height];\n  var lookup = {};\n  var k;\n\n  function push(prefix, ax, x0, x1, y0, y1) {\n    var lcolor = ax[prefix + 'color'];\n    var lwidth = ax[prefix + 'width'];\n    var key = String(lcolor + lwidth);\n\n    if (key in lookup) {\n      lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n    } else {\n      lookup[key] = {\n        data: [x0, x1, y0, y1],\n        join: 'rect',\n        thickness: lwidth,\n        color: lcolor,\n        viewport: fullView,\n        range: fullView,\n        overlay: false\n      };\n    }\n  }\n\n  for (k in fullLayout._splomSubplots) {\n    var sp = fullLayout._plots[k];\n    var xa = sp.xaxis;\n    var ya = sp.yaxis;\n    var xVals = xa._gridVals;\n    var yVals = ya._gridVals; // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n    // we need to compute bottom-to-top offsets and slopes:\n\n    var yOffset = gs.b + ya.domain[0] * gs.h;\n    var ym = -ya._m;\n    var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n    var x, y;\n\n    if (xa.showgrid) {\n      for (k = 0; k < xVals.length; k++) {\n        x = xa._offset + xa.l2p(xVals[k].x);\n        push('grid', xa, x, yOffset, x, yOffset + ya._length);\n      }\n    }\n\n    if (ya.showgrid) {\n      for (k = 0; k < yVals.length; k++) {\n        y = yOffset + yb + ym * yVals[k].x;\n        push('grid', ya, xa._offset, y, xa._offset + xa._length, y);\n      }\n    }\n\n    if (shouldShowZeroLine(gd, xa, ya)) {\n      x = xa._offset + xa.l2p(0);\n      push('zeroline', xa, x, yOffset, x, yOffset + ya._length);\n    }\n\n    if (shouldShowZeroLine(gd, ya, xa)) {\n      y = yOffset + yb + 0;\n      push('zeroline', ya, xa._offset, y, xa._offset + xa._length, y);\n    }\n  }\n\n  var gridBatches = [];\n\n  for (k in lookup) {\n    gridBatches.push(lookup[k]);\n  }\n\n  return gridBatches;\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var lookup = {};\n  var i;\n\n  if (oldFullLayout._splomScenes) {\n    for (i = 0; i < newFullData.length; i++) {\n      var newTrace = newFullData[i];\n\n      if (newTrace.type === 'splom') {\n        lookup[newTrace.uid] = 1;\n      }\n    }\n\n    for (i = 0; i < oldFullData.length; i++) {\n      var oldTrace = oldFullData[i];\n\n      if (!lookup[oldTrace.uid]) {\n        var scene = oldFullLayout._splomScenes[oldTrace.uid];\n        if (scene && scene.destroy) scene.destroy(); // must first set scene to null in order to get garbage collected\n\n        oldFullLayout._splomScenes[oldTrace.uid] = null;\n        delete oldFullLayout._splomScenes[oldTrace.uid];\n      }\n    }\n  }\n\n  if (Object.keys(oldFullLayout._splomScenes || {}).length === 0) {\n    delete oldFullLayout._splomScenes;\n  }\n\n  if (oldFullLayout._splomGrid && !newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms) {\n    // must first set scene to null in order to get garbage collected\n    oldFullLayout._splomGrid.destroy();\n\n    oldFullLayout._splomGrid = null;\n    delete oldFullLayout._splomGrid;\n  }\n\n  Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\n\nmodule.exports = {\n  name: SPLOM,\n  attr: Cartesian.attr,\n  attrRegex: Cartesian.attrRegex,\n  layoutAttributes: Cartesian.layoutAttributes,\n  supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n  drawFramework: Cartesian.drawFramework,\n  plot: plot,\n  drag: drag,\n  updateGrid: updateGrid,\n  clean: clean,\n  updateFx: Cartesian.updateFx,\n  toSVG: Cartesian.toSVG\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/splom/base_plot.js"],"names":["createLine","require","Registry","prepareRegl","getModuleCalcData","Cartesian","getFromId","shouldShowZeroLine","SPLOM","plot","gd","fullLayout","_fullLayout","_module","getModule","splomCalcData","calcdata","success","_hasOnlyLargeSploms","updateGrid","drag","cd","i","length","cd0","trace","scene","_splomScenes","uid","type","matrix","dragOne","visibleLength","matrixOptions","data","visibleDims","_visibleDims","ranges","viewOpts","Array","k","rng","xa","_diag","r2l","range","ya","selectBatch","unselectBatch","update","regl","_glcanvas","splomGrid","_splomGrid","makeGridData","gs","_size","fullView","width","height","lookup","push","prefix","ax","x0","x1","y0","y1","lcolor","lwidth","key","String","NaN","join","thickness","color","viewport","overlay","_splomSubplots","sp","_plots","xaxis","yaxis","xVals","_gridVals","yVals","yOffset","b","domain","h","ym","_m","yb","calendar","x","y","showgrid","_offset","l2p","_length","gridBatches","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","newTrace","oldTrace","destroy","Object","keys","module","exports","name","attr","attrRegex","layoutAttributes","supplyLayoutDefaults","drawFramework","updateFx","toSVG"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar createLine = require('regl-line2d');\n\nvar Registry = require('../../registry');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar Cartesian = require('../../plots/cartesian');\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\nvar shouldShowZeroLine = require('../../plots/cartesian/axes').shouldShowZeroLine;\n\nvar SPLOM = 'splom';\n\nfunction plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var _module = Registry.getModule(SPLOM);\n    var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n\n    var success = prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint']);\n    if(!success) return;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        updateGrid(gd);\n    }\n\n    _module.plot(gd, {}, splomCalcData);\n}\n\nfunction drag(gd) {\n    var cd = gd.calcdata;\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        updateGrid(gd);\n    }\n\n    for(var i = 0; i < cd.length; i++) {\n        var cd0 = cd[i][0];\n        var trace = cd0.trace;\n        var scene = fullLayout._splomScenes[trace.uid];\n\n        if(trace.type === 'splom' && scene && scene.matrix) {\n            dragOne(gd, trace, scene);\n        }\n    }\n}\n\nfunction dragOne(gd, trace, scene) {\n    var visibleLength = scene.matrixOptions.data.length;\n    var visibleDims = trace._visibleDims;\n    var ranges = scene.viewOpts.ranges = new Array(visibleLength);\n\n    for(var k = 0; k < visibleDims.length; k++) {\n        var i = visibleDims[k];\n        var rng = ranges[k] = new Array(4);\n\n        var xa = getFromId(gd, trace._diag[i][0]);\n        if(xa) {\n            rng[0] = xa.r2l(xa.range[0]);\n            rng[2] = xa.r2l(xa.range[1]);\n        }\n\n        var ya = getFromId(gd, trace._diag[i][1]);\n        if(ya) {\n            rng[1] = ya.r2l(ya.range[0]);\n            rng[3] = ya.r2l(ya.range[1]);\n        }\n    }\n\n    if(scene.selectBatch.length || scene.unselectBatch.length) {\n        scene.matrix.update({ranges: ranges}, {ranges: ranges});\n    } else {\n        scene.matrix.update({ranges: ranges});\n    }\n}\n\nfunction updateGrid(gd) {\n    var fullLayout = gd._fullLayout;\n    var regl = fullLayout._glcanvas.data()[0].regl;\n    var splomGrid = fullLayout._splomGrid;\n\n    if(!splomGrid) {\n        splomGrid = fullLayout._splomGrid = createLine(regl);\n    }\n    splomGrid.update(makeGridData(gd));\n}\n\nfunction makeGridData(gd) {\n    var fullLayout = gd._fullLayout;\n    var gs = fullLayout._size;\n    var fullView = [0, 0, fullLayout.width, fullLayout.height];\n    var lookup = {};\n    var k;\n\n    function push(prefix, ax, x0, x1, y0, y1) {\n        var lcolor = ax[prefix + 'color'];\n        var lwidth = ax[prefix + 'width'];\n        var key = String(lcolor + lwidth);\n\n        if(key in lookup) {\n            lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n        } else {\n            lookup[key] = {\n                data: [x0, x1, y0, y1],\n                join: 'rect',\n                thickness: lwidth,\n                color: lcolor,\n                viewport: fullView,\n                range: fullView,\n                overlay: false\n            };\n        }\n    }\n\n    for(k in fullLayout._splomSubplots) {\n        var sp = fullLayout._plots[k];\n        var xa = sp.xaxis;\n        var ya = sp.yaxis;\n        var xVals = xa._gridVals;\n        var yVals = ya._gridVals;\n        // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n        // we need to compute bottom-to-top offsets and slopes:\n        var yOffset = gs.b + ya.domain[0] * gs.h;\n        var ym = -ya._m;\n        var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n        var x, y;\n\n        if(xa.showgrid) {\n            for(k = 0; k < xVals.length; k++) {\n                x = xa._offset + xa.l2p(xVals[k].x);\n                push('grid', xa, x, yOffset, x, yOffset + ya._length);\n            }\n        }\n        if(ya.showgrid) {\n            for(k = 0; k < yVals.length; k++) {\n                y = yOffset + yb + ym * yVals[k].x;\n                push('grid', ya, xa._offset, y, xa._offset + xa._length, y);\n            }\n        }\n        if(shouldShowZeroLine(gd, xa, ya)) {\n            x = xa._offset + xa.l2p(0);\n            push('zeroline', xa, x, yOffset, x, yOffset + ya._length);\n        }\n        if(shouldShowZeroLine(gd, ya, xa)) {\n            y = yOffset + yb + 0;\n            push('zeroline', ya, xa._offset, y, xa._offset + xa._length, y);\n        }\n    }\n\n    var gridBatches = [];\n    for(k in lookup) {\n        gridBatches.push(lookup[k]);\n    }\n\n    return gridBatches;\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var lookup = {};\n    var i;\n\n    if(oldFullLayout._splomScenes) {\n        for(i = 0; i < newFullData.length; i++) {\n            var newTrace = newFullData[i];\n            if(newTrace.type === 'splom') {\n                lookup[newTrace.uid] = 1;\n            }\n        }\n        for(i = 0; i < oldFullData.length; i++) {\n            var oldTrace = oldFullData[i];\n            if(!lookup[oldTrace.uid]) {\n                var scene = oldFullLayout._splomScenes[oldTrace.uid];\n                if(scene && scene.destroy) scene.destroy();\n                // must first set scene to null in order to get garbage collected\n                oldFullLayout._splomScenes[oldTrace.uid] = null;\n                delete oldFullLayout._splomScenes[oldTrace.uid];\n            }\n        }\n    }\n\n    if(Object.keys(oldFullLayout._splomScenes || {}).length === 0) {\n        delete oldFullLayout._splomScenes;\n    }\n\n    if(oldFullLayout._splomGrid &&\n        (!newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms)) {\n        // must first set scene to null in order to get garbage collected\n        oldFullLayout._splomGrid.destroy();\n        oldFullLayout._splomGrid = null;\n        delete oldFullLayout._splomGrid;\n    }\n\n    Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\n\nmodule.exports = {\n    name: SPLOM,\n    attr: Cartesian.attr,\n    attrRegex: Cartesian.attrRegex,\n    layoutAttributes: Cartesian.layoutAttributes,\n    supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n    drawFramework: Cartesian.drawFramework,\n    plot: plot,\n    drag: drag,\n    updateGrid: updateGrid,\n    clean: clean,\n    updateFx: Cartesian.updateFx,\n    toSVG: Cartesian.toSVG\n};\n"]},"metadata":{},"sourceType":"script"}