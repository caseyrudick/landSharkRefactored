{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar boxHoverPoints = require('../box/hover');\n\nvar helpers = require('./helpers');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode, hoverLayer) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var hoveron = trace.hoveron;\n  var hasHoveronViolins = hoveron.indexOf('violins') !== -1;\n  var hasHoveronKDE = hoveron.indexOf('kde') !== -1;\n  var closeData = [];\n  var closePtData;\n  var violinLineAttrs;\n\n  if (hasHoveronViolins || hasHoveronKDE) {\n    var closeBoxData = boxHoverPoints.hoverOnBoxes(pointData, xval, yval, hovermode);\n\n    if (hasHoveronKDE && closeBoxData.length > 0) {\n      var xa = pointData.xa;\n      var ya = pointData.ya;\n      var pLetter, vLetter, pAxis, vAxis, vVal;\n\n      if (trace.orientation === 'h') {\n        vVal = xval;\n        pLetter = 'y';\n        pAxis = ya;\n        vLetter = 'x';\n        vAxis = xa;\n      } else {\n        vVal = yval;\n        pLetter = 'x';\n        pAxis = xa;\n        vLetter = 'y';\n        vAxis = ya;\n      }\n\n      var di = cd[pointData.index];\n\n      if (vVal >= di.span[0] && vVal <= di.span[1]) {\n        var kdePointData = Lib.extendFlat({}, pointData);\n        var vValPx = vAxis.c2p(vVal, true);\n        var kdeVal = helpers.getKdeValue(di, trace, vVal);\n        var pOnPath = helpers.getPositionOnKdePath(di, trace, vValPx);\n        var paOffset = pAxis._offset;\n        var paLength = pAxis._length;\n        kdePointData[pLetter + '0'] = pOnPath[0];\n        kdePointData[pLetter + '1'] = pOnPath[1];\n        kdePointData[vLetter + '0'] = kdePointData[vLetter + '1'] = vValPx;\n        kdePointData[vLetter + 'Label'] = vLetter + ': ' + Axes.hoverLabelText(vAxis, vVal) + ', ' + cd[0].t.labels.kde + ' ' + kdeVal.toFixed(3); // move the spike to the KDE point\n\n        kdePointData.spikeDistance = closeBoxData[0].spikeDistance;\n        var spikePosAttr = pLetter + 'Spike';\n        kdePointData[spikePosAttr] = closeBoxData[0][spikePosAttr];\n        closeBoxData[0].spikeDistance = undefined;\n        closeBoxData[0][spikePosAttr] = undefined; // no hovertemplate support yet\n\n        kdePointData.hovertemplate = false;\n        closeData.push(kdePointData);\n        violinLineAttrs = {\n          stroke: pointData.color\n        };\n        violinLineAttrs[pLetter + '1'] = Lib.constrain(paOffset + pOnPath[0], paOffset, paOffset + paLength);\n        violinLineAttrs[pLetter + '2'] = Lib.constrain(paOffset + pOnPath[1], paOffset, paOffset + paLength);\n        violinLineAttrs[vLetter + '1'] = violinLineAttrs[vLetter + '2'] = vAxis._offset + vValPx;\n      }\n    }\n\n    if (hasHoveronViolins) {\n      closeData = closeData.concat(closeBoxData);\n    }\n  }\n\n  if (hoveron.indexOf('points') !== -1) {\n    closePtData = boxHoverPoints.hoverOnPoints(pointData, xval, yval);\n  } // update violin line (if any)\n\n\n  var violinLine = hoverLayer.selectAll('.violinline-' + trace.uid).data(violinLineAttrs ? [0] : []);\n  violinLine.enter().append('line').classed('violinline-' + trace.uid, true).attr('stroke-width', 1.5);\n  violinLine.exit().remove();\n  violinLine.attr(violinLineAttrs); // same combine logic as box hoverPoints\n\n  if (hovermode === 'closest') {\n    if (closePtData) return [closePtData];\n    return closeData;\n  }\n\n  if (closePtData) {\n    closeData.push(closePtData);\n    return closeData;\n  }\n\n  return closeData;\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/violin/hover.js"],"names":["Lib","require","Axes","boxHoverPoints","helpers","module","exports","hoverPoints","pointData","xval","yval","hovermode","hoverLayer","cd","trace","hoveron","hasHoveronViolins","indexOf","hasHoveronKDE","closeData","closePtData","violinLineAttrs","closeBoxData","hoverOnBoxes","length","xa","ya","pLetter","vLetter","pAxis","vAxis","vVal","orientation","di","index","span","kdePointData","extendFlat","vValPx","c2p","kdeVal","getKdeValue","pOnPath","getPositionOnKdePath","paOffset","_offset","paLength","_length","hoverLabelText","t","labels","kde","toFixed","spikeDistance","spikePosAttr","undefined","hovertemplate","push","stroke","color","constrain","concat","hoverOnPoints","violinLine","selectAll","uid","data","enter","append","classed","attr","exit","remove"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar boxHoverPoints = require('../box/hover');\nvar helpers = require('./helpers');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode, hoverLayer) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var hoveron = trace.hoveron;\n    var hasHoveronViolins = hoveron.indexOf('violins') !== -1;\n    var hasHoveronKDE = hoveron.indexOf('kde') !== -1;\n    var closeData = [];\n    var closePtData;\n    var violinLineAttrs;\n\n    if(hasHoveronViolins || hasHoveronKDE) {\n        var closeBoxData = boxHoverPoints.hoverOnBoxes(pointData, xval, yval, hovermode);\n\n        if(hasHoveronKDE && closeBoxData.length > 0) {\n            var xa = pointData.xa;\n            var ya = pointData.ya;\n            var pLetter, vLetter, pAxis, vAxis, vVal;\n\n            if(trace.orientation === 'h') {\n                vVal = xval;\n                pLetter = 'y';\n                pAxis = ya;\n                vLetter = 'x';\n                vAxis = xa;\n            } else {\n                vVal = yval;\n                pLetter = 'x';\n                pAxis = xa;\n                vLetter = 'y';\n                vAxis = ya;\n            }\n\n            var di = cd[pointData.index];\n\n            if(vVal >= di.span[0] && vVal <= di.span[1]) {\n                var kdePointData = Lib.extendFlat({}, pointData);\n                var vValPx = vAxis.c2p(vVal, true);\n                var kdeVal = helpers.getKdeValue(di, trace, vVal);\n                var pOnPath = helpers.getPositionOnKdePath(di, trace, vValPx);\n                var paOffset = pAxis._offset;\n                var paLength = pAxis._length;\n\n                kdePointData[pLetter + '0'] = pOnPath[0];\n                kdePointData[pLetter + '1'] = pOnPath[1];\n                kdePointData[vLetter + '0'] = kdePointData[vLetter + '1'] = vValPx;\n                kdePointData[vLetter + 'Label'] = vLetter + ': ' + Axes.hoverLabelText(vAxis, vVal) + ', ' + cd[0].t.labels.kde + ' ' + kdeVal.toFixed(3);\n\n                // move the spike to the KDE point\n                kdePointData.spikeDistance = closeBoxData[0].spikeDistance;\n                var spikePosAttr = pLetter + 'Spike';\n                kdePointData[spikePosAttr] = closeBoxData[0][spikePosAttr];\n                closeBoxData[0].spikeDistance = undefined;\n                closeBoxData[0][spikePosAttr] = undefined;\n\n                // no hovertemplate support yet\n                kdePointData.hovertemplate = false;\n\n                closeData.push(kdePointData);\n\n                violinLineAttrs = {stroke: pointData.color};\n                violinLineAttrs[pLetter + '1'] = Lib.constrain(paOffset + pOnPath[0], paOffset, paOffset + paLength);\n                violinLineAttrs[pLetter + '2'] = Lib.constrain(paOffset + pOnPath[1], paOffset, paOffset + paLength);\n                violinLineAttrs[vLetter + '1'] = violinLineAttrs[vLetter + '2'] = vAxis._offset + vValPx;\n            }\n        }\n\n        if(hasHoveronViolins) {\n            closeData = closeData.concat(closeBoxData);\n        }\n    }\n\n    if(hoveron.indexOf('points') !== -1) {\n        closePtData = boxHoverPoints.hoverOnPoints(pointData, xval, yval);\n    }\n\n    // update violin line (if any)\n    var violinLine = hoverLayer.selectAll('.violinline-' + trace.uid)\n        .data(violinLineAttrs ? [0] : []);\n    violinLine.enter().append('line')\n        .classed('violinline-' + trace.uid, true)\n        .attr('stroke-width', 1.5);\n    violinLine.exit().remove();\n    violinLine.attr(violinLineAttrs);\n\n    // same combine logic as box hoverPoints\n    if(hovermode === 'closest') {\n        if(closePtData) return [closePtData];\n        return closeData;\n    }\n    if(closePtData) {\n        closeData.push(closePtData);\n        return closeData;\n    }\n    return closeData;\n};\n"]},"metadata":{},"sourceType":"script"}