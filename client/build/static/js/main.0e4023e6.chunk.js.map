{"version":3,"sources":["Components/History.js","Components/UserVerification/UserPool.js","Components/UserVerification/SignUp.js","ActionCreators/types.js","Components/UserVerification/SignIn.js","ActionCreators/UserVerification/userNeedsToCreateAccount.js","ActionCreators/saveWellInfoToReduxStore.js","ActionCreators/getWellPlansFromDynamoDb.js","Components/Home.js","ActionCreators/getLeaseLinesFromDynamoDb.js","ActionCreators/getSurveysFromDynamoDb.js","ActionCreators/getWellsFromDynamoDb.js","ActionCreators/postWellInfoToDynamoDb.js","ActionCreators/getHardLinesFromDynamoDb.js","ActionCreators/saveActiveWellToReduxStore.js","ActionCreators/savePlansToReduxStore.js","HelperFunctions/Calculations/DLC.js","HelperFunctions/Calculations/RF.js","HelperFunctions/Calculations/TVD.js","HelperFunctions/Calculations/NS.js","HelperFunctions/Calculations/EW.js","HelperFunctions/Calculations/SECT.js","HelperFunctions/Calculations/DLS.js","APIs/wells.js","ActionCreators/postPlansToJSONDb.js","Components/Plans.js","ActionCreators/postPlansToDynamoDb.js","Components/ExistingPlans.js","Components/ExistingLeaseLines.js","Components/ExistingHardLines.js","ActionCreators/saveLeaseLinesToReduxStore.js","Components/LeaseLines.js","ActionCreators/postLeaseLinesToDynamoDb.js","Components/HardLines.js","ActionCreators/saveHardLinesToReduxStore.js","ActionCreators/postHardLinesToDynamoDb.js","Components/PolyLines.js","Components/ExistingPVA.js","Components/PVA.js","Components/Surveys.js","ActionCreators/postSurveysToDynamoDb.js","ActionCreators/saveSurveysToReduxStore.js","Components/ExistingSurveys.js","Components/Dashboard.js","Components/UserVerification/SignInHome.js","Components/scratch.js","Components/App.js","Reducers/saveWellInfoToReduxStoreReducer.js","Reducers/savePlansToReduxStoreReducer.js","Reducers/saveActiveWellToReduxStoreReducer.js","Reducers/saveLeaseLinesToReduxStoreReducer.js","Reducers/saveSurveysToReduxStoreReducer.js","Reducers/saveHardLinesToReduxStoreReducer.js","Reducers/postWellInfoToDynamoDbReducer.js","Reducers/postPlansToDynamoDbReducer.js","Reducers/getWellsFromDynamoDbReducer.js","Reducers/getWellPlansFromDynamoDbReducer.js","Reducers/postHardLinesToDynamoDbReducer.js","Reducers/postLeaseLinesToDynamoDbReducer.js","Reducers/postSurveysToDynamoDbReducer.js","Reducers/getLeaseLinesFromDynamoDbReducer.js","Reducers/getHardLinesFromDynamoDbReducer.js","Reducers/getSurveysFromDynamoDbReducer.js","Reducers/index.js","index.js"],"names":["createBrowserHistory","CognitoUserPool","UserPoolId","ClientId","SignUp","useState","email","setEmail","password","setPassword","userSubmittedCredentials","setSubmittedCreds","verificationCode","setVerificationCode","verficationSuccess","setVerificationSucess","Fragment","Jumbotron","fluid","className","Container","Form","Row","Col","md","Group","Control","placeholder","onChange","event","target","value","style","alignItems","Button","variant","disabled","onClick","e","preventDefault","UserPool","signUp","err","data","console","log","to","userData","Username","Pool","CognitoUser","confirmRegistration","result","verifyConfirmationCode","SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED","SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED","SAVE_WELL_INFO_TO_REDUX_STORE_FAILED","SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED","SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED","SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED","SAVE_PLANS_TO_REDUX_STORE_REQUESTED","SAVE_PLANS_TO_REDUX_STORE_RECEIVED","SAVE_PLANS_TO_REDUX_STORE_FAILED","SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED","SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED","SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED","SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED","SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED","SAVE_SURVEYS_TO_REDUX_STORE_FAILED","SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED","SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED","SAVE_HARD_LINES_TO_REDUX_STORE_FAILED","GET_HARD_LINES_FROM_DYNAMODB_REQUESTED","GET_HARD_LINES_FROM_DYNAMODB_RECEIVED","GET_HARD_LINES_FROM_DYNAMODB_FAILED","POST_WELL_INFO_TO_DYNAMODB_REQUESTED","POST_WELL_INFO_TO_DYNAMODB_RECEIVED","POST_WELL_INFO_TO_DYNAMODB_FAILED","POST_PLANS_TO_DYNAMODB_REQUESTED","POST_PLANS_TO_DYNAMODB_RECEIVED","POST_PLANS_TO_DYNAMODB_FAILED","GET_WELLS_FROM_DYNAMO_REQUESTED","GET_WELLS_FROM_DYNAMO_RECEIVED","GET_WELLS_FROM_DYNAMO_FAILED","GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED","GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED","GET_WELL_PLANS_FROM_DYNAMODB_FAILED","POST_HARD_LINES_TO_DYNAMODB_REQUESTED","POST_HARD_LINES_TO_DYNAMODB_RECEIVED","POST_HARD_LINES_TO_DYNAMODB_FAILED","POST_LEASE_LINES_TO_DYNAMODB_REQUESTED","POST_LEASE_LINES_TO_DYNAMODB_RECEIVED","POST_LEASE_LINES_TO_DYNAMODB_FAILED","POST_SURVEYS_TO_DYNAMODB_REQUESTED","POST_SURVEYS_TO_DYNAMODB_RECEIVED","POST_SURVEYS_TO_DYNAMODB_FAILED","GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED","GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED","GET_LEASE_LINES_FROM_DYNAMODB_FAILED","GET_SURVEYS_FROM_DYNAMODB_REQUESTED","GET_SURVEYS_FROM_DYNAMODB_RECEIVED","GET_SURVEYS_FROM_DYNAMODB_FAILED","connect","userNeedsToCreateAccount","bool","dispatch","getState","a","type","payload","error","color","userCredentials","Password","authDetails","AuthenticationDetails","authenticateUser","onSuccess","History","push","onFailure","submitCredentialsForSignIn","alignSelf","wellInfo","selectedWell","well","axios","post","response","getSurveysFromDynamoDbReducer","getWellsFromDynamoDbReducer","postWellInfoToDynamoDbReducer","saveActiveWellToReduxStoreReducer","saveWellInfoToReduxStoreReducer","getLeaseLinesFromDynamoDb","getWellPlansFromDynamoDb","getSurveysFromDynamoDb","getWellsFromDynamoDb","get","postWellInfoToDynamoDb","getHardLinesFromDynamoDb","saveActiveWellToReduxStore","saveWellInfoToReduxStore","activeWell","setActiveWell","operator","setOperator","rig","setRig","setWell","county","setCounty","usState","setUSstate","northing","setNorthing","easting","setEasting","useEffect","renderWellNames","status","wells","Items","Dropdown","Menu","map","Item","href","Operator","S","Rig","Well_Name","handleNewWellSubmit","handleFetchData","Toggle","id","plans","inclinationPrior","inclinationCurrent","azimuthPrior","azimuthCurrent","converter","Math","PI","acos","cos","sin","measuredDepthPrior","measuredDepthCurrent","calculatedDLC","tan","calculatedTVDPrior","DLC","calculatedRF","RF","calculatedTVDCurrent","parseFloat","toFixed","calculatedNorthingPrior","calculatedNorthingCurrent","calculatedEastingPrior","calculatedEastingCurrent","vsDirection","converter2","EW","NS","closure","atan2","determineClosure","HD","sqrt","pow","calculatedSect","calculatedDLS","create","baseURL","uSstate","grid","wellData","date","moment","format","postPlansToDynamoDb","planRecords","savePlansToReduxStore","postPlansToJSONDb","savePlansToReduxStoreReducer","input","setInput","setVSDirection","readOnly","width","setGrid","handleAddRows","handleRemoveRow","newGrid","pop","rows","numberOfRowsToAdd","createdRows","i","length","createRows","xs","renderWellData","valueRenderer","cell","onCellsChanged","changes","gridNew","row","forEach","col","controlId","val","handleSubmit","getWellPlansFromDynamoDbReducer","setPlans","createCopies","createReactDataSheetGridFromPlans","dataSheetHeader","planLineItem","idx","newRow","parseInt","MD","INC","AZM","TVD","Northing","Easting","VS","DLS","renderMain","getLeaseLinesFromDynamoDbReducer","leaseLines","setLeaseLines","createCopy","createReactDataSheetGridFromLeaseLines","leaseLinesFromReducerCopy","leaseLineItem","getHardLinesFromDynamoDbReducer","hardLines","setHardLines","createReactDataSheetGridFromHardLines","hardLineItem","postLeaseLinesToJSONDbReducer","saveLeaseLinesToReduxStore","postLeaseLinesToDynamoDb","LeaseLinesInfo","postLeaseLinesToJSONDb","wellInfoAndLeaseLines","addRow","removeRow","postHardLinesToDynamoDbReducer","saveHardLinesToReduxStore","postHardLinesToDynamoDb","hardLineRecords","hardLineInfo","setHardLineRecords","newhardLineRecords","hardLineRecordsNew","Count","saveHardLinesToReduxStoreReducer","saveSurveysToReduxStoreReducer","saveLeaseLinesToReduxStoreReducer","createEastingCoordinates","polyLine","index","slice","createNorthingCoordinates","createTVDCoordinates","createSectCoordinates","x","y","mode","marker","name","layout","height","title","lineItem","sectCoordinates","convertNumberStringsToNumbersAndSort","dataSource","dataCopy","element","Plan_Number","Plan_Line_Number","Survey_Number","Hard_Line_Number","Lease_Line_Number","_","orderBy","renderSectionView","postSurveysToDynamoDb","surveys","saveSurveysToReduxStore","setSurveys","performCalculations","calculatedTVD","calculateTVD","calculatedNS","calculateNS","calculatedEW","calculateEW","calculatedSECT","calculateSECT","calculateDLS","newsurveys","surveysNew","createReactDataSheetGridFromSurveys","surveyLineItem","userNeedsToCreateAccountReducer","Tabs","Tab","eventKey","App","history","path","exact","component","SignIn","scratch","Dashboard","INITIAL_STATE","combineReducers","state","postPlansToDynamoDbReducer","postLeaseLinesToDynamoDbReducer","postSurveysToDynamoDbReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e4023e6.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();","import {\n\tCognitoUserPool,\n\tCognitoUserAttribute,\n\tCognitoUser,\n} from 'amazon-cognito-identity-js';\n\nconst poolData = {\n  UserPoolId: \"us-east-2_75YqLvMCl\",\n  ClientId: \"2j6ne1d5384a382eh4755719be\"\n}\n\nexport default new CognitoUserPool(poolData);\n\n\n// const POOL_DATA = {\n//   UserPoolId: \"us-east-2_yvwiM5ORU\",\n//   ClientId: \"4958acsp36ccmg13tfg44b0jkc\"\n// };\n// const userPool = new CognitoUserPool(POOL_DATA);","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// AWS Cognito\nimport UserPool from \"./UserPool\"\nimport { AuthenticationDetails, CognitoUser } from 'amazon-cognito-identity-js';\n//redux & router\nimport { connect } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\n\nconst SignUp = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [userSubmittedCredentials, setSubmittedCreds] = useState(false)\n  const [verificationCode, setVerificationCode] = useState(null)\n  const [verficationSuccess, setVerificationSucess] = useState(false)\n\n\n  const submitNewUser = event => {\n    event.preventDefault();\n    UserPool.signUp(email, password, [], null, (err, data) => {\n      if (err) {\n        console.log(err)\n      } else {\n        console.log(data)\n        setSubmittedCreds(true)\n      }\n    })\n  }\n\n  const renderSignUp = () => {\n    return (\n        <Col>\n          <Row className=\"justify-content-md-center\">\n            <h3>Sign Up</h3>\n          </Row>\n          <Form.Group>\n            <Form.Control placeholder=\"Enter Email\" onChange={event => setEmail(event.target.value)} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Control placeholder=\"Create Password\" onChange={event => setPassword(event.target.value)} />\n          </Form.Group>\n          <Row style={{alignItems: \"baseline\"}}>\n            <Col>\n              <Button variant=\"info\" disabled={ email === \"\" && password === \"\" && userSubmittedCredentials === false ? true : false } onClick={(e)=>submitNewUser(e)}>Submit</Button>\n            </Col>\n            <Col className=\"text-right\">\n              <Link to=\"/signin\" className=\"item\">\n                Already have an account?\n              </Link>\n            </Col>\n          </Row>\n        </Col>\n    )\n  }\n\n  const verifyConfirmationCode = event => {\n    event.preventDefault()\n    const userData = {\n      Username: email,\n      Pool: UserPool\n    }\n    console.log(verificationCode)\n    const congitoUser = new CognitoUser(userData);\n    congitoUser.confirmRegistration(verificationCode, true, (err, result) => {\n      if (err) {\n        console.log(err)\n      } else {\n        console.log(result)\n        setVerificationSucess(true)\n      }\n    })\n  }\n\n  const renderCodeResponse = () => {\n    return (\n      <div>\n        Registration Sucessful\n      </div>\n    )\n  }\n\n  const renderConfirmationCodeForm = () => {\n     return (\n        <Form.Group>\n          <Row className=\"justify-content-md-center\">\n            <h3 className=\"mt-4\">Confirmation Code</h3>\n          </Row>\n          <Form.Control className=\"mt-3\" placeholder=\"Enter Verification Code\" onChange={event => setVerificationCode(event.target.value)} />\n          <Button className=\"mt-4\" variant=\"primary\" disabled={ verificationCode === \"\" ? true : false } onClick={(event) => verifyConfirmationCode(event)}>Submit</Button>\n        </Form.Group>\n     )\n  }\n\n  return (\n    <React.Fragment>\n      <Jumbotron fluid className=\"bg-dark text-white\">\n        <Container>\n          <h1>LandShark App (Employee Portal)</h1>\n        </Container>\n      </Jumbotron>\n      <Form>\n        <Row className=\"justify-content-center align-self-center\">\n            <Col md=\"auto\"/>\n            <Col md={3}>\n              {renderSignUp()}\n              {userSubmittedCredentials ? renderConfirmationCodeForm() : null }\n              {verficationSuccess ? \"Registration Successful\" : \"\"}\n            </Col>\n            <Col md=\"auto\"></Col>\n          </Row>\n      </Form>\n    </React.Fragment>\n  )\n}\n\nexport default SignUp","export const CREATE_NEW_WELL = 'CREATE_NEW_WELL'\nexport const FETCH_WELLS = 'FETCH_WELLS'\nexport const SET_ACTIVE_WELL = 'SET_ACTIVE_WELL'\nexport const CREATE_NEW_PLAN = 'CREATE_NEW_PLAN'\nexport const SAVE_WELL_PLANS_TO_JSON = \"SAVE_WELL_PLANS_TO_JSON\"\nexport const SAVE_NEW_WELL_TO_REDUX_STORE = \"SAVE_NEW_WELL_TO_REDUX_STORE\"\n// export const GET_WELLS_FROM_JSON_REQUESTED = \"GET_WELL_PLANS_FROM_JSON_REQUESTED\"\n// export const GET_WELLS_FROM_JSON_RECEIVED = \"GET_WELL_PLANS_FROM_JSON_RECEIVED\"\n// export const GET_WELLS_FROM_JSON_FAILED = \"GET_WELL_PLANS_FROM_JSON_FAILED\"\nexport const SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED = \"SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED\"\nexport const SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED = \"SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED\"\nexport const SAVE_WELL_INFO_TO_REDUX_STORE_FAILED= \"SAVE_WELL_INFO_TO_REDUX_STORE_FAILED\"\nexport const POST_WELLINFO_TO_JSONDB_REQUESTED = \"POST_WELLINFO_TO_JSONDB_REQUESTED\"\nexport const POST_WELLINFO_TO_JSONDB_RECEIVED = \"POST_WELLINFO_TO_JSONDB_RECEIVED\"\nexport const POST_WELLINFO_TO_JSONDB_FAILED = \"POST_WELLINFO_TO_JSONDB_FAILED\"\nexport const POST_PLANS_TO_JSON_REQUESTED = \"SAVE_WELL_PLANS_TO_JSON_REQUESTED\"\nexport const POST_PLANS_TO_JSON_RECEIVED = \"SAVE_WELL_PLANS_TO_JSON_RECEIVED\" \nexport const POST_PLANS_TO_JSON_FAILED = 'SAVE_WELL_PLANS_TO_JSON_FAILED'\nexport const SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED = \"SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED\"\nexport const SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED = \"SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED\"\nexport const SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED = \"SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED\"\nexport const SAVE_PLANS_TO_REDUX_STORE_REQUESTED = \"SAVE_PLANS_TO_REDUX_STORE_REQUESTED\"\nexport const SAVE_PLANS_TO_REDUX_STORE_RECEIVED = \"SAVE_PLANS_TO_REDUX_STORE_RECEIVED\"\nexport const SAVE_PLANS_TO_REDUX_STORE_FAILED = \"SAVE_PLANS_TO_REDUX_STORE_FAILED\"\nexport const GET_WELL_PLANS_FROM_JSONDB_REQUESTED = \"GET_WELL_PLANS_FROM_JSONDB_REQUESTED\"\nexport const GET_WELL_PLANS_FROM_JSONDB_RECEIVED = \"GET_WELL_PLANS_FROM_JSONDB_RECEIVED\"\nexport const GET_WELL_PLANS_FROM_JSONDB_FAILED = \"GET_WELL_PLANS_FROM_JSONDB_FAILED\"\nexport const SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED = \"SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED\"\nexport const SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED = \"SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED\"\nexport const SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED = \"SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED\"\nexport const POST_LEASE_LINES_TO_JSONDB_REQUESTED = \"POST_LEASE_LINES_TO_JSONDB_REQUESTED\" \nexport const POST_LEASE_LINES_TO_JSONDB_RECEIVED = 'POST_LEASE_LINES_TO_JSONDB_RECEIVED'  \nexport const POST_LEASE_LINES_TO_JSONDB_FAILED = \"POST_LEASE_LINES_TO_JSONDB_FAILED\"\nexport const GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED = \"GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED\"\nexport const GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED = \"GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED\"\nexport const GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED = \"GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED\"\nexport const GET_LEASE_LINES_FROM_JSONDB_REQUESTED = \"GET_LEASE_LINES_FROM_JSONDB_REQUESTED\"\nexport const GET_LEASE_LINES_FROM_JSONDB_RECEIVED = \"GET_LEASE_LINES_FROM_JSONDB_RECEIVED\"\nexport const GET_LEASE_LINES_FROM_JSONDB_FAILED = \"GET_LEASE_LINES_FROM_JSONDB_FAILED\"\nexport const SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED = \"SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED\"  \nexport const SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED = \"SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED\"\nexport const SAVE_SURVEYS_TO_REDUX_STORE_FAILED = \"SAVE_SURVEYS_TO_REDUX_STORE_FAILED\"\nexport const POST_SURVEYS_TO_JSONDB_REQUESTED = \"POST_SURVEYS_TO_JSON_DB_REQUESTED\"\nexport const POST_SURVEYS_TO_JSONDB_RECEIVED = \"POST_SURVEYS_TO_JSON_DB_RECEIVED\" \nexport const POST_SURVEYS_TO_JSONDB_FAILED = \"POST_SURVEYS_TO_JSON_DB_FAILED\"\nexport const GET_WELLS_WITH_SURVEYS_FROM_JSONDB_REQUESTED = \"GET_WELLS_WITH_SURVEYS_FROM_JSONDB_REQUESTED\"\nexport const GET_WELLS_WITH_SURVEYS_FROM_JSONDB_RECEIVED = \"GET_WELLS_WITH_SURVEYS_FROM_JSONDB_RECEIVED\"\nexport const GET_WELLS_WITH_SURVEYS_FROM_JSONDB_FAILED = \"GET_WELLS_WITH_SURVEYS_FROM_JSONDB_FAILED\"\nexport const GET_SURVEYS_FROM_JSONDB_REQUESTED = \"GET_SURVEYS_FROM_JSONDB_REQUESTED\"\nexport const GET_SURVEYS_FROM_JSONDB_RECEIVED = \"GET_SURVEYS_FROM_JSONDB_RECEIVED\"\nexport const GET_SURVEYS_FROM_JSONDB_FAILED = \"GET_SURVEYS_FROM_JSONDB_FAILED\"\nexport const SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED = \"SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED\"\nexport const SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED = \"SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED\"\nexport const SAVE_HARD_LINES_TO_REDUX_STORE_FAILED = \"SAVE_HARD_LINES_TO_REDUX_STORE_FAILED\"\nexport const POST_HARD_LINES_TO_JSONDB_REQUESTED = \"POST_HARD_LINES_TO_JSONDB_REQUESTED\" \nexport const POST_HARD_LINES_TO_JSONDB_RECEIVED = 'POST_HARD_LINES_TO_JSONDB_RECEIVED'  \nexport const POST_HARD_LINES_TO_JSONDB_FAILED = \"POST_HARD_LINES_TO_JSONDB_FAILED\"\nexport const GET_HARD_LINES_LIST_FROM_JSONDB_REQUESTED = \"GET_HARD_LINES_LIST_FROM_JSONDB_REQUESTED\"\nexport const GET_HARD_LINES_LIST_FROM_JSONDB_RECEIVED = \"GET_HARD_LINES_LIST_FROM_JSONDB_RECEIVED\"\nexport const GET_HARD_LINES_LIST_FROM_JSONDB_FAILED = \"GET_HARD_LINES_LIST_FROM_JSONDB_FAILED\"\nexport const GET_HARD_LINES_FROM_DYNAMODB_REQUESTED = \"GET_HARD_LINES_FROM_DYNAMODB_REQUESTED\"\nexport const GET_HARD_LINES_FROM_DYNAMODB_RECEIVED = \"GET_HARD_LINES_FROM_DYNAMODB_RECEIVED\"\nexport const GET_HARD_LINES_FROM_DYNAMODB_FAILED = \"GET_HARD_LINES_FROM_DYNAMODB_FAILED\"\nexport const SIGN_UP_REQUESTED = \"SIGN_UP_REQUESTED\";\nexport const SIGN_UP_RECEIVED = \"SIGN_UP_RECEIVED\";\nexport const SIGN_UP_FAILED= \"SIGN_UP_FAILED\";\nexport const POST_WELL_INFO_TO_DYNAMODB_REQUESTED = \"POST_WELL_INFO_TO_DYNAMODB_REQUESTED\"\nexport const POST_WELL_INFO_TO_DYNAMODB_RECEIVED = \"POST_WELL_INFO_TO_DYNAMODB_RECEIVED\"\nexport const POST_WELL_INFO_TO_DYNAMODB_FAILED = \"POST_WELL_INFO_TO_DYNAMODB_FAILED\"\nexport const POST_PLANS_TO_DYNAMODB_REQUESTED = \"POST_PLANS_TO_DYNAMODB_REQUESTED\"\nexport const POST_PLANS_TO_DYNAMODB_RECEIVED = \"POST_PLANS_TO_DYNAMODB_RECEIVED\"\nexport const POST_PLANS_TO_DYNAMODB_FAILED = \"POST_PLANS_TO_DYNAMODB_FAILED\"\nexport const GET_WELLS_FROM_DYNAMO_REQUESTED = \"GET_WELLS_FROM_DYNAMO_REQUESTED\"\nexport const GET_WELLS_FROM_DYNAMO_RECEIVED = \"GET_WELLS_FROM_DYNAMO_RECEIVED\"\nexport const GET_WELLS_FROM_DYNAMO_FAILED = \"GET_WELLS_FROM_DYNAMO_FAILED\"\nexport const GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED = \"GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED\"\nexport const GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED = \"GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED\"\nexport const GET_WELL_PLANS_FROM_DYNAMODB_FAILED = \"GET_WELL_PLANS_FROM_DYNAMODB_FAILED\"\nexport const POST_HARD_LINES_TO_DYNAMODB_REQUESTED = \"POST_HARD_LINES_TO_DYNAMODB_REQUESTED\"\nexport const POST_HARD_LINES_TO_DYNAMODB_RECEIVED = \"POST_HARD_LINES_TO_DYNAMODB_RECEIVED\"\nexport const POST_HARD_LINES_TO_DYNAMODB_FAILED = \"POST_HARD_LINES_TO_DYNAMODB_FAILED\"\nexport const POST_LEASE_LINES_TO_DYNAMODB_REQUESTED = \"POST_LEASE_LINES_TO_DYNAMODB_REQUESTED\"\nexport const POST_LEASE_LINES_TO_DYNAMODB_RECEIVED = \"POST_LEASE_LINES_TO_DYNAMODB_RECEIVED\"\nexport const POST_LEASE_LINES_TO_DYNAMODB_FAILED = \"POST_LEASE_LINES_TO_DYNAMODB_FAILED\"\nexport const POST_SURVEYS_TO_DYNAMODB_REQUESTED = \"POST_SURVEYS_TO_DYNAMODB_REQUESTED\"\nexport const POST_SURVEYS_TO_DYNAMODB_RECEIVED = \"POST_SURVEYS_TO_DYNAMODB_RECEIVED\"\nexport const POST_SURVEYS_TO_DYNAMODB_FAILED = \"POST_SURVEYS_TO_DYNAMODB_FAILED\"\nexport const GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED = \"GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED\"\nexport const GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED = \"GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED\"\nexport const GET_LEASE_LINES_FROM_DYNAMODB_FAILED = \"GET_LEASE_LINES_FROM_DYNAMODB_FAILED\"\nexport const GET_SURVEYS_FROM_DYNAMODB_REQUESTED = \"GET_SURVEYS_FROM_DYNAMODB_REQUESTED\"\nexport const GET_SURVEYS_FROM_DYNAMODB_RECEIVED = \"GET_SURVEYS_FROM_DYNAMODB_RECEIVED\"\nexport const GET_SURVEYS_FROM_DYNAMODB_FAILED = \"GET_SURVEYS_FROM_DYNAMODB_FAILED\"","import React, { useState } from 'react';\n//boostrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Nav from \"react-bootstrap/Nav\"\nimport Jumbotron from 'react-bootstrap/esm/Jumbotron';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from \"react-bootstrap/Tab\"\n// AWS Cognito\nimport { AuthenticationDetails, CognitoUser } from 'amazon-cognito-identity-js';\nimport UserPool from \"./UserPool\"\n//redux & router\nimport { connect } from \"react-redux\"\nimport { Link, Redirect } from \"react-router-dom\"\nimport History from \"../History\"\n// action Creator\nimport userNeedsToCreateAccount from \"../../ActionCreators/UserVerification/userNeedsToCreateAccount\"\n\n\nconst SignIn = ({ userNeedsToCreateAccount }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n\n\n  const submitCredentialsForSignIn = (event) => {\n    event.preventDefault();\n    const userCredentials = {\n      Username: email,\n      Password: password\n    }\n    const userData = {\n      Username: email, \n      Pool: UserPool\n    }\n    const authDetails = new AuthenticationDetails(userCredentials);\n    const user = new CognitoUser(userData)\n\n    user.authenticateUser(authDetails, {\n      onSuccess: data => {\n        console.log(data);\n        History.push(\"/dashboard\")\n        console.log(History)\n        \n      },\n\n      onFailure: err => {\n        console.log(\"error\", err)\n      }\n\n    })\n  }\n\n  //responsible for rendering SignUp page\n  const createAccount = (event) => {\n    event.preventDefault()\n\n    userNeedsToCreateAccount(true)\n  }\n\n  const renderSignIn = () => {\n    return (\n      <React.Fragment>\n      <Jumbotron fluid className=\"bg-dark text-white mb-0\">\n        <Container>\n          <h1>LandShark App (Employee Portal)</h1>\n        </Container>\n      </Jumbotron>\n      <Row className=\"justify-content-end\">\n      <Link to=\"/scratch\"className=\"item pr-4\" style={{color:\"whitesmoke\"}}>\n        Scratch\n        </Link>\n      </Row>\n      <Form>\n        <Container fluid className=\"h-100\">\n            <Row className=\"justify-content-center align-self-center\">\n              <Col md=\"auto\"></Col>\n              <Col md={3}>\n                <Row className=\"justify-content-md-center\">\n                  <h3>Sign In</h3>\n                </Row>\n                <Form.Group>\n                  <Form.Control placeholder=\"Enter Email\" onChange={event => setEmail(event.target.value)} />\n                </Form.Group>\n                <Form.Group>\n                  <Form.Control placeholder=\"Enter Password\" onChange={event => setPassword(event.target.value)} />\n                </Form.Group>\n                <Form.Group>\n                  <Row style={{alignItems: \"flex-end\"}}> \n                    <Col>\n                      <Button variant=\"info\" disabled={ email === \"\" && password === \"\" ? true : false } onClick={(e)=>submitCredentialsForSignIn(e)}>Submit</Button>\n                    </Col>\n                    <Col className=\"d-flex flex-row-reverse\">\n                      <Link to=\"/signup\" className=\"item\" style={{alignSelf: \"flex-end\"}}>\n                        Create an account\n                      </Link>\n                    </Col>\n                  </Row>\n                </Form.Group>       \n              </Col>\n              <Col md=\"auto\"></Col>\n\n            </Row>\n\n        </Container>\n        </Form> \n        \n      </React.Fragment>\n    )\n  }\n\n  return (\n      renderSignIn()\n  )\n}\n\n\nexport default connect(null, {userNeedsToCreateAccount})(SignIn)","import { SIGN_UP_REQUESTED,\n  SIGN_UP_RECEIVED,\n  SIGN_UP_FAILED\n} from \"../types\"\n\nexport default (bool) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: SIGN_UP_REQUESTED\n    });\n    \n    try {\n      dispatch({\n        type: SIGN_UP_RECEIVED,\n        payload: bool,\n      });\n    } catch (error) {\n      dispatch({\n        type: SIGN_UP_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import { SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_FAILED } from './types';\n  \n  export default (wellInfo) => {\n    return async (dispatch, getState) => {\n      dispatch({\n        type: SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED,\n      });\n      try {\n        console.log(\"actionCreator works\")\n        dispatch({\n          type: SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED,\n          payload: wellInfo,\n        });\n      } catch (error) {\n        console.log(error)\n        dispatch({\n          type: SAVE_WELL_INFO_TO_REDUX_STORE_FAILED,\n          payload: error,\n        });\n      }\n    };\n  };\n  ","import axios from \"axios\"\nimport {\n  GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED,\n  GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED,\n  GET_WELL_PLANS_FROM_DYNAMODB_FAILED\n} from \"./types\"\n\nexport default (selectedWell) => {\n  console.log(selectedWell)\n  return async dispatch => {\n    dispatch({\n      type: GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED\n    })\n    let well = { \"item\" : selectedWell }\n    console.log(well)\n    try {\n      const response = await axios.post(\"https://0vpisbh32h.execute-api.us-east-2.amazonaws.com/dev/getplans\", well)\n      console.log(response)\n      dispatch({\n        type: GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_WELL_PLANS_FROM_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\nimport getWellPlansFromDynamoDb from '../ActionCreators/getWellPlansFromDynamoDb';\n// import postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\n// import getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\"\n// import getLeaseLinesFromJSONDb from \"../ActionCreators/getLeaseLinesFromJSONDb\"\n// import getWellsWithLeaseLinesFromJSONDb from \"../ActionCreators/getWellsWithLeaseLinesFromJSONDb\"\n// import getSurveysFromJSONDb from \"../ActionCreators/getSurveysFromJSONDb\"\n//import getWellsWithSurveysFromJSONDb from \"../ActionCreators/getWellsWithSurveysFromJSONDb\"\n//import getWellsWithHardLinesFromJSONDb from \"../ActionCreators/getWellsWithHardLinesFromJSONDb\"\nimport getHardLinesFromDynamoDb from \"../ActionCreators/getHardLinesFromDynamoDb\"\nimport postWellInfoToDynamoDb from \"../ActionCreators/postWellInfoToDynamoDb\"\nimport getWellsFromDynamoDb from \"../ActionCreators/getWellsFromDynamoDb\"\nimport getLeaseLinesFromDynamoDb from '../ActionCreators/getLeaseLinesFromDynamoDb';\nimport getSurveysFromDynamoDb from \"../ActionCreators/getSurveysFromDynamoDb\"\n\nconst Home = ({ \n  getHardLinesFromDynamoDb, \n  getSurveysFromDynamoDb,\n  getWellPlansFromDynamoDb, \n  getWellsFromDynamoDbReducer, \n  getWellsFromDynamoDb, \n  postWellInfoToDynamoDb, \n  saveActiveWellToReduxStore, \n  saveWellInfoToReduxStore, \n  saveWellInfoToReduxStoreReducer, \n  getLeaseLinesFromDynamoDb}) => {\n\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [usState, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n\n  useEffect(() => {\n    // getWellsWithLeaseLinesFromJSONDb()\n    // getWellsWithSurveysFromJSONDb()\n    // getWellsWithHardLinesFromJSONDb()\n    getWellsFromDynamoDb()\n  }, []);\n\n\n  const renderWellNames = () => {\n    if (getWellsFromDynamoDbReducer.status === \"received\") {\n      let wells = getWellsFromDynamoDbReducer.response.Items\n      return (\n        <Dropdown.Menu>\n          {wells.map(well => {\n            return (\n              <Dropdown.Item \n                href=\"\" \n                key={`${well.Operator.S}${well.Well_Name.S}`} \n                onClick={()=> {\n                  setActiveWell(`${well.Operator.S} - ${well.Rig.S} - ${well.Well_Name.S}`)\n                  saveActiveWellToReduxStore(well)\n                  console.log()\n              } }>\n                {well.Operator.S} - {well.Rig.S} - {well.Well_Name.S}\n              </Dropdown.Item>\n            )\n          })}\n        </Dropdown.Menu>\n      )\n    }\n    else {\n      return \"Data loading\"\n    }\n  }\n\n  const createNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || usState === \"\" ? true : false } onClick={()=>handleNewWellSubmit()}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting\n    }\n    // postWellInfoToJSONDb(wellInfo)\n    console.log(\"submit puta\")\n    postWellInfoToDynamoDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n    saveActiveWellToReduxStore(wellInfo)\n  }\n\n  const handleFetchData = () => {\n    getWellPlansFromDynamoDb(activeWell)\n    getLeaseLinesFromDynamoDb(activeWell)\n    getHardLinesFromDynamoDb(activeWell)\n    getSurveysFromDynamoDb(activeWell)\n    // setTimeout(getWellPlansFromJSONDb, 500, activeWell);\n    //setTimeout(getLeaseLinesFromJSONDb, 1000, activeWell);\n    // setTimeout(getSurveysFromJSONDb, 1500, activeWell)\n    //getHardLinesFromJSONDb(activeWell)\n  //   // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   // setTimeout(getOffsets(selectedWell), 2500);\n  }\n\n\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select Existing Well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            {activeWell ? activeWell : `Select Well:`}\n          </Dropdown.Toggle>\n          {renderWellNames()}\n        </Dropdown>\n        <Button className=\"mt-4\" variant=\"success\" disabled={ activeWell === \"None\" ? true : false } onClick={handleFetchData}>Fetch well data</Button>\n      </Col>\n    )\n  }\n\n\n  return (\n      <Container>\n        <Row>\n          {createNewWell()}\n          {selectExistingWell()}\n        </Row>\n      </Container>\n    )\n\n}\n\nconst mapStateToProps = ({\n  getSurveysFromDynamoDbReducer, \n  getWellsFromDynamoDbReducer, \n  postWellInfoToDynamoDbReducer, \n  saveActiveWellToReduxStoreReducer, \n  saveWellInfoToReduxStoreReducer }) => {\n  \n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToDynamoDbReducer,\n    getWellsFromDynamoDbReducer\n  }\n}\n\nexport default connect(\n  mapStateToProps, \n  { getLeaseLinesFromDynamoDb, \n    getWellPlansFromDynamoDb,\n    getSurveysFromDynamoDb, \n    getWellsFromDynamoDb, \n    postWellInfoToDynamoDb, \n    getHardLinesFromDynamoDb, \n    saveActiveWellToReduxStore, \n    saveWellInfoToReduxStore \n  })(Home);\n","import axios from \"axios\"\nimport {\n  GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED,\n  GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED,\n  GET_LEASE_LINES_FROM_DYNAMODB_FAILED\n} from \"./types\"\n\nexport default (selectedWell) => {\n  console.log(selectedWell)\n  return async dispatch => {\n    dispatch({\n      type: GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED\n    })\n    let well = { \"item\" : selectedWell }\n    console.log(well)\n    try {\n      const response = await axios.post(\"https://vjdgrewf2h.execute-api.us-east-2.amazonaws.com/dev/getleaselines\", well)\n      console.log(response.data)\n      dispatch({\n        type: GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import axios from \"axios\"\nimport {\n  GET_SURVEYS_FROM_DYNAMODB_REQUESTED,\n  GET_SURVEYS_FROM_DYNAMODB_RECEIVED,\n  GET_SURVEYS_FROM_DYNAMODB_FAILED\n} from \"./types\"\n\nexport default (selectedWell) => {\n  console.log(selectedWell)\n  return async dispatch => {\n    dispatch({\n      type: GET_SURVEYS_FROM_DYNAMODB_REQUESTED\n    })\n    let well = { \"item\" : selectedWell }\n    console.log(well)\n    try {\n      const response = await axios.post(\"https://grosy0bvz3.execute-api.us-east-2.amazonaws.com/dev/getsurveys\", well)\n      console.log(response.data)\n      dispatch({\n        type: GET_SURVEYS_FROM_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_SURVEYS_FROM_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import axios from \"axios\"\nimport {\n  GET_WELLS_FROM_DYNAMO_REQUESTED,\n  GET_WELLS_FROM_DYNAMO_RECEIVED,\n  GET_WELLS_FROM_DYNAMO_FAILED\n} from \"./types\"\n\nexport default () => {\n  return async dispatch => {\n    dispatch({\n      type: GET_WELLS_FROM_DYNAMO_REQUESTED\n    })\n    try {\n      const response = await axios.get(\"https://0vpisbh32h.execute-api.us-east-2.amazonaws.com/dev/getwells\")\n      dispatch({\n        type: GET_WELLS_FROM_DYNAMO_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_WELLS_FROM_DYNAMO_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import axios from \"axios\"\nimport { \n  POST_WELL_INFO_TO_DYNAMODB_REQUESTED,\n  POST_WELL_INFO_TO_DYNAMODB_RECEIVED,\n  POST_WELL_INFO_TO_DYNAMODB_FAILED\n} from \"./types\"\nimport moment from \"moment\"\n\nexport default (wellInfo) => {\n  return async (dispatch, getState) => {\n\n    dispatch({\n      type: POST_WELL_INFO_TO_DYNAMODB_REQUESTED\n    })\n    try {\n      const response = await axios.post(`https://l9vksep5eb.execute-api.us-east-2.amazonaws.com/dev/postwellinfotodynamodb`, wellInfo)\n      dispatch({\n        type: POST_WELL_INFO_TO_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n\n      dispatch({\n        type: POST_WELL_INFO_TO_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n\n\n// wellData = {\n//   \"operator\": \"EOG\"\n//   \"rig\": \"H&P425\"\n//   \"well\": \"RyPepp\"\n//   \"county\": \"Lea\"\n//   \"uSstate\": \"NM\"\n// }","import axios from \"axios\"\nimport {\n  GET_HARD_LINES_FROM_DYNAMODB_REQUESTED,\n  GET_HARD_LINES_FROM_DYNAMODB_RECEIVED,\n  GET_HARD_LINES_FROM_DYNAMODB_FAILED\n} from \"./types\"\n\nexport default (selectedWell) => {\n  console.log(selectedWell)\n  return async dispatch => {\n    dispatch({\n      type: GET_HARD_LINES_FROM_DYNAMODB_REQUESTED\n    })\n    let well = { \"item\" : selectedWell }\n    try {\n      const response = await axios.post(\"https://u1o49kujsh.execute-api.us-east-2.amazonaws.com/dev/gethardlines\", well)\n      console.log(response)\n      dispatch({\n        type: GET_HARD_LINES_FROM_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_HARD_LINES_FROM_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import { SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED\n } from \"./types\"\n\nexport default (selectedWell) => {\n  return (dispatch) => {\n    dispatch ({\n      type: SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED\n    });\n    try {\n      dispatch({\n        type: SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED,\n        payload: selectedWell\n      });\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import { SAVE_PLANS_TO_REDUX_STORE_REQUESTED,\n  SAVE_PLANS_TO_REDUX_STORE_RECEIVED,\n  SAVE_PLANS_TO_REDUX_STORE_FAILED\n} from \"./types\"\n\nexport default (plans) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: SAVE_PLANS_TO_REDUX_STORE_REQUESTED\n    });\n    \n    try {\n      dispatch({\n        type: SAVE_PLANS_TO_REDUX_STORE_RECEIVED,\n        payload: plans,\n      });\n    } catch (error) {\n      dispatch({\n        type: SAVE_PLANS_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}","export default (inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent) => {\n  const converter = Math.PI/180;\n  const converter2 = 0.00000001;\n\n  return (\n    Math.acos(\n      (\n        Math.cos(inclinationPrior*converter)*Math.cos(inclinationCurrent*converter)\n      )\n      +\n      (\n        Math.sin(inclinationPrior*converter)*Math.sin(inclinationCurrent*converter)*Math.cos((azimuthCurrent-azimuthPrior)*converter-converter2)\n      )\n    )\n  )\n}","export default (measuredDepthPrior, measuredDepthCurrent, calculatedDLC) => {\n  return (\n    Math.tan(calculatedDLC/2)\n    *\n    ((measuredDepthCurrent - measuredDepthPrior) / calculatedDLC)\n  )\n}","import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior) => {\n  const converter = (Math.PI)/180\n  console.log(`converter: ${converter}`)\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`calculatedDLC: ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`calculatedRF: ${calculatedRF}`)\n\n  const calculatedTVDCurrent = calculatedTVDPrior + calculatedRF * (Math.cos(inclinationPrior*converter) + Math.cos(inclinationCurrent*converter));\n  console.log(`calculatedTVDCurrent: ${calculatedTVDCurrent}`)\n\n  return (\n    parseFloat(calculatedTVDCurrent.toFixed(2))\n  )\n}","import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior) => {\n  const converter = (Math.PI)/180;\n  const converter2 = 0.00000001;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`NS calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`NS calculatedRF ${calculatedRF}`)\n\n  const calculatedNorthingCurrent = (calculatedNorthingPrior+converter2) + calculatedRF * (Math.sin(inclinationPrior*converter)*Math.cos(azimuthPrior*converter)+ Math.sin(inclinationCurrent * converter) * Math.cos(azimuthCurrent*converter));\n\n  return (\n    parseFloat(calculatedNorthingCurrent.toFixed(2))\n\n  )\n} ","import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior) => {\n  const converter = (Math.PI)/180;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`EW calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`EW calculatedRF ${calculatedRF}`)\n\n  const calculatedEastingCurrent = (calculatedEastingPrior + calculatedRF *(Math.sin(inclinationPrior*converter)* Math.sin(azimuthPrior * converter) + Math.sin(inclinationCurrent * converter)*Math.sin(azimuthCurrent*converter)));\n  console.log(`Easting: ${calculatedEastingCurrent}`)\n  return (\n    parseFloat(calculatedEastingCurrent.toFixed(2))\n    // calculatedEastingCurrent\n  )\n};\n","import EW from './EW';\nimport NS from './NS';\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior = 1, inclinationPrior = 2, azimuthPrior = 3, calculatedNorthingPrior = 0.02, calculatedEastingPrior = 0, index, vsDirection = 0) => {\n  const converter = (Math.PI)/180;\n  const converter2 = 0.00000001;\n\n  const calculatedEastingCurrent = EW(measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior)\n\n  const calculatedNorthingCurrent = NS(measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n  const closure = Math.atan2(calculatedEastingCurrent, calculatedNorthingCurrent + converter2) / converter\n\n  const determineClosure = () => {\n    if (closure < 0) {\n      return Math.cos(((360 + closure) - vsDirection) * converter)\n    } else {\n      return Math.cos((closure - vsDirection) * converter)\n    }\n  }\n\n  const HD = Math.sqrt(Math.pow(calculatedNorthingCurrent, 2) + Math.pow(calculatedEastingCurrent, 2))\n\n  const calculatedSect = HD * determineClosure()\n\n\n  return (\n    parseFloat(calculatedSect.toFixed(2))\n  )\n};\n","import DLC from \"./DLC\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior = 1, inclinationPrior = 2, azimuthPrior = 3 ) => {\n  const converter = (Math.PI)/180;\n\n  // calculate DLC\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n\n  const calculatedDLS = ((calculatedDLC/converter)*100/(measuredDepthCurrent-measuredDepthPrior))\n\n  return (\n    parseFloat(calculatedDLS.toFixed(2))\n  )\n\n}","import axios from \"axios\"\n\nexport default axios.create({\n  baseURL: \"http://localhost:3001\"\n})","import wells from \"../APIs/wells\"\nimport { \n  POST_PLANS_TO_JSON_REQUESTED,\n  POST_PLANS_TO_JSON_RECEIVED,\n  POST_PLANS_TO_JSON_FAILED \n} from \"./types\"\nimport moment from \"moment\"\n\nexport default (operator, rig ,well, county, uSstate, grid, vsDirection) => {\n  return async (dispatch, getState) => {\n\n    dispatch({\n      type: POST_PLANS_TO_JSON_REQUESTED\n    })\n    try {\n      const wellData = {\n        operator,\n        rig,\n        well,\n        county,\n        uSstate,\n        vsDirection,\n        grid, \n        date: moment().format()\n      }\n      const response = await wells.post(`wells`, wellData)\n      dispatch({\n        type: POST_PLANS_TO_JSON_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n\n      dispatch({\n        type: POST_PLANS_TO_JSON_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\nimport postPlansToDynamoDb from \"../ActionCreators/postPlansToDynamoDb\";\n\n\n\nconst Plans = ({activeWell, postPlansToDynamoDb, savePlansToReduxStore, saveWellInfoToReduxStoreReducer,savePlansToReduxStoreReducer, postPlansToJSONDb}) => {\n  \n  const [editGrid, setEditGrid] = useState(true)\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVSDirection] = useState(0)\n  \n  const initialGrid = [\n    [{value: \"\", readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n\n  const [grid, setGrid] = useState(initialGrid);\n\n  useEffect(()=>{\n    if (input) {\n      //performcalcs doesn't happen bc we're copying from plans. Currently not needed\n    }\n  },[input])\n\n  useEffect(()=> {\n    handleAddRows(1)\n  }, [])\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n\n        grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n        grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n        grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n        grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n        grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n        setGrid(grid)\n        setInput(false)\n\n      }\n    })\n  }\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      gridNew[row][col] = {...grid[row][col], value };\n    });\n    setGrid(gridNew)\n    setInput(true)\n  };\n\n  const handleVSDirection = (val) => {\n    setVSDirection(val)\n    setInput(true)\n  }\n\n  const handleSubmit = () => {\n    const planRecords = grid\n    const {well, operator, rig, county, usState, northing, easting} = saveWellInfoToReduxStoreReducer.response\n    // postPlansToJSONDb(operator, rig ,well, county, uSstate, planRecords, vsDirection, northing, easting)\n    postPlansToDynamoDb(operator, rig ,well, county, usState, planRecords, vsDirection, northing, easting)\n    savePlansToReduxStore(planRecords)\n\n  }\n\n  const handleRemoveRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createRows = (numberOfRowsToAdd) => {\n    let createdRows = []\n    for (let i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push(\n        [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n      )\n    }\n    return createdRows\n  };\n\n  const handleAddRows = (rows) => {\n    const newGrid = [...grid, ...createRows(rows)]\n    setGrid(newGrid)\n  }\n\n  const renderSetRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n          <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n            Add 25 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 10 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 5 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n            Add a row\n          </Button>\n          <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n            Remove a row\n          </Button>\n        </Col>\n        <Col xs={2}>\n          \n        </Col>\n      </Row>\n    )\n  }\n\n  const renderSubmitButton = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"info\" onClick={()=>handleSubmit()}>\n            Submit Data\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    }\n    else if (activeWell.status === \"received\") {\n      const { Well_Name, Rig, Operator} = activeWell.response\n      return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {renderWellData()}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n        </Col>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" placeholder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderSetRowsButtons()}\n      {renderSubmitButton()}\n      <Row>\n        <Col xs={10}>\n          {/* {renderAlert()} */}\n        </Col>\n        <Col xs={2}>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, saveWellInfoToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { postPlansToDynamoDb, savePlansToReduxStore, postPlansToJSONDb})(Plans)\n\n\n","import axios from \"axios\"\nimport { \n  POST_PLANS_TO_DYNAMODB_REQUESTED,\n  POST_PLANS_TO_DYNAMODB_RECEIVED,\n  POST_PLANS_TO_DYNAMODB_FAILED \n} from \"./types\"\nimport moment from \"moment\"\n\nexport default (operator, rig ,well, county, usState, planRecords, northing, easting,vsDirection = 0) => {\n  return async (dispatch, getState) => {\n\n    dispatch({\n      type: POST_PLANS_TO_DYNAMODB_REQUESTED\n    })\n    try {\n      const wellInfo = {\n        operator,\n        rig,\n        well,\n        county,\n        usState,\n        vsDirection,\n        planRecords,\n        northing, \n        easting, \n        date: moment().format()\n      }\n      const response = await axios.post(`https://0vpisbh32h.execute-api.us-east-2.amazonaws.com/dev/postplans`, wellInfo)\n      console.log(response.data)\n      dispatch({\n        type: POST_PLANS_TO_DYNAMODB_RECEIVED,\n        payload: response\n      })\n    } catch (error) {\n\n      dispatch({\n        type: POST_PLANS_TO_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\n\n\nconst ExistingPlans = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  let [plans, setPlans] = useState([]);\n  let [grid, setGrid] = useState([]);\n  \n  useEffect(()=> {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  },[getWellPlansFromDynamoDbReducer.response.Items]);\n\n  useEffect(() => {\n    createReactDataSheetGridFromPlans();\n  }, [plans])\n\n\n  const createCopies = () => {\n    setPlans([...getWellPlansFromDynamoDbReducer.response.Items])\n    // createReactDataSheetGridFromPlans();\n  }\n  \n  const createReactDataSheetGridFromPlans = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    let plansCopy = [...plans];\n    plansCopy.forEach((planLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx+1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(planLineItem.MD), width: \"10rem\"}\n      newRow[2] = {value: parseInt(planLineItem.INC), width: \"7rem\"}\n      newRow[3] = {value: parseInt(planLineItem.AZM), width: \"7rem\"}\n      newRow[4] = {value: parseInt(planLineItem.TVD), width: \"7rem\"}\n      newRow[5] = {value: parseInt(planLineItem.Northing), width: \"7rem\"}\n      newRow[6] = {value: parseInt(planLineItem.Easting), width: \"7rem\"}\n      newRow[7] = {value: parseInt(planLineItem.VS), width: \"7rem\"}\n      newRow[8] = {value: parseInt(planLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    setGrid(dataSheetHeader);\n    // console.log(grid);\n    // setGrid(result)\n  }\n\n  \n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const { Operator, Rig, Well_Name} = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n\n}\n\n\n\n\n\nconst mapStateToProps = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPlans)","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport { get } from \"lodash\"\n\nconst ExistingLeaseLines = ({getLeaseLinesFromDynamoDbReducer, activeWell}) => {\n  const [leaseLines, setLeaseLines] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(()=>{\n    if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n      createCopy()\n    }\n  },[getLeaseLinesFromDynamoDbReducer.response.Items])\n\n  useEffect(() => {\n    createReactDataSheetGridFromLeaseLines()\n  }, [leaseLines])\n\n  const createCopy = () => {\n    let leaseLinesFromReducerCopy = [...getLeaseLinesFromDynamoDbReducer.response.Items]\n    setLeaseLines(leaseLinesFromReducerCopy)\n  }\n\n  const createReactDataSheetGridFromLeaseLines = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'},  {value: 'Northing', readOnly: true, width: '7rem'}, {value: 'Easting', readOnly: true, width: '7rem'}]]\n    let leaseLinesCopy = [...leaseLines];\n    leaseLinesCopy.forEach((leaseLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx + 1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(leaseLineItem.Northing), width: \"7rem\"}\n      newRow[2] = {value: parseInt(leaseLineItem.Easting), width: \"7rem\"}\n      dataSheetHeader.push(newRow)\n    })\n    setGrid(dataSheetHeader)\n  }\n\n  const renderMain = () => {\n    if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n      const {operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          {/* <h3 className=\"my-4\">{operator} - {rig} - {well}</h3> */}\n          <ReactDataSheet data = {grid} valueRenderer = {cell => cell.value} width></ReactDataSheet>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n        return \"error\"\n    }\n}\n\nconst mapStateToProps = ({activeWell, getLeaseLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromDynamoDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingLeaseLines)","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport { get } from \"lodash\"\n\nconst ExistingHardLines = ({getHardLinesFromDynamoDbReducer, activeWell}) => {\n  const [hardLines, setHardLines] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(()=>{\n    if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n      createCopy()\n    }\n  },[getHardLinesFromDynamoDbReducer.response.Items])\n\n  useEffect(() => {\n    createReactDataSheetGridFromHardLines()\n  }, [hardLines])\n\n  const createCopy = () => {\n    console.log(getHardLinesFromDynamoDbReducer.response.Items)\n    setHardLines([...getHardLinesFromDynamoDbReducer.response.Items])\n  }\n\n  const createReactDataSheetGridFromHardLines = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'},  {value: 'Northing', readOnly: true, width: '7rem'}, {value: 'Easting', readOnly: true, width: '7rem'}]]\n    let hardLinesCopy = [...hardLines];\n    hardLinesCopy.forEach((hardLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx + 1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(hardLineItem.Northing), width: \"7rem\"}\n      newRow[2] = {value: parseInt(hardLineItem.Easting), width: \"7rem\"}\n      dataSheetHeader.push(newRow)\n    })\n    setGrid(dataSheetHeader)\n  }\n\n  const renderMain = () => {\n    if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n      const {operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          {/* <h3 className=\"my-4\">{operator} - {rig} - {well}</h3> */}\n          <ReactDataSheet data = {grid} valueRenderer = {cell => cell.value} width></ReactDataSheet>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n        return \"error\"\n    }\n}\n\nconst mapStateToProps = ({activeWell, getHardLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getHardLinesFromDynamoDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingHardLines)","import { SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED } from \"./types\"\n\nexport default (leaseLines) => {\n  return async dispatch => {\n    dispatch({\n      type: SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED\n    })\n    try {\n      dispatch({\n        type: SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED,\n        payload: leaseLines\n      })\n    } catch(error) {\n      dispatch({\n        type: SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport postLeaseLinesToDynamoDb from \"../ActionCreators/postLeaseLinesToDynamoDb\"\n\n\nconst LeaseLines = ({postLeaseLinesToDynamoDb, activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialLeaseLines = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [leaseLines, setLeaseLines] = useState(initialLeaseLines)\n\n  // const renderWellHeader = () => {\n  //   if (activeWell.status === \"received\") {\n  //     // const {operator, rig, well} = activeWell.response\n  //     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No Well Data\"\n  //   }\n  // }\n\n  const onCellsChanged = changes => {\n    const gridNew = leaseLines.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...leaseLines[row][col], value}\n    });\n    setLeaseLines(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      leaseLines\n    }\n\n    postLeaseLinesToDynamoDb(wellInfoAndLeaseLines)\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = leaseLines.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...leaseLines, newRow]\n    setLeaseLines(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...leaseLines]\n    newGrid.pop()\n    setLeaseLines(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={leaseLines} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToDynamoDb})(LeaseLines)","import axios from \"axios\"\nimport moment from \"moment\"\nimport {\n  POST_LEASE_LINES_TO_DYNAMODB_REQUESTED,\n  POST_LEASE_LINES_TO_DYNAMODB_RECEIVED,\n  POST_LEASE_LINES_TO_DYNAMODB_FAILED,\n} from \"./types\"\n\nexport default ({operator, rig ,well, county, usState, leaseLines}) => {\n  return async dispatch => {\n    dispatch({\n      type: POST_LEASE_LINES_TO_DYNAMODB_REQUESTED\n    })\n    try {\n      const LeaseLinesInfo = {\n        operator,\n        rig,\n        well,\n        county,\n        usState,\n        leaseLines,\n        date: moment().format()\n      }\n      const response = await axios.post(\"https://vjdgrewf2h.execute-api.us-east-2.amazonaws.com/dev/postleaselines\", LeaseLinesInfo)\n      console.log(response.data)\n      dispatch({\n        type: POST_LEASE_LINES_TO_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: POST_LEASE_LINES_TO_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\"\nimport postHardLinesToDynamoDb from \"../ActionCreators/postHardLinesToDynamoDb\"\n\n\nconst HardLines = ({saveWellInfoToReduxStoreReducer, activeWell, saveHardLinesToReduxStore, postHardLinesToDynamoDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial hardLineRecords\n  // create local state to setHardLineRecords\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {hardLineRecords} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToDynamoDb saveHardLinesToRedux\n  // addRows: newhardLineRecords =  [...hardLineRecords, addedRow] setHardLineRecords(newhardLineRecords)\n\n  const initialHardLineRecords = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [hardLineRecords, setHardLineRecords] = useState(initialHardLineRecords)\n\n\n  const onCellsChanged = changes => {\n    const hardLineRecordsNew = hardLineRecords.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      hardLineRecordsNew[row][col] = {...hardLineRecords[row][col], value}\n    });\n    setHardLineRecords(hardLineRecordsNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      hardLineRecords\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    postHardLinesToDynamoDb(wellInfoAndLeaseLines)\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines)\n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const hardLineRecordsLength = hardLineRecords.length\n    const newRow = [{value: hardLineRecordsLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newhardLineRecords = [...hardLineRecords, newRow]\n    setHardLineRecords(newhardLineRecords)\n  }\n\n  const removeRow = () => {\n    const newhardLineRecords = [...hardLineRecords]\n    newhardLineRecords.pop()\n    setHardLineRecords(newhardLineRecords)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={hardLineRecords} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer, activeWell, postHardLinesToDynamoDbReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell,\n    postHardLinesToDynamoDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveHardLinesToReduxStore, postHardLinesToDynamoDb})(HardLines)","import { SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_FAILED } from \"./types\"\n\nexport default (leaseLines) => {\n  return async dispatch => {\n    dispatch({\n      type: SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED\n    })\n    try {\n      dispatch({\n        type: SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED,\n        payload: leaseLines\n      })\n    } catch(error) {\n      dispatch({\n        type: SAVE_HARD_LINES_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","import axios from \"axios\"\nimport moment from \"moment\"\nimport {\n  POST_HARD_LINES_TO_DYNAMODB_REQUESTED,\n  POST_HARD_LINES_TO_DYNAMODB_RECEIVED,\n  POST_HARD_LINES_TO_DYNAMODB_FAILED,\n} from \"./types\"\n\nexport default ({operator, rig ,well, county, usState, hardLineRecords}) => {\n  return async dispatch => {\n    dispatch({\n      type: POST_HARD_LINES_TO_DYNAMODB_REQUESTED\n    })\n    try {\n      const hardLineInfo = {\n        operator,\n        rig,\n        well,\n        county,\n        usState,\n        hardLineRecords,\n        date: moment().format()\n      }\n      console.log(hardLineRecords)\n      const response = await axios.post(\"https://u1o49kujsh.execute-api.us-east-2.amazonaws.com/dev/posthardlines\", hardLineInfo)\n      console.log(response.data)\n      dispatch({\n        type: POST_HARD_LINES_TO_DYNAMODB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: POST_HARD_LINES_TO_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport ExistingLeaseLines from \"./ExistingLeaseLines\"\nimport ExistingHardLines from \"./ExistingHardLines\"\nimport LeaseLines from \"./LeaseLines\"\nimport HardLines from \"./HardLines\"\n\n\nconst PolyLines = ({saveWellInfoToReduxStoreReducer, getLeaseLinesFromDynamoDbReducer, getHardLinesFromDynamoDbReducer, activeWell}) => {\n  \n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    }\n    else if (activeWell.status === \"received\") {\n      const { Well_Name, Rig, Operator} = activeWell.response\n      return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n  \n\n  const renderLeaseLineGrid = () => {\n    const existingLeaseLines = getLeaseLinesFromDynamoDbReducer.response.Count > 0;\n    if (existingLeaseLines) {\n      return <ExistingLeaseLines/>\n    } else {\n      return <LeaseLines/>\n      }\n  }\n\n  const renderHardLineGrid = () => {\n    const existingHardLines = getHardLinesFromDynamoDbReducer.response.Count > 0;\n    if (existingHardLines) {\n      return <ExistingHardLines/>\n    } else {\n      return <HardLines/>\n      }\n  }\n\n  return (\n    <Container>\n      {renderWellData()}\n      <Row className=\"mt-4\">\n        <Col>\n          <h4>Lease Lines</h4>\n          {renderLeaseLineGrid()}\n        </Col>\n        <Col>\n        <h4>Hard Lines</h4>\n          {renderHardLineGrid()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\n  // if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"received\") {\n  //   console.log(\"existing lease and existing hard\")\n  //   return (\n  //     <Container>\n  //       {renderWellData()}\n  //       <Row className=\"mt-4\">\n  //         <Col>\n  //           <h4>Lease Lines</h4>\n  //           <ExistingLeaseLines/>\n  //         </Col>\n  //         <Col>\n  //         <h4>Hard Lines</h4>\n  //           <ExistingHardLines/>\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //   )\n  // } else if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"\") {\n  //   console.log(\"existing lease and new hard\")\n  //   return (\n  //     <Container>\n  //       {renderWellData()}\n  //       <Row className=\"mt-4\">\n  //         <Col>\n  //           <h4>Lease Lines</h4>\n  //           <ExistingLeaseLines/>\n  //         </Col>\n  //         <Col>\n  //         <h4>Hard Lines</h4>\n  //           <HardLines/>\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //   )\n  // } else if (getHardLinesFromDynamoDbReducer.status === \"received\" && getLeaseLinesFromDynamoDbReducer.status === \"\") {\n  //   console.log(\"existing hard and new lease\")\n  //   return (\n  //     <Container>\n  //     {renderWellData()}\n  //     <Row className=\"mt-4\">\n  //       <Col>\n  //         <h4>Lease Lines</h4>\n  //         <LeaseLines/>\n  //       </Col>\n  //       <Col>\n  //         <h4>Hard Lines</h4>\n  //         <ExistingHardLines/>\n  //       </Col>\n  //     </Row>\n  //   </Container>\n  //   )\n  // } else {\n  //   console.log(\"both new lease and hard\")\n  //   return (\n  //     <Container>\n  //       {renderWellData()}\n  //       <Row className=\"mt-4\">\n  //         <Col>\n  //           <h4>Lease Lines</h4>\n  //           <LeaseLines/>\n  //         </Col>\n  //         <Col>\n  //         <h4>Hard Lines</h4>\n  //           <HardLines/>\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //   )\n  // }\n\n\n\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer, activeWell, getHardLinesFromDynamoDbReducer, getLeaseLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveWellInfoToReduxStoreReducer\n }\n}\n\nexport default connect(mapStateToProps)(PolyLines)\n\n// import React, { useEffect, useState } from \"react\"\n// import { connect } from \"react-redux\"\n\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import ExistingLeaseLines from \"./ExistingLeaseLines\"\n// import ExistingHardLines from \"./ExistingHardLines\"\n// import LeaseLines from \"./LeaseLines\"\n// import HardLines from \"./HardLines\"\n\n// const PolyLines = ({saveWellInfoToReduxStoreReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer,}) => {\n//   const renderWellData = () => {\n//     if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n//       const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n//     }\n//     else if (activeWell.status === \"received\") {\n//       const { Well_Name, Rig, Operator} = activeWell.response\n//       return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n//     } else {\n//       return \"No well data\"\n//     }\n//   }\n  \n//   const renderLeaseLines = () => {\n//     // if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getLeaseLinesFromJSONDbReducer.response) {\n//     //   return <ExistingLeaseLines/>\n//     // } else {\n//       return <LeaseLines/>\n//     // }\n//   }\n\n//   const renderHardLines = () => {\n//     // if (getHardLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.response) {\n//     //   return <ExistingHardLines/>\n//     // } else {\n//       return <HardLines/>\n//     // }\n//   }\n\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           {renderLeaseLines()}\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           {renderHardLines()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({saveWellInfoToReduxStoreReducer, getHardLinesFromDynamoDbReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer}) => {\n//  return {\n//   saveWellInfoToReduxStoreReducer,\n//   getHardLinesFromDynamoDbReducer,\n//   // getLeaseLinesFromJSONDbReducer,\n//   // getHardLinesFromJSONDbReducer,\n//   activeWell, \n//  }\n// }\n\n// export default connect(mapStateToProps)(PolyLines)\n\n\n\n\n// // import React, { useState, useEffect } from \"react\"\n// // //bootstrap\n// // import Container from \"react-bootstrap/esm/Container\";\n// // import Form from \"react-bootstrap/Form\"\n// // import Row from \"react-bootstrap/Row\"\n// // import Col from \"react-bootstrap/Col\"\n// // import Button from \"react-bootstrap/Button\"\n\n// // import 'react-datasheet/lib/react-datasheet.css';\n// // import { connect } from \"react-redux\"\n// // import ReactDataSheet from 'react-datasheet';\n\n// // // actionCreators\n// // import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// // import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\n// // const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n// //   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n// //   // set up initial grid\n// //   // create local state to setGrid\n// //   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// //   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// //   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// //   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n// //   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n// //   const initialGrid = [\n// //     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n// //     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n// //   ]\n// //   const [grid, setGrid] = useState(initialGrid)\n\n// //   const renderWellHeader = () => {\n// //     if (activeWell.status === \"received\") {\n// //       // const {operator, rig, well} = activeWell.response\n// //       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n// //     } else {\n// //       return \"No Well Data\"\n// //     }\n// //   }\n\n// //   const onCellsChanged = changes => {\n// //     const gridNew = grid.map(row => [...row])\n// //     changes.forEach(({cell, row, col, value}) => {\n// //       gridNew[row][col] = {...grid[row][col], value}\n// //     });\n// //     setGrid(gridNew);\n    \n// //   }\n\n// //   const handleSubmit = () => {\n// //     const wellInfoAndLeaseLines = {\n// //       operator,\n// //       rig, \n// //       well, \n// //       county,\n// //       usState, \n// //       northing,\n// //       easting,\n// //       grid\n// //     }\n// //     // const activeWell\n// //     // saveLeaseLinesToJSON \n// //     checkTest()\n// //     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n// //     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n// //   }\n\n// //   const checkTest = () => {\n// //     console.log(\"whyyy\")\n// //   }\n\n// //   const renderRowsButtons = () => {\n// //     return (\n// //       <Row>\n// //         <Col xs={10} className=\"my-4\">\n// //           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n// //             Submit\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n// //             Add a Row\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n// //             Remove a Row\n// //           </Button>\n\n// //         </Col>\n// //       </Row>\n// //     )\n// //   }\n\n// //   const addRow = () => {\n// //     const gridLength = grid.length\n// //     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n// //     const newGrid = [...grid, newRow]\n// //     setGrid(newGrid)\n// //   }\n\n// //   const removeRow = () => {\n// //     const newGrid = [...grid]\n// //     newGrid.pop()\n// //     setGrid(newGrid)\n// //   }\n  \n\n// //   return (\n// //     <Container>\n// //       <Row>\n// //         <Col xs={10}>\n// //           {renderWellHeader()}\n// //           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n// //           {renderRowsButtons()}\n// //         </Col>\n// //       </Row>\n// //     </Container>\n// //   )\n// // }\n\n// // const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n// //   return {\n// //     activeWell,\n// //     postLeaseLinesToJSONDbReducer,\n// //   }\n// // }\n\n// // export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport _ from 'lodash';\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({ \n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer, \n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer }) => {\n\n\nconsole.log(getWellPlansFromDynamoDbReducer.response.Items)\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        return result\n      }\n    } else {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Easting\"])\n          }).slice(1)\n\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      }  else {\n          return data.map((row, index) => data[index][1].value).slice(1)\n      }\n    } else {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Northing\"])\n          }).slice(1)\n      }\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"TVD\"]) *-1\n            })\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      const sectCoordinates = data.map((lineItem, index) => {\n        return parseInt(lineItem.VS)\n          })\n      console.log(sectCoordinates)\n      return sectCoordinates\n    }\n  }\n\n  const convertNumberStringsToNumbersAndSort = (data, dataSource) => {\n    let dataCopy = [...data]\n    dataCopy.map((element, index) => {\n      switch (dataSource) {\n        case 'Plan':\n          dataCopy[index].Plan_Number = parseInt(dataCopy[index].Plan_Line_Number)\n          break;\n        case 'Survey':\n          dataCopy[index].Survey_Number = parseInt(dataCopy[index].Survey_Number)\n          break;\n        case 'Hard_Line':\n          dataCopy[index].Hard_Line_Number.S = parseInt(dataCopy[index].Hard_Line_Number.S)\n          break;\n        case 'Lease_Line':\n          dataCopy[index].Lease_Line_Number.S = parseInt(dataCopy[index].Lease_Line_Number.S)\n          break;\n        default:\n\n      }\n    })\n    switch (dataSource) {\n      case 'Plan':\n        return _.orderBy(dataCopy, ['Plan_Line_Number'], ['asc'])\n      case 'Survey':\n        return _.orderBy(dataCopy, ['SurveyNumber'], ['asc'])\n      case 'Hard_Line':\n        return _.orderBy(dataCopy, ['Hard_Line_Number'], ['asc'])\n      case 'Lease_Line':\n        return _.orderBy(dataCopy, ['Lease_Line_Number'], ['asc'])\n      default:\n\n    }\n  }\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        }\n        // {\n        //   x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Surveys\")),\n        //   y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Surveys\")),\n        //   type: \"scatter\",\n        //   mode: \"lines+markers\",\n        //   marker: {color: \"Red\"},\n        //   name: \"Surveys\"\n        // },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n\n  const renderPlanView = () => {\n    return (\n      <Container>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n            </Form.Group>\n          </Form>\n        </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n  //         {\n  //           x: createEastingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n  //           y: createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"red\"},\n  //           name: \"Surveys\"\n  //         },\n  //         {\n  //           x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n  //           y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"black\"},\n  //           name: \"Lease Lines\"\n  //         },\n  //         {\n  //           x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n  //           y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"red\"},\n  //           name: \"Hard Lines\"\n  //         },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n      </Container>\n    )\n  }\n\n  \n\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.response.Operator.S} - {activeWell.response.Rig.S} - {activeWell.response.Well_Name.S}</h3>\n        {renderSectionView()}\n        {renderPlanView()} \n      </Container>\n    )\n      \n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    \n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer}) => {\n  return {\n    getWellPlansFromDynamoDbReducer, \n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)","import React from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\"\nimport _ from \"lodash\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n\n\nconst PVA = ({\n  saveSurveysToReduxStoreReducer, \n  saveHardLinesToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer, \n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][2].value).slice(1)\n      //   // console.log(\"easting\" + result)\n      //   return result\n      return data.map((row, index) => data[index][2].value).slice(1) || []\n      // }\n    } else {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][6].value).slice(1)\n      //   // console.log(\"easting\" + result)\n      //   return result\n      return data.map((row, index) => data[index][6].value).slice(1) || []\n      }\n    }\n\n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      // if (Object.keys(data).length === 0) {\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][1].value).slice(1)\n      //   // console.log(\"northing:\" + result)\n      //   return result\n      return data.map((row, index) => data[index][1].value).slice(1) || []\n      // }\n    } else {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n        // let result = data.map((row, index) => data[index][5].value).slice(1)\n        // console.log(\"northing\" + result)\n        // return result\n      // }\n      return data.map((row, index) => data[index][5].value).slice(1) || []\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    console.log(data)\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][4].value * -1 ).slice(1)\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][7].value).slice(1)\n    }\n  }\n  \n\n  \n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createTVDCoordinates(savePlansToReduxStoreReducer.response),\n          y: createSectCoordinates(savePlansToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createTVDCoordinates(saveSurveysToReduxStoreReducer.response),\n          y: createSectCoordinates(saveSurveysToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return (\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n            y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(saveSurveysToReduxStoreReducer.response),\n            y: createNorthingCoordinates(saveSurveysToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Lease Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n    )\n  }\n\n  return (\n    <Container>\n      {renderSectionView()}\n      {renderPlanView()}\n    </Container>\n  )\n\n}\n\nconst mapStateToProps = ({\n  saveHardLinesToReduxStoreReducer, \n  saveSurveysToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer, \n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer, \n    saveLeaseLinesToReduxStoreReducer, \n    activeWell,\n    saveHardLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n    getWellPlansFromDynamoDbReducer, \n    getLeaseLinesFromDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer, \n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, saveLeaseLinesToReduxStore, saveWellInfoToReduxStore })(PVA)","import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\nimport postSurveysToDynamoDb from \"../ActionCreators/postSurveysToDynamoDb\"\n\nconst Surveys = ({ postSurveysToDynamoDb, activeWell, saveSurveysToReduxStore ,savePlansToReduxStore, saveWellInfoToReduxStoreReducer,savePlansToReduxStoreReducer, postPlansToJSONDb}) => {\n  \n  const [editsurveys, setEditsurveys] = useState(true)\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVSDirection] = useState(0)\n  \n  const initialSurveys = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n\n  const [surveys, setSurveys] = useState(initialSurveys);\n\n  useEffect(()=>{\n    if (input) {\n      performCalculations()\n    }\n  },[input])\n\n  useEffect(()=> {\n    handleAddRows(1)\n  }, [])\n\n  const performCalculations = () => {\n    surveys.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within surveys array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n        const calculatedTVD = calculateTVD(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][4].value)\n        const calculatedNS = calculateNS(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][5].value)\n        const calculatedEW = calculateEW(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][6].value)\n        const calculatedSECT = calculateSECT(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][5].value, surveys[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value)\n\n\n        surveys[index][4] = {...surveys[index][4], readOnly: true, value: calculatedTVD}\n        console.log(calculatedTVD)\n        surveys[index][5] = {...surveys[index][5], readOnly: true, value: calculatedNS}\n        surveys[index][6] = {...surveys[index][6], readOnly: true, value: calculatedEW}\n        surveys[index][7] = {...surveys[index][7], readOnly: true, value: calculatedSECT}\n        surveys[index][8] = {...surveys[index][8], readOnly: true, value: calculatedDLS}\n\n        setSurveys(surveys)\n        setInput(false)\n\n      }\n    })\n  }\n\n  const onCellsChanged = changes => {\n    // iterate through existing surveys to get a copy and not mutate current as we iterate over\n    const surveysNew = surveys.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newsurveys[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      surveysNew[row][col] = {...surveys[row][col], value };\n    });\n    setSurveys(surveysNew)\n    setInput(true)\n  };\n\n  const handleVSDirection = (val) => {\n    setVSDirection(val)\n    setInput(true)\n  }\n\n  const handleSubmit = () => {\n    const { well, operator, rig, county, uSstate, northing, easting } = activeWell.response\n    const wellInfo = {operator, well, rig, county, uSstate, northing, easting, surveys}\n    console.log(surveys)\n    saveSurveysToReduxStore(surveys)\n    postSurveysToDynamoDb(wellInfo)\n\n  }\n\n  const createRows = (numberOfRowsToAdd) => {\n    let createdRows = []\n    for (let i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push(\n        [{readOnly: true, value: surveys.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n      )\n    }\n    return createdRows\n  };\n\n  const handleRemoveRow = (rows) => {\n    const newsurveys = [...surveys];\n    while (rows > 0) {\n      newsurveys.pop();\n      rows -= 1;\n    }\n    setSurveys(newsurveys);\n  };\n\n  const handleAddRows = (rows) => {\n    const newsurveys = [...surveys, ...createRows(rows)]\n    setSurveys(newsurveys)\n  }\n\n\n  const renderSetRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n          <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n            Add 25 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 10 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 5 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n            Add a row\n          </Button>\n          <Button variant=\"danger\" className=\"ml-4\" value={1} onClick={(event) => handleRemoveRow(event.target.value)}>\n            Remove a row\n          </Button>\n        </Col>\n        <Col xs={2}>\n          \n        </Col>\n      </Row>\n    )\n  }\n\n  const renderSubmitButton = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"info\" onClick={()=>handleSubmit()}>\n            Submit Data\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {renderWellData()}\n          <ReactDataSheet data={surveys} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n        </Col>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" placeholder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderSetRowsButtons()}\n      {renderSubmitButton()}\n      <Row>\n        <Col xs={10}>\n          {/* {renderAlert()} */}\n        </Col>\n        <Col xs={2}>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, saveWellInfoToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { postSurveysToDynamoDb, saveSurveysToReduxStore, savePlansToReduxStore, postPlansToJSONDb})(Surveys)\n\n\n","import axios from \"axios\"\nimport { \n  POST_SURVEYS_TO_DYNAMODB_REQUESTED,\n  POST_SURVEYS_TO_DYNAMODB_RECEIVED,\n  POST_SURVEYS_TO_DYNAMODB_FAILED \n} from \"./types\"\nimport moment from \"moment\"\n\nexport default ({operator, rig ,well, county, usState, surveys, northing, easting,vsDirection = 0}) => {\n  return async (dispatch, getState) => {\n\n    dispatch({\n      type: POST_SURVEYS_TO_DYNAMODB_REQUESTED\n    })\n    try {\n      const wellInfo = {\n        operator,\n        rig,\n        well,\n        county,\n        usState,\n        vsDirection,\n        surveys,\n        northing, \n        easting, \n        date: moment().format()\n      }\n      const response = await axios.post(`https://grosy0bvz3.execute-api.us-east-2.amazonaws.com/dev/postsurveys`, wellInfo)\n      console.log(response.data)\n      dispatch({\n        type: POST_SURVEYS_TO_DYNAMODB_RECEIVED,\n        payload: response,\n        surveys: wellInfo.surveys \n\n      })\n    } catch (error) {\n\n      dispatch({\n        type: POST_SURVEYS_TO_DYNAMODB_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","import { SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED, \n  SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED,\n  SAVE_SURVEYS_TO_REDUX_STORE_FAILED } from \"./types\"\n\n\n  export default (wellData) => {\n    return async dispatch => {\n      dispatch ({\n        type: SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED\n      })\n      try {\n        dispatch({\n          type: SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED,\n          payload: wellData\n        })\n      } catch (error) {\n        dispatch({\n          type: SAVE_SURVEYS_TO_REDUX_STORE_FAILED,\n          payload: error\n        })\n      }\n    }\n  }","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getSurveysFromDynamoDb from \"../ActionCreators/getWellPlansFromDynamoDb\"\n\n\nconst ExistingSurveys = ({activeWell, getSurveysFromDynamoDbReducer, getSurveysFromDynamoDb}) => {\n  const [surveys, setSurveys] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(() => {\n    if (getSurveysFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  },[getSurveysFromDynamoDbReducer.status])\n\n  useEffect(() => {\n    createReactDataSheetGridFromSurveys();\n  }, [surveys])\n\n  const createCopies = () => {\n    setSurveys([...getSurveysFromDynamoDbReducer.response.Items])\n    // createReactDataSheetGridFromPlans();\n  }\n\n  const createReactDataSheetGridFromSurveys = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    let surveysCopy = [...surveys];\n    surveysCopy.forEach((surveyLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx+1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(surveyLineItem.MD), width: \"10rem\"}\n      newRow[2] = {value: parseInt(surveyLineItem.INC), width: \"7rem\"}\n      newRow[3] = {value: parseInt(surveyLineItem.AZM), width: \"7rem\"}\n      newRow[4] = {value: parseInt(surveyLineItem.TVD), width: \"7rem\"}\n      newRow[5] = {value: parseInt(surveyLineItem.Northing), width: \"7rem\"}\n      newRow[6] = {value: parseInt(surveyLineItem.Easting), width: \"7rem\"}\n      newRow[7] = {value: parseInt(surveyLineItem.VS), width: \"7rem\"}\n      newRow[8] = {value: parseInt(surveyLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    setGrid(dataSheetHeader);\n    // console.log(grid);\n    // setGrid(result)\n  }\n\n  let gridFromSurveys = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n\n  const renderMain = () => {\n    if (getSurveysFromDynamoDbReducer.status === \"received\") {\n      const { Operator, Rig, Well_Name} = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getSurveysFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n\n}\n//   const renderMain = () => {\n//     const { operator, rig, well } = activeWell.response\n//     return (\n//       <React.Fragment>\n//         <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//         <ReactDataSheet\n//           data={surveys}\n//           valueRenderer={cell => cell.value}\n//           width\n//         />\n//       </React.Fragment>\n//     )\n//   }\n\n//   if (getSurveysFromDynamoDbReducer.status === \"received\" && getSurveysFromDynamoDbReducer.response) {\n//     return (\n//       <Container>\n//         {renderMain()}\n//       </Container>\n//     )\n//   } else {\n//     return (\n//       \"Data Loading\"\n//     )\n//   }\n// }\n\nconst mapStateToProps = ({activeWell, getSurveysFromDynamoDbReducer}) => {\n  return {\n    activeWell, \n    getSurveysFromDynamoDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getSurveysFromDynamoDb})(ExistingSurveys)","import React from 'react'\n// react-boostrap\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from \"react-bootstrap/Tab\"\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\n// redux\nimport { connect } from 'react-redux'\n// styling \nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import 'custom.scss'\n// components\nimport Home from \"./Home\"\nimport Plans from \"./Plans\"\nimport ExistingPlans from './ExistingPlans'\nimport LeaseLines from \"./PolyLines\"\nimport ExistingLeaseLines from \"./ExistingPolyLines\"\nimport savePlansToReduxStore from '../ActionCreators/savePlansToReduxStore'\nimport PVA from \"./PVA\"\nimport ExistingPVA from \"./ExistingPVA\"\nimport Surveys from \"./Surveys\"\nimport ExistingSurveys from \"./ExistingSurveys\"\nimport ExistingPolyLines from './ExistingPolyLines'\nimport PolyLines from './PolyLines'\nimport SignInHome from \"./UserVerification/SignInHome\"\nimport { Link } from \"react-router-dom\"\nimport getSurveysFromDynamoDb from '../ActionCreators/getSurveysFromDynamoDb'\nimport getLeaseLinesFromDynamoDb from '../ActionCreators/getLeaseLinesFromDynamoDb'\n\nconst Dashboard = ({\n  getHardLinesFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer, \n  saveHardLinesToReduxStoreReducer, \n  saveSurveysToReduxStoreReducer, \n  activeWell, \n  saveWellInfoToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer}) => {\n  \n  return (\n    <React.Fragment>\n      <Jumbotron fluid className=\"bg-dark text-white\">\n        <Container>\n          <h1>LandShark App (Employee Portal)</h1>\n        </Container>\n      </Jumbotron>\n      <Tabs>\n        <Tab eventKey=\"Home\" title=\"Home\">\n          <Container>\n            <Home/>\n          </Container>\n        </Tab>\n        <Tab eventKey=\"Plans\" title=\"Plans\" disabled={getWellPlansFromDynamoDbReducer.status === \"received\" || saveWellInfoToReduxStoreReducer.status === \"received\" ? false : true}>\n          <Container>\n          {getWellPlansFromDynamoDbReducer.response.Count > 0 ? <ExistingPlans/> : <Plans/>}\n          </Container>\n        </Tab>\n        <Tab eventKey=\"PolyLines\" title=\"PolyLines\" disabled={getLeaseLinesFromDynamoDbReducer.status === \"received\" || getHardLinesFromDynamoDbReducer.status === \"received\"|| saveWellInfoToReduxStoreReducer.status === \"received\" ? false : true} >\n          <Container>\n            <PolyLines/>\n          </Container>\n        </Tab>\n        <Tab eventKey=\"Surveys\" title=\"Surveys\" disabled= { getSurveysFromDynamoDbReducer.status === \"received\" || saveWellInfoToReduxStoreReducer.status === \"received\"? false : true }>\n          <Container>\n            {getSurveysFromDynamoDbReducer.response.Count > 0 ? <ExistingSurveys/> : <Surveys/> }\n          </Container>\n        </Tab>\n        <Tab eventKey=\"PVA\" title=\"PVA\" disabled={(getSurveysFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.response && getLeaseLinesFromDynamoDbReducer.status === \"received\"  && getHardLinesFromDynamoDbReducer.status === \"received\")  ||  activeWell.status === \"received\" ? false : true}>\n          <Container>\n            {getSurveysFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.response && getLeaseLinesFromDynamoDbReducer.status === \"received\"  && getHardLinesFromDynamoDbReducer.status === \"received\" ? <ExistingPVA/> : /*<PVA/>*/ \"TBD\"}\n          </Container>\n        </Tab>\n      </Tabs>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = ({ \n  getHardLinesFromDynamoDbReducer, \n  getSurveysFromDynamoDbReducer,\n  getLeaseLinesFromDynamoDbReducer, \n  postHardLinesToDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  saveHardLinesToReduxStoreReducer, \n  saveSurveysToReduxStoreReducer,\n  saveWellInfoToReduxStoreReducer, \n  activeWell, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    getWellPlansFromDynamoDbReducer, \n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    activeWell,\n    savePlansToReduxStoreReducer,\n    saveLeaseLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n    saveHardLinesToReduxStoreReducer,\n    postHardLinesToDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(Dashboard);\n\n","import React, {useState} from \"react\"\nimport Container from \"react-bootstrap/esm/Container\"\nimport SignIn from \"./SignIn\"\nimport SignUp from \"./SignUp\"\nimport { connect } from \"react-redux\"\nimport userNeedsToCreateAccount from \"../../ActionCreators/UserVerification/userNeedsToCreateAccount\"\n\nconst SignInHome = ({userNeedsToCreateAccountReducer}) => {\n  // const [existingUser, setExistingUser] = useState(true)\n  const SignInOrSignUp = () => {\n    if (userNeedsToCreateAccountReducer.response) {\n      console.log(\"user needs an account -sent from Home\")\n      return (\n        <SignUp/>\n      )\n    }\n    return (\n      <SignIn/>\n    )\n  }\n  return (\n    SignInOrSignUp()\n  )\n}\n\nconst mapStateToProps = ({ userNeedsToCreateAccountReducer }) => {\n  return {\n    userNeedsToCreateAccountReducer\n  }\n}\n\nexport default connect(mapStateToProps)(SignInHome);","// DRAFTING ONLY - DO NOT USE\nimport React, { useState } from \"react\"\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport { Link } from \"react-router-dom\"\nimport axios from 'axios';\n\n\n\nexport default () => {\n  const [operator, setOperator] = useState(\"\")\n  const [rig, setRig] = useState(\"\")\n  const [well, setWell] = useState(\"\")\n  \n  const handleNewWellSubmit = async () => {\n      const data = {\n        operator, \n        rig,\n        well\n      }\n      try {\n        console.log(data)\n        await axios.post(\"https://ybalhnj3qc.execute-api.us-east-2.amazonaws.com/dev/testing2\", data)\n\n      } catch (error){\n        console.log(error)\n      }\n      \n  }\n  return (\n    <Container>\n      <Row>\n        <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        \n        <Button className=\"mt-4\" variant=\"info\" onClick={()=>handleNewWellSubmit()}>Submit and begin adding well data</Button>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import React from 'react'\nimport {Router, Route} from \"react-router-dom\"\n// react-boostrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from \"react-bootstrap/Tab\"\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\n// redux\nimport { connect } from 'react-redux'\n// components\nimport History from \"./History\"\n//import SignInHome from \"./UserVerification/SignInHome\"\nimport SignUp from \"./UserVerification/SignUp\"\nimport SignIn from \"./UserVerification/SignIn\"\nimport Dashboard from \"./Dashboard\"\nimport scratch from \"./scratch\"\n\n\nconst App = () => {\n  return (\n      <Router history={History}>\n        <div>\n          <Route path=\"/\" exact component={SignIn}/>\n          <Route path=\"/signup\" exact component ={SignUp}/>\n          <Route path=\"/signin\" exact component ={SignIn}/>\n          <Route path=\"/scratch\" exact component ={scratch}/>\n          <Route path=\"/dashboard\" exact component ={Dashboard}/>\n        </div>\n      </Router>\n  )\n}\n\nexport default App;","import { SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\n  const INITIAL_STATE = {\n    response: {}, \n    status: \"\"\n  };\n\n  export default (state = INITIAL_STATE, { type, payload }) => {\n    \n    switch (type) {\n      case SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED:\n        return { ...state, status: 'waiting' };\n      case SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED:\n        return { ...state, response: payload, status: 'received' };\n      case SAVE_WELL_INFO_TO_REDUX_STORE_FAILED:\n        return { ...state, response: payload, status: 'failed' };\n      default:\n        return state;\n    }\n  };\n  ","import { SAVE_PLANS_TO_REDUX_STORE_REQUESTED,\n  SAVE_PLANS_TO_REDUX_STORE_RECEIVED,\n  SAVE_PLANS_TO_REDUX_STORE_FAILED\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state=INITIAL_STATE, {type, payload}) =>{\n  switch (type) {\n    case SAVE_PLANS_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_PLANS_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_PLANS_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import { SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED\n } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","import { initial } from \"lodash\"\nimport { SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {}, \n  status: \"\"\n}\n\nexport default (state=INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import { SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED, \n  SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED,\n  SAVE_SURVEYS_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_SURVEYS_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"waiting\"}\n    default:\n      return state\n  }\n}","import { SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\n  const INITIAL_STATE = {\n    response: {}, \n    status: \"\"\n  }\n  \n  export default (state=INITIAL_STATE, {type, payload}) => {\n    switch (type) {\n      case SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED:\n        return {...state, status: \"waiting\"}\n      case SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED:\n        return {...state, response: payload, status: \"received\"}\n      case SAVE_HARD_LINES_TO_REDUX_STORE_FAILED:\n        return {...state, response: payload, status: \"failed\"}\n      default:\n        return state\n    }\n  }","import { \n  POST_WELL_INFO_TO_DYNAMODB_REQUESTED,\n  POST_WELL_INFO_TO_DYNAMODB_RECEIVED,\n  POST_WELL_INFO_TO_DYNAMODB_FAILED\n} from \"../ActionCreators/types\"\n\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_WELL_INFO_TO_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_WELL_INFO_TO_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_WELL_INFO_TO_DYNAMODB_FAILED: \n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n} ","import { POST_PLANS_TO_DYNAMODB_REQUESTED,\n  POST_PLANS_TO_DYNAMODB_RECEIVED,\n  POST_PLANS_TO_DYNAMODB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_PLANS_TO_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_PLANS_TO_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_PLANS_TO_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","import {\n  GET_WELLS_FROM_DYNAMO_REQUESTED,\n  GET_WELLS_FROM_DYNAMO_RECEIVED,\n  GET_WELLS_FROM_DYNAMO_FAILED\n} from \"../ActionCreators/types\"\n\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_WELLS_FROM_DYNAMO_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_WELLS_FROM_DYNAMO_RECEIVED:\n      return {...state, response: payload, status: \"received\"}    \n    case GET_WELLS_FROM_DYNAMO_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import {\n  GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED,\n  GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED,\n  GET_WELL_PLANS_FROM_DYNAMODB_FAILED\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_WELL_PLANS_FROM_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_WELL_PLANS_FROM_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_WELL_PLANS_FROM_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import {\n  POST_HARD_LINES_TO_DYNAMODB_REQUESTED,\n  POST_HARD_LINES_TO_DYNAMODB_RECEIVED,\n  POST_HARD_LINES_TO_DYNAMODB_FAILED,\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {}, \n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_HARD_LINES_TO_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_HARD_LINES_TO_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_HARD_LINES_TO_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}  \n    default:\n      return state\n  }\n}","import {\n  POST_LEASE_LINES_TO_DYNAMODB_REQUESTED,\n  POST_LEASE_LINES_TO_DYNAMODB_RECEIVED,\n  POST_LEASE_LINES_TO_DYNAMODB_FAILED,\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {}, \n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_LEASE_LINES_TO_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_LEASE_LINES_TO_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_LEASE_LINES_TO_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}  \n    default:\n      return state\n  }\n}\n","import {\n  POST_SURVEYS_TO_DYNAMODB_REQUESTED,\n  POST_SURVEYS_TO_DYNAMODB_RECEIVED,\n  POST_SURVEYS_TO_DYNAMODB_FAILED,\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {}, \n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_SURVEYS_TO_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_SURVEYS_TO_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_SURVEYS_TO_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}  \n    default:\n      return state\n  }\n}\n","import { GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED,\n  GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED,\n  GET_LEASE_LINES_FROM_DYNAMODB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_LEASE_LINES_FROM_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_LEASE_LINES_FROM_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_LEASE_LINES_FROM_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import { GET_HARD_LINES_FROM_DYNAMODB_REQUESTED,\n  GET_HARD_LINES_FROM_DYNAMODB_RECEIVED,\n  GET_HARD_LINES_FROM_DYNAMODB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_HARD_LINES_FROM_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_HARD_LINES_FROM_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_HARD_LINES_FROM_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import {\n  GET_SURVEYS_FROM_DYNAMODB_REQUESTED,\n  GET_SURVEYS_FROM_DYNAMODB_RECEIVED,\n  GET_SURVEYS_FROM_DYNAMODB_FAILED\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_SURVEYS_FROM_DYNAMODB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_SURVEYS_FROM_DYNAMODB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_SURVEYS_FROM_DYNAMODB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\"\n// import wellsReducer from \"./wellsReducer\"\n// import selectWellFromReduxStoreReducer from \"./selectWellFromReduxStoreReducer\"\n// import postPlansToJSONdb from \"./postPlansToJSONdb\"\nimport saveWellInfoToReduxStoreReducer from \"./saveWellInfoToReduxStoreReducer\"\nimport savePlansToReduxStoreReducer from \"./savePlansToReduxStoreReducer\"\nimport saveActiveWellToReduxStoreReducer from \"./saveActiveWellToReduxStoreReducer\"\nimport saveLeaseLinesToReduxStoreReducer from \"./saveLeaseLinesToReduxStoreReducer\"\nimport saveSurveysToReduxStoreReducer from \"./saveSurveysToReduxStoreReducer\"\nimport saveHardLinesToReduxStoreReducer from \"./saveHardLinesToReduxStoreReducer\"\nimport postWellInfoToDynamoDbReducer from \"./postWellInfoToDynamoDbReducer\"\nimport postPlansToDynamoDbReducer from \"./postPlansToDynamoDbReducer\"\nimport getWellsFromDynamoDbReducer from \"./getWellsFromDynamoDbReducer\"\nimport getWellPlansFromDynamoDbReducer from \"./getWellPlansFromDynamoDbReducer\"\nimport postHardLinesToDynamoDbReducer from \"./postHardLinesToDynamoDbReducer\"\nimport postLeaseLinesToDynamoDbReducer from \"./postLeaseLinesToDynamoDbReducer\"\nimport postSurveysToDynamoDbReducer from \"./postSurveysToDynamoDbReducer\"\nimport getLeaseLinesFromDynamoDbReducer from \"./getLeaseLinesFromDynamoDbReducer\"\nimport getHardLinesFromDynamoDbReducer from \"./getHardLinesFromDynamoDbReducer\"\nimport getSurveysFromDynamoDbReducer from \"./getSurveysFromDynamoDbReducer\"\n\nexport default combineReducers({\n\n\n  // getWellsWithLeaseLinesFromJSONDbReducer,\n  // getWellsWithSurveysFromJSONDbReducer,\n  // getWellsWithHardLinesFromJSONDbReducer,\n\n  getWellsFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  // getWellPlansFromJSONDbReducer,\n  // getLeaseLinesFromJSONDbReducer,\n  // getSurveysFromJSONDbReducer,\n  // getHardLinesFromJSONDbReducer,\n  \n  // postWellInfoToJSONDbReducer,\n  // postPlansToJSONDbReducer,\n  // postLeaseLinesToJSONDbReducer,\n  // postSurveysToJSONDbReducer,\n  // postHardLinesToJSONDbReducer,\n  postPlansToDynamoDbReducer,\n  postHardLinesToDynamoDbReducer,\n  postWellInfoToDynamoDbReducer,\n  postLeaseLinesToDynamoDbReducer,\n  postSurveysToDynamoDbReducer,\n\n  saveWellInfoToReduxStoreReducer,  \n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  saveSurveysToReduxStoreReducer,\n  saveHardLinesToReduxStoreReducer,\n\n  activeWell: saveActiveWellToReduxStoreReducer,\n\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reduxThunk from \"redux-thunk\"\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from \"redux\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './Components/App';\nimport reducers from './Reducers'\nimport Container from 'react-bootstrap/esm/Container';\nimport Col from 'react-bootstrap/esm/Col';\nimport Row from 'react-bootstrap/esm/Row';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>  \n  </Provider>,\n  document.getElementById('root')\n);\n\n// create a form that saves data to our redux store, \n// add validators to each field \n// then pushes this data to our backend "],"sourceRoot":""}