{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\n\nconst ExistingPlans = ({\n  getWellPlansFromDynamoDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  let [plans, setPlans] = useState([]);\n  let [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  }, [getWellPlansFromDynamoDbReducer.response.Items]);\n  useEffect(() => {\n    createReactDataSheetGridFromPlans();\n  }, [plans]);\n\n  const createCopies = () => {\n    setPlans([...getWellPlansFromDynamoDbReducer.response.Items]);\n    createReactDataSheetGridFromPlans();\n  };\n\n  const createReactDataSheetGridFromPlans = () => {\n    let dataSheetHeader = [[{\n      value: '',\n      readOnly: true,\n      width: '3rem'\n    }, {\n      value: 'Measured Depth',\n      readOnly: true,\n      width: '10rem'\n    }, {\n      value: 'Inclination',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'Azimuth',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'TVD',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'NS',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'EW',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'SECT',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'DLS',\n      readOnly: true,\n      width: '7rem'\n    }]];\n    let plansCopy = [...plans];\n    plansCopy.forEach((planLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {\n        value: idx + 1,\n        width: \"4rem\",\n        style: {\n          textAlign: \"center\"\n        }\n      };\n      newRow[1] = {\n        value: parseInt(planLineItem.MD),\n        width: \"10rem\"\n      };\n      newRow[2] = {\n        value: parseInt(planLineItem.INC),\n        width: \"7rem\"\n      };\n      newRow[3] = {\n        value: parseInt(planLineItem.AZM),\n        width: \"7rem\"\n      };\n      newRow[4] = {\n        value: parseInt(planLineItem.TVD),\n        width: \"7rem\"\n      };\n      newRow[5] = {\n        value: parseInt(planLineItem.Northing),\n        width: \"7rem\"\n      };\n      newRow[6] = {\n        value: parseInt(planLineItem.Easting),\n        width: \"7rem\"\n      };\n      newRow[7] = {\n        value: parseInt(planLineItem.VS),\n        width: \"7rem\"\n      };\n      newRow[8] = {\n        value: parseInt(planLineItem.DLS),\n        width: \"7rem\"\n      };\n      dataSheetHeader.push(newRow);\n    });\n    setGrid(dataSheetHeader); // console.log(grid);\n    // setGrid(result)\n  };\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const {\n        Operator,\n        Rig,\n        Well_Name\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-4\",\n          children: [Operator.S, \" - \", Rig.S, \" - \", Well_Name.S]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  }\n};\n\n_s(ExistingPlans, \"Lw3sCy3Z18rKDSRMetNRNR2XEsc=\");\n\n_c = ExistingPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromDynamoDbReducer,\n  activeWell\n}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","ExistingPlans","getWellPlansFromDynamoDbReducer","activeWell","plans","setPlans","grid","setGrid","status","createCopies","response","Items","createReactDataSheetGridFromPlans","dataSheetHeader","value","readOnly","width","plansCopy","forEach","planLineItem","idx","newRow","style","textAlign","parseInt","MD","INC","AZM","TVD","Northing","Easting","VS","DLS","push","renderMain","Operator","Rig","Well_Name","S","cell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\n\n\nconst ExistingPlans = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  let [plans, setPlans] = useState([]);\n  let [grid, setGrid] = useState([]);\n  \n  useEffect(()=> {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  },[getWellPlansFromDynamoDbReducer.response.Items]);\n\n  useEffect(() => {\n    createReactDataSheetGridFromPlans();\n  }, [plans])\n\n\n  const createCopies = () => {\n    setPlans([...getWellPlansFromDynamoDbReducer.response.Items])\n    createReactDataSheetGridFromPlans();\n  }\n  \n  const createReactDataSheetGridFromPlans = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    let plansCopy = [...plans];\n    plansCopy.forEach((planLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx+1, width: \"4rem\", style: {textAlign: \"center\"}}\n      newRow[1] = {value: parseInt(planLineItem.MD), width: \"10rem\"}\n      newRow[2] = {value: parseInt(planLineItem.INC), width: \"7rem\"}\n      newRow[3] = {value: parseInt(planLineItem.AZM), width: \"7rem\"}\n      newRow[4] = {value: parseInt(planLineItem.TVD), width: \"7rem\"}\n      newRow[5] = {value: parseInt(planLineItem.Northing), width: \"7rem\"}\n      newRow[6] = {value: parseInt(planLineItem.Easting), width: \"7rem\"}\n      newRow[7] = {value: parseInt(planLineItem.VS), width: \"7rem\"}\n      newRow[8] = {value: parseInt(planLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    setGrid(dataSheetHeader);\n    // console.log(grid);\n    // setGrid(result)\n  }\n\n  \n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const { Operator, Rig, Well_Name} = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n\n}\n\n\n\n\n\nconst mapStateToProps = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPlans)"]},"metadata":{},"sourceType":"module"}