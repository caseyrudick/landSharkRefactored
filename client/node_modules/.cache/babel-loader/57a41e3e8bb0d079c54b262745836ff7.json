{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar subTypes = require('./subtypes');\n\nvar calcColorscale = require('./colorscale_calc');\n\nvar arraysToCalcdata = require('./arrays_to_calcdata');\n\nvar calcSelection = require('./calc_selection');\n\nfunction calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var origX = xa.makeCalcdata(trace, 'x');\n  var origY = ya.makeCalcdata(trace, 'y');\n  var x = alignPeriod(trace, xa, 'x', origX);\n  var y = alignPeriod(trace, ya, 'y', origY);\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var ids = trace.ids;\n  var stackGroupOpts = getStackOpts(trace, fullLayout, xa, ya);\n  var interpolateGaps = false;\n  var isV, i, j, k, interpolate, vali;\n  setFirstScatter(fullLayout, trace);\n  var xAttr = 'x';\n  var yAttr = 'y';\n  var posAttr;\n\n  if (stackGroupOpts) {\n    Lib.pushUnique(stackGroupOpts.traceIndices, trace._expandedIndex);\n    isV = stackGroupOpts.orientation === 'v'; // size, like we use for bar\n\n    if (isV) {\n      yAttr = 's';\n      posAttr = 'x';\n    } else {\n      xAttr = 's';\n      posAttr = 'y';\n    }\n\n    interpolate = stackGroupOpts.stackgaps === 'interpolate';\n  } else {\n    var ppad = calcMarkerSize(trace, serieslen);\n    calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n  }\n\n  var hasPeriodX = !!trace.xperiodalignment;\n  var hasPeriodY = !!trace.yperiodalignment;\n\n  for (i = 0; i < serieslen; i++) {\n    var cdi = cd[i] = {};\n    var xValid = isNumeric(x[i]);\n    var yValid = isNumeric(y[i]);\n\n    if (xValid && yValid) {\n      cdi[xAttr] = x[i];\n      cdi[yAttr] = y[i];\n\n      if (hasPeriodX) {\n        cdi.orig_x = origX[i]; // used by hover\n      }\n\n      if (hasPeriodY) {\n        cdi.orig_y = origY[i]; // used by hover\n      }\n    } else if (stackGroupOpts && (isV ? xValid : yValid)) {\n      // if we're stacking we need to hold on to all valid positions\n      // even with invalid sizes\n      cdi[posAttr] = isV ? x[i] : y[i];\n      cdi.gap = true;\n\n      if (interpolate) {\n        cdi.s = BADNUM;\n        interpolateGaps = true;\n      } else {\n        cdi.s = 0;\n      }\n    } else {\n      cdi[xAttr] = cdi[yAttr] = BADNUM;\n    }\n\n    if (ids) {\n      cdi.id = String(ids[i]);\n    }\n  }\n\n  arraysToCalcdata(cd, trace);\n  calcColorscale(gd, trace);\n  calcSelection(cd, trace);\n\n  if (stackGroupOpts) {\n    // remove bad positions and sort\n    // note that original indices get added to cd in arraysToCalcdata\n    i = 0;\n\n    while (i < cd.length) {\n      if (cd[i][posAttr] === BADNUM) {\n        cd.splice(i, 1);\n      } else i++;\n    }\n\n    Lib.sort(cd, function (a, b) {\n      return a[posAttr] - b[posAttr] || a.i - b.i;\n    });\n\n    if (interpolateGaps) {\n      // first fill the beginning with constant from the first point\n      i = 0;\n\n      while (i < cd.length - 1 && cd[i].gap) {\n        i++;\n      }\n\n      vali = cd[i].s;\n      if (!vali) vali = cd[i].s = 0; // in case of no data AT ALL in this trace - use 0\n\n      for (j = 0; j < i; j++) {\n        cd[j].s = vali;\n      } // then fill the end with constant from the last point\n\n\n      k = cd.length - 1;\n\n      while (k > i && cd[k].gap) {\n        k--;\n      }\n\n      vali = cd[k].s;\n\n      for (j = cd.length - 1; j > k; j--) {\n        cd[j].s = vali;\n      } // now interpolate internal gaps linearly\n\n\n      while (i < k) {\n        i++;\n\n        if (cd[i].gap) {\n          j = i + 1;\n\n          while (cd[j].gap) {\n            j++;\n          }\n\n          var pos0 = cd[i - 1][posAttr];\n          var size0 = cd[i - 1].s;\n          var m = (cd[j].s - size0) / (cd[j][posAttr] - pos0);\n\n          while (i < j) {\n            cd[i].s = size0 + (cd[i][posAttr] - pos0) * m;\n            i++;\n          }\n        }\n      }\n    }\n  }\n\n  return cd;\n}\n\nfunction calcAxisExpansion(gd, trace, xa, ya, x, y, ppad) {\n  var serieslen = trace._length;\n  var fullLayout = gd._fullLayout;\n  var xId = xa._id;\n  var yId = ya._id;\n  var firstScatter = fullLayout._firstScatter[firstScatterGroup(trace)] === trace.uid;\n  var stackOrientation = (getStackOpts(trace, fullLayout, xa, ya) || {}).orientation;\n  var fill = trace.fill; // cancel minimum tick spacings (only applies to bars and boxes)\n\n  xa._minDtick = 0;\n  ya._minDtick = 0; // check whether bounds should be tight, padded, extended to zero...\n  // most cases both should be padded on both ends, so start with that.\n\n  var xOptions = {\n    padded: true\n  };\n  var yOptions = {\n    padded: true\n  };\n\n  if (ppad) {\n    xOptions.ppad = yOptions.ppad = ppad;\n  } // TODO: text size\n\n\n  var openEnded = serieslen < 2 || x[0] !== x[serieslen - 1] || y[0] !== y[serieslen - 1];\n\n  if (openEnded && (fill === 'tozerox' || fill === 'tonextx' && (firstScatter || stackOrientation === 'h'))) {\n    // include zero (tight) and extremes (padded) if fill to zero\n    // (unless the shape is closed, then it's just filling the shape regardless)\n    xOptions.tozero = true;\n  } else if (!(trace.error_y || {}).visible && ( // if no error bars, markers or text, or fill to y=0 remove x padding\n  fill === 'tonexty' || fill === 'tozeroy' || !subTypes.hasMarkers(trace) && !subTypes.hasText(trace))) {\n    xOptions.padded = false;\n    xOptions.ppad = 0;\n  }\n\n  if (openEnded && (fill === 'tozeroy' || fill === 'tonexty' && (firstScatter || stackOrientation === 'v'))) {\n    // now check for y - rather different logic, though still mostly padded both ends\n    // include zero (tight) and extremes (padded) if fill to zero\n    // (unless the shape is closed, then it's just filling the shape regardless)\n    yOptions.tozero = true;\n  } else if (fill === 'tonextx' || fill === 'tozerox') {\n    // tight y: any x fill\n    yOptions.padded = false;\n  } // N.B. asymmetric splom traces call this with blank {} xa or ya\n\n\n  if (xId) trace._extremes[xId] = Axes.findExtremes(xa, x, xOptions);\n  if (yId) trace._extremes[yId] = Axes.findExtremes(ya, y, yOptions);\n}\n\nfunction calcMarkerSize(trace, serieslen) {\n  if (!subTypes.hasMarkers(trace)) return; // Treat size like x or y arrays --- Run d2c\n  // this needs to go before ppad computation\n\n  var marker = trace.marker;\n  var sizeref = 1.6 * (trace.marker.sizeref || 1);\n  var markerTrans;\n\n  if (trace.marker.sizemode === 'area') {\n    markerTrans = function (v) {\n      return Math.max(Math.sqrt((v || 0) / sizeref), 3);\n    };\n  } else {\n    markerTrans = function (v) {\n      return Math.max((v || 0) / sizeref, 3);\n    };\n  }\n\n  if (Lib.isArrayOrTypedArray(marker.size)) {\n    // I tried auto-type but category and dates dont make much sense.\n    var ax = {\n      type: 'linear'\n    };\n    Axes.setConvert(ax);\n    var s = ax.makeCalcdata(trace.marker, 'size');\n    var sizeOut = new Array(serieslen);\n\n    for (var i = 0; i < serieslen; i++) {\n      sizeOut[i] = markerTrans(s[i]);\n    }\n\n    return sizeOut;\n  } else {\n    return markerTrans(marker.size);\n  }\n}\n/**\n * mark the first scatter trace for each subplot\n * note that scatter and scattergl each get their own first trace\n * note also that I'm doing this during calc rather than supplyDefaults\n * so I don't need to worry about transforms, but if we ever do\n * per-trace calc this will get confused.\n */\n\n\nfunction setFirstScatter(fullLayout, trace) {\n  var group = firstScatterGroup(trace);\n  var firstScatter = fullLayout._firstScatter;\n  if (!firstScatter[group]) firstScatter[group] = trace.uid;\n}\n\nfunction firstScatterGroup(trace) {\n  var stackGroup = trace.stackgroup;\n  return trace.xaxis + trace.yaxis + trace.type + (stackGroup ? '-' + stackGroup : '');\n}\n\nfunction getStackOpts(trace, fullLayout, xa, ya) {\n  var stackGroup = trace.stackgroup;\n  if (!stackGroup) return;\n  var stackOpts = fullLayout._scatterStackOpts[xa._id + ya._id][stackGroup];\n  var stackAx = stackOpts.orientation === 'v' ? ya : xa; // Allow stacking only on numeric axes\n  // calc is a little late to be figuring this out, but during supplyDefaults\n  // we don't know the axis type yet\n\n  if (stackAx.type === 'linear' || stackAx.type === 'log') return stackOpts;\n}\n\nmodule.exports = {\n  calc: calc,\n  calcMarkerSize: calcMarkerSize,\n  calcAxisExpansion: calcAxisExpansion,\n  setFirstScatter: setFirstScatter,\n  getStackOpts: getStackOpts\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/scatter/calc.js"],"names":["isNumeric","require","Lib","Axes","alignPeriod","BADNUM","subTypes","calcColorscale","arraysToCalcdata","calcSelection","calc","gd","trace","fullLayout","_fullLayout","xa","getFromId","xaxis","ya","yaxis","origX","makeCalcdata","origY","x","y","serieslen","_length","cd","Array","ids","stackGroupOpts","getStackOpts","interpolateGaps","isV","i","j","k","interpolate","vali","setFirstScatter","xAttr","yAttr","posAttr","pushUnique","traceIndices","_expandedIndex","orientation","stackgaps","ppad","calcMarkerSize","calcAxisExpansion","hasPeriodX","xperiodalignment","hasPeriodY","yperiodalignment","cdi","xValid","yValid","orig_x","orig_y","gap","s","id","String","length","splice","sort","a","b","pos0","size0","m","xId","_id","yId","firstScatter","_firstScatter","firstScatterGroup","uid","stackOrientation","fill","_minDtick","xOptions","padded","yOptions","openEnded","tozero","error_y","visible","hasMarkers","hasText","_extremes","findExtremes","marker","sizeref","markerTrans","sizemode","v","Math","max","sqrt","isArrayOrTypedArray","size","ax","type","setConvert","sizeOut","group","stackGroup","stackgroup","stackOpts","_scatterStackOpts","stackAx","module","exports"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\nvar alignPeriod = require('../../plots/cartesian/align_period');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar subTypes = require('./subtypes');\nvar calcColorscale = require('./colorscale_calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('./calc_selection');\n\nfunction calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var origX = xa.makeCalcdata(trace, 'x');\n    var origY = ya.makeCalcdata(trace, 'y');\n    var x = alignPeriod(trace, xa, 'x', origX);\n    var y = alignPeriod(trace, ya, 'y', origY);\n\n    var serieslen = trace._length;\n    var cd = new Array(serieslen);\n    var ids = trace.ids;\n    var stackGroupOpts = getStackOpts(trace, fullLayout, xa, ya);\n    var interpolateGaps = false;\n    var isV, i, j, k, interpolate, vali;\n\n    setFirstScatter(fullLayout, trace);\n\n    var xAttr = 'x';\n    var yAttr = 'y';\n    var posAttr;\n    if(stackGroupOpts) {\n        Lib.pushUnique(stackGroupOpts.traceIndices, trace._expandedIndex);\n        isV = stackGroupOpts.orientation === 'v';\n\n        // size, like we use for bar\n        if(isV) {\n            yAttr = 's';\n            posAttr = 'x';\n        } else {\n            xAttr = 's';\n            posAttr = 'y';\n        }\n        interpolate = stackGroupOpts.stackgaps === 'interpolate';\n    } else {\n        var ppad = calcMarkerSize(trace, serieslen);\n        calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n    }\n\n    var hasPeriodX = !!trace.xperiodalignment;\n    var hasPeriodY = !!trace.yperiodalignment;\n\n    for(i = 0; i < serieslen; i++) {\n        var cdi = cd[i] = {};\n        var xValid = isNumeric(x[i]);\n        var yValid = isNumeric(y[i]);\n        if(xValid && yValid) {\n            cdi[xAttr] = x[i];\n            cdi[yAttr] = y[i];\n\n            if(hasPeriodX) {\n                cdi.orig_x = origX[i]; // used by hover\n            }\n            if(hasPeriodY) {\n                cdi.orig_y = origY[i]; // used by hover\n            }\n        } else if(stackGroupOpts && (isV ? xValid : yValid)) {\n            // if we're stacking we need to hold on to all valid positions\n            // even with invalid sizes\n\n            cdi[posAttr] = isV ? x[i] : y[i];\n            cdi.gap = true;\n            if(interpolate) {\n                cdi.s = BADNUM;\n                interpolateGaps = true;\n            } else {\n                cdi.s = 0;\n            }\n        } else {\n            cdi[xAttr] = cdi[yAttr] = BADNUM;\n        }\n\n        if(ids) {\n            cdi.id = String(ids[i]);\n        }\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcColorscale(gd, trace);\n    calcSelection(cd, trace);\n\n    if(stackGroupOpts) {\n        // remove bad positions and sort\n        // note that original indices get added to cd in arraysToCalcdata\n        i = 0;\n        while(i < cd.length) {\n            if(cd[i][posAttr] === BADNUM) {\n                cd.splice(i, 1);\n            } else i++;\n        }\n\n        Lib.sort(cd, function(a, b) {\n            return (a[posAttr] - b[posAttr]) || (a.i - b.i);\n        });\n\n        if(interpolateGaps) {\n            // first fill the beginning with constant from the first point\n            i = 0;\n            while(i < cd.length - 1 && cd[i].gap) {\n                i++;\n            }\n            vali = cd[i].s;\n            if(!vali) vali = cd[i].s = 0; // in case of no data AT ALL in this trace - use 0\n            for(j = 0; j < i; j++) {\n                cd[j].s = vali;\n            }\n            // then fill the end with constant from the last point\n            k = cd.length - 1;\n            while(k > i && cd[k].gap) {\n                k--;\n            }\n            vali = cd[k].s;\n            for(j = cd.length - 1; j > k; j--) {\n                cd[j].s = vali;\n            }\n            // now interpolate internal gaps linearly\n            while(i < k) {\n                i++;\n                if(cd[i].gap) {\n                    j = i + 1;\n                    while(cd[j].gap) {\n                        j++;\n                    }\n                    var pos0 = cd[i - 1][posAttr];\n                    var size0 = cd[i - 1].s;\n                    var m = (cd[j].s - size0) / (cd[j][posAttr] - pos0);\n                    while(i < j) {\n                        cd[i].s = size0 + (cd[i][posAttr] - pos0) * m;\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n\n    return cd;\n}\n\nfunction calcAxisExpansion(gd, trace, xa, ya, x, y, ppad) {\n    var serieslen = trace._length;\n    var fullLayout = gd._fullLayout;\n    var xId = xa._id;\n    var yId = ya._id;\n    var firstScatter = fullLayout._firstScatter[firstScatterGroup(trace)] === trace.uid;\n    var stackOrientation = (getStackOpts(trace, fullLayout, xa, ya) || {}).orientation;\n    var fill = trace.fill;\n\n    // cancel minimum tick spacings (only applies to bars and boxes)\n    xa._minDtick = 0;\n    ya._minDtick = 0;\n\n    // check whether bounds should be tight, padded, extended to zero...\n    // most cases both should be padded on both ends, so start with that.\n    var xOptions = {padded: true};\n    var yOptions = {padded: true};\n\n    if(ppad) {\n        xOptions.ppad = yOptions.ppad = ppad;\n    }\n\n    // TODO: text size\n\n    var openEnded = serieslen < 2 || (x[0] !== x[serieslen - 1]) || (y[0] !== y[serieslen - 1]);\n\n    if(openEnded && (\n        (fill === 'tozerox') ||\n        ((fill === 'tonextx') && (firstScatter || stackOrientation === 'h'))\n    )) {\n        // include zero (tight) and extremes (padded) if fill to zero\n        // (unless the shape is closed, then it's just filling the shape regardless)\n\n        xOptions.tozero = true;\n    } else if(!(trace.error_y || {}).visible && (\n        // if no error bars, markers or text, or fill to y=0 remove x padding\n\n            (fill === 'tonexty' || fill === 'tozeroy') ||\n            (!subTypes.hasMarkers(trace) && !subTypes.hasText(trace))\n        )) {\n        xOptions.padded = false;\n        xOptions.ppad = 0;\n    }\n\n    if(openEnded && (\n        (fill === 'tozeroy') ||\n        ((fill === 'tonexty') && (firstScatter || stackOrientation === 'v'))\n    )) {\n        // now check for y - rather different logic, though still mostly padded both ends\n        // include zero (tight) and extremes (padded) if fill to zero\n        // (unless the shape is closed, then it's just filling the shape regardless)\n\n        yOptions.tozero = true;\n    } else if(fill === 'tonextx' || fill === 'tozerox') {\n        // tight y: any x fill\n\n        yOptions.padded = false;\n    }\n\n    // N.B. asymmetric splom traces call this with blank {} xa or ya\n    if(xId) trace._extremes[xId] = Axes.findExtremes(xa, x, xOptions);\n    if(yId) trace._extremes[yId] = Axes.findExtremes(ya, y, yOptions);\n}\n\nfunction calcMarkerSize(trace, serieslen) {\n    if(!subTypes.hasMarkers(trace)) return;\n\n    // Treat size like x or y arrays --- Run d2c\n    // this needs to go before ppad computation\n    var marker = trace.marker;\n    var sizeref = 1.6 * (trace.marker.sizeref || 1);\n    var markerTrans;\n\n    if(trace.marker.sizemode === 'area') {\n        markerTrans = function(v) {\n            return Math.max(Math.sqrt((v || 0) / sizeref), 3);\n        };\n    } else {\n        markerTrans = function(v) {\n            return Math.max((v || 0) / sizeref, 3);\n        };\n    }\n\n    if(Lib.isArrayOrTypedArray(marker.size)) {\n        // I tried auto-type but category and dates dont make much sense.\n        var ax = {type: 'linear'};\n        Axes.setConvert(ax);\n\n        var s = ax.makeCalcdata(trace.marker, 'size');\n\n        var sizeOut = new Array(serieslen);\n        for(var i = 0; i < serieslen; i++) {\n            sizeOut[i] = markerTrans(s[i]);\n        }\n        return sizeOut;\n    } else {\n        return markerTrans(marker.size);\n    }\n}\n\n/**\n * mark the first scatter trace for each subplot\n * note that scatter and scattergl each get their own first trace\n * note also that I'm doing this during calc rather than supplyDefaults\n * so I don't need to worry about transforms, but if we ever do\n * per-trace calc this will get confused.\n */\nfunction setFirstScatter(fullLayout, trace) {\n    var group = firstScatterGroup(trace);\n    var firstScatter = fullLayout._firstScatter;\n    if(!firstScatter[group]) firstScatter[group] = trace.uid;\n}\n\nfunction firstScatterGroup(trace) {\n    var stackGroup = trace.stackgroup;\n    return trace.xaxis + trace.yaxis + trace.type +\n        (stackGroup ? '-' + stackGroup : '');\n}\n\nfunction getStackOpts(trace, fullLayout, xa, ya) {\n    var stackGroup = trace.stackgroup;\n    if(!stackGroup) return;\n    var stackOpts = fullLayout._scatterStackOpts[xa._id + ya._id][stackGroup];\n    var stackAx = stackOpts.orientation === 'v' ? ya : xa;\n    // Allow stacking only on numeric axes\n    // calc is a little late to be figuring this out, but during supplyDefaults\n    // we don't know the axis type yet\n    if(stackAx.type === 'linear' || stackAx.type === 'log') return stackOpts;\n}\n\nmodule.exports = {\n    calc: calc,\n    calcMarkerSize: calcMarkerSize,\n    calcAxisExpansion: calcAxisExpansion,\n    setFirstScatter: setFirstScatter,\n    getStackOpts: getStackOpts\n};\n"]},"metadata":{},"sourceType":"script"}