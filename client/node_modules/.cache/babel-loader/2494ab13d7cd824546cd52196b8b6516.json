{"ast":null,"code":"'use strict';\n\nvar pngSignature = 'PNG\\r\\n\\x1a\\n';\nvar pngImageHeaderChunkName = 'IHDR'; // Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\n\nvar pngFriedChunkName = 'CgBI';\n\nfunction isPNG(buffer) {\n  if (pngSignature === buffer.toString('ascii', 1, 8)) {\n    var chunkName = buffer.toString('ascii', 12, 16);\n\n    if (chunkName === pngFriedChunkName) {\n      chunkName = buffer.toString('ascii', 28, 32);\n    }\n\n    if (chunkName !== pngImageHeaderChunkName) {\n      throw new TypeError('invalid png');\n    }\n\n    return true;\n  }\n}\n\nfunction calculate(buffer) {\n  if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {\n    return {\n      'width': buffer.readUInt32BE(32),\n      'height': buffer.readUInt32BE(36)\n    };\n  }\n\n  return {\n    'width': buffer.readUInt32BE(16),\n    'height': buffer.readUInt32BE(20)\n  };\n}\n\nmodule.exports = {\n  'detect': isPNG,\n  'calculate': calculate\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/image-size/lib/types/png.js"],"names":["pngSignature","pngImageHeaderChunkName","pngFriedChunkName","isPNG","buffer","toString","chunkName","TypeError","calculate","readUInt32BE","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAG,eAAnB;AACA,IAAIC,uBAAuB,GAAG,MAA9B,C,CAEA;;AACA,IAAIC,iBAAiB,GAAG,MAAxB;;AAEA,SAASC,KAAT,CAAgBC,MAAhB,EAAwB;AACtB,MAAIJ,YAAY,KAAKI,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,CAAzB,EAA4B,CAA5B,CAArB,EAAqD;AACnD,QAAIC,SAAS,GAAGF,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,EAA6B,EAA7B,CAAhB;;AACA,QAAIC,SAAS,KAAKJ,iBAAlB,EAAqC;AACnCI,MAAAA,SAAS,GAAGF,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,EAA6B,EAA7B,CAAZ;AACD;;AACD,QAAIC,SAAS,KAAKL,uBAAlB,EAA2C;AACzC,YAAM,IAAIM,SAAJ,CAAc,aAAd,CAAN;AACD;;AACD,WAAO,IAAP;AACD;AACF;;AAED,SAASC,SAAT,CAAoBJ,MAApB,EAA4B;AAC1B,MAAIA,MAAM,CAACC,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,EAA6B,EAA7B,MAAqCH,iBAAzC,EAA4D;AAC1D,WAAO;AACL,eAASE,MAAM,CAACK,YAAP,CAAoB,EAApB,CADJ;AAEL,gBAAUL,MAAM,CAACK,YAAP,CAAoB,EAApB;AAFL,KAAP;AAID;;AACD,SAAO;AACL,aAASL,MAAM,CAACK,YAAP,CAAoB,EAApB,CADJ;AAEL,cAAUL,MAAM,CAACK,YAAP,CAAoB,EAApB;AAFL,GAAP;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf,YAAUR,KADK;AAEf,eAAaK;AAFE,CAAjB","sourcesContent":["'use strict';\n\nvar pngSignature = 'PNG\\r\\n\\x1a\\n';\nvar pngImageHeaderChunkName = 'IHDR';\n\n// Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\nvar pngFriedChunkName = 'CgBI'; \n\nfunction isPNG (buffer) {\n  if (pngSignature === buffer.toString('ascii', 1, 8)) {\n    var chunkName = buffer.toString('ascii', 12, 16);\n    if (chunkName === pngFriedChunkName) {\n      chunkName = buffer.toString('ascii', 28, 32);\n    }\n    if (chunkName !== pngImageHeaderChunkName) {\n      throw new TypeError('invalid png');\n    }\n    return true;\n  }\n}\n\nfunction calculate (buffer) {\n  if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {\n    return {\n      'width': buffer.readUInt32BE(32),\n      'height': buffer.readUInt32BE(36)\n    };\n  }\n  return {\n    'width': buffer.readUInt32BE(16),\n    'height': buffer.readUInt32BE(20)\n  };\n}\n\nmodule.exports = {\n  'detect': isPNG,\n  'calculate': calculate\n};\n"]},"metadata":{},"sourceType":"script"}