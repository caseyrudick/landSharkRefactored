{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n/* eslint-disable no-console */\n\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\n\nvar notifier = require('./notifier');\n\nvar loggers = module.exports = {};\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function () {\n  var i;\n\n  if (dfltConfig.logging > 1) {\n    var messages = ['LOG:'];\n\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    apply(console.trace || console.log, messages);\n  }\n\n  if (dfltConfig.notifyOnLogging > 1) {\n    var lines = [];\n\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n\n    notifier(lines.join('<br>'), 'long');\n  }\n};\n\nloggers.warn = function () {\n  var i;\n\n  if (dfltConfig.logging > 0) {\n    var messages = ['WARN:'];\n\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    apply(console.trace || console.log, messages);\n  }\n\n  if (dfltConfig.notifyOnLogging > 0) {\n    var lines = [];\n\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n\n    notifier(lines.join('<br>'), 'stick');\n  }\n};\n\nloggers.error = function () {\n  var i;\n\n  if (dfltConfig.logging > 0) {\n    var messages = ['ERROR:'];\n\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    apply(console.error, messages);\n  }\n\n  if (dfltConfig.notifyOnLogging > 0) {\n    var lines = [];\n\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n\n    notifier(lines.join('<br>'), 'stick');\n  }\n};\n/*\n * Robust apply, for IE9 where console.log doesn't support\n * apply like other functions do\n */\n\n\nfunction apply(f, args) {\n  if (f && f.apply) {\n    try {\n      // `this` should always be console, since here we're always\n      // applying a method of the console object.\n      f.apply(console, args);\n      return;\n    } catch (e) {\n      /* in case apply failed, fall back on the code below */\n    }\n  } // no apply - just try calling the function on each arg independently\n\n\n  for (var i = 0; i < args.length; i++) {\n    try {\n      f(args[i]);\n    } catch (e) {\n      // still fails - last resort simple console.log\n      console.log(args[i]);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/lib/loggers.js"],"names":["dfltConfig","require","notifier","loggers","module","exports","log","i","logging","messages","arguments","length","push","apply","console","trace","notifyOnLogging","lines","join","warn","error","f","args","e"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/* eslint-disable no-console */\n\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\n\nvar notifier = require('./notifier');\n\nvar loggers = module.exports = {};\n\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function() {\n    var i;\n\n    if(dfltConfig.logging > 1) {\n        var messages = ['LOG:'];\n        for(i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n        apply(console.trace || console.log, messages);\n    }\n\n    if(dfltConfig.notifyOnLogging > 1) {\n        var lines = [];\n        for(i = 0; i < arguments.length; i++) {\n            lines.push(arguments[i]);\n        }\n        notifier(lines.join('<br>'), 'long');\n    }\n};\n\nloggers.warn = function() {\n    var i;\n\n    if(dfltConfig.logging > 0) {\n        var messages = ['WARN:'];\n        for(i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n        apply(console.trace || console.log, messages);\n    }\n\n    if(dfltConfig.notifyOnLogging > 0) {\n        var lines = [];\n        for(i = 0; i < arguments.length; i++) {\n            lines.push(arguments[i]);\n        }\n        notifier(lines.join('<br>'), 'stick');\n    }\n};\n\nloggers.error = function() {\n    var i;\n\n    if(dfltConfig.logging > 0) {\n        var messages = ['ERROR:'];\n        for(i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n        apply(console.error, messages);\n    }\n\n    if(dfltConfig.notifyOnLogging > 0) {\n        var lines = [];\n        for(i = 0; i < arguments.length; i++) {\n            lines.push(arguments[i]);\n        }\n        notifier(lines.join('<br>'), 'stick');\n    }\n};\n\n/*\n * Robust apply, for IE9 where console.log doesn't support\n * apply like other functions do\n */\nfunction apply(f, args) {\n    if(f && f.apply) {\n        try {\n            // `this` should always be console, since here we're always\n            // applying a method of the console object.\n            f.apply(console, args);\n            return;\n        } catch(e) { /* in case apply failed, fall back on the code below */ }\n    }\n\n    // no apply - just try calling the function on each arg independently\n    for(var i = 0; i < args.length; i++) {\n        try {\n            f(args[i]);\n        } catch(e) {\n            // still fails - last resort simple console.log\n            console.log(args[i]);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}