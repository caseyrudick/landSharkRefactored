{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar barAttrs = require('../bar/attributes');\n\nvar lineAttrs = require('../scatter/attributes').line;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar Color = require('../../components/color');\n\nmodule.exports = {\n  x: barAttrs.x,\n  x0: barAttrs.x0,\n  dx: barAttrs.dx,\n  y: barAttrs.y,\n  y0: barAttrs.y0,\n  dy: barAttrs.dy,\n  xperiod: barAttrs.xperiod,\n  yperiod: barAttrs.yperiod,\n  xperiod0: barAttrs.xperiod0,\n  yperiod0: barAttrs.yperiod0,\n  xperiodalignment: barAttrs.xperiodalignment,\n  yperiodalignment: barAttrs.yperiodalignment,\n  hovertext: barAttrs.hovertext,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['name', 'x', 'y', 'text', 'percent initial', 'percent previous', 'percent total']\n  }),\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'percent initial', 'percent previous', 'percent total', 'value'],\n    extras: ['none'],\n    role: 'info',\n    editType: 'plot',\n    arrayOk: false,\n    description: ['Determines which trace information appear on the graph.', 'In the case of having multiple funnels, percentages & totals', 'are computed separately (per trace).'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  text: barAttrs.text,\n  textposition: extendFlat({}, barAttrs.textposition, {\n    dflt: 'auto'\n  }),\n  insidetextanchor: extendFlat({}, barAttrs.insidetextanchor, {\n    dflt: 'middle'\n  }),\n  textangle: extendFlat({}, barAttrs.textangle, {\n    dflt: 0\n  }),\n  textfont: barAttrs.textfont,\n  insidetextfont: barAttrs.insidetextfont,\n  outsidetextfont: barAttrs.outsidetextfont,\n  constraintext: barAttrs.constraintext,\n  cliponaxis: barAttrs.cliponaxis,\n  orientation: extendFlat({}, barAttrs.orientation, {\n    description: ['Sets the orientation of the funnels.', 'With *v* (*h*), the value of the each bar spans', 'along the vertical (horizontal).', 'By default funnels are tend to be oriented horizontally;', 'unless only *y* array is presented or orientation is set to *v*.', 'Also regarding graphs including only \\'horizontal\\' funnels,', '*autorange* on the *y-axis* are set to *reversed*.'].join(' ')\n  }),\n  offset: extendFlat({}, barAttrs.offset, {\n    arrayOk: false\n  }),\n  width: extendFlat({}, barAttrs.width, {\n    arrayOk: false\n  }),\n  marker: barAttrs.marker,\n  connector: {\n    fillcolor: {\n      valType: 'color',\n      role: 'style',\n      editType: 'style',\n      description: ['Sets the fill color.'].join(' ')\n    },\n    line: {\n      color: extendFlat({}, lineAttrs.color, {\n        dflt: Color.defaultLine\n      }),\n      width: extendFlat({}, lineAttrs.width, {\n        dflt: 0,\n        editType: 'plot'\n      }),\n      dash: lineAttrs.dash,\n      editType: 'style'\n    },\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      role: 'info',\n      editType: 'plot',\n      description: ['Determines if connector regions and lines are drawn.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  offsetgroup: barAttrs.offsetgroup,\n  alignmentgroup: barAttrs.alignmentgroup\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/funnel/attributes.js"],"names":["barAttrs","require","lineAttrs","line","baseAttrs","hovertemplateAttrs","texttemplateAttrs","constants","extendFlat","Color","module","exports","x","x0","dx","y","y0","dy","xperiod","yperiod","xperiod0","yperiod0","xperiodalignment","yperiodalignment","hovertext","hovertemplate","keys","eventDataKeys","hoverinfo","flags","textinfo","valType","extras","role","editType","arrayOk","description","join","texttemplate","concat","text","textposition","dflt","insidetextanchor","textangle","textfont","insidetextfont","outsidetextfont","constraintext","cliponaxis","orientation","offset","width","marker","connector","fillcolor","color","defaultLine","dash","visible","offsetgroup","alignmentgroup"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar barAttrs = require('../bar/attributes');\nvar lineAttrs = require('../scatter/attributes').line;\nvar baseAttrs = require('../../plots/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar Color = require('../../components/color');\n\nmodule.exports = {\n    x: barAttrs.x,\n    x0: barAttrs.x0,\n    dx: barAttrs.dx,\n    y: barAttrs.y,\n    y0: barAttrs.y0,\n    dy: barAttrs.dy,\n\n    xperiod: barAttrs.xperiod,\n    yperiod: barAttrs.yperiod,\n    xperiod0: barAttrs.xperiod0,\n    yperiod0: barAttrs.yperiod0,\n    xperiodalignment: barAttrs.xperiodalignment,\n    yperiodalignment: barAttrs.yperiodalignment,\n\n    hovertext: barAttrs.hovertext,\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: constants.eventDataKeys\n    }),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['name', 'x', 'y', 'text', 'percent initial', 'percent previous', 'percent total']\n    }),\n\n    textinfo: {\n        valType: 'flaglist',\n        flags: ['label', 'text', 'percent initial', 'percent previous', 'percent total', 'value'],\n        extras: ['none'],\n        role: 'info',\n        editType: 'plot',\n        arrayOk: false,\n        description: [\n            'Determines which trace information appear on the graph.',\n            'In the case of having multiple funnels, percentages & totals',\n            'are computed separately (per trace).'\n        ].join(' ')\n    },\n    // TODO: incorporate `label` and `value` in the eventData\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: constants.eventDataKeys.concat(['label', 'value'])\n    }),\n\n    text: barAttrs.text,\n    textposition: extendFlat({}, barAttrs.textposition, {dflt: 'auto'}),\n    insidetextanchor: extendFlat({}, barAttrs.insidetextanchor, {dflt: 'middle'}),\n    textangle: extendFlat({}, barAttrs.textangle, {dflt: 0}),\n    textfont: barAttrs.textfont,\n    insidetextfont: barAttrs.insidetextfont,\n    outsidetextfont: barAttrs.outsidetextfont,\n    constraintext: barAttrs.constraintext,\n    cliponaxis: barAttrs.cliponaxis,\n\n    orientation: extendFlat({}, barAttrs.orientation, {\n        description: [\n            'Sets the orientation of the funnels.',\n            'With *v* (*h*), the value of the each bar spans',\n            'along the vertical (horizontal).',\n            'By default funnels are tend to be oriented horizontally;',\n            'unless only *y* array is presented or orientation is set to *v*.',\n            'Also regarding graphs including only \\'horizontal\\' funnels,',\n            '*autorange* on the *y-axis* are set to *reversed*.'\n        ].join(' ')\n    }),\n\n    offset: extendFlat({}, barAttrs.offset, {arrayOk: false}),\n    width: extendFlat({}, barAttrs.width, {arrayOk: false}),\n\n    marker: barAttrs.marker,\n\n    connector: {\n        fillcolor: {\n            valType: 'color',\n            role: 'style',\n            editType: 'style',\n            description: [\n                'Sets the fill color.'\n            ].join(' ')\n        },\n        line: {\n            color: extendFlat({}, lineAttrs.color, {dflt: Color.defaultLine}),\n            width: extendFlat({}, lineAttrs.width, {\n                dflt: 0,\n                editType: 'plot',\n            }),\n            dash: lineAttrs.dash,\n            editType: 'style'\n        },\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Determines if connector regions and lines are drawn.'\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n\n    offsetgroup: barAttrs.offsetgroup,\n    alignmentgroup: barAttrs.alignmentgroup\n};\n"]},"metadata":{},"sourceType":"script"}