{"ast":null,"code":"import _toConsumableArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import{connect}from\"react-redux\";import Container from\"react-bootstrap/esm/Container\";import Form from\"react-bootstrap/Form\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Button from\"react-bootstrap/Button\";import'react-datasheet/lib/react-datasheet.css';import ReactDataSheet from\"react-datasheet\";import getSurveysFromDynamoDb from\"../ActionCreators/getWellPlansFromDynamoDb\";var ExistingSurveys=function ExistingSurveys(_ref){var activeWell=_ref.activeWell,getSurveysFromDynamoDbReducer=_ref.getSurveysFromDynamoDbReducer,getSurveysFromDynamoDb=_ref.getSurveysFromDynamoDb;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),surveys=_useState2[0],setSurveys=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),grid=_useState4[0],setGrid=_useState4[1];useEffect(function(){if(getSurveysFromDynamoDbReducer.status===\"received\"){createCopies();}},[getSurveysFromDynamoDbReducer.status]);useEffect(function(){createReactDataSheetGridFromSurveys();},[surveys]);var createCopies=function createCopies(){setSurveys(_toConsumableArray(getSurveysFromDynamoDbReducer.response.Items));// createReactDataSheetGridFromPlans();\n};var createReactDataSheetGridFromSurveys=function createReactDataSheetGridFromSurveys(){var dataSheetHeader=[[{value:'',readOnly:true,width:'3rem'},{value:'Measured Depth',readOnly:true,width:'10rem'},{value:'Inclination',readOnly:true,width:'7rem'},{value:'Azimuth',readOnly:true,width:'7rem'},{value:'TVD',readOnly:true,width:'7rem'},{value:'NS',readOnly:true,width:'7rem'},{value:'EW',readOnly:true,width:'7rem'},{value:'SECT',readOnly:true,width:'7rem'},{value:'DLS',readOnly:true,width:'7rem'}]];var surveysCopy=_toConsumableArray(surveys);surveysCopy.forEach(function(surveyLineItem,idx){var newRow=[];newRow[0]={value:idx+1,width:\"4rem\",readOnly:true};newRow[1]={value:parseInt(surveyLineItem.MD),width:\"10rem\"};newRow[2]={value:parseInt(surveyLineItem.INC),width:\"7rem\"};newRow[3]={value:parseInt(surveyLineItem.AZM),width:\"7rem\"};newRow[4]={value:parseInt(surveyLineItem.TVD),width:\"7rem\"};newRow[5]={value:parseInt(surveyLineItem.Northing),width:\"7rem\"};newRow[6]={value:parseInt(surveyLineItem.Easting),width:\"7rem\"};newRow[7]={value:parseInt(surveyLineItem.VS),width:\"7rem\"};newRow[8]={value:parseInt(surveyLineItem.DLS),width:\"7rem\"};dataSheetHeader.push(newRow);});setGrid(dataSheetHeader);// console.log(grid);\n// setGrid(result)\n};var gridFromSurveys=[[{value:'',readOnly:true,width:'3rem'},{value:'Measured Depth',readOnly:true,width:'10rem'},{value:'Inclination',readOnly:true,width:'7rem'},{value:'Azimuth',readOnly:true,width:'7rem'},{value:'TVD',readOnly:true,width:'7rem'},{value:'NS',readOnly:true,width:'7rem'},{value:'EW',readOnly:true,width:'7rem'},{value:'SECT',readOnly:true,width:'7rem'},{value:'DLS',readOnly:true,width:'7rem'}]];var renderMain=function renderMain(){if(getSurveysFromDynamoDbReducer.status===\"received\"){var _activeWell$response=activeWell.response,Operator=_activeWell$response.Operator,Rig=_activeWell$response.Rig,Well_Name=_activeWell$response.Well_Name;return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"my-4\",children:[Operator.S,\" - \",Rig.S,\" - \",Well_Name.S]}),/*#__PURE__*/_jsx(ReactDataSheet,{data:grid,valueRenderer:function valueRenderer(cell){return cell.value;},width:true})]});}};if(getSurveysFromDynamoDbReducer.status===\"received\"){return/*#__PURE__*/_jsx(Container,{children:renderMain()});}else{return\"error\";}};//   const renderMain = () => {\n//     const { operator, rig, well } = activeWell.response\n//     return (\n//       <React.Fragment>\n//         <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//         <ReactDataSheet\n//           data={surveys}\n//           valueRenderer={cell => cell.value}\n//           width\n//         />\n//       </React.Fragment>\n//     )\n//   }\n//   if (getSurveysFromDynamoDbReducer.status === \"received\" && getSurveysFromDynamoDbReducer.response) {\n//     return (\n//       <Container>\n//         {renderMain()}\n//       </Container>\n//     )\n//   } else {\n//     return (\n//       \"Data Loading\"\n//     )\n//   }\n// }\nvar mapStateToProps=function mapStateToProps(_ref2){var activeWell=_ref2.activeWell,getSurveysFromDynamoDbReducer=_ref2.getSurveysFromDynamoDbReducer;return{activeWell:activeWell,getSurveysFromDynamoDbReducer:getSurveysFromDynamoDbReducer};};export default connect(mapStateToProps,{getSurveysFromDynamoDb:getSurveysFromDynamoDb})(ExistingSurveys);","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingSurveys.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getSurveysFromDynamoDb","ExistingSurveys","activeWell","getSurveysFromDynamoDbReducer","surveys","setSurveys","grid","setGrid","status","createCopies","createReactDataSheetGridFromSurveys","response","Items","dataSheetHeader","value","readOnly","width","surveysCopy","forEach","surveyLineItem","idx","newRow","parseInt","MD","INC","AZM","TVD","Northing","Easting","VS","DLS","push","gridFromSurveys","renderMain","Operator","Rig","Well_Name","S","cell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getSurveysFromDynamoDb from \"../ActionCreators/getWellPlansFromDynamoDb\"\n\n\nconst ExistingSurveys = ({activeWell, getSurveysFromDynamoDbReducer, getSurveysFromDynamoDb}) => {\n  const [surveys, setSurveys] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(() => {\n    if (getSurveysFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  },[getSurveysFromDynamoDbReducer.status])\n\n  useEffect(() => {\n    createReactDataSheetGridFromSurveys();\n  }, [surveys])\n\n  const createCopies = () => {\n    setSurveys([...getSurveysFromDynamoDbReducer.response.Items])\n    // createReactDataSheetGridFromPlans();\n  }\n\n  const createReactDataSheetGridFromSurveys = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    let surveysCopy = [...surveys];\n    surveysCopy.forEach((surveyLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx+1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(surveyLineItem.MD), width: \"10rem\"}\n      newRow[2] = {value: parseInt(surveyLineItem.INC), width: \"7rem\"}\n      newRow[3] = {value: parseInt(surveyLineItem.AZM), width: \"7rem\"}\n      newRow[4] = {value: parseInt(surveyLineItem.TVD), width: \"7rem\"}\n      newRow[5] = {value: parseInt(surveyLineItem.Northing), width: \"7rem\"}\n      newRow[6] = {value: parseInt(surveyLineItem.Easting), width: \"7rem\"}\n      newRow[7] = {value: parseInt(surveyLineItem.VS), width: \"7rem\"}\n      newRow[8] = {value: parseInt(surveyLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    setGrid(dataSheetHeader);\n    // console.log(grid);\n    // setGrid(result)\n  }\n\n  let gridFromSurveys = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n\n  const renderMain = () => {\n    if (getSurveysFromDynamoDbReducer.status === \"received\") {\n      const { Operator, Rig, Well_Name} = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getSurveysFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n\n}\n//   const renderMain = () => {\n//     const { operator, rig, well } = activeWell.response\n//     return (\n//       <React.Fragment>\n//         <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//         <ReactDataSheet\n//           data={surveys}\n//           valueRenderer={cell => cell.value}\n//           width\n//         />\n//       </React.Fragment>\n//     )\n//   }\n\n//   if (getSurveysFromDynamoDbReducer.status === \"received\" && getSurveysFromDynamoDbReducer.response) {\n//     return (\n//       <Container>\n//         {renderMain()}\n//       </Container>\n//     )\n//   } else {\n//     return (\n//       \"Data Loading\"\n//     )\n//   }\n// }\n\nconst mapStateToProps = ({activeWell, getSurveysFromDynamoDbReducer}) => {\n  return {\n    activeWell, \n    getSurveysFromDynamoDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getSurveysFromDynamoDb})(ExistingSurveys)"]},"metadata":{},"sourceType":"module"}