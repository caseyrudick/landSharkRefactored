{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/Components/Plans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet';\n\nconst Plans = () => {\n  _s();\n\n  const initialGrid = [[{\n    value: '',\n    readOnly: true,\n    width: '3rem'\n  }, {\n    value: \"Measured Depth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Inclination\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Azimuth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"TVD\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], []];\n  const [grid, setGrid] = useState(initialGrid);\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]); // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \n\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...grid[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      xs: 10,\n      children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n        data: grid,\n        valueRenderer: cell => cell.value,\n        onCellsChanged: onCellsChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Plans, \"AwkJSX1oACPagmKnbp0h0/fPMH4=\");\n\n_c = Plans;\nexport default connect(null)(Plans);\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/Components/Plans.js"],"names":["React","useState","Container","Form","Row","Col","connect","ReactDataSheet","Plans","initialGrid","value","readOnly","width","grid","setGrid","onCellsChanged","changes","gridNew","map","row","forEach","cell","col"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\n\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n\n\n\nconst Plans = () => {\n    const initialGrid = [\n      [{value: '', readOnly: true, width: '3rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}],\n      [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n      []\n  ]\n  const [grid, setGrid] = useState(initialGrid)\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      gridNew[row][col] = { ...grid[row][col], value };\n    });\n    setGrid(gridNew)\n  };\n\n\n\n  return (\n    <Container>\n      <Col xs={10}>\n    <ReactDataSheet\n        data={grid}\n        valueRenderer={(cell) => cell.value}\n        onCellsChanged={onCellsChanged}\n    />\n    </Col>\n    </Container>\n  )\n}\n\nexport default connect(null)(Plans)"]},"metadata":{},"sourceType":"module"}