{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcoords',\n    trace: true,\n    editType: 'plot'\n  }),\n  labelangle: {\n    valType: 'angle',\n    dflt: 0,\n    role: 'info',\n    editType: 'plot',\n    description: ['Sets the angle of the labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the labels vertically.', 'Tilted labels with *labelangle* may be positioned better', 'inside margins when `labelposition` is set to *bottom*.'].join(' ')\n  },\n  labelside: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['top', 'bottom'],\n    dflt: 'top',\n    editType: 'plot',\n    description: ['Specifies the location of the `label`.', '*top* positions labels above, next to the title', '*bottom* positions labels below the graph', 'Tilted labels with *labelangle* may be positioned better', 'inside margins when `labelposition` is set to *bottom*.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` tick values.'\n  }),\n  rangefont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` range values.'\n  }),\n  dimensions: templatedArray('dimension', {\n    label: {\n      valType: 'string',\n      role: 'info',\n      editType: 'plot',\n      description: 'The shown name of the dimension.'\n    },\n    // TODO: better way to determine ordinal vs continuous axes,\n    // so users can use tickvals/ticktext with a continuous axis.\n    tickvals: extendFlat({}, axesAttrs.tickvals, {\n      editType: 'plot',\n      description: ['Sets the values at which ticks on this axis appear.'].join(' ')\n    }),\n    ticktext: extendFlat({}, axesAttrs.ticktext, {\n      editType: 'plot',\n      description: ['Sets the text displayed at the ticks position via `tickvals`.'].join(' ')\n    }),\n    tickformat: extendFlat({}, axesAttrs.tickformat, {\n      editType: 'plot'\n    }),\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      role: 'info',\n      editType: 'plot',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    },\n    range: {\n      valType: 'info_array',\n      role: 'info',\n      items: [{\n        valType: 'number',\n        editType: 'plot'\n      }, {\n        valType: 'number',\n        editType: 'plot'\n      }],\n      editType: 'plot',\n      description: ['The domain range that represents the full, shown axis extent. Defaults to the `values` extent.', 'Must be an array of `[fromValue, toValue]` with finite numbers as elements.'].join(' ')\n    },\n    constraintrange: {\n      valType: 'info_array',\n      role: 'info',\n      freeLength: true,\n      dimensions: '1-2',\n      items: [{\n        valType: 'number',\n        editType: 'plot'\n      }, {\n        valType: 'number',\n        editType: 'plot'\n      }],\n      editType: 'plot',\n      description: ['The domain range to which the filter on the dimension is constrained. Must be an array', 'of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not', 'disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.'].join(' ')\n    },\n    multiselect: {\n      valType: 'boolean',\n      dflt: true,\n      role: 'info',\n      editType: 'plot',\n      description: 'Do we allow multiple selection ranges or just a single range?'\n    },\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated). Each value must be a finite number.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.'\n  }),\n  line: extendFlat({\n    editType: 'calc'\n  }, colorScaleAttrs('line', {\n    // the default autocolorscale isn't quite usable for parcoords due to context ambiguity around 0 (grey, off-white)\n    // autocolorscale therefore defaults to false too, to avoid being overridden by the blue-white-red autocolor palette\n    colorscaleDflt: 'Viridis',\n    autoColorDflt: false,\n    editTypeOverride: 'calc'\n  }))\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/parcoords/attributes.js"],"names":["colorScaleAttrs","require","axesAttrs","fontAttrs","domainAttrs","attributes","extendFlat","templatedArray","module","exports","domain","name","trace","editType","labelangle","valType","dflt","role","description","join","labelside","values","labelfont","tickfont","rangefont","dimensions","label","tickvals","ticktext","tickformat","visible","range","items","constraintrange","freeLength","multiselect","line","colorscaleDflt","autoColorDflt","editTypeOverride"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nmodule.exports = {\n    domain: domainAttrs({name: 'parcoords', trace: true, editType: 'plot'}),\n\n    labelangle: {\n        valType: 'angle',\n        dflt: 0,\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Sets the angle of the labels with respect to the horizontal.',\n            'For example, a `tickangle` of -90 draws the labels vertically.',\n            'Tilted labels with *labelangle* may be positioned better',\n            'inside margins when `labelposition` is set to *bottom*.'\n        ].join(' ')\n    },\n\n    labelside: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['top', 'bottom'],\n        dflt: 'top',\n        editType: 'plot',\n        description: [\n            'Specifies the location of the `label`.',\n            '*top* positions labels above, next to the title',\n            '*bottom* positions labels below the graph',\n            'Tilted labels with *labelangle* may be positioned better',\n            'inside margins when `labelposition` is set to *bottom*.'\n        ].join(' ')\n    },\n\n    labelfont: fontAttrs({\n        editType: 'plot',\n        description: 'Sets the font for the `dimension` labels.'\n    }),\n    tickfont: fontAttrs({\n        editType: 'plot',\n        description: 'Sets the font for the `dimension` tick values.'\n    }),\n    rangefont: fontAttrs({\n        editType: 'plot',\n        description: 'Sets the font for the `dimension` range values.'\n    }),\n\n    dimensions: templatedArray('dimension', {\n        label: {\n            valType: 'string',\n            role: 'info',\n            editType: 'plot',\n            description: 'The shown name of the dimension.'\n        },\n        // TODO: better way to determine ordinal vs continuous axes,\n        // so users can use tickvals/ticktext with a continuous axis.\n        tickvals: extendFlat({}, axesAttrs.tickvals, {\n            editType: 'plot',\n            description: [\n                'Sets the values at which ticks on this axis appear.'\n            ].join(' ')\n        }),\n        ticktext: extendFlat({}, axesAttrs.ticktext, {\n            editType: 'plot',\n            description: [\n                'Sets the text displayed at the ticks position via `tickvals`.'\n            ].join(' ')\n        }),\n        tickformat: extendFlat({}, axesAttrs.tickformat, {\n            editType: 'plot'\n        }),\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'plot',\n            description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n        },\n        range: {\n            valType: 'info_array',\n            role: 'info',\n            items: [\n                {valType: 'number', editType: 'plot'},\n                {valType: 'number', editType: 'plot'}\n            ],\n            editType: 'plot',\n            description: [\n                'The domain range that represents the full, shown axis extent. Defaults to the `values` extent.',\n                'Must be an array of `[fromValue, toValue]` with finite numbers as elements.'\n            ].join(' ')\n        },\n        constraintrange: {\n            valType: 'info_array',\n            role: 'info',\n            freeLength: true,\n            dimensions: '1-2',\n            items: [\n                {valType: 'number', editType: 'plot'},\n                {valType: 'number', editType: 'plot'}\n            ],\n            editType: 'plot',\n            description: [\n                'The domain range to which the filter on the dimension is constrained. Must be an array',\n                'of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not',\n                'disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.'\n            ].join(' ')\n        },\n        multiselect: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'plot',\n            description: 'Do we allow multiple selection ranges or just a single range?'\n        },\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Dimension values. `values[n]` represents the value of the `n`th point in the dataset,',\n                'therefore the `values` vector for all dimensions must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number.'\n            ].join(' ')\n        },\n        editType: 'calc',\n        description: 'The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.'\n    }),\n\n    line: extendFlat({editType: 'calc'},\n        colorScaleAttrs('line', {\n            // the default autocolorscale isn't quite usable for parcoords due to context ambiguity around 0 (grey, off-white)\n            // autocolorscale therefore defaults to false too, to avoid being overridden by the blue-white-red autocolor palette\n            colorscaleDflt: 'Viridis',\n            autoColorDflt: false,\n            editTypeOverride: 'calc'\n        })\n    )\n};\n"]},"metadata":{},"sourceType":"script"}