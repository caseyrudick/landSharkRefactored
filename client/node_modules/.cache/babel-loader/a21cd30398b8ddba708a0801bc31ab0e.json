{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar subTypes = require('../scatter/subtypes');\n\nvar styleTextSelection = require('./edit_style').styleTextSelection;\n\nmodule.exports = function select(searchInfo, selectionTester) {\n  var cd = searchInfo.cd;\n  var selection = [];\n  var trace = cd[0].trace;\n  var stash = cd[0].t;\n  var len = trace._length;\n  var x = stash.x;\n  var y = stash.y;\n  var scene = stash._scene;\n  var index = stash.index;\n  if (!scene) return selection;\n  var hasText = subTypes.hasText(trace);\n  var hasMarkers = subTypes.hasMarkers(trace);\n  var hasOnlyLines = !hasMarkers && !hasText;\n  if (trace.visible !== true || hasOnlyLines) return selection;\n  var els = [];\n  var unels = []; // degenerate polygon does not enable selection\n  // filter out points by visible scatter ones\n\n  if (selectionTester !== false && !selectionTester.degenerate) {\n    for (var i = 0; i < len; i++) {\n      if (selectionTester.contains([stash.xpx[i], stash.ypx[i]], false, i, searchInfo)) {\n        els.push(i);\n        selection.push({\n          pointNumber: i,\n          x: x[i],\n          y: y[i]\n        });\n      } else {\n        unels.push(i);\n      }\n    }\n  }\n\n  if (hasMarkers) {\n    var scatter2d = scene.scatter2d;\n\n    if (!els.length && !unels.length) {\n      // reset to base styles when clearing\n      var baseOpts = new Array(scene.count);\n      baseOpts[index] = scene.markerOptions[index];\n      scatter2d.update.apply(scatter2d, baseOpts);\n    } else if (!scene.selectBatch[index].length && !scene.unselectBatch[index].length) {\n      // set unselected styles on 'context' canvas (if not done already)\n      var unselOpts = new Array(scene.count);\n      unselOpts[index] = scene.markerUnselectedOptions[index];\n      scatter2d.update.apply(scatter2d, unselOpts);\n    }\n  }\n\n  scene.selectBatch[index] = els;\n  scene.unselectBatch[index] = unels;\n\n  if (hasText) {\n    styleTextSelection(cd);\n  }\n\n  return selection;\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/scattergl/select.js"],"names":["subTypes","require","styleTextSelection","module","exports","select","searchInfo","selectionTester","cd","selection","trace","stash","t","len","_length","x","y","scene","_scene","index","hasText","hasMarkers","hasOnlyLines","visible","els","unels","degenerate","i","contains","xpx","ypx","push","pointNumber","scatter2d","length","baseOpts","Array","count","markerOptions","update","apply","selectBatch","unselectBatch","unselOpts","markerUnselectedOptions"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar subTypes = require('../scatter/subtypes');\nvar styleTextSelection = require('./edit_style').styleTextSelection;\n\nmodule.exports = function select(searchInfo, selectionTester) {\n    var cd = searchInfo.cd;\n    var selection = [];\n    var trace = cd[0].trace;\n    var stash = cd[0].t;\n    var len = trace._length;\n    var x = stash.x;\n    var y = stash.y;\n    var scene = stash._scene;\n    var index = stash.index;\n\n    if(!scene) return selection;\n\n    var hasText = subTypes.hasText(trace);\n    var hasMarkers = subTypes.hasMarkers(trace);\n    var hasOnlyLines = !hasMarkers && !hasText;\n\n    if(trace.visible !== true || hasOnlyLines) return selection;\n\n    var els = [];\n    var unels = [];\n\n    // degenerate polygon does not enable selection\n    // filter out points by visible scatter ones\n    if(selectionTester !== false && !selectionTester.degenerate) {\n        for(var i = 0; i < len; i++) {\n            if(selectionTester.contains([stash.xpx[i], stash.ypx[i]], false, i, searchInfo)) {\n                els.push(i);\n                selection.push({\n                    pointNumber: i,\n                    x: x[i],\n                    y: y[i]\n                });\n            } else {\n                unels.push(i);\n            }\n        }\n    }\n\n    if(hasMarkers) {\n        var scatter2d = scene.scatter2d;\n\n        if(!els.length && !unels.length) {\n            // reset to base styles when clearing\n            var baseOpts = new Array(scene.count);\n            baseOpts[index] = scene.markerOptions[index];\n            scatter2d.update.apply(scatter2d, baseOpts);\n        } else if(!scene.selectBatch[index].length && !scene.unselectBatch[index].length) {\n            // set unselected styles on 'context' canvas (if not done already)\n            var unselOpts = new Array(scene.count);\n            unselOpts[index] = scene.markerUnselectedOptions[index];\n            scatter2d.update.apply(scatter2d, unselOpts);\n        }\n    }\n\n    scene.selectBatch[index] = els;\n    scene.unselectBatch[index] = unels;\n\n    if(hasText) {\n        styleTextSelection(cd);\n    }\n\n    return selection;\n};\n"]},"metadata":{},"sourceType":"script"}