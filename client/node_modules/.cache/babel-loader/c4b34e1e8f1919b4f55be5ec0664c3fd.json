{"ast":null,"code":"import DLC from\"./DLC\";import RF from\"./RF\";export default(function(measuredDepthCurrent,inclinationCurrent,azimuthCurrent,measuredDepthPrior,inclinationPrior,azimuthPrior,calculatedEastingPrior){var converter=Math.PI/180;var calculatedDLC=DLC(inclinationPrior,inclinationCurrent,azimuthPrior,azimuthCurrent);console.log(\"EW calculatedDLC \".concat(calculatedDLC));var calculatedRF=RF(measuredDepthPrior,measuredDepthCurrent,calculatedDLC);console.log(\"EW calculatedRF \".concat(calculatedRF));var calculatedEastingCurrent=calculatedEastingPrior+calculatedRF*(Math.sin(inclinationPrior*converter)*Math.sin(azimuthPrior*converter)+Math.sin(inclinationCurrent*converter)*Math.sin(azimuthCurrent*converter));console.log(\"Easting: \".concat(calculatedEastingCurrent));return parseFloat(calculatedEastingCurrent.toFixed(2))// calculatedEastingCurrent\n;});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/HelperFunctions/Calculations/EW.js"],"names":["DLC","RF","measuredDepthCurrent","inclinationCurrent","azimuthCurrent","measuredDepthPrior","inclinationPrior","azimuthPrior","calculatedEastingPrior","converter","Math","PI","calculatedDLC","console","log","calculatedRF","calculatedEastingCurrent","sin","parseFloat","toFixed"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,EAAP,KAAe,MAAf,CAEA,eAAe,SAACC,oBAAD,CAAuBC,kBAAvB,CAA2CC,cAA3C,CAA2DC,kBAA3D,CAA+EC,gBAA/E,CAAiGC,YAAjG,CAA+GC,sBAA/G,CAA0I,CACvJ,GAAMC,CAAAA,SAAS,CAAIC,IAAI,CAACC,EAAN,CAAU,GAA5B,CAEA,GAAMC,CAAAA,aAAa,CAAGZ,GAAG,CAACM,gBAAD,CAAmBH,kBAAnB,CAAuCI,YAAvC,CAAqDH,cAArD,CAAzB,CACAS,OAAO,CAACC,GAAR,4BAAgCF,aAAhC,GAEA,GAAMG,CAAAA,YAAY,CAAGd,EAAE,CAACI,kBAAD,CAAqBH,oBAArB,CAA2CU,aAA3C,CAAvB,CACAC,OAAO,CAACC,GAAR,2BAA+BC,YAA/B,GAEA,GAAMC,CAAAA,wBAAwB,CAAIR,sBAAsB,CAAGO,YAAY,EAAGL,IAAI,CAACO,GAAL,CAASX,gBAAgB,CAACG,SAA1B,EAAsCC,IAAI,CAACO,GAAL,CAASV,YAAY,CAAGE,SAAxB,CAAtC,CAA2EC,IAAI,CAACO,GAAL,CAASd,kBAAkB,CAAGM,SAA9B,EAAyCC,IAAI,CAACO,GAAL,CAASb,cAAc,CAACK,SAAxB,CAAvH,CAAvE,CACAI,OAAO,CAACC,GAAR,oBAAwBE,wBAAxB,GACA,MACEE,CAAAA,UAAU,CAACF,wBAAwB,CAACG,OAAzB,CAAiC,CAAjC,CAAD,CACV;AAFF,CAID,CAfD","sourcesContent":["import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior) => {\n  const converter = (Math.PI)/180;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`EW calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`EW calculatedRF ${calculatedRF}`)\n\n  const calculatedEastingCurrent = (calculatedEastingPrior + calculatedRF *(Math.sin(inclinationPrior*converter)* Math.sin(azimuthPrior * converter) + Math.sin(inclinationCurrent * converter)*Math.sin(azimuthCurrent*converter)));\n  console.log(`Easting: ${calculatedEastingCurrent}`)\n  return (\n    parseFloat(calculatedEastingCurrent.toFixed(2))\n    // calculatedEastingCurrent\n  )\n};\n"]},"metadata":{},"sourceType":"module"}