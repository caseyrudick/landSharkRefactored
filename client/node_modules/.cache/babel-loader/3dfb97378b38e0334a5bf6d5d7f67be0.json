{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PVA.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\";\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\";\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\n\nconst PVA = ({\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  activeWell\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return [];\n      } else {\n        const eastingCoordinates = [];\n        data.map((row, index) => {\n          if (index === 0 || index === 1) {} else {\n            const x = data[index][6].value;\n            eastingCoordinates.push(x);\n          }\n        });\n        return eastingCoordinates;\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        return [];\n      } else {\n        const eastingCoordinates = [];\n        data.map((row, index) => {\n          if (index === 0) {} else {\n            const x = data[index][6].value;\n            eastingCoordinates.push(x);\n          }\n        });\n        return eastingCoordinates;\n      }\n    }\n  };\n};\n\n_c = PVA;\n\nconst createNorthingCoordinates = (data, polyLine = false) => {\n  if (polyLine) {\n    if (Object.keys(data).length === 0) {\n      return [];\n    } else {\n      const northingCoordinates = [];\n      northingCoordinates = data.map((row, index) => {\n        if (index === 0 || index === 1) {} else {\n          return data[index][5];\n        }\n      });\n      return northingCoordinates;\n    }\n  }\n};\n\nconst renderPlanView = () => {\n  // if (\n  //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n  // )\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    data: [{\n      x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n      y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n      type: \"scatter\",\n      mode: \"lines+markers\",\n      marker: {\n        color: \"blue\"\n      },\n      name: \"Plan\"\n    }],\n    layout: {\n      width: 1000,\n      height: 800,\n      title: 'Section View'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer,\n    saveLeaseLinesToReduxStoreReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  saveLeaseLinesToReduxStore,\n  saveWellInfoToReduxStore\n})(PVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"PVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PVA.js"],"names":["React","Container","Plot","connect","_","savePlansToReduxStore","saveLeaseLinesToReduxStore","saveWellInfoToReduxStore","PVA","savePlansToReduxStoreReducer","saveLeaseLinesToReduxStoreReducer","activeWell","createEastingCoordinates","data","polyLine","Object","keys","length","eastingCoordinates","map","row","index","x","value","push","createNorthingCoordinates","northingCoordinates","renderPlanView","response","y","type","mode","marker","color","name","width","height","title","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\"\nimport _ from \"lodash\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n\nconst PVA = ({savePlansToReduxStoreReducer, saveLeaseLinesToReduxStoreReducer, activeWell}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n        const eastingCoordinates = []\n        data.map((row, index) => {\n          if (index === 0 || index === 1) {\n\n          } else {\n            const x = data[index][6].value\n            eastingCoordinates.push(x)\n          }\n        })\n        return eastingCoordinates\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n        const eastingCoordinates = []\n        data.map((row, index) => {\n          if (index === 0) {\n\n          } else {\n            const x = data[index][6].value\n            eastingCoordinates.push(x)\n          }\n        })\n        return eastingCoordinates\n      }\n    }\n  }\n}\n\nconst createNorthingCoordinates = (data, polyLine = false) => {\n  if (polyLine) {\n    if (Object.keys(data).length === 0) {\n      return []\n    } else {\n      const northingCoordinates = []\n      northingCoordinates = data.map((row, index) => {\n        if (index === 0 || index === 1) {\n\n        } else {\n          return data[index][5]\n          \n        }\n      })\n      return northingCoordinates\n    }\n  }\n}\n\nconst renderPlanView = () => {\n  // if (\n  //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n  // )\n  return (\n    <Plot\n      data={[\n        {\n          x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n          y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        }\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n  )\n}\n\nconst mapStateToProps = ({savePlansToReduxStoreReducer, saveLeaseLinesToReduxStoreReducer, activeWell}) => {\n  return {\n    savePlansToReduxStoreReducer, \n    saveLeaseLinesToReduxStoreReducer, \n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, saveLeaseLinesToReduxStore, saveWellInfoToReduxStore })(PVA)"]},"metadata":{},"sourceType":"module"}