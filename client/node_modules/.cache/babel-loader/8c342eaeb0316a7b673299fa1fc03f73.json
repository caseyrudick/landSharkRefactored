{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/App.js\";\nimport React from 'react'; // react-boostrap\n\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from \"react-bootstrap/Tab\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container'; // redux\n\nimport { connect } from 'react-redux'; // styling \n\nimport 'bootstrap/dist/css/bootstrap.min.css'; //import 'custom.scss'\n// components\n\nimport Home from \"./Home\";\nimport Plans from \"./Plans\";\nimport ExistingPlans from './ExistingPlans';\nimport postWellInfoToJSONDb from '../ActionCreators/postWellInfoToJSONDb';\n\nconst App = ({\n  saveActiveWellToReduxStoreReducer,\n  areThereExistingPlans,\n  saveWellInfoToReduxStoreReducer,\n  getWellPlansFromJSONdbReducer,\n  postWellInfoToJSONDbReducer\n}) => {\n  const plansTabHandler = () => {\n    if (saveWellInfoToReduxStoreReducer.response !== \"received\" && saveActiveWellToReduxStoreReducer.response !== \"received\") {\n      return true;\n    }\n\n    return false;\n  };\n\n  const plansComponentHandler = () => {\n    if (areThereExistingPlans) {\n      return \"TBD\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(Plans, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"bg-dark text-white\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"LandShark App (Employee Portal)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"Home\",\n        title: \"Home\",\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"Plans\",\n        title: \"Plans\",\n        disabled: plansTabHandler(),\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: plansComponentHandler()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\n\nconst mapStateToProps = ({\n  saveActiveWellToReduxStoreReducer,\n  saveWellInfoToReduxStoreReducer,\n  getWellPlansFromJSONdbReducer,\n  postWellInfoToJSONDbReducer\n}) => {\n  const planned = () => {\n    if (saveActiveWellToReduxStoreReducer.response !== \"received\") {\n      return true;\n    }\n\n    return false;\n  };\n\n  const plans = () => {\n    if (saveActiveWellToReduxStoreReducer.response === \"received\") {\n      return saveActiveWellToReduxStoreReducer.response.selectedWell.plans;\n    }\n\n    return null;\n  };\n\n  return {\n    saveWellInfoToReduxStoreReducer,\n    getWellPlansFromJSONdbReducer,\n    postWellInfoToJSONDbReducer,\n    areThereExistingPlans: planned(),\n    existingWellPlans: plans(),\n    saveActiveWellToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/App.js"],"names":["React","Tabs","Tab","Jumbotron","Container","connect","Home","Plans","ExistingPlans","postWellInfoToJSONDb","App","saveActiveWellToReduxStoreReducer","areThereExistingPlans","saveWellInfoToReduxStoreReducer","getWellPlansFromJSONdbReducer","postWellInfoToJSONDbReducer","plansTabHandler","response","plansComponentHandler","mapStateToProps","planned","plans","selectedWell","existingWellPlans"],"mappings":"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","sourcesContent":["import React from 'react'\n// react-boostrap\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from \"react-bootstrap/Tab\"\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\n// redux\nimport { connect } from 'react-redux'\n// styling \nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import 'custom.scss'\n// components\nimport Home from \"./Home\"\nimport Plans from \"./Plans\"\nimport ExistingPlans from './ExistingPlans'\nimport postWellInfoToJSONDb from '../ActionCreators/postWellInfoToJSONDb'\n\n\nconst App = ({saveActiveWellToReduxStoreReducer, areThereExistingPlans, saveWellInfoToReduxStoreReducer, getWellPlansFromJSONdbReducer, postWellInfoToJSONDbReducer}) => {\n  \nconst plansTabHandler = () => {\n  if (saveWellInfoToReduxStoreReducer.response !== \"received\" && \n  saveActiveWellToReduxStoreReducer.response !== \"received\") {\n    return true\n  }\n  return false\n}\n\nconst plansComponentHandler = () => {\n  if (areThereExistingPlans) {\n    return \"TBD\"\n  } \n  return <Plans/>\n}\n\n  return (\n    <React.Fragment>\n      <Jumbotron fluid className=\"bg-dark text-white\">\n        <Container>\n          <h1>LandShark App (Employee Portal)</h1>\n        </Container>\n      </Jumbotron>\n      <Tabs>\n        <Tab eventKey=\"Home\" title=\"Home\">\n          <Container>\n            <Home/>\n          </Container>\n        </Tab>\n        <Tab eventKey=\"Plans\" title=\"Plans\" disabled={plansTabHandler()}>\n          <Container>\n        {plansComponentHandler()}\n          </Container>\n        </Tab>\n\n      </Tabs>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = ({ saveActiveWellToReduxStoreReducer, saveWellInfoToReduxStoreReducer, getWellPlansFromJSONdbReducer, postWellInfoToJSONDbReducer}) => {\n  const planned = () => {\n    if (saveActiveWellToReduxStoreReducer.response !== \"received\") {\n      return true\n    } \n    return false\n  }\n  const plans = () => {\n    if (saveActiveWellToReduxStoreReducer.response ===\"received\") {\n      return saveActiveWellToReduxStoreReducer.response.selectedWell.plans\n    }\n    return null\n  }\n  return {\n    saveWellInfoToReduxStoreReducer, \n    getWellPlansFromJSONdbReducer,\n    postWellInfoToJSONDbReducer,\n    areThereExistingPlans: planned(),\n    existingWellPlans: plans(),\n    saveActiveWellToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(App);\n\n"]},"metadata":{},"sourceType":"module"}