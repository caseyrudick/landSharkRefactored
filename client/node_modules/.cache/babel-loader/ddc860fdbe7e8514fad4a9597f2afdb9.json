{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingLeaseLines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport { get } from \"lodash\";\n\nconst ExistingLeaseLines = ({\n  getLeaseLinesFromDynamoDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [leaseLines, setLeaseLines] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n      let leaseLinesFromReducerCopy = [...getLeaseLinesFromDynamoDbReducer.response];\n      setLeaseLines(leaseLinesFromReducerCopy);\n    }\n  }, [getLeaseLinesFromDynamoDbReducer.status]);\n\n  const renderMain = () => {\n    if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n      const {\n        operator,\n        rig,\n        well\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: getLeaseLinesFromDynamoDbReducer.response,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  }\n};\n\n_s(ExistingLeaseLines, \"+1wFatJCzxF8zJziMHeN7N8sKZ0=\");\n\n_c = ExistingLeaseLines;\n\nconst mapStateToProps = ({\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  return {\n    activeWell,\n    getLeaseLinesFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps)(ExistingLeaseLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingLeaseLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingLeaseLines.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","get","ExistingLeaseLines","getLeaseLinesFromDynamoDbReducer","activeWell","leaseLines","setLeaseLines","grid","setGrid","status","leaseLinesFromReducerCopy","response","renderMain","operator","rig","well","cell","value","mapStateToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,GAAT,QAAoB,QAApB;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAACC,EAAAA,gCAAD;AAAmCC,EAAAA;AAAnC,CAAD,KAAoD;AAAA;;AAC7E,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIW,gCAAgC,CAACM,MAAjC,KAA4C,UAAhD,EAA4D;AAC1D,UAAIC,yBAAyB,GAAG,CAAC,GAAGP,gCAAgC,CAACQ,QAArC,CAAhC;AACAL,MAAAA,aAAa,CAACI,yBAAD,CAAb;AACD;AACF,GALQ,EAKP,CAACP,gCAAgC,CAACM,MAAlC,CALO,CAAT;;AAOA,QAAMG,UAAU,GAAG,MAAM;AACvB,QAAIT,gCAAgC,CAACM,MAAjC,KAA4C,UAAhD,EAA4D;AAC1D,YAAM;AAACI,QAAAA,QAAD;AAAWC,QAAAA,GAAX;AAAgBC,QAAAA;AAAhB,UAAyBX,UAAU,CAACO,QAA1C;AACA,0BACE,QAAC,KAAD,CAAO,QAAP;AAAA,+BAEE,QAAC,cAAD;AAAgB,UAAA,IAAI,EAAIR,gCAAgC,CAACQ,QAAzD;AAAmE,UAAA,aAAa,EAAIK,IAAI,IAAIA,IAAI,CAACC,KAAjG;AAAwG,UAAA,KAAK;AAA7G;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;AACF,GAVD;;AAYA,MAAId,gCAAgC,CAACM,MAAjC,KAA4C,UAAhD,EAA4D;AAC1D,wBACE,QAAC,SAAD;AAAA,gBACGG,UAAU;AADb;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND,MAMO;AACD,WAAO,OAAP;AACH;AACJ,CAhCD;;GAAMV,kB;;KAAAA,kB;;AAkCN,MAAMgB,eAAe,GAAG,CAAC;AAACd,EAAAA,UAAD;AAAaD,EAAAA;AAAb,CAAD,KAAoD;AAC3E,SAAO;AACNC,IAAAA,UADM;AAEND,IAAAA;AAFM,GAAP;AAIA,CALD;;AAOA,eAAeT,OAAO,CAACwB,eAAD,CAAP,CAAyBhB,kBAAzB,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport { get } from \"lodash\"\n\nconst ExistingLeaseLines = ({getLeaseLinesFromDynamoDbReducer, activeWell}) => {\n  const [leaseLines, setLeaseLines] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(()=>{\n    if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n      let leaseLinesFromReducerCopy = [...getLeaseLinesFromDynamoDbReducer.response]\n      setLeaseLines(leaseLinesFromReducerCopy)\n    }\n  },[getLeaseLinesFromDynamoDbReducer.status])\n\n  const renderMain = () => {\n    if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n      const {operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          {/* <h3 className=\"my-4\">{operator} - {rig} - {well}</h3> */}\n          <ReactDataSheet data = {getLeaseLinesFromDynamoDbReducer.response} valueRenderer = {cell => cell.value} width></ReactDataSheet>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n        return \"error\"\n    }\n}\n\nconst mapStateToProps = ({activeWell, getLeaseLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromDynamoDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingLeaseLines)"]},"metadata":{},"sourceType":"module"}