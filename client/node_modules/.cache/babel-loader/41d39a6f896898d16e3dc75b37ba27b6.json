{"ast":null,"code":"// import React, { useState } from \"react\"\n// import { connect } from \"react-redux\"\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\n// import postPlanstoJSONdb from \"../ActionCreators/saveWellPlansToJSON\"\n// import wellsReducer from \"../Reducers/wellsReducer\"\n// // iterate through existing grid to get a copy and not mutate current as we iterate over\n//     // iterate through the changes.  Each change is a cell, each cell is an object\n//     // with cell (previousVal), row, col, currentVal\n//     // mutate the value of the newGrid[row#][col#] to the new value \n// const ExistingWellPlans = (selectedWell) => {\n//   const [grid, setGrid] = useState([/*insert connection to plans prop*/])\n//   const initialGrid = selectedWell\n//   // const initialGrid = \n//   const onCellsChanged = (changes) => {\n//     const newGrid = grid.map(row => [...row])\n//     // newGrid is now a copy of old grid\n//     changes.forEach(({cell, row, col, value}) => {\n//       // each cell of newGrid is a copy of the old grid, plus changed value\n//       newGrid[row][col] = {...grid[row][col], value}\n//     })\n//     // set this grid as the local state's grid\n//     setGrid(newGrid)\n//   }\n//   return (\n//     <Container>\n//       <Col>Insert Name of well</Col>\n//       <ReactDataSheet\n//         data={grid}\n//         valueRenderer={(cell)=> cell.value}\n//         onCellsChanged={onCellsChanged}\n//       ></ReactDataSheet>\n//     </Container>\n//   )\n// }\n// const mapStateToProps = ({selectedWell}) => {\n//   return {selectedWell}\n// }\n// export default connect(mapStateToProps)(ExistingWellPlans)","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState } from \"react\"\n// import { connect } from \"react-redux\"\n\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\n// import postPlanstoJSONdb from \"../ActionCreators/saveWellPlansToJSON\"\n// import wellsReducer from \"../Reducers/wellsReducer\"\n\n\n// // iterate through existing grid to get a copy and not mutate current as we iterate over\n//     // iterate through the changes.  Each change is a cell, each cell is an object\n//     // with cell (previousVal), row, col, currentVal\n//     // mutate the value of the newGrid[row#][col#] to the new value \n// const ExistingWellPlans = (selectedWell) => {\n//   const [grid, setGrid] = useState([/*insert connection to plans prop*/])\n//   const initialGrid = selectedWell\n//   // const initialGrid = \n//   const onCellsChanged = (changes) => {\n//     const newGrid = grid.map(row => [...row])\n//     // newGrid is now a copy of old grid\n//     changes.forEach(({cell, row, col, value}) => {\n//       // each cell of newGrid is a copy of the old grid, plus changed value\n//       newGrid[row][col] = {...grid[row][col], value}\n//     })\n//     // set this grid as the local state's grid\n//     setGrid(newGrid)\n//   }\n//   return (\n//     <Container>\n//       <Col>Insert Name of well</Col>\n\n//       <ReactDataSheet\n//         data={grid}\n//         valueRenderer={(cell)=> cell.value}\n//         onCellsChanged={onCellsChanged}\n//       ></ReactDataSheet>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({selectedWell}) => {\n//   return {selectedWell}\n// }\n\n// export default connect(mapStateToProps)(ExistingWellPlans)"]},"metadata":{},"sourceType":"module"}