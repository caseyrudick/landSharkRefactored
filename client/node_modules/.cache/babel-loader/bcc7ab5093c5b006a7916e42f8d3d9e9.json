{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet';\nimport saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\";\nimport postPlansToJSONdb from \"../ActionCreators/saveWellPlansToJSON\";\nimport wellsReducer from \"../Reducers/wellsReducer\";\n\nconst Plans = ({\n  savePlansToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  postPlansToJSONDb\n}) => {\n  _s();\n\n  // useState Hooks\n  const [input, setInput] = useState(false);\n  const [vsDirection, setVsDirection] = useState(0);\n  const [grid, setGrid] = useState([[{\n    value: '',\n    readOnly: true,\n    width: '3rem'\n  }, {\n    value: 'Measured Depth',\n    readOnly: true,\n    width: '10rem'\n  }, {\n    value: 'Inclination',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'Azimuth',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'TVD',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'NS',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'EW',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'SECT',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'DLS',\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    readOnly: true,\n    value: 1\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }, {\n    readOnly: true,\n    value: 0\n  }], // This bit is different from `Surveys`\n  [{\n    readOnly: true,\n    value: 2\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 3\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 4\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 5\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]]); // useEffect Hooks\n\n  useEffect(() => {\n    if (input) {// performCalculations();\n    }\n  }, [input]);\n  useEffect(() => {\n    handleAddRows(95);\n  }, []);\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {// we do not want to run calculations on the header row array, nor the first array as it will always be MD: 0, INC: 0 and AZ: 0 and will have no data prior to itself\n      } else {\n        // for every array within the `grid` array we want to iterate over and change the values of the TVD, NS, EW, SECT and DLS\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value);\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value);\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value);\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection);\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value);\n        grid[index][4] = { ...grid[index][4],\n          readOnly: true,\n          value: calculatedTVD\n        };\n        grid[index][5] = { ...grid[index][5],\n          readOnly: true,\n          value: calculatedNS\n        };\n        grid[index][6] = { ...grid[index][6],\n          readOnly: true,\n          value: calculatedEW\n        };\n        grid[index][7] = { ...grid[index][7],\n          readOnly: true,\n          value: calculatedSECT\n        };\n        grid[index][8] = { ...grid[index][8],\n          readOnly: true,\n          value: calculatedDLS\n        };\n        setGrid(grid);\n        setInput(false);\n      }\n    });\n  };\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row]);\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      // `cell` provides an object with key value pair of 'value' and whatever the cell's value was prior to being edited\n      gridNew[row][col] = { ...gridNew[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n    setInput(true);\n  };\n\n  const handleVsDirection = value => {\n    setVsDirection(value);\n    setInput(true);\n  };\n\n  const handleSubmit = () => {\n    const {\n      well,\n      operator,\n      rig,\n      county,\n      uSstate\n    } = saveWellInfoToReduxStoreReducer.response;\n    postPlansToDynamoDb(grid, vsDirection, well, operator, rig, county, uSstate);\n    savePlansToReduxStore(grid);\n  };\n\n  const handleRemoveRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createRows = numberOfRowsToAdd => {\n    let i;\n    let createdRows = [];\n\n    for (i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push( // This bit is different from `Surveys`\n      [{\n        readOnly: true,\n        value: grid.length + i\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }]);\n    }\n\n    return createdRows;\n  };\n\n  const handleAddRows = rows => {\n    const newGrid = [...grid, ...createRows(rows)];\n    setGrid(newGrid);\n  };\n\n  const renderAlert = () => {};\n\n  const renderSetRowsButtons = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"d-flex justify-content-start mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          value: 25,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add 25 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"ml-4\",\n          value: 10,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add 10 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"ml-4\",\n          value: 5,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add 5 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"ml-4\",\n          value: 1,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          className: \"ml-4\",\n          onClick: handleRemoveRow,\n          children: \"Remove a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderSubmitButton = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"my-4\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"info\",\n          onClick: handleSubmit,\n          children: \"Submit data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderWellData = () => {\n    console.log(saveWellInfoToReduxStoreReducer);\n\n    if (saveWellInfoToReduxStoreReducer.status === 'received') {\n      const {\n        well,\n        rig,\n        operator\n      } = saveWellInfoToReduxStoreReducer.response;\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: [operator, \" - \", rig, \" - \", well]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 14\n      }, this);\n    } else {\n      return 'No well data';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: [renderWellData(), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          onCellsChanged: onCellsChanged,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"mt-7\",\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicEmail\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"float\",\n              placeholder: \"Enter VS here\",\n              onChange: event => handleVsDirection(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), renderSetRowsButtons(), renderSubmitButton(), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: renderAlert()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Plans, \"SYwnxfLEXFrO+XD+KzNkmziKdoQ=\");\n\n_c = Plans;\n\nconst mapStateToProps = ({\n  saveWellInfoToReduxStoreReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  postPlansToJSONDb\n})(Plans);\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveNewPlanToReduxStore","postPlansToJSONdb","wellsReducer","Plans","savePlansToReduxStore","saveWellInfoToReduxStoreReducer","postPlansToJSONDb","input","setInput","vsDirection","setVsDirection","grid","setGrid","value","readOnly","width","handleAddRows","performCalculations","map","row","index","calculatedTVD","calculateTVD","calculatedNS","calculateNS","calculatedEW","calculateEW","calculatedSECT","calculateSECT","calculatedDLS","calculateDLS","onCellsChanged","changes","gridNew","forEach","cell","col","handleVsDirection","handleSubmit","well","operator","rig","county","uSstate","response","postPlansToDynamoDb","handleRemoveRow","newGrid","pop","createRows","numberOfRowsToAdd","i","createdRows","push","length","rows","renderAlert","renderSetRowsButtons","event","target","renderSubmitButton","renderWellData","console","log","status","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\nimport saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\nimport postPlansToJSONdb from \"../ActionCreators/saveWellPlansToJSON\"\nimport wellsReducer from \"../Reducers/wellsReducer\";\n\n\n\n\nconst Plans = ({ savePlansToReduxStore, saveWellInfoToReduxStoreReducer, postPlansToJSONDb }) => {\n\n  // useState Hooks\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVsDirection] = useState(0)\n  const [grid, setGrid] = useState(\n    [\n      [{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}],\n\n      [{readOnly: true, value: 1}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}],\n\n      // This bit is different from `Surveys`\n      [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n      [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n      [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n      [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    ]\n  );\n\n  // useEffect Hooks\n  useEffect(() => {\n    if (input) {\n      // performCalculations();\n    }\n  }, [input]);\n  \n  useEffect(() => {\n    handleAddRows(95)\n  }, []);\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // we do not want to run calculations on the header row array, nor the first array as it will always be MD: 0, INC: 0 and AZ: 0 and will have no data prior to itself\n      } else {\n        // for every array within the `grid` array we want to iterate over and change the values of the TVD, NS, EW, SECT and DLS\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n        grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n        grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n        grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n        grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n        grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n        setGrid(grid)\n        setInput(false)\n      }\n    })\n  }\n\n  const onCellsChanged = (changes) => {\n    const gridNew = grid.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      // `cell` provides an object with key value pair of 'value' and whatever the cell's value was prior to being edited\n      gridNew[row][col] = {...gridNew[row][col], value}\n    })\n    setGrid(gridNew)\n    setInput(true)\n  }\n\n  const handleVsDirection = (value) => {\n    setVsDirection(value)\n    setInput(true)\n  }\n\n  const handleSubmit = () => {\n    const { well, operator, rig, county, uSstate } = saveWellInfoToReduxStoreReducer.response\n    postPlansToDynamoDb(grid, vsDirection, well, operator, rig, county, uSstate)\n    savePlansToReduxStore(grid)\n  }\n\n  const handleRemoveRow = () => {\n    const newGrid = [...grid]\n    newGrid.pop()\n    setGrid(newGrid)\n  }\n\n  const createRows = (numberOfRowsToAdd) => {\n    let i;\n    let createdRows = []\n    for (i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push(\n        // This bit is different from `Surveys`\n        [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n      )\n    }\n    return createdRows;\n  }\n\n  const handleAddRows = (rows) => {\n    const newGrid = [...grid, ...createRows(rows)]\n    setGrid(newGrid)\n  }\n\n  const renderAlert = () => {\n\n  }\n\n  const renderSetRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n          <Button variant=\"success\" value={25} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 25 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 10 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 5 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n            Add a row\n          </Button>\n          <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n            Remove a row\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderSubmitButton = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"info\" onClick={handleSubmit}>\n            Submit data\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderWellData = () => {\n    console.log(saveWellInfoToReduxStoreReducer)\n    if (saveWellInfoToReduxStoreReducer.status === 'received') {\n      const { well, rig, operator } = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n    } else {\n      return 'No well data'\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {renderWellData()}\n          <ReactDataSheet data={grid} valueRenderer={(cell) => cell.value} onCellsChanged={onCellsChanged} width />\n        </Col>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control type=\"float\" placeholder=\"Enter VS here\" onChange={event => handleVsDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderSetRowsButtons()}\n      {renderSubmitButton()}\n      <Row>\n        <Col xs={10}>\n          {renderAlert()}\n        </Col>\n        <Col xs={2}>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({ saveWellInfoToReduxStoreReducer }) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n  };\n};\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, postPlansToJSONDb })(Plans);"]},"metadata":{},"sourceType":"module"}