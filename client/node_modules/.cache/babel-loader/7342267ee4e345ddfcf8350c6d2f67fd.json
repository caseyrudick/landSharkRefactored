{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar arraysToCalcdata = require('./arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nmodule.exports = function calc(gd, trace) {\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var size, pos, origPos;\n  var sizeOpts = {\n    msUTC: !!(trace.base || trace.base === 0)\n  };\n  var hasPeriod;\n\n  if (trace.orientation === 'h') {\n    size = xa.makeCalcdata(trace, 'x', sizeOpts);\n    origPos = ya.makeCalcdata(trace, 'y');\n    pos = alignPeriod(trace, ya, 'y', origPos);\n    hasPeriod = !!trace.yperiodalignment;\n  } else {\n    size = ya.makeCalcdata(trace, 'y', sizeOpts);\n    origPos = xa.makeCalcdata(trace, 'x');\n    pos = alignPeriod(trace, xa, 'x', origPos);\n    hasPeriod = !!trace.xperiodalignment;\n  } // create the \"calculated data\" to plot\n\n\n  var serieslen = Math.min(pos.length, size.length);\n  var cd = new Array(serieslen); // set position and size\n\n  for (var i = 0; i < serieslen; i++) {\n    cd[i] = {\n      p: pos[i],\n      s: size[i]\n    };\n\n    if (hasPeriod) {\n      cd[i].orig_p = origPos[i]; // used by hover\n    }\n\n    if (trace.ids) {\n      cd[i].id = String(trace.ids[i]);\n    }\n  } // auto-z and autocolorscale if applicable\n\n\n  if (hasColorscale(trace, 'marker')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.color,\n      containerStr: 'marker',\n      cLetter: 'c'\n    });\n  }\n\n  if (hasColorscale(trace, 'marker.line')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.line.color,\n      containerStr: 'marker.line',\n      cLetter: 'c'\n    });\n  }\n\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/bar/calc.js"],"names":["Axes","require","alignPeriod","hasColorscale","colorscaleCalc","arraysToCalcdata","calcSelection","module","exports","calc","gd","trace","xa","getFromId","xaxis","ya","yaxis","size","pos","origPos","sizeOpts","msUTC","base","hasPeriod","orientation","makeCalcdata","yperiodalignment","xperiodalignment","serieslen","Math","min","length","cd","Array","i","p","s","orig_p","ids","id","String","vals","marker","color","containerStr","cLetter","line"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar alignPeriod = require('../../plots/cartesian/align_period');\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\n\nmodule.exports = function calc(gd, trace) {\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var size, pos, origPos;\n\n    var sizeOpts = {\n        msUTC: !!(trace.base || trace.base === 0)\n    };\n\n    var hasPeriod;\n    if(trace.orientation === 'h') {\n        size = xa.makeCalcdata(trace, 'x', sizeOpts);\n        origPos = ya.makeCalcdata(trace, 'y');\n        pos = alignPeriod(trace, ya, 'y', origPos);\n        hasPeriod = !!trace.yperiodalignment;\n    } else {\n        size = ya.makeCalcdata(trace, 'y', sizeOpts);\n        origPos = xa.makeCalcdata(trace, 'x');\n        pos = alignPeriod(trace, xa, 'x', origPos);\n        hasPeriod = !!trace.xperiodalignment;\n    }\n\n    // create the \"calculated data\" to plot\n    var serieslen = Math.min(pos.length, size.length);\n    var cd = new Array(serieslen);\n\n    // set position and size\n    for(var i = 0; i < serieslen; i++) {\n        cd[i] = { p: pos[i], s: size[i] };\n\n        if(hasPeriod) {\n            cd[i].orig_p = origPos[i]; // used by hover\n        }\n\n        if(trace.ids) {\n            cd[i].id = String(trace.ids[i]);\n        }\n    }\n\n    // auto-z and autocolorscale if applicable\n    if(hasColorscale(trace, 'marker')) {\n        colorscaleCalc(gd, trace, {\n            vals: trace.marker.color,\n            containerStr: 'marker',\n            cLetter: 'c'\n        });\n    }\n    if(hasColorscale(trace, 'marker.line')) {\n        colorscaleCalc(gd, trace, {\n            vals: trace.marker.line.color,\n            containerStr: 'marker.line',\n            cLetter: 'c'\n        });\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n"]},"metadata":{},"sourceType":"script"}