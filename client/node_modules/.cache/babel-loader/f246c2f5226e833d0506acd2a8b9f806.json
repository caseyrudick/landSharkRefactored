{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingWellPlans = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  const initialGrid = [[{\n    value: '',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Measured Depth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Inclination\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Azimuth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"TVD\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"VS\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"DLS\",\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    readOnly: true,\n    value: 2\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 3\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 4\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 5\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [grid, setGrid] = useState(initialGrid); // useEffect(()=> {\n  //   if (getWellPlansFromJSONDbReducer.status === \"received\") {\n  //     let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //     setPlans(planFromReducerCopy)\n  //     // convertSurveyNumberStringsToNumbers();\n  //   }\n  // },[getWellPlansFromJSONDbReducer.status])\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const createGridFromPlans = () => {\n    let plansCopy = [...getWellPlansFromJSONDbReducer.response];\n    let gridFromPlans = [[{\n      value: '',\n      readOnly: true,\n      width: '3rem'\n    }, {\n      value: 'Measured Depth',\n      readOnly: true,\n      width: '10rem'\n    }, {\n      value: 'Inclination',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'Azimuth',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'TVD',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'NS',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'EW',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'SECT',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'DLS',\n      readOnly: true,\n      width: '7rem'\n    }]]; // const plansCopy = [...plans]\n\n    plansCopy.map((row, index) => {\n      const planRow = [{\n        readOnly: true,\n        value: row[0].value\n      }, {\n        readOnly: true,\n        value: row[1].value\n      }, {\n        readOnly: true,\n        value: row[2].value\n      }, {\n        readOnly: true,\n        value: row[3].value\n      }, {\n        readOnly: true,\n        value: row[4].value\n      }, {\n        readOnly: true,\n        value: row[5].value\n      }, {\n        readOnly: true,\n        value: row[6].value\n      }, {\n        readOnly: true,\n        value: row[7].value\n      }, {\n        readOnly: true,\n        value: row[8].value\n      }];\n      gridFromPlans.push([planRow]);\n    });\n    setPlans(gridFromPlans);\n  };\n\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    createGridFromPlans();\n  }\n\n  const renderMain = () => {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      const {\n        operator,\n        rig,\n        well\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-4\",\n          children: [operator, \" - \", rig, \" - \", well]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  } // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n  //     </Col>\n  //   </Container>\n  // )\n\n};\n\n_s(ExistingWellPlans, \"QiWavjEBv78DsVjBdOybsqDFwU8=\");\n\n_c = ExistingWellPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb\n})(ExistingWellPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingWellPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getWellPlansFromJSONDb","ExistingWellPlans","getWellPlansFromJSONDbReducer","activeWell","plans","setPlans","initialGrid","value","readOnly","width","grid","setGrid","createGridFromPlans","plansCopy","response","gridFromPlans","map","row","index","planRow","push","status","renderMain","operator","rig","well","cell","mapStateToProps","getWellsFromJSONDbReducer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingWellPlans = ({getWellPlansFromJSONDbReducer, activeWell}) => {\n  const [plans, setPlans] = useState([])\n\n  const initialGrid = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n  const [grid, setGrid] = useState(initialGrid)\n  // useEffect(()=> {\n  //   if (getWellPlansFromJSONDbReducer.status === \"received\") {\n  //     let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //     setPlans(planFromReducerCopy)\n  //     // convertSurveyNumberStringsToNumbers();\n  //   }\n    \n  // },[getWellPlansFromJSONDbReducer.status])\n\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const createGridFromPlans = () => {\n    let plansCopy = [...getWellPlansFromJSONDbReducer.response]\n\n    let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    // const plansCopy = [...plans]\n    plansCopy.map((row, index) => { \n      const planRow = [\n      {readOnly: true, value: row[0].value}, \n      {readOnly: true, value: row[1].value},\n      {readOnly: true, value: row[2].value},\n      {readOnly: true, value: row[3].value},\n      {readOnly: true, value: row[4].value},\n      {readOnly: true, value: row[5].value},\n      {readOnly: true, value: row[6].value},\n      {readOnly: true, value: row[7].value},\n      {readOnly: true, value: row[8].value},\n      ]\n      gridFromPlans.push([planRow])\n    })\n\n    setPlans(gridFromPlans)\n  }\n\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    createGridFromPlans()\n  }\n\n  const renderMain = () => {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      const { operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n  \n\n\n\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, activeWell, getWellsFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingWellPlans)"]},"metadata":{},"sourceType":"module"}