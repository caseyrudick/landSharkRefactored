{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport Plot from \"react-plotly.js\";\nimport { isNumber } from \"lodash\";\nimport _ from 'lodash';\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\";\n\nconst ExistingPVA = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  console.log(getWellPlansFromDynamoDbReducer.response.Items);\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return [];\n      } else {\n        return data.map((line, index) => line[\"Easting\"]);\n      }\n    } else {\n      if (data.length === 0) {\n        return [];\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Easting\"]);\n        }).slice(1);\n      }\n    }\n  };\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return [];\n      } else {\n        return data.map((line, index) => line[\"Northing\"]);\n      }\n    } else {\n      if (data.length === 0) {\n        return [];\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Northing\"]);\n        }).slice(1);\n      }\n    }\n  };\n\n  const createTVDCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((lineItem, index) => {\n        return parseInt(lineItem[\"TVD\"]) * -1;\n      });\n    }\n  };\n\n  const createSectCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      const sectCoordinates = data.map((lineItem, index) => {\n        return parseInt(lineItem.VS);\n      });\n      console.log(sectCoordinates);\n      return sectCoordinates;\n    }\n  };\n\n  const convertNumberStringsToNumbersAndSort = (data, dataSource) => {\n    let dataCopy = [...data];\n    dataCopy.map((element, index) => {\n      switch (dataSource) {\n        case 'Plan':\n          dataCopy[index].Plan_Number = parseInt(dataCopy[index].Plan_Line_Number);\n          break;\n\n        case 'Survey':\n          dataCopy[index].Survey_Number = parseInt(dataCopy[index].Survey_Number);\n          break;\n\n        case 'Hard_Line':\n          dataCopy[index].Hard_Line_Number.S = parseInt(dataCopy[index].Hard_Line_Number);\n          break;\n\n        case 'Lease_Line':\n          dataCopy[index].Lease_Line_Number.S = parseInt(dataCopy[index].Lease_Line_Number);\n          break;\n\n        default:\n      }\n    });\n\n    switch (dataSource) {\n      case 'Plan':\n        return _.orderBy(dataCopy, ['Plan_Line_Number'], ['asc']);\n\n      case 'Survey':\n        return _.orderBy(dataCopy, ['SurveyNumber'], ['asc']);\n\n      case 'Hard_Line':\n        return _.orderBy(dataCopy, ['Hard_Line_Number'], ['asc']);\n\n      case 'Lease_Line':\n        return _.orderBy(dataCopy, ['Lease_Line_Number'], ['asc']);\n\n      default:\n    }\n  };\n\n  const renderSectionView = () => {\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n        y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n        y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"Red\"\n        },\n        name: \"Surveys\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Section View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderPlanView = () => {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"mt-7\",\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicEmail\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              className: \"mt-3\",\n              type: \"float\",\n              disabled: true,\n              placeholder: \"Enter VS Here\",\n              onChange: event => event.target.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"blue\"\n          },\n          name: \"Plan\"\n        }, {\n          x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items), \"Survey\"),\n          y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items), \"Survey\"),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          },\n          name: \"Surveys\"\n        } // {\n        //   x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n        //   y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n        //   type: \"scatter\",\n        //   mode: \"lines+markers\",\n        //   marker: {color: \"black\"},\n        //   name: \"Lease Lines\"\n        // },\n        //         {\n        //           x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n        //           y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n        //           type: \"scatter\",\n        //           mode: \"lines+markers\",\n        //           marker: {color: \"red\"},\n        //           name: \"Hard Lines\"\n        //         },\n        ],\n        layout: {\n          width: 1000,\n          height: 800,\n          title: 'Plan View'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [activeWell.response.Operator.S, \" - \", activeWell.response.Rig.S, \" - \", activeWell.response.Well_Name.S]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), renderSectionView(), renderPlanView()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this); // <Container>\n    //   {renderPlanView()} \n    // </Container>\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_c = ExistingPVA;\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","isNumber","_","saveSurveysToReduxStore","ExistingPVA","savePlansToReduxStoreReducer","getHardLinesFromDynamoDbReducer","saveSurveysToReduxStoreReducer","getSurveysFromDynamoDbReducer","getWellPlansFromDynamoDbReducer","activeWell","getLeaseLinesFromDynamoDbReducer","console","log","response","Items","createEastingCoordinates","data","polyLine","length","map","line","index","lineItem","parseInt","slice","createNorthingCoordinates","createTVDCoordinates","createSectCoordinates","sectCoordinates","VS","convertNumberStringsToNumbersAndSort","dataSource","dataCopy","element","Plan_Number","Plan_Line_Number","Survey_Number","Hard_Line_Number","S","Lease_Line_Number","orderBy","renderSectionView","x","y","type","mode","marker","color","name","width","height","title","renderPlanView","event","target","value","status","Operator","Rig","Well_Name","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport _ from 'lodash';\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({ \n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer, \n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer }) => {\n\n\nconsole.log(getWellPlansFromDynamoDbReducer.response.Items)\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((line, index) => line[\"Easting\"])\n      }\n    } else {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Easting\"])\n          }).slice(1)\n\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      }  else {\n        return data.map((line, index) => line[\"Northing\"])\n      }\n    } else {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Northing\"])\n          }).slice(1)\n      }\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"TVD\"]) *-1\n            })\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      const sectCoordinates = data.map((lineItem, index) => {\n        return parseInt(lineItem.VS)\n          })\n      console.log(sectCoordinates)\n      return sectCoordinates\n    }\n  }\n\n  const convertNumberStringsToNumbersAndSort = (data, dataSource) => {\n    let dataCopy = [...data]\n    dataCopy.map((element, index) => {\n      switch (dataSource) {\n        case 'Plan':\n          dataCopy[index].Plan_Number = parseInt(dataCopy[index].Plan_Line_Number)\n          break;\n        case 'Survey':\n          dataCopy[index].Survey_Number = parseInt(dataCopy[index].Survey_Number)\n          break;\n        case 'Hard_Line':\n          dataCopy[index].Hard_Line_Number.S = parseInt(dataCopy[index].Hard_Line_Number)\n          break;\n        case 'Lease_Line':\n          dataCopy[index].Lease_Line_Number.S = parseInt(dataCopy[index].Lease_Line_Number)\n          break;\n        default:\n\n      }\n    })\n    switch (dataSource) {\n      case 'Plan':\n        return _.orderBy(dataCopy, ['Plan_Line_Number'], ['asc'])\n      case 'Survey':\n        return _.orderBy(dataCopy, ['SurveyNumber'], ['asc'])\n      case 'Hard_Line':\n        return _.orderBy(dataCopy, ['Hard_Line_Number'], ['asc'])\n      case 'Lease_Line':\n        return _.orderBy(dataCopy, ['Lease_Line_Number'], ['asc'])\n      default:\n\n    }\n  }\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n          y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n\n  const renderPlanView = () => {\n    return (\n      <Container>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n            </Form.Group>\n          </Form>\n        </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items), \"Survey\"),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items), \"Survey\"),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          }\n          // {\n          //   x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n          //   y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n          //   type: \"scatter\",\n          //   mode: \"lines+markers\",\n          //   marker: {color: \"black\"},\n          //   name: \"Lease Lines\"\n          // },\n  //         {\n  //           x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n  //           y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"red\"},\n  //           name: \"Hard Lines\"\n  //         },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n      </Container>\n    )\n  }\n\n  \n\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.response.Operator.S} - {activeWell.response.Rig.S} - {activeWell.response.Well_Name.S}</h3>\n        {renderSectionView()}\n        {renderPlanView()} \n      </Container>\n    )\n      \n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    \n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer}) => {\n  return {\n    getWellPlansFromDynamoDbReducer, \n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}