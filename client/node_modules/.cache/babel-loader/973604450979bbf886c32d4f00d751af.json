{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingWellPlans = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response];\n      setPlans(planFromReducerCopy);\n    }\n  }, [getWellPlansFromJSONDbReducer.status]); // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const createGridFromPlans = () => {\n    let gridFromPlans = [[{\n      value: '',\n      readOnly: true,\n      width: '3rem'\n    }, {\n      value: 'Measured Depth',\n      readOnly: true,\n      width: '10rem'\n    }, {\n      value: 'Inclination',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'Azimuth',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'TVD',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'NS',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'EW',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'SECT',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'DLS',\n      readOnly: true,\n      width: '7rem'\n    }]];\n    const plansCopy = [...plans]; // const plansCopy = [...plans]\n\n    plansCopy.map((row, index) => {\n      const convertedRow = [{\n        readOnly: true,\n        value: row[0]\n      }, {\n        readOnly: true,\n        value: row[1]\n      }, {\n        readOnly: true,\n        value: row[2]\n      }, {\n        readOnly: true,\n        value: row[3]\n      }, {\n        readOnly: true,\n        value: row[4]\n      }, {\n        readOnly: true,\n        value: row[5]\n      }, {\n        readOnly: true,\n        value: row[6]\n      }, {\n        readOnly: true,\n        value: row[7]\n      }, {\n        readOnly: true,\n        value: row[8]\n      }];\n      gridFromPlans.push(convertedRow);\n    });\n    console.log(gridFromPlans);\n    setGrid(gridFromPlans);\n  }; // createGridFromPlans()\n\n\n  const renderMain = () => {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      const {\n        operator,\n        rig,\n        well\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-4\",\n          children: [operator, \" - \", rig, \" - \", well]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  } // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n  //     </Col>\n  //   </Container>\n  // )\n\n};\n\n_s(ExistingWellPlans, \"Hid+llYDPO6oRzFGkaZa0XxLAGE=\");\n\n_c = ExistingWellPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb\n})(ExistingWellPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingWellPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getWellPlansFromJSONDb","ExistingWellPlans","getWellPlansFromJSONDbReducer","activeWell","plans","setPlans","grid","setGrid","status","planFromReducerCopy","response","createGridFromPlans","gridFromPlans","value","readOnly","width","plansCopy","map","row","index","convertedRow","push","console","log","renderMain","operator","rig","well","cell","mapStateToProps","getWellsFromJSONDbReducer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingWellPlans = ({getWellPlansFromJSONDbReducer, activeWell}) => {\n  const [plans, setPlans] = useState([])\n  const [grid, setGrid] = useState([])\n  \n  useEffect(()=> {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n      setPlans(planFromReducerCopy)\n    }\n  },[getWellPlansFromJSONDbReducer.status])\n    \n  \n\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n\n  const createGridFromPlans = () => {\n    let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    const plansCopy = [...plans]  \n    // const plansCopy = [...plans]\n    plansCopy.map((row, index) => { \n      const convertedRow = [\n        {readOnly: true, value: row[0]}, \n        {readOnly: true, value: row[1]},\n        {readOnly: true, value: row[2]},\n        {readOnly: true, value: row[3]},\n        {readOnly: true, value: row[4]},\n        {readOnly: true, value: row[5]},\n        {readOnly: true, value: row[6]},\n        {readOnly: true, value: row[7]},\n        {readOnly: true, value: row[8]},\n      ]\n      gridFromPlans.push(convertedRow)\n    })\n    console.log(gridFromPlans)\n    setGrid(gridFromPlans)\n  }\n\n\n  // createGridFromPlans()\n\n\n  const renderMain = () => {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      const { operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n  \n\n\n\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, activeWell, getWellsFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingWellPlans)"]},"metadata":{},"sourceType":"module"}