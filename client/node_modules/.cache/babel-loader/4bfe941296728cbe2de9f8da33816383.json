{"ast":null,"code":"\"use strict\";\n\nvar pool = require(\"typedarray-pool\");\n\nvar INSERTION_SORT_THRESHOLD = 32;\n\nfunction getMallocFree(dtype) {\n  switch (dtype) {\n    case \"uint8\":\n      return [pool.mallocUint8, pool.freeUint8];\n\n    case \"uint16\":\n      return [pool.mallocUint16, pool.freeUint16];\n\n    case \"uint32\":\n      return [pool.mallocUint32, pool.freeUint32];\n\n    case \"int8\":\n      return [pool.mallocInt8, pool.freeInt8];\n\n    case \"int16\":\n      return [pool.mallocInt16, pool.freeInt16];\n\n    case \"int32\":\n      return [pool.mallocInt32, pool.freeInt32];\n\n    case \"float32\":\n      return [pool.mallocFloat, pool.freeFloat];\n\n    case \"float64\":\n      return [pool.mallocDouble, pool.freeDouble];\n\n    default:\n      return null;\n  }\n}\n\nfunction shapeArgs(dimension) {\n  var args = [];\n\n  for (var i = 0; i < dimension; ++i) {\n    args.push(\"s\" + i);\n  }\n\n  for (var i = 0; i < dimension; ++i) {\n    args.push(\"n\" + i);\n  }\n\n  for (var i = 1; i < dimension; ++i) {\n    args.push(\"d\" + i);\n  }\n\n  for (var i = 1; i < dimension; ++i) {\n    args.push(\"e\" + i);\n  }\n\n  for (var i = 1; i < dimension; ++i) {\n    args.push(\"f\" + i);\n  }\n\n  return args;\n}\n\nfunction createInsertionSort(order, dtype) {\n  var code = [\"'use strict'\"];\n  var funcName = [\"ndarrayInsertionSort\", order.join(\"d\"), dtype].join(\"\");\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\"].concat(shapeArgs(order.length));\n  var allocator = getMallocFree(dtype);\n  var vars = [\"i,j,cptr,ptr=left*s0+offset\"];\n\n  if (order.length > 1) {\n    var scratch_shape = [];\n\n    for (var i = 1; i < order.length; ++i) {\n      vars.push(\"i\" + i);\n      scratch_shape.push(\"n\" + i);\n    }\n\n    if (allocator) {\n      vars.push(\"scratch=malloc(\" + scratch_shape.join(\"*\") + \")\");\n    } else {\n      vars.push(\"scratch=new Array(\" + scratch_shape.join(\"*\") + \")\");\n    }\n\n    vars.push(\"dptr\", \"sptr\", \"a\", \"b\");\n  } else {\n    vars.push(\"scratch\");\n  }\n\n  function dataRead(ptr) {\n    if (dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\");\n    }\n\n    return [\"data[\", ptr, \"]\"].join(\"\");\n  }\n\n  function dataWrite(ptr, v) {\n    if (dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\");\n    }\n\n    return [\"data[\", ptr, \"]=\", v].join(\"\");\n  } //Create function header\n\n\n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){var \", vars.join(\",\")].join(\"\"), \"for(i=left+1;i<=right;++i){\", \"j=i;ptr+=s0\", \"cptr=ptr\");\n\n  if (order.length > 1) {\n    //Copy data into scratch\n    code.push(\"dptr=0;sptr=ptr\");\n\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n\n    code.push(\"scratch[dptr++]=\", dataRead(\"sptr\"));\n\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push(\"sptr+=d\" + j, \"}\");\n    } //Compare items in outer loop\n\n\n    code.push(\"__g:while(j-->left){\", \"dptr=0\", \"sptr=cptr-s0\");\n\n    for (var i = 1; i < order.length; ++i) {\n      if (i === 1) {\n        code.push(\"__l:\");\n      }\n\n      code.push([\"for(i\", i, \"=0;i\", i, \"<n\", i, \";++i\", i, \"){\"].join(\"\"));\n    }\n\n    code.push([\"a=\", dataRead(\"sptr\"), \"\\nb=scratch[dptr]\\nif(a<b){break __g}\\nif(a>b){break __l}\"].join(\"\"));\n\n    for (var i = order.length - 1; i >= 1; --i) {\n      code.push(\"sptr+=e\" + i, \"dptr+=f\" + i, \"}\");\n    } //Copy data back\n\n\n    code.push(\"dptr=cptr;sptr=cptr-s0\");\n\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n\n    code.push(dataWrite(\"dptr\", dataRead(\"sptr\")));\n\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push([\"dptr+=d\", j, \";sptr+=d\", j].join(\"\"), \"}\");\n    } //Close while loop\n\n\n    code.push(\"cptr-=s0\\n}\"); //Copy scratch into cptr\n\n    code.push(\"dptr=cptr;sptr=0\");\n\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n\n    code.push(dataWrite(\"dptr\", \"scratch[sptr++]\"));\n\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push(\"dptr+=d\" + j, \"}\");\n    }\n  } else {\n    code.push(\"scratch=\" + dataRead(\"ptr\"), \"while((j-->left)&&(\" + dataRead(\"cptr-s0\") + \">scratch)){\", dataWrite(\"cptr\", dataRead(\"cptr-s0\")), \"cptr-=s0\", \"}\", dataWrite(\"cptr\", \"scratch\"));\n  } //Close outer loop body\n\n\n  code.push(\"}\");\n\n  if (order.length > 1 && allocator) {\n    code.push(\"free(scratch)\");\n  }\n\n  code.push(\"} return \" + funcName); //Compile and link function\n\n  if (allocator) {\n    var result = new Function(\"malloc\", \"free\", code.join(\"\\n\"));\n    return result(allocator[0], allocator[1]);\n  } else {\n    var result = new Function(code.join(\"\\n\"));\n    return result();\n  }\n}\n\nfunction createQuickSort(order, dtype, insertionSort) {\n  var code = [\"'use strict'\"];\n  var funcName = [\"ndarrayQuickSort\", order.join(\"d\"), dtype].join(\"\");\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\"].concat(shapeArgs(order.length));\n  var allocator = getMallocFree(dtype);\n  var labelCounter = 0;\n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"));\n  var vars = [\"sixth=((right-left+1)/6)|0\", \"index1=left+sixth\", \"index5=right-sixth\", \"index3=(left+right)>>1\", \"index2=index3-sixth\", \"index4=index3+sixth\", \"el1=index1\", \"el2=index2\", \"el3=index3\", \"el4=index4\", \"el5=index5\", \"less=left+1\", \"great=right-1\", \"pivots_are_equal=true\", \"tmp\", \"tmp0\", \"x\", \"y\", \"z\", \"k\", \"ptr0\", \"ptr1\", \"ptr2\", \"comp_pivot1=0\", \"comp_pivot2=0\", \"comp=0\"];\n\n  if (order.length > 1) {\n    var ele_size = [];\n\n    for (var i = 1; i < order.length; ++i) {\n      ele_size.push(\"n\" + i);\n      vars.push(\"i\" + i);\n    }\n\n    for (var i = 0; i < 8; ++i) {\n      vars.push(\"b_ptr\" + i);\n    }\n\n    vars.push(\"ptr3\", \"ptr4\", \"ptr5\", \"ptr6\", \"ptr7\", \"pivot_ptr\", \"ptr_shift\", \"elementSize=\" + ele_size.join(\"*\"));\n\n    if (allocator) {\n      vars.push(\"pivot1=malloc(elementSize)\", \"pivot2=malloc(elementSize)\");\n    } else {\n      vars.push(\"pivot1=new Array(elementSize),pivot2=new Array(elementSize)\");\n    }\n  } else {\n    vars.push(\"pivot1\", \"pivot2\");\n  } //Initialize local variables\n\n\n  code.push(\"var \" + vars.join(\",\"));\n\n  function toPointer(v) {\n    return [\"(offset+\", v, \"*s0)\"].join(\"\");\n  }\n\n  function dataRead(ptr) {\n    if (dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\");\n    }\n\n    return [\"data[\", ptr, \"]\"].join(\"\");\n  }\n\n  function dataWrite(ptr, v) {\n    if (dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\");\n    }\n\n    return [\"data[\", ptr, \"]=\", v].join(\"\");\n  }\n\n  function cacheLoop(ptrs, usePivot, body) {\n    if (ptrs.length === 1) {\n      code.push(\"ptr0=\" + toPointer(ptrs[0]));\n    } else {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"b_ptr\", i, \"=s0*\", ptrs[i]].join(\"\"));\n      }\n    }\n\n    if (usePivot) {\n      code.push(\"pivot_ptr=0\");\n    }\n\n    code.push(\"ptr_shift=offset\");\n\n    for (var i = order.length - 1; i >= 0; --i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      code.push([\"for(i\", j, \"=0;i\", j, \"<n\", j, \";++i\", j, \"){\"].join(\"\"));\n    }\n\n    if (ptrs.length > 1) {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"ptr\", i, \"=b_ptr\", i, \"+ptr_shift\"].join(\"\"));\n      }\n    }\n\n    code.push(body);\n\n    if (usePivot) {\n      code.push(\"++pivot_ptr\");\n    }\n\n    for (var i = 0; i < order.length; ++i) {\n      var j = order[i];\n\n      if (j === 0) {\n        continue;\n      }\n\n      if (ptrs.length > 1) {\n        code.push(\"ptr_shift+=d\" + j);\n      } else {\n        code.push(\"ptr0+=d\" + j);\n      }\n\n      code.push(\"}\");\n    }\n  }\n\n  function lexicoLoop(label, ptrs, usePivot, body) {\n    if (ptrs.length === 1) {\n      code.push(\"ptr0=\" + toPointer(ptrs[0]));\n    } else {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"b_ptr\", i, \"=s0*\", ptrs[i]].join(\"\"));\n      }\n\n      code.push(\"ptr_shift=offset\");\n    }\n\n    if (usePivot) {\n      code.push(\"pivot_ptr=0\");\n    }\n\n    if (label) {\n      code.push(label + \":\");\n    }\n\n    for (var i = 1; i < order.length; ++i) {\n      code.push([\"for(i\", i, \"=0;i\", i, \"<n\", i, \";++i\", i, \"){\"].join(\"\"));\n    }\n\n    if (ptrs.length > 1) {\n      for (var i = 0; i < ptrs.length; ++i) {\n        code.push([\"ptr\", i, \"=b_ptr\", i, \"+ptr_shift\"].join(\"\"));\n      }\n    }\n\n    code.push(body);\n\n    for (var i = order.length - 1; i >= 1; --i) {\n      if (usePivot) {\n        code.push(\"pivot_ptr+=f\" + i);\n      }\n\n      if (ptrs.length > 1) {\n        code.push(\"ptr_shift+=e\" + i);\n      } else {\n        code.push(\"ptr0+=e\" + i);\n      }\n\n      code.push(\"}\");\n    }\n  }\n\n  function cleanUp() {\n    if (order.length > 1 && allocator) {\n      code.push(\"free(pivot1)\", \"free(pivot2)\");\n    }\n  }\n\n  function compareSwap(a_id, b_id) {\n    var a = \"el\" + a_id;\n    var b = \"el\" + b_id;\n\n    if (order.length > 1) {\n      var lbl = \"__l\" + ++labelCounter;\n      lexicoLoop(lbl, [a, b], false, [\"comp=\", dataRead(\"ptr0\"), \"-\", dataRead(\"ptr1\"), \"\\n\", \"if(comp>0){tmp0=\", a, \";\", a, \"=\", b, \";\", b, \"=tmp0;break \", lbl, \"}\\n\", \"if(comp<0){break \", lbl, \"}\"].join(\"\"));\n    } else {\n      code.push([\"if(\", dataRead(toPointer(a)), \">\", dataRead(toPointer(b)), \"){tmp0=\", a, \";\", a, \"=\", b, \";\", b, \"=tmp0}\"].join(\"\"));\n    }\n  }\n\n  compareSwap(1, 2);\n  compareSwap(4, 5);\n  compareSwap(1, 3);\n  compareSwap(2, 3);\n  compareSwap(1, 4);\n  compareSwap(3, 4);\n  compareSwap(2, 5);\n  compareSwap(2, 3);\n  compareSwap(4, 5);\n\n  if (order.length > 1) {\n    cacheLoop([\"el1\", \"el2\", \"el3\", \"el4\", \"el5\", \"index1\", \"index3\", \"index5\"], true, [\"pivot1[pivot_ptr]=\", dataRead(\"ptr1\"), \"\\n\", \"pivot2[pivot_ptr]=\", dataRead(\"ptr3\"), \"\\n\", \"pivots_are_equal=pivots_are_equal&&(pivot1[pivot_ptr]===pivot2[pivot_ptr])\\n\", \"x=\", dataRead(\"ptr0\"), \"\\n\", \"y=\", dataRead(\"ptr2\"), \"\\n\", \"z=\", dataRead(\"ptr4\"), \"\\n\", dataWrite(\"ptr5\", \"x\"), \"\\n\", dataWrite(\"ptr6\", \"y\"), \"\\n\", dataWrite(\"ptr7\", \"z\")].join(\"\"));\n  } else {\n    code.push([\"pivot1=\", dataRead(toPointer(\"el2\")), \"\\n\", \"pivot2=\", dataRead(toPointer(\"el4\")), \"\\n\", \"pivots_are_equal=pivot1===pivot2\\n\", \"x=\", dataRead(toPointer(\"el1\")), \"\\n\", \"y=\", dataRead(toPointer(\"el3\")), \"\\n\", \"z=\", dataRead(toPointer(\"el5\")), \"\\n\", dataWrite(toPointer(\"index1\"), \"x\"), \"\\n\", dataWrite(toPointer(\"index3\"), \"y\"), \"\\n\", dataWrite(toPointer(\"index5\"), \"z\")].join(\"\"));\n  }\n\n  function moveElement(dst, src) {\n    if (order.length > 1) {\n      cacheLoop([dst, src], false, dataWrite(\"ptr0\", dataRead(\"ptr1\")));\n    } else {\n      code.push(dataWrite(toPointer(dst), dataRead(toPointer(src))));\n    }\n  }\n\n  moveElement(\"index2\", \"left\");\n  moveElement(\"index4\", \"right\");\n\n  function comparePivot(result, ptr, n) {\n    if (order.length > 1) {\n      var lbl = \"__l\" + ++labelCounter;\n      lexicoLoop(lbl, [ptr], true, [result, \"=\", dataRead(\"ptr0\"), \"-pivot\", n, \"[pivot_ptr]\\n\", \"if(\", result, \"!==0){break \", lbl, \"}\"].join(\"\"));\n    } else {\n      code.push([result, \"=\", dataRead(toPointer(ptr)), \"-pivot\", n].join(\"\"));\n    }\n  }\n\n  function swapElements(a, b) {\n    if (order.length > 1) {\n      cacheLoop([a, b], false, [\"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", \"tmp\")].join(\"\"));\n    } else {\n      code.push([\"ptr0=\", toPointer(a), \"\\n\", \"ptr1=\", toPointer(b), \"\\n\", \"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", \"tmp\")].join(\"\"));\n    }\n  }\n\n  function tripleSwap(k, less, great) {\n    if (order.length > 1) {\n      cacheLoop([k, less, great], false, [\"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", dataRead(\"ptr2\")), \"\\n\", dataWrite(\"ptr2\", \"tmp\")].join(\"\"));\n      code.push(\"++\" + less, \"--\" + great);\n    } else {\n      code.push([\"ptr0=\", toPointer(k), \"\\n\", \"ptr1=\", toPointer(less), \"\\n\", \"ptr2=\", toPointer(great), \"\\n\", \"++\", less, \"\\n\", \"--\", great, \"\\n\", \"tmp=\", dataRead(\"ptr0\"), \"\\n\", dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", dataRead(\"ptr2\")), \"\\n\", dataWrite(\"ptr2\", \"tmp\")].join(\"\"));\n    }\n  }\n\n  function swapAndDecrement(k, great) {\n    swapElements(k, great);\n    code.push(\"--\" + great);\n  }\n\n  code.push(\"if(pivots_are_equal){\"); //Pivots are equal case\n\n  code.push(\"for(k=less;k<=great;++k){\");\n  comparePivot(\"comp\", \"k\", 1);\n  code.push(\"if(comp===0){continue}\");\n  code.push(\"if(comp<0){\");\n  code.push(\"if(k!==less){\");\n  swapElements(\"k\", \"less\");\n  code.push(\"}\");\n  code.push(\"++less\");\n  code.push(\"}else{\");\n  code.push(\"while(true){\");\n  comparePivot(\"comp\", \"great\", 1);\n  code.push(\"if(comp>0){\");\n  code.push(\"great--\");\n  code.push(\"}else if(comp<0){\");\n  tripleSwap(\"k\", \"less\", \"great\");\n  code.push(\"break\");\n  code.push(\"}else{\");\n  swapAndDecrement(\"k\", \"great\");\n  code.push(\"break\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}else{\"); //Pivots not equal case\n\n  code.push(\"for(k=less;k<=great;++k){\");\n  comparePivot(\"comp_pivot1\", \"k\", 1);\n  code.push(\"if(comp_pivot1<0){\");\n  code.push(\"if(k!==less){\");\n  swapElements(\"k\", \"less\");\n  code.push(\"}\");\n  code.push(\"++less\");\n  code.push(\"}else{\");\n  comparePivot(\"comp_pivot2\", \"k\", 2);\n  code.push(\"if(comp_pivot2>0){\");\n  code.push(\"while(true){\");\n  comparePivot(\"comp\", \"great\", 2);\n  code.push(\"if(comp>0){\");\n  code.push(\"if(--great<k){break}\");\n  code.push(\"continue\");\n  code.push(\"}else{\");\n  comparePivot(\"comp\", \"great\", 1);\n  code.push(\"if(comp<0){\");\n  tripleSwap(\"k\", \"less\", \"great\");\n  code.push(\"}else{\");\n  swapAndDecrement(\"k\", \"great\");\n  code.push(\"}\");\n  code.push(\"break\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\"); //Move pivots to correct place\n\n  function storePivot(mem_dest, pivot_dest, pivot) {\n    if (order.length > 1) {\n      cacheLoop([mem_dest, pivot_dest], true, [dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\", dataWrite(\"ptr1\", [\"pivot\", pivot, \"[pivot_ptr]\"].join(\"\"))].join(\"\"));\n    } else {\n      code.push(dataWrite(toPointer(mem_dest), dataRead(toPointer(pivot_dest))), dataWrite(toPointer(pivot_dest), \"pivot\" + pivot));\n    }\n  }\n\n  storePivot(\"left\", \"(less-1)\", 1);\n  storePivot(\"right\", \"(great+1)\", 2); //Recursive sort call\n\n  function doSort(left, right) {\n    code.push([\"if((\", right, \"-\", left, \")<=\", INSERTION_SORT_THRESHOLD, \"){\\n\", \"insertionSort(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\", \"}else{\\n\", funcName, \"(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\", \"}\"].join(\"\"));\n  }\n\n  doSort(\"left\", \"(less-2)\");\n  doSort(\"(great+2)\", \"right\"); //If pivots are equal, then early out\n\n  code.push(\"if(pivots_are_equal){\");\n  cleanUp();\n  code.push(\"return\");\n  code.push(\"}\");\n\n  function walkPointer(ptr, pivot, body) {\n    if (order.length > 1) {\n      code.push([\"__l\", ++labelCounter, \":while(true){\"].join(\"\"));\n      cacheLoop([ptr], true, [\"if(\", dataRead(\"ptr0\"), \"!==pivot\", pivot, \"[pivot_ptr]){break __l\", labelCounter, \"}\"].join(\"\"));\n      code.push(body, \"}\");\n    } else {\n      code.push([\"while(\", dataRead(toPointer(ptr)), \"===pivot\", pivot, \"){\", body, \"}\"].join(\"\"));\n    }\n  } //Check bounds\n\n\n  code.push(\"if(less<index1&&great>index5){\");\n  walkPointer(\"less\", 1, \"++less\");\n  walkPointer(\"great\", 2, \"--great\");\n  code.push(\"for(k=less;k<=great;++k){\");\n  comparePivot(\"comp_pivot1\", \"k\", 1);\n  code.push(\"if(comp_pivot1===0){\");\n  code.push(\"if(k!==less){\");\n  swapElements(\"k\", \"less\");\n  code.push(\"}\");\n  code.push(\"++less\");\n  code.push(\"}else{\");\n  comparePivot(\"comp_pivot2\", \"k\", 2);\n  code.push(\"if(comp_pivot2===0){\");\n  code.push(\"while(true){\");\n  comparePivot(\"comp\", \"great\", 2);\n  code.push(\"if(comp===0){\");\n  code.push(\"if(--great<k){break}\");\n  code.push(\"continue\");\n  code.push(\"}else{\");\n  comparePivot(\"comp\", \"great\", 1);\n  code.push(\"if(comp<0){\");\n  tripleSwap(\"k\", \"less\", \"great\");\n  code.push(\"}else{\");\n  swapAndDecrement(\"k\", \"great\");\n  code.push(\"}\");\n  code.push(\"break\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\");\n  code.push(\"}\"); //Clean up and do a final sorting pass\n\n  cleanUp();\n  doSort(\"less\", \"great\"); //Close off main loop\n\n  code.push(\"}return \" + funcName); //Compile and link\n\n  if (order.length > 1 && allocator) {\n    var compiled = new Function(\"insertionSort\", \"malloc\", \"free\", code.join(\"\\n\"));\n    return compiled(insertionSort, allocator[0], allocator[1]);\n  }\n\n  var compiled = new Function(\"insertionSort\", code.join(\"\\n\"));\n  return compiled(insertionSort);\n}\n\nfunction compileSort(order, dtype) {\n  var code = [\"'use strict'\"];\n  var funcName = [\"ndarraySortWrapper\", order.join(\"d\"), dtype].join(\"\");\n  var funcArgs = [\"array\"];\n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\")); //Unpack local variables from array\n\n  var vars = [\"data=array.data,offset=array.offset|0,shape=array.shape,stride=array.stride\"];\n\n  for (var i = 0; i < order.length; ++i) {\n    vars.push([\"s\", i, \"=stride[\", i, \"]|0,n\", i, \"=shape[\", i, \"]|0\"].join(\"\"));\n  }\n\n  var scratch_stride = new Array(order.length);\n  var nprod = [];\n\n  for (var i = 0; i < order.length; ++i) {\n    var k = order[i];\n\n    if (k === 0) {\n      continue;\n    }\n\n    if (nprod.length === 0) {\n      scratch_stride[k] = \"1\";\n    } else {\n      scratch_stride[k] = nprod.join(\"*\");\n    }\n\n    nprod.push(\"n\" + k);\n  }\n\n  var p = -1,\n      q = -1;\n\n  for (var i = 0; i < order.length; ++i) {\n    var j = order[i];\n\n    if (j !== 0) {\n      if (p > 0) {\n        vars.push([\"d\", j, \"=s\", j, \"-d\", p, \"*n\", p].join(\"\"));\n      } else {\n        vars.push([\"d\", j, \"=s\", j].join(\"\"));\n      }\n\n      p = j;\n    }\n\n    var k = order.length - 1 - i;\n\n    if (k !== 0) {\n      if (q > 0) {\n        vars.push([\"e\", k, \"=s\", k, \"-e\", q, \"*n\", q, \",f\", k, \"=\", scratch_stride[k], \"-f\", q, \"*n\", q].join(\"\"));\n      } else {\n        vars.push([\"e\", k, \"=s\", k, \",f\", k, \"=\", scratch_stride[k]].join(\"\"));\n      }\n\n      q = k;\n    }\n  } //Declare local variables\n\n\n  code.push(\"var \" + vars.join(\",\")); //Create arguments for subroutine\n\n  var sortArgs = [\"0\", \"n0-1\", \"data\", \"offset\"].concat(shapeArgs(order.length)); //Call main sorting routine\n\n  code.push([\"if(n0<=\", INSERTION_SORT_THRESHOLD, \"){\", \"insertionSort(\", sortArgs.join(\",\"), \")}else{\", \"quickSort(\", sortArgs.join(\",\"), \")}\"].join(\"\")); //Return\n\n  code.push(\"}return \" + funcName); //Link everything together\n\n  var result = new Function(\"insertionSort\", \"quickSort\", code.join(\"\\n\"));\n  var insertionSort = createInsertionSort(order, dtype);\n  var quickSort = createQuickSort(order, dtype, insertionSort);\n  return result(insertionSort, quickSort);\n}\n\nmodule.exports = compileSort;","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/ndarray-sort/lib/compile_sort.js"],"names":["pool","require","INSERTION_SORT_THRESHOLD","getMallocFree","dtype","mallocUint8","freeUint8","mallocUint16","freeUint16","mallocUint32","freeUint32","mallocInt8","freeInt8","mallocInt16","freeInt16","mallocInt32","freeInt32","mallocFloat","freeFloat","mallocDouble","freeDouble","shapeArgs","dimension","args","i","push","createInsertionSort","order","code","funcName","join","funcArgs","concat","length","allocator","vars","scratch_shape","dataRead","ptr","dataWrite","v","j","result","Function","createQuickSort","insertionSort","labelCounter","ele_size","toPointer","cacheLoop","ptrs","usePivot","body","lexicoLoop","label","cleanUp","compareSwap","a_id","b_id","a","b","lbl","moveElement","dst","src","comparePivot","n","swapElements","tripleSwap","k","less","great","swapAndDecrement","storePivot","mem_dest","pivot_dest","pivot","doSort","left","right","walkPointer","compiled","compileSort","scratch_stride","Array","nprod","p","q","sortArgs","quickSort","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAlB;;AAEA,IAAIC,wBAAwB,GAAG,EAA/B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,UAAOA,KAAP;AACE,SAAK,OAAL;AACE,aAAO,CAACJ,IAAI,CAACK,WAAN,EAAmBL,IAAI,CAACM,SAAxB,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,CAACN,IAAI,CAACO,YAAN,EAAoBP,IAAI,CAACQ,UAAzB,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,CAACR,IAAI,CAACS,YAAN,EAAoBT,IAAI,CAACU,UAAzB,CAAP;;AACF,SAAK,MAAL;AACE,aAAO,CAACV,IAAI,CAACW,UAAN,EAAkBX,IAAI,CAACY,QAAvB,CAAP;;AACF,SAAK,OAAL;AACE,aAAO,CAACZ,IAAI,CAACa,WAAN,EAAmBb,IAAI,CAACc,SAAxB,CAAP;;AACF,SAAK,OAAL;AACE,aAAO,CAACd,IAAI,CAACe,WAAN,EAAmBf,IAAI,CAACgB,SAAxB,CAAP;;AACF,SAAK,SAAL;AACE,aAAO,CAAChB,IAAI,CAACiB,WAAN,EAAmBjB,IAAI,CAACkB,SAAxB,CAAP;;AACF,SAAK,SAAL;AACE,aAAO,CAAClB,IAAI,CAACmB,YAAN,EAAoBnB,IAAI,CAACoB,UAAzB,CAAP;;AACF;AACE,aAAO,IAAP;AAlBJ;AAoBD;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,SAAf,EAA0B,EAAEE,CAA5B,EAA+B;AAC7BD,IAAAA,IAAI,CAACE,IAAL,CAAU,MAAID,CAAd;AACD;;AACD,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,SAAf,EAA0B,EAAEE,CAA5B,EAA+B;AAC7BD,IAAAA,IAAI,CAACE,IAAL,CAAU,MAAID,CAAd;AACD;;AACD,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,SAAf,EAA0B,EAAEE,CAA5B,EAA+B;AAC7BD,IAAAA,IAAI,CAACE,IAAL,CAAU,MAAID,CAAd;AACD;;AACD,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,SAAf,EAA0B,EAAEE,CAA5B,EAA+B;AAC7BD,IAAAA,IAAI,CAACE,IAAL,CAAU,MAAID,CAAd;AACD;;AACD,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,SAAf,EAA0B,EAAEE,CAA5B,EAA+B;AAC7BD,IAAAA,IAAI,CAACE,IAAL,CAAU,MAAID,CAAd;AACD;;AACD,SAAOD,IAAP;AACD;;AAED,SAASG,mBAAT,CAA6BC,KAA7B,EAAoCvB,KAApC,EAA2C;AAEzC,MAAIwB,IAAI,GAAG,CAAC,cAAD,CAAX;AACA,MAAIC,QAAQ,GAAG,CAAC,sBAAD,EAAyBF,KAAK,CAACG,IAAN,CAAW,GAAX,CAAzB,EAA0C1B,KAA1C,EAAiD0B,IAAjD,CAAsD,EAAtD,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,QAA1B,EAAqCC,MAArC,CAA4CX,SAAS,CAACM,KAAK,CAACM,MAAP,CAArD,CAAf;AACA,MAAIC,SAAS,GAAG/B,aAAa,CAACC,KAAD,CAA7B;AAEA,MAAI+B,IAAI,GAAG,CAAE,6BAAF,CAAX;;AAEA,MAAGR,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnB,QAAIG,aAAa,GAAG,EAApB;;AACA,SAAI,IAAIZ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChCW,MAAAA,IAAI,CAACV,IAAL,CAAU,MAAID,CAAd;AACAY,MAAAA,aAAa,CAACX,IAAd,CAAmB,MAAID,CAAvB;AACD;;AACD,QAAGU,SAAH,EAAc;AACZC,MAAAA,IAAI,CAACV,IAAL,CAAU,oBAAoBW,aAAa,CAACN,IAAd,CAAmB,GAAnB,CAApB,GAA8C,GAAxD;AACD,KAFD,MAEO;AACLK,MAAAA,IAAI,CAACV,IAAL,CAAU,uBAAqBW,aAAa,CAACN,IAAd,CAAmB,GAAnB,CAArB,GAA+C,GAAzD;AACD;;AACDK,IAAAA,IAAI,CAACV,IAAL,CAAU,MAAV,EAAiB,MAAjB,EAAwB,GAAxB,EAA4B,GAA5B;AACD,GAZD,MAYO;AACLU,IAAAA,IAAI,CAACV,IAAL,CAAU,SAAV;AACD;;AAED,WAASY,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,QAAGlC,KAAK,KAAK,SAAb,EAAwB;AACtB,aAAO,CAAC,WAAD,EAAckC,GAAd,EAAmB,GAAnB,EAAwBR,IAAxB,CAA6B,EAA7B,CAAP;AACD;;AACD,WAAO,CAAC,OAAD,EAASQ,GAAT,EAAa,GAAb,EAAkBR,IAAlB,CAAuB,EAAvB,CAAP;AACD;;AAED,WAASS,SAAT,CAAmBD,GAAnB,EAAwBE,CAAxB,EAA2B;AACzB,QAAGpC,KAAK,KAAK,SAAb,EAAwB;AACtB,aAAO,CAAC,WAAD,EAAckC,GAAd,EAAmB,GAAnB,EAAwBE,CAAxB,EAA2B,GAA3B,EAAgCV,IAAhC,CAAqC,EAArC,CAAP;AACD;;AACD,WAAO,CAAC,OAAD,EAASQ,GAAT,EAAa,IAAb,EAAkBE,CAAlB,EAAqBV,IAArB,CAA0B,EAA1B,CAAP;AACD,GArCwC,CAuCzC;;;AACAF,EAAAA,IAAI,CAACH,IAAL,CACE,CAAC,WAAD,EAAcI,QAAd,EAAwB,GAAxB,EAA6BE,QAAQ,CAACD,IAAT,CAAc,GAAd,CAA7B,EAAiD,QAAjD,EAA2DK,IAAI,CAACL,IAAL,CAAU,GAAV,CAA3D,EAA2EA,IAA3E,CAAgF,EAAhF,CADF,EAEI,6BAFJ,EAGM,aAHN,EAIM,UAJN;;AAOA,MAAGH,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AAEnB;AACAL,IAAAA,IAAI,CAACH,IAAL,CAAU,iBAAV;;AACA,SAAI,IAAID,CAAC,GAACG,KAAK,CAACM,MAAN,GAAa,CAAvB,EAA0BT,CAAC,IAAE,CAA7B,EAAgC,EAAEA,CAAlC,EAAqC;AACnC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASgB,CAAT,EAAW,MAAX,EAAkBA,CAAlB,EAAoB,IAApB,EAAyBA,CAAzB,EAA2B,MAA3B,EAAkCA,CAAlC,EAAoC,IAApC,EAA0CX,IAA1C,CAA+C,EAA/C,CAAV;AACD;;AACDF,IAAAA,IAAI,CAACH,IAAL,CAAU,kBAAV,EAA6BY,QAAQ,CAAC,MAAD,CAArC;;AACA,SAAI,IAAIb,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,YAAUgB,CAApB,EAAsB,GAAtB;AACD,KAlBkB,CAqBnB;;;AACAb,IAAAA,IAAI,CAACH,IAAL,CAAU,sBAAV,EACU,QADV,EAEU,cAFV;;AAGA,SAAI,IAAID,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,UAAGA,CAAC,KAAK,CAAT,EAAY;AACVI,QAAAA,IAAI,CAACH,IAAL,CAAU,MAAV;AACD;;AACDG,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASD,CAAT,EAAW,MAAX,EAAkBA,CAAlB,EAAoB,IAApB,EAAyBA,CAAzB,EAA2B,MAA3B,EAAkCA,CAAlC,EAAoC,IAApC,EAA0CM,IAA1C,CAA+C,EAA/C,CAAV;AACD;;AACDF,IAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,IAAD,EAAOY,QAAQ,CAAC,MAAD,CAAf,EAAwB,2DAAxB,EAAqFP,IAArF,CAA0F,EAA1F,CAAV;;AACA,SAAI,IAAIN,CAAC,GAACG,KAAK,CAACM,MAAN,GAAa,CAAvB,EAA0BT,CAAC,IAAE,CAA7B,EAAgC,EAAEA,CAAlC,EAAqC;AACnCI,MAAAA,IAAI,CAACH,IAAL,CACE,YAAUD,CADZ,EAEE,YAAUA,CAFZ,EAGE,GAHF;AAID,KArCkB,CAuCnB;;;AACAI,IAAAA,IAAI,CAACH,IAAL,CAAU,wBAAV;;AACA,SAAI,IAAID,CAAC,GAACG,KAAK,CAACM,MAAN,GAAa,CAAvB,EAA0BT,CAAC,IAAE,CAA7B,EAAgC,EAAEA,CAAlC,EAAqC;AACnC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASgB,CAAT,EAAW,MAAX,EAAkBA,CAAlB,EAAoB,IAApB,EAAyBA,CAAzB,EAA2B,MAA3B,EAAkCA,CAAlC,EAAoC,IAApC,EAA0CX,IAA1C,CAA+C,EAA/C,CAAV;AACD;;AACDF,IAAAA,IAAI,CAACH,IAAL,CAAUc,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAAnB;;AACA,SAAI,IAAIb,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,SAAD,EAAWgB,CAAX,EAAa,UAAb,EAAwBA,CAAxB,EAA2BX,IAA3B,CAAgC,EAAhC,CAAV,EAA8C,GAA9C;AACD,KAvDkB,CAyDnB;;;AACAF,IAAAA,IAAI,CAACH,IAAL,CAAU,aAAV,EA1DmB,CA4DnB;;AACAG,IAAAA,IAAI,CAACH,IAAL,CAAU,kBAAV;;AACA,SAAI,IAAID,CAAC,GAACG,KAAK,CAACM,MAAN,GAAa,CAAvB,EAA0BT,CAAC,IAAE,CAA7B,EAAgC,EAAEA,CAAlC,EAAqC;AACnC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASgB,CAAT,EAAW,MAAX,EAAkBA,CAAlB,EAAoB,IAApB,EAAyBA,CAAzB,EAA2B,MAA3B,EAAkCA,CAAlC,EAAoC,IAApC,EAA0CX,IAA1C,CAA+C,EAA/C,CAAV;AACD;;AACDF,IAAAA,IAAI,CAACH,IAAL,CAAUc,SAAS,CAAC,MAAD,EAAS,iBAAT,CAAnB;;AACA,SAAI,IAAIf,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,YAAUgB,CAApB,EAAsB,GAAtB;AACD;AACF,GA7ED,MA6EO;AACLb,IAAAA,IAAI,CAACH,IAAL,CAAU,aAAaY,QAAQ,CAAC,KAAD,CAA/B,EACU,wBAAsBA,QAAQ,CAAC,SAAD,CAA9B,GAA0C,aADpD,EAEYE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,SAAD,CAAjB,CAFrB,EAGY,UAHZ,EAIU,GAJV,EAKUE,SAAS,CAAC,MAAD,EAAS,SAAT,CALnB;AAMD,GAnIwC,CAqIzC;;;AACAX,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;;AACA,MAAGE,KAAK,CAACM,MAAN,GAAe,CAAf,IAAoBC,SAAvB,EAAkC;AAChCN,IAAAA,IAAI,CAACH,IAAL,CAAU,eAAV;AACD;;AACDG,EAAAA,IAAI,CAACH,IAAL,CAAU,cAAcI,QAAxB,EA1IyC,CA4IzC;;AACA,MAAGK,SAAH,EAAc;AACZ,QAAIQ,MAAM,GAAG,IAAIC,QAAJ,CAAa,QAAb,EAAuB,MAAvB,EAA+Bf,IAAI,CAACE,IAAL,CAAU,IAAV,CAA/B,CAAb;AACA,WAAOY,MAAM,CAACR,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAAb;AACD,GAHD,MAGO;AACL,QAAIQ,MAAM,GAAG,IAAIC,QAAJ,CAAaf,IAAI,CAACE,IAAL,CAAU,IAAV,CAAb,CAAb;AACA,WAAOY,MAAM,EAAb;AACD;AACF;;AAED,SAASE,eAAT,CAAyBjB,KAAzB,EAAgCvB,KAAhC,EAAuCyC,aAAvC,EAAsD;AACpD,MAAIjB,IAAI,GAAG,CAAE,cAAF,CAAX;AACA,MAAIC,QAAQ,GAAG,CAAC,kBAAD,EAAqBF,KAAK,CAACG,IAAN,CAAW,GAAX,CAArB,EAAsC1B,KAAtC,EAA6C0B,IAA7C,CAAkD,EAAlD,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,QAA1B,EAAqCC,MAArC,CAA4CX,SAAS,CAACM,KAAK,CAACM,MAAP,CAArD,CAAf;AACA,MAAIC,SAAS,GAAG/B,aAAa,CAACC,KAAD,CAA7B;AACA,MAAI0C,YAAY,GAAC,CAAjB;AAEAlB,EAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,WAAD,EAAcI,QAAd,EAAwB,GAAxB,EAA6BE,QAAQ,CAACD,IAAT,CAAc,GAAd,CAA7B,EAAiD,IAAjD,EAAuDA,IAAvD,CAA4D,EAA5D,CAAV;AAEA,MAAIK,IAAI,GAAG,CACT,4BADS,EAET,mBAFS,EAGT,oBAHS,EAIT,wBAJS,EAKT,qBALS,EAMT,qBANS,EAOT,YAPS,EAQT,YARS,EAST,YATS,EAUT,YAVS,EAWT,YAXS,EAYT,aAZS,EAaT,eAbS,EAcT,uBAdS,EAeT,KAfS,EAgBT,MAhBS,EAiBT,GAjBS,EAkBT,GAlBS,EAmBT,GAnBS,EAoBT,GApBS,EAqBT,MArBS,EAsBT,MAtBS,EAuBT,MAvBS,EAwBT,eAxBS,EAyBT,eAzBS,EA0BT,QA1BS,CAAX;;AA6BA,MAAGR,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnB,QAAIc,QAAQ,GAAG,EAAf;;AACA,SAAI,IAAIvB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChCuB,MAAAA,QAAQ,CAACtB,IAAT,CAAc,MAAID,CAAlB;AACAW,MAAAA,IAAI,CAACV,IAAL,CAAU,MAAID,CAAd;AACD;;AACD,SAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBW,MAAAA,IAAI,CAACV,IAAL,CAAU,UAAQD,CAAlB;AACD;;AACDW,IAAAA,IAAI,CAACV,IAAL,CACE,MADF,EAEE,MAFF,EAGE,MAHF,EAIE,MAJF,EAKE,MALF,EAME,WANF,EAOE,WAPF,EAQE,iBAAesB,QAAQ,CAACjB,IAAT,CAAc,GAAd,CARjB;;AASA,QAAGI,SAAH,EAAc;AACZC,MAAAA,IAAI,CAACV,IAAL,CAAU,4BAAV,EACU,4BADV;AAED,KAHD,MAGO;AACLU,MAAAA,IAAI,CAACV,IAAL,CAAU,6DAAV;AACD;AACF,GAxBD,MAwBO;AACLU,IAAAA,IAAI,CAACV,IAAL,CAAU,QAAV,EAAoB,QAApB;AACD,GAhEmD,CAkEpD;;;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,SAASU,IAAI,CAACL,IAAL,CAAU,GAAV,CAAnB;;AAEA,WAASkB,SAAT,CAAmBR,CAAnB,EAAsB;AACpB,WAAO,CAAC,UAAD,EAAYA,CAAZ,EAAc,MAAd,EAAsBV,IAAtB,CAA2B,EAA3B,CAAP;AACD;;AAED,WAASO,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,QAAGlC,KAAK,KAAK,SAAb,EAAwB;AACtB,aAAO,CAAC,WAAD,EAAckC,GAAd,EAAmB,GAAnB,EAAwBR,IAAxB,CAA6B,EAA7B,CAAP;AACD;;AACD,WAAO,CAAC,OAAD,EAASQ,GAAT,EAAa,GAAb,EAAkBR,IAAlB,CAAuB,EAAvB,CAAP;AACD;;AAED,WAASS,SAAT,CAAmBD,GAAnB,EAAwBE,CAAxB,EAA2B;AACzB,QAAGpC,KAAK,KAAK,SAAb,EAAwB;AACtB,aAAO,CAAC,WAAD,EAAckC,GAAd,EAAmB,GAAnB,EAAwBE,CAAxB,EAA2B,GAA3B,EAAgCV,IAAhC,CAAqC,EAArC,CAAP;AACD;;AACD,WAAO,CAAC,OAAD,EAASQ,GAAT,EAAa,IAAb,EAAkBE,CAAlB,EAAqBV,IAArB,CAA0B,EAA1B,CAAP;AACD;;AAED,WAASmB,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,IAAnC,EAAyC;AACvC,QAAGF,IAAI,CAACjB,MAAL,KAAgB,CAAnB,EAAsB;AACpBL,MAAAA,IAAI,CAACH,IAAL,CAAU,UAAQuB,SAAS,CAACE,IAAI,CAAC,CAAD,CAAL,CAA3B;AACD,KAFD,MAEO;AACL,WAAI,IAAI1B,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0B,IAAI,CAACjB,MAApB,EAA4B,EAAET,CAA9B,EAAiC;AAC/BI,QAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASD,CAAT,EAAW,MAAX,EAAkB0B,IAAI,CAAC1B,CAAD,CAAtB,EAA2BM,IAA3B,CAAgC,EAAhC,CAAV;AACD;AACF;;AACD,QAAGqB,QAAH,EAAa;AACXvB,MAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACD;;AACDG,IAAAA,IAAI,CAACH,IAAL,CAAU,kBAAV;;AACA,SAAI,IAAID,CAAC,GAACG,KAAK,CAACM,MAAN,GAAa,CAAvB,EAA0BT,CAAC,IAAE,CAA7B,EAAgC,EAAEA,CAAlC,EAAqC;AACnC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASgB,CAAT,EAAW,MAAX,EAAkBA,CAAlB,EAAoB,IAApB,EAAyBA,CAAzB,EAA2B,MAA3B,EAAkCA,CAAlC,EAAoC,IAApC,EAA0CX,IAA1C,CAA+C,EAA/C,CAAV;AACD;;AACD,QAAGoB,IAAI,CAACjB,MAAL,GAAc,CAAjB,EAAoB;AAClB,WAAI,IAAIT,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0B,IAAI,CAACjB,MAApB,EAA4B,EAAET,CAA9B,EAAiC;AAC/BI,QAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,KAAD,EAAOD,CAAP,EAAS,QAAT,EAAkBA,CAAlB,EAAoB,YAApB,EAAkCM,IAAlC,CAAuC,EAAvC,CAAV;AACD;AACF;;AACDF,IAAAA,IAAI,CAACH,IAAL,CAAU2B,IAAV;;AACA,QAAGD,QAAH,EAAa;AACXvB,MAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACD;;AACD,SAAI,IAAID,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,UAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,UAAGiB,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACD,UAAGS,IAAI,CAACjB,MAAL,GAAY,CAAf,EAAkB;AAChBL,QAAAA,IAAI,CAACH,IAAL,CAAU,iBAAegB,CAAzB;AACD,OAFD,MAEO;AACLb,QAAAA,IAAI,CAACH,IAAL,CAAU,YAAUgB,CAApB;AACD;;AACDb,MAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACD;AACF;;AAED,WAAS4B,UAAT,CAAoBC,KAApB,EAA2BJ,IAA3B,EAAiCC,QAAjC,EAA2CC,IAA3C,EAAiD;AAC/C,QAAGF,IAAI,CAACjB,MAAL,KAAgB,CAAnB,EAAsB;AACpBL,MAAAA,IAAI,CAACH,IAAL,CAAU,UAAQuB,SAAS,CAACE,IAAI,CAAC,CAAD,CAAL,CAA3B;AACD,KAFD,MAEO;AACL,WAAI,IAAI1B,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0B,IAAI,CAACjB,MAApB,EAA4B,EAAET,CAA9B,EAAiC;AAC/BI,QAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASD,CAAT,EAAW,MAAX,EAAkB0B,IAAI,CAAC1B,CAAD,CAAtB,EAA2BM,IAA3B,CAAgC,EAAhC,CAAV;AACD;;AACDF,MAAAA,IAAI,CAACH,IAAL,CAAU,kBAAV;AACD;;AACD,QAAG0B,QAAH,EAAa;AACXvB,MAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACD;;AACD,QAAG6B,KAAH,EAAU;AACR1B,MAAAA,IAAI,CAACH,IAAL,CAAU6B,KAAK,GAAC,GAAhB;AACD;;AACD,SAAI,IAAI9B,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChCI,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,OAAD,EAASD,CAAT,EAAW,MAAX,EAAkBA,CAAlB,EAAoB,IAApB,EAAyBA,CAAzB,EAA2B,MAA3B,EAAkCA,CAAlC,EAAoC,IAApC,EAA0CM,IAA1C,CAA+C,EAA/C,CAAV;AACD;;AACD,QAAGoB,IAAI,CAACjB,MAAL,GAAc,CAAjB,EAAoB;AAClB,WAAI,IAAIT,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0B,IAAI,CAACjB,MAApB,EAA4B,EAAET,CAA9B,EAAiC;AAC/BI,QAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,KAAD,EAAOD,CAAP,EAAS,QAAT,EAAkBA,CAAlB,EAAoB,YAApB,EAAkCM,IAAlC,CAAuC,EAAvC,CAAV;AACD;AACF;;AACDF,IAAAA,IAAI,CAACH,IAAL,CAAU2B,IAAV;;AACA,SAAI,IAAI5B,CAAC,GAACG,KAAK,CAACM,MAAN,GAAa,CAAvB,EAA0BT,CAAC,IAAE,CAA7B,EAAgC,EAAEA,CAAlC,EAAqC;AACnC,UAAG2B,QAAH,EAAa;AACXvB,QAAAA,IAAI,CAACH,IAAL,CAAU,iBAAeD,CAAzB;AACD;;AACD,UAAG0B,IAAI,CAACjB,MAAL,GAAc,CAAjB,EAAoB;AAClBL,QAAAA,IAAI,CAACH,IAAL,CAAU,iBAAeD,CAAzB;AACD,OAFD,MAEO;AACLI,QAAAA,IAAI,CAACH,IAAL,CAAU,YAAUD,CAApB;AACD;;AACDI,MAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACD;AACF;;AAED,WAAS8B,OAAT,GAAmB;AACjB,QAAG5B,KAAK,CAACM,MAAN,GAAe,CAAf,IAAoBC,SAAvB,EAAkC;AAChCN,MAAAA,IAAI,CAACH,IAAL,CAAU,cAAV,EAA0B,cAA1B;AACD;AACF;;AAED,WAAS+B,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC/B,QAAIC,CAAC,GAAG,OAAKF,IAAb;AACA,QAAIG,CAAC,GAAG,OAAKF,IAAb;;AACA,QAAG/B,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnB,UAAI4B,GAAG,GAAG,QAAS,EAAEf,YAArB;AACAO,MAAAA,UAAU,CAACQ,GAAD,EAAM,CAACF,CAAD,EAAIC,CAAJ,CAAN,EAAc,KAAd,EAAqB,CAC7B,OAD6B,EACrBvB,QAAQ,CAAC,MAAD,CADa,EACJ,GADI,EACAA,QAAQ,CAAC,MAAD,CADR,EACiB,IADjB,EAE7B,kBAF6B,EAETsB,CAFS,EAEN,GAFM,EAEFA,CAFE,EAEA,GAFA,EAEIC,CAFJ,EAEM,GAFN,EAEWA,CAFX,EAEa,cAFb,EAE6BC,GAF7B,EAEiC,KAFjC,EAG7B,mBAH6B,EAGRA,GAHQ,EAGH,GAHG,EAI7B/B,IAJ6B,CAIxB,EAJwB,CAArB,CAAV;AAKD,KAPD,MAOO;AACLF,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,KAAD,EAAQY,QAAQ,CAACW,SAAS,CAACW,CAAD,CAAV,CAAhB,EAAgC,GAAhC,EAAqCtB,QAAQ,CAACW,SAAS,CAACY,CAAD,CAAV,CAA7C,EAA6D,SAA7D,EAAwED,CAAxE,EAA2E,GAA3E,EAA+EA,CAA/E,EAAiF,GAAjF,EAAqFC,CAArF,EAAuF,GAAvF,EAA4FA,CAA5F,EAA8F,QAA9F,EAAwG9B,IAAxG,CAA6G,EAA7G,CAAV;AACD;AACF;;AAED0B,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACAA,EAAAA,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;;AAEA,MAAG7B,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnBgB,IAAAA,SAAS,CAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,QAApC,EAA8C,QAA9C,EAAwD,QAAxD,CAAD,EAAoE,IAApE,EAA0E,CACjF,oBADiF,EAC5DZ,QAAQ,CAAC,MAAD,CADoD,EAC3C,IAD2C,EAEjF,oBAFiF,EAE5DA,QAAQ,CAAC,MAAD,CAFoD,EAE3C,IAF2C,EAGjF,8EAHiF,EAIjF,IAJiF,EAI5EA,QAAQ,CAAC,MAAD,CAJoE,EAI3D,IAJ2D,EAKjF,IALiF,EAK5EA,QAAQ,CAAC,MAAD,CALoE,EAK3D,IAL2D,EAMjF,IANiF,EAM5EA,QAAQ,CAAC,MAAD,CANoE,EAM3D,IAN2D,EAOjFE,SAAS,CAAC,MAAD,EAAS,GAAT,CAPwE,EAO1D,IAP0D,EAQjFA,SAAS,CAAC,MAAD,EAAS,GAAT,CARwE,EAQ1D,IAR0D,EASjFA,SAAS,CAAC,MAAD,EAAS,GAAT,CATwE,EAUjFT,IAViF,CAU5E,EAV4E,CAA1E,CAAT;AAWD,GAZD,MAYO;AACLF,IAAAA,IAAI,CAACH,IAAL,CAAU,CACR,SADQ,EACGY,QAAQ,CAACW,SAAS,CAAC,KAAD,CAAV,CADX,EAC+B,IAD/B,EAER,SAFQ,EAEGX,QAAQ,CAACW,SAAS,CAAC,KAAD,CAAV,CAFX,EAE+B,IAF/B,EAGR,oCAHQ,EAIR,IAJQ,EAIFX,QAAQ,CAACW,SAAS,CAAC,KAAD,CAAV,CAJN,EAI0B,IAJ1B,EAKR,IALQ,EAKFX,QAAQ,CAACW,SAAS,CAAC,KAAD,CAAV,CALN,EAK0B,IAL1B,EAMR,IANQ,EAMFX,QAAQ,CAACW,SAAS,CAAC,KAAD,CAAV,CANN,EAM0B,IAN1B,EAORT,SAAS,CAACS,SAAS,CAAC,QAAD,CAAV,EAAsB,GAAtB,CAPD,EAO6B,IAP7B,EAQRT,SAAS,CAACS,SAAS,CAAC,QAAD,CAAV,EAAsB,GAAtB,CARD,EAQ6B,IAR7B,EASRT,SAAS,CAACS,SAAS,CAAC,QAAD,CAAV,EAAsB,GAAtB,CATD,EAURlB,IAVQ,CAUH,EAVG,CAAV;AAWD;;AAGD,WAASgC,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+B;AAC7B,QAAGrC,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnBgB,MAAAA,SAAS,CAAC,CAACc,GAAD,EAAMC,GAAN,CAAD,EAAa,KAAb,EACPzB,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CADF,CAAT;AAGD,KAJD,MAIO;AACLT,MAAAA,IAAI,CAACH,IAAL,CAAUc,SAAS,CAACS,SAAS,CAACe,GAAD,CAAV,EAAiB1B,QAAQ,CAACW,SAAS,CAACgB,GAAD,CAAV,CAAzB,CAAnB;AACD;AACF;;AAEDF,EAAAA,WAAW,CAAC,QAAD,EAAW,MAAX,CAAX;AACAA,EAAAA,WAAW,CAAC,QAAD,EAAW,OAAX,CAAX;;AAEA,WAASG,YAAT,CAAsBvB,MAAtB,EAA8BJ,GAA9B,EAAmC4B,CAAnC,EAAsC;AACpC,QAAGvC,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnB,UAAI4B,GAAG,GAAG,QAAS,EAAEf,YAArB;AACAO,MAAAA,UAAU,CAACQ,GAAD,EAAM,CAACvB,GAAD,CAAN,EAAa,IAAb,EAAmB,CAC3BI,MAD2B,EACpB,GADoB,EAChBL,QAAQ,CAAC,MAAD,CADQ,EACC,QADD,EACU6B,CADV,EACY,eADZ,EAE3B,KAF2B,EAErBxB,MAFqB,EAEd,cAFc,EAEEmB,GAFF,EAEO,GAFP,EAG3B/B,IAH2B,CAGtB,EAHsB,CAAnB,CAAV;AAID,KAND,MAMO;AACLF,MAAAA,IAAI,CAACH,IAAL,CAAU,CAACiB,MAAD,EAAQ,GAAR,EAAaL,QAAQ,CAACW,SAAS,CAACV,GAAD,CAAV,CAArB,EAAuC,QAAvC,EAAiD4B,CAAjD,EAAoDpC,IAApD,CAAyD,EAAzD,CAAV;AACD;AACF;;AAED,WAASqC,YAAT,CAAsBR,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,QAAGjC,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnBgB,MAAAA,SAAS,CAAC,CAACU,CAAD,EAAGC,CAAH,CAAD,EAAO,KAAP,EAAa,CACpB,MADoB,EACbvB,QAAQ,CAAC,MAAD,CADK,EACI,IADJ,EAEpBE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAFW,EAEgB,IAFhB,EAGpBE,SAAS,CAAC,MAAD,EAAS,KAAT,CAHW,EAIpBT,IAJoB,CAIf,EAJe,CAAb,CAAT;AAKD,KAND,MAMO;AACLF,MAAAA,IAAI,CAACH,IAAL,CAAU,CACR,OADQ,EACAuB,SAAS,CAACW,CAAD,CADT,EACa,IADb,EAER,OAFQ,EAEAX,SAAS,CAACY,CAAD,CAFT,EAEa,IAFb,EAGR,MAHQ,EAGDvB,QAAQ,CAAC,MAAD,CAHP,EAGgB,IAHhB,EAIRE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAJD,EAI4B,IAJ5B,EAKRE,SAAS,CAAC,MAAD,EAAS,KAAT,CALD,EAMRT,IANQ,CAMH,EANG,CAAV;AAOD;AACF;;AAED,WAASsC,UAAT,CAAoBC,CAApB,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoC;AAClC,QAAG5C,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnBgB,MAAAA,SAAS,CAAC,CAACoB,CAAD,EAAGC,IAAH,EAAQC,KAAR,CAAD,EAAiB,KAAjB,EAAwB,CAC/B,MAD+B,EACxBlC,QAAQ,CAAC,MAAD,CADgB,EACP,IADO,EAE/BE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAFsB,EAEK,IAFL,EAG/BE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAHsB,EAGK,IAHL,EAI/BE,SAAS,CAAC,MAAD,EAAS,KAAT,CAJsB,EAK/BT,IAL+B,CAK1B,EAL0B,CAAxB,CAAT;AAMAF,MAAAA,IAAI,CAACH,IAAL,CAAU,OAAK6C,IAAf,EAAqB,OAAKC,KAA1B;AACD,KARD,MAQO;AACL3C,MAAAA,IAAI,CAACH,IAAL,CAAU,CACR,OADQ,EACAuB,SAAS,CAACqB,CAAD,CADT,EACa,IADb,EAER,OAFQ,EAEArB,SAAS,CAACsB,IAAD,CAFT,EAEgB,IAFhB,EAGR,OAHQ,EAGAtB,SAAS,CAACuB,KAAD,CAHT,EAGiB,IAHjB,EAIR,IAJQ,EAIHD,IAJG,EAIE,IAJF,EAKR,IALQ,EAKHC,KALG,EAKG,IALH,EAMR,MANQ,EAMAlC,QAAQ,CAAC,MAAD,CANR,EAMkB,IANlB,EAORE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAPD,EAO6B,IAP7B,EAQRE,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CARD,EAQ6B,IAR7B,EASRE,SAAS,CAAC,MAAD,EAAS,KAAT,CATD,EAURT,IAVQ,CAUH,EAVG,CAAV;AAWD;AACF;;AAED,WAAS0C,gBAAT,CAA0BH,CAA1B,EAA6BE,KAA7B,EAAoC;AAClCJ,IAAAA,YAAY,CAACE,CAAD,EAAIE,KAAJ,CAAZ;AACA3C,IAAAA,IAAI,CAACH,IAAL,CAAU,OAAK8C,KAAf;AACD;;AAED3C,EAAAA,IAAI,CAACH,IAAL,CAAU,uBAAV,EAxSoD,CAySlD;;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,2BAAV;AACEwC,EAAAA,YAAY,CAAC,MAAD,EAAS,GAAT,EAAc,CAAd,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,wBAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,eAAV;AACE0C,EAAAA,YAAY,CAAC,GAAD,EAAM,MAAN,CAAZ;AACFvC,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,cAAV;AACEwC,EAAAA,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,SAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,mBAAV;AACE2C,EAAAA,UAAU,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,CAAV;AACAxC,EAAAA,IAAI,CAACH,IAAL,CAAU,OAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACE+C,EAAAA,gBAAgB,CAAC,GAAD,EAAM,OAAN,CAAhB;AACA5C,EAAAA,IAAI,CAACH,IAAL,CAAU,OAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV,EAjUoD,CAkUlD;;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,2BAAV;AACEwC,EAAAA,YAAY,CAAC,aAAD,EAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,oBAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,eAAV;AACE0C,EAAAA,YAAY,CAAC,GAAD,EAAM,MAAN,CAAZ;AACFvC,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACEwC,EAAAA,YAAY,CAAC,aAAD,EAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,oBAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,cAAV;AACEwC,EAAAA,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,sBAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,UAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACEwC,EAAAA,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACE2C,EAAAA,UAAU,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,CAAV;AACFxC,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACE+C,EAAAA,gBAAgB,CAAC,GAAD,EAAM,OAAN,CAAhB;AACF5C,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,OAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV,EA/VoD,CAiWpD;;AACA,WAASgD,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,KAA1C,EAAiD;AAC/C,QAAGjD,KAAK,CAACM,MAAN,GAAa,CAAhB,EAAmB;AACjBgB,MAAAA,SAAS,CAAC,CAACyB,QAAD,EAAWC,UAAX,CAAD,EAAyB,IAAzB,EAA+B,CACtCpC,SAAS,CAAC,MAAD,EAASF,QAAQ,CAAC,MAAD,CAAjB,CAD6B,EACD,IADC,EAEtCE,SAAS,CAAC,MAAD,EAAS,CAAC,OAAD,EAASqC,KAAT,EAAe,aAAf,EAA8B9C,IAA9B,CAAmC,EAAnC,CAAT,CAF6B,EAGtCA,IAHsC,CAGjC,EAHiC,CAA/B,CAAT;AAID,KALD,MAKO;AACLF,MAAAA,IAAI,CAACH,IAAL,CACIc,SAAS,CAACS,SAAS,CAAC0B,QAAD,CAAV,EAAsBrC,QAAQ,CAACW,SAAS,CAAC2B,UAAD,CAAV,CAA9B,CADb,EAEIpC,SAAS,CAACS,SAAS,CAAC2B,UAAD,CAAV,EAAwB,UAAQC,KAAhC,CAFb;AAGD;AACF;;AAEDH,EAAAA,UAAU,CAAC,MAAD,EAAS,UAAT,EAAqB,CAArB,CAAV;AACAA,EAAAA,UAAU,CAAC,OAAD,EAAU,WAAV,EAAuB,CAAvB,CAAV,CAhXoD,CAkXpD;;AACA,WAASI,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3BnD,IAAAA,IAAI,CAACH,IAAL,CAAU,CACR,MADQ,EACDsD,KADC,EACK,GADL,EACSD,IADT,EACc,KADd,EACoB5E,wBADpB,EAC6C,MAD7C,EAEN,gBAFM,EAEY4E,IAFZ,EAEkB,GAFlB,EAEuBC,KAFvB,EAE8B,eAF9B,EAE+C1D,SAAS,CAACM,KAAK,CAACM,MAAP,CAAT,CAAwBH,IAAxB,CAA6B,GAA7B,CAF/C,EAEkF,KAFlF,EAGR,UAHQ,EAIND,QAJM,EAII,GAJJ,EAISiD,IAJT,EAIe,GAJf,EAIoBC,KAJpB,EAI2B,eAJ3B,EAI4C1D,SAAS,CAACM,KAAK,CAACM,MAAP,CAAT,CAAwBH,IAAxB,CAA6B,GAA7B,CAJ5C,EAI+E,KAJ/E,EAKR,GALQ,EAMRA,IANQ,CAMH,EANG,CAAV;AAOD;;AACD+C,EAAAA,MAAM,CAAC,MAAD,EAAS,UAAT,CAAN;AACAA,EAAAA,MAAM,CAAC,WAAD,EAAc,OAAd,CAAN,CA7XoD,CA+XpD;;AACAjD,EAAAA,IAAI,CAACH,IAAL,CAAU,uBAAV;AACE8B,EAAAA,OAAO;AACP3B,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;;AAEA,WAASuD,WAAT,CAAqB1C,GAArB,EAA0BsC,KAA1B,EAAiCxB,IAAjC,EAAuC;AACrC,QAAGzB,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACnBL,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,KAAD,EAAO,EAAEqB,YAAT,EAAsB,eAAtB,EAAuChB,IAAvC,CAA4C,EAA5C,CAAV;AACAmB,MAAAA,SAAS,CAAC,CAACX,GAAD,CAAD,EAAQ,IAAR,EAAc,CACrB,KADqB,EACdD,QAAQ,CAAC,MAAD,CADM,EACI,UADJ,EACgBuC,KADhB,EACuB,wBADvB,EACiD9B,YADjD,EAC+D,GAD/D,EAErBhB,IAFqB,CAEhB,EAFgB,CAAd,CAAT;AAGAF,MAAAA,IAAI,CAACH,IAAL,CAAU2B,IAAV,EAAgB,GAAhB;AACD,KAND,MAMO;AACLxB,MAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,QAAD,EAAWY,QAAQ,CAACW,SAAS,CAACV,GAAD,CAAV,CAAnB,EAAqC,UAArC,EAAiDsC,KAAjD,EAAwD,IAAxD,EAA8DxB,IAA9D,EAAoE,GAApE,EAAyEtB,IAAzE,CAA8E,EAA9E,CAAV;AACD;AACF,GA/YmD,CAiZpD;;;AACAF,EAAAA,IAAI,CAACH,IAAL,CAAU,gCAAV;AAEEuD,EAAAA,WAAW,CAAC,MAAD,EAAS,CAAT,EAAY,QAAZ,CAAX;AACAA,EAAAA,WAAW,CAAC,OAAD,EAAU,CAAV,EAAa,SAAb,CAAX;AAEApD,EAAAA,IAAI,CAACH,IAAL,CAAU,2BAAV;AACEwC,EAAAA,YAAY,CAAC,aAAD,EAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,sBAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,eAAV;AACE0C,EAAAA,YAAY,CAAC,GAAD,EAAM,MAAN,CAAZ;AACFvC,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACEwC,EAAAA,YAAY,CAAC,aAAD,EAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,sBAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,cAAV;AACEwC,EAAAA,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,eAAV;AACEG,EAAAA,IAAI,CAACH,IAAL,CAAU,sBAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,UAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACEwC,EAAAA,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAAZ;AACArC,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAV;AACE2C,EAAAA,UAAU,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,CAAV;AACFxC,EAAAA,IAAI,CAACH,IAAL,CAAU,QAAV;AACE+C,EAAAA,gBAAgB,CAAC,GAAD,EAAM,OAAN,CAAhB;AACF5C,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACAG,EAAAA,IAAI,CAACH,IAAL,CAAU,OAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV;AACFG,EAAAA,IAAI,CAACH,IAAL,CAAU,GAAV,EAnboD,CAqbpD;;AACA8B,EAAAA,OAAO;AACPsB,EAAAA,MAAM,CAAC,MAAD,EAAS,OAAT,CAAN,CAvboD,CAybpD;;AACAjD,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAaI,QAAvB,EA1boD,CA4bpD;;AACA,MAAGF,KAAK,CAACM,MAAN,GAAe,CAAf,IAAoBC,SAAvB,EAAkC;AAChC,QAAI+C,QAAQ,GAAG,IAAItC,QAAJ,CAAa,eAAb,EAA8B,QAA9B,EAAwC,MAAxC,EAAgDf,IAAI,CAACE,IAAL,CAAU,IAAV,CAAhD,CAAf;AACA,WAAOmD,QAAQ,CAACpC,aAAD,EAAgBX,SAAS,CAAC,CAAD,CAAzB,EAA8BA,SAAS,CAAC,CAAD,CAAvC,CAAf;AACD;;AACD,MAAI+C,QAAQ,GAAG,IAAItC,QAAJ,CAAa,eAAb,EAA8Bf,IAAI,CAACE,IAAL,CAAU,IAAV,CAA9B,CAAf;AACA,SAAOmD,QAAQ,CAACpC,aAAD,CAAf;AACD;;AAED,SAASqC,WAAT,CAAqBvD,KAArB,EAA4BvB,KAA5B,EAAmC;AACjC,MAAIwB,IAAI,GAAG,CAAC,cAAD,CAAX;AACA,MAAIC,QAAQ,GAAG,CAAC,oBAAD,EAAuBF,KAAK,CAACG,IAAN,CAAW,GAAX,CAAvB,EAAwC1B,KAAxC,EAA+C0B,IAA/C,CAAoD,EAApD,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAE,OAAF,CAAf;AAEAH,EAAAA,IAAI,CAACH,IAAL,CAAU,CAAC,WAAD,EAAcI,QAAd,EAAwB,GAAxB,EAA6BE,QAAQ,CAACD,IAAT,CAAc,GAAd,CAA7B,EAAiD,IAAjD,EAAuDA,IAAvD,CAA4D,EAA5D,CAAV,EALiC,CAOjC;;AACA,MAAIK,IAAI,GAAG,CAAC,6EAAD,CAAX;;AACA,OAAI,IAAIX,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChCW,IAAAA,IAAI,CAACV,IAAL,CAAU,CAAC,GAAD,EAAKD,CAAL,EAAO,UAAP,EAAkBA,CAAlB,EAAoB,OAApB,EAA4BA,CAA5B,EAA8B,SAA9B,EAAwCA,CAAxC,EAA0C,KAA1C,EAAiDM,IAAjD,CAAsD,EAAtD,CAAV;AACD;;AAED,MAAIqD,cAAc,GAAG,IAAIC,KAAJ,CAAUzD,KAAK,CAACM,MAAhB,CAArB;AACA,MAAIoD,KAAK,GAAG,EAAZ;;AACA,OAAI,IAAI7D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,QAAI6C,CAAC,GAAG1C,KAAK,CAACH,CAAD,CAAb;;AACA,QAAG6C,CAAC,KAAK,CAAT,EAAY;AACV;AACD;;AACD,QAAGgB,KAAK,CAACpD,MAAN,KAAiB,CAApB,EAAuB;AACrBkD,MAAAA,cAAc,CAACd,CAAD,CAAd,GAAoB,GAApB;AACD,KAFD,MAEO;AACLc,MAAAA,cAAc,CAACd,CAAD,CAAd,GAAoBgB,KAAK,CAACvD,IAAN,CAAW,GAAX,CAApB;AACD;;AACDuD,IAAAA,KAAK,CAAC5D,IAAN,CAAW,MAAI4C,CAAf;AACD;;AAED,MAAIiB,CAAC,GAAG,CAAC,CAAT;AAAA,MAAYC,CAAC,GAAG,CAAC,CAAjB;;AACA,OAAI,IAAI/D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,KAAK,CAACM,MAArB,EAA6B,EAAET,CAA/B,EAAkC;AAChC,QAAIiB,CAAC,GAAGd,KAAK,CAACH,CAAD,CAAb;;AACA,QAAGiB,CAAC,KAAK,CAAT,EAAY;AACV,UAAG6C,CAAC,GAAG,CAAP,EAAU;AACRnD,QAAAA,IAAI,CAACV,IAAL,CAAU,CAAC,GAAD,EAAKgB,CAAL,EAAO,IAAP,EAAYA,CAAZ,EAAc,IAAd,EAAmB6C,CAAnB,EAAqB,IAArB,EAA0BA,CAA1B,EAA6BxD,IAA7B,CAAkC,EAAlC,CAAV;AACD,OAFD,MAEO;AACLK,QAAAA,IAAI,CAACV,IAAL,CAAU,CAAC,GAAD,EAAKgB,CAAL,EAAO,IAAP,EAAYA,CAAZ,EAAeX,IAAf,CAAoB,EAApB,CAAV;AACD;;AACDwD,MAAAA,CAAC,GAAG7C,CAAJ;AACD;;AACD,QAAI4B,CAAC,GAAG1C,KAAK,CAACM,MAAN,GAAa,CAAb,GAAeT,CAAvB;;AACA,QAAG6C,CAAC,KAAK,CAAT,EAAY;AACV,UAAGkB,CAAC,GAAG,CAAP,EAAU;AACRpD,QAAAA,IAAI,CAACV,IAAL,CAAU,CAAC,GAAD,EAAK4C,CAAL,EAAO,IAAP,EAAYA,CAAZ,EAAc,IAAd,EAAmBkB,CAAnB,EAAqB,IAArB,EAA0BA,CAA1B,EACA,IADA,EACKlB,CADL,EACO,GADP,EACWc,cAAc,CAACd,CAAD,CADzB,EAC6B,IAD7B,EACkCkB,CADlC,EACoC,IADpC,EACyCA,CADzC,EAC4CzD,IAD5C,CACiD,EADjD,CAAV;AAED,OAHD,MAGO;AACLK,QAAAA,IAAI,CAACV,IAAL,CAAU,CAAC,GAAD,EAAK4C,CAAL,EAAO,IAAP,EAAYA,CAAZ,EAAc,IAAd,EAAmBA,CAAnB,EAAqB,GAArB,EAAyBc,cAAc,CAACd,CAAD,CAAvC,EAA4CvC,IAA5C,CAAiD,EAAjD,CAAV;AACD;;AACDyD,MAAAA,CAAC,GAAGlB,CAAJ;AACD;AACF,GAjDgC,CAmDjC;;;AACAzC,EAAAA,IAAI,CAACH,IAAL,CAAU,SAASU,IAAI,CAACL,IAAL,CAAU,GAAV,CAAnB,EApDiC,CAsDjC;;AACA,MAAI0D,QAAQ,GAAG,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,EAAsB,QAAtB,EAAgCxD,MAAhC,CAAuCX,SAAS,CAACM,KAAK,CAACM,MAAP,CAAhD,CAAf,CAvDiC,CAyDjC;;AACAL,EAAAA,IAAI,CAACH,IAAL,CAAU,CACR,SADQ,EACEvB,wBADF,EAC2B,IAD3B,EAEN,gBAFM,EAEYsF,QAAQ,CAAC1D,IAAT,CAAc,GAAd,CAFZ,EAEgC,SAFhC,EAGN,YAHM,EAGQ0D,QAAQ,CAAC1D,IAAT,CAAc,GAAd,CAHR,EAIR,IAJQ,EAKRA,IALQ,CAKH,EALG,CAAV,EA1DiC,CAiEjC;;AACAF,EAAAA,IAAI,CAACH,IAAL,CAAU,aAAaI,QAAvB,EAlEiC,CAoEjC;;AACA,MAAIa,MAAM,GAAG,IAAIC,QAAJ,CAAa,eAAb,EAA8B,WAA9B,EAA2Cf,IAAI,CAACE,IAAL,CAAU,IAAV,CAA3C,CAAb;AACA,MAAIe,aAAa,GAAGnB,mBAAmB,CAACC,KAAD,EAAQvB,KAAR,CAAvC;AACA,MAAIqF,SAAS,GAAG7C,eAAe,CAACjB,KAAD,EAAQvB,KAAR,EAAeyC,aAAf,CAA/B;AACA,SAAOH,MAAM,CAACG,aAAD,EAAgB4C,SAAhB,CAAb;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["\"use strict\"\n\nvar pool = require(\"typedarray-pool\")\n\nvar INSERTION_SORT_THRESHOLD = 32\n\nfunction getMallocFree(dtype) {\n  switch(dtype) {\n    case \"uint8\":\n      return [pool.mallocUint8, pool.freeUint8]\n    case \"uint16\":\n      return [pool.mallocUint16, pool.freeUint16]\n    case \"uint32\":\n      return [pool.mallocUint32, pool.freeUint32]\n    case \"int8\":\n      return [pool.mallocInt8, pool.freeInt8]\n    case \"int16\":\n      return [pool.mallocInt16, pool.freeInt16]\n    case \"int32\":\n      return [pool.mallocInt32, pool.freeInt32]\n    case \"float32\":\n      return [pool.mallocFloat, pool.freeFloat]\n    case \"float64\":\n      return [pool.mallocDouble, pool.freeDouble]\n    default:\n      return null\n  }\n}\n\nfunction shapeArgs(dimension) {\n  var args = []\n  for(var i=0; i<dimension; ++i) {\n    args.push(\"s\"+i)\n  }\n  for(var i=0; i<dimension; ++i) {\n    args.push(\"n\"+i)\n  }\n  for(var i=1; i<dimension; ++i) {\n    args.push(\"d\"+i)\n  }\n  for(var i=1; i<dimension; ++i) {\n    args.push(\"e\"+i)\n  }\n  for(var i=1; i<dimension; ++i) {\n    args.push(\"f\"+i)\n  }\n  return args\n}\n\nfunction createInsertionSort(order, dtype) {\n\n  var code = [\"'use strict'\"]\n  var funcName = [\"ndarrayInsertionSort\", order.join(\"d\"), dtype].join(\"\")\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\" ].concat(shapeArgs(order.length))\n  var allocator = getMallocFree(dtype)\n  \n  var vars = [ \"i,j,cptr,ptr=left*s0+offset\" ]\n  \n  if(order.length > 1) {\n    var scratch_shape = []\n    for(var i=1; i<order.length; ++i) {\n      vars.push(\"i\"+i)\n      scratch_shape.push(\"n\"+i)\n    }\n    if(allocator) {\n      vars.push(\"scratch=malloc(\" + scratch_shape.join(\"*\") + \")\")\n    } else {\n      vars.push(\"scratch=new Array(\"+scratch_shape.join(\"*\") + \")\")\n    }\n    vars.push(\"dptr\",\"sptr\",\"a\",\"b\")\n  } else {\n    vars.push(\"scratch\")\n  }\n  \n  function dataRead(ptr) {\n    if(dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]\"].join(\"\")\n  }\n  \n  function dataWrite(ptr, v) {\n    if(dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]=\",v].join(\"\")\n  }\n  \n  //Create function header\n  code.push(\n    [\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){var \", vars.join(\",\")].join(\"\"),\n      \"for(i=left+1;i<=right;++i){\",\n        \"j=i;ptr+=s0\",\n        \"cptr=ptr\")\n  \n  \n  if(order.length > 1) {\n  \n    //Copy data into scratch\n    code.push(\"dptr=0;sptr=ptr\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    code.push(\"scratch[dptr++]=\",dataRead(\"sptr\"))\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push(\"sptr+=d\"+j,\"}\")\n    }\n\n    \n    //Compare items in outer loop\n    code.push(\"__g:while(j-->left){\",\n              \"dptr=0\",\n              \"sptr=cptr-s0\")\n    for(var i=1; i<order.length; ++i) {\n      if(i === 1) {\n        code.push(\"__l:\")\n      }\n      code.push([\"for(i\",i,\"=0;i\",i,\"<n\",i,\";++i\",i,\"){\"].join(\"\"))\n    }\n    code.push([\"a=\", dataRead(\"sptr\"),\"\\nb=scratch[dptr]\\nif(a<b){break __g}\\nif(a>b){break __l}\"].join(\"\"))\n    for(var i=order.length-1; i>=1; --i) {\n      code.push(\n        \"sptr+=e\"+i,\n        \"dptr+=f\"+i,\n        \"}\")\n    }\n    \n    //Copy data back\n    code.push(\"dptr=cptr;sptr=cptr-s0\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    code.push(dataWrite(\"dptr\", dataRead(\"sptr\")))\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"dptr+=d\",j,\";sptr+=d\",j].join(\"\"),\"}\")\n    }\n    \n    //Close while loop\n    code.push(\"cptr-=s0\\n}\")\n\n    //Copy scratch into cptr\n    code.push(\"dptr=cptr;sptr=0\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    code.push(dataWrite(\"dptr\", \"scratch[sptr++]\"))\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push(\"dptr+=d\"+j,\"}\")\n    }\n  } else {\n    code.push(\"scratch=\" + dataRead(\"ptr\"),\n              \"while((j-->left)&&(\"+dataRead(\"cptr-s0\")+\">scratch)){\",\n                dataWrite(\"cptr\", dataRead(\"cptr-s0\")),\n                \"cptr-=s0\",\n              \"}\",\n              dataWrite(\"cptr\", \"scratch\"))\n  }\n  \n  //Close outer loop body\n  code.push(\"}\")\n  if(order.length > 1 && allocator) {\n    code.push(\"free(scratch)\")\n  }\n  code.push(\"} return \" + funcName)\n  \n  //Compile and link function\n  if(allocator) {\n    var result = new Function(\"malloc\", \"free\", code.join(\"\\n\"))\n    return result(allocator[0], allocator[1])\n  } else {\n    var result = new Function(code.join(\"\\n\"))\n    return result()\n  }\n}\n\nfunction createQuickSort(order, dtype, insertionSort) {\n  var code = [ \"'use strict'\" ]\n  var funcName = [\"ndarrayQuickSort\", order.join(\"d\"), dtype].join(\"\")\n  var funcArgs = [\"left\", \"right\", \"data\", \"offset\" ].concat(shapeArgs(order.length))\n  var allocator = getMallocFree(dtype)\n  var labelCounter=0\n  \n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"))\n  \n  var vars = [\n    \"sixth=((right-left+1)/6)|0\",\n    \"index1=left+sixth\",\n    \"index5=right-sixth\",\n    \"index3=(left+right)>>1\",\n    \"index2=index3-sixth\",\n    \"index4=index3+sixth\",\n    \"el1=index1\",\n    \"el2=index2\",\n    \"el3=index3\",\n    \"el4=index4\",\n    \"el5=index5\",\n    \"less=left+1\",\n    \"great=right-1\",\n    \"pivots_are_equal=true\",\n    \"tmp\",\n    \"tmp0\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"k\",\n    \"ptr0\",\n    \"ptr1\",\n    \"ptr2\",\n    \"comp_pivot1=0\",\n    \"comp_pivot2=0\",\n    \"comp=0\"\n  ]\n  \n  if(order.length > 1) {\n    var ele_size = []\n    for(var i=1; i<order.length; ++i) {\n      ele_size.push(\"n\"+i)\n      vars.push(\"i\"+i)\n    }\n    for(var i=0; i<8; ++i) {\n      vars.push(\"b_ptr\"+i)\n    }\n    vars.push(\n      \"ptr3\",\n      \"ptr4\",\n      \"ptr5\",\n      \"ptr6\",\n      \"ptr7\",\n      \"pivot_ptr\",\n      \"ptr_shift\",\n      \"elementSize=\"+ele_size.join(\"*\"))\n    if(allocator) {\n      vars.push(\"pivot1=malloc(elementSize)\",\n                \"pivot2=malloc(elementSize)\")\n    } else {\n      vars.push(\"pivot1=new Array(elementSize),pivot2=new Array(elementSize)\")\n    }\n  } else {\n    vars.push(\"pivot1\", \"pivot2\")\n  }\n  \n  //Initialize local variables\n  code.push(\"var \" + vars.join(\",\"))\n  \n  function toPointer(v) {\n    return [\"(offset+\",v,\"*s0)\"].join(\"\")\n  }\n  \n  function dataRead(ptr) {\n    if(dtype === \"generic\") {\n      return [\"data.get(\", ptr, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]\"].join(\"\")\n  }\n  \n  function dataWrite(ptr, v) {\n    if(dtype === \"generic\") {\n      return [\"data.set(\", ptr, \",\", v, \")\"].join(\"\")\n    }\n    return [\"data[\",ptr,\"]=\",v].join(\"\")\n  }\n  \n  function cacheLoop(ptrs, usePivot, body) {\n    if(ptrs.length === 1) {\n      code.push(\"ptr0=\"+toPointer(ptrs[0]))\n    } else {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"b_ptr\",i,\"=s0*\",ptrs[i]].join(\"\"))\n      }\n    }\n    if(usePivot) {\n      code.push(\"pivot_ptr=0\")\n    }\n    code.push(\"ptr_shift=offset\")\n    for(var i=order.length-1; i>=0; --i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      code.push([\"for(i\",j,\"=0;i\",j,\"<n\",j,\";++i\",j,\"){\"].join(\"\"))\n    }\n    if(ptrs.length > 1) {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"ptr\",i,\"=b_ptr\",i,\"+ptr_shift\"].join(\"\"))\n      }\n    }\n    code.push(body)\n    if(usePivot) {\n      code.push(\"++pivot_ptr\")\n    }\n    for(var i=0; i<order.length; ++i) {\n      var j = order[i]\n      if(j === 0) {\n        continue\n      }\n      if(ptrs.length>1) {\n        code.push(\"ptr_shift+=d\"+j)\n      } else {\n        code.push(\"ptr0+=d\"+j)\n      }\n      code.push(\"}\")\n    }\n  }\n  \n  function lexicoLoop(label, ptrs, usePivot, body) {\n    if(ptrs.length === 1) {\n      code.push(\"ptr0=\"+toPointer(ptrs[0]))\n    } else {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"b_ptr\",i,\"=s0*\",ptrs[i]].join(\"\"))\n      }\n      code.push(\"ptr_shift=offset\")\n    }\n    if(usePivot) {\n      code.push(\"pivot_ptr=0\")\n    }\n    if(label) {\n      code.push(label+\":\")\n    }\n    for(var i=1; i<order.length; ++i) {\n      code.push([\"for(i\",i,\"=0;i\",i,\"<n\",i,\";++i\",i,\"){\"].join(\"\"))\n    }\n    if(ptrs.length > 1) {\n      for(var i=0; i<ptrs.length; ++i) {\n        code.push([\"ptr\",i,\"=b_ptr\",i,\"+ptr_shift\"].join(\"\"))\n      }\n    }\n    code.push(body)\n    for(var i=order.length-1; i>=1; --i) {\n      if(usePivot) {\n        code.push(\"pivot_ptr+=f\"+i)\n      }\n      if(ptrs.length > 1) {\n        code.push(\"ptr_shift+=e\"+i)\n      } else {\n        code.push(\"ptr0+=e\"+i)\n      }\n      code.push(\"}\")\n    }\n  }\n  \n  function cleanUp() {\n    if(order.length > 1 && allocator) {\n      code.push(\"free(pivot1)\", \"free(pivot2)\")\n    }\n  }\n  \n  function compareSwap(a_id, b_id) {\n    var a = \"el\"+a_id\n    var b = \"el\"+b_id\n    if(order.length > 1) {\n      var lbl = \"__l\" + (++labelCounter)\n      lexicoLoop(lbl, [a, b], false, [\n        \"comp=\",dataRead(\"ptr0\"),\"-\",dataRead(\"ptr1\"),\"\\n\",\n        \"if(comp>0){tmp0=\", a, \";\",a,\"=\",b,\";\", b,\"=tmp0;break \", lbl,\"}\\n\",\n        \"if(comp<0){break \", lbl, \"}\"\n      ].join(\"\"))\n    } else {\n      code.push([\"if(\", dataRead(toPointer(a)), \">\", dataRead(toPointer(b)), \"){tmp0=\", a, \";\",a,\"=\",b,\";\", b,\"=tmp0}\"].join(\"\"))\n    }\n  }\n  \n  compareSwap(1, 2)\n  compareSwap(4, 5)\n  compareSwap(1, 3)\n  compareSwap(2, 3)\n  compareSwap(1, 4)\n  compareSwap(3, 4)\n  compareSwap(2, 5)\n  compareSwap(2, 3)\n  compareSwap(4, 5)\n  \n  if(order.length > 1) {\n    cacheLoop([\"el1\", \"el2\", \"el3\", \"el4\", \"el5\", \"index1\", \"index3\", \"index5\"], true, [\n      \"pivot1[pivot_ptr]=\",dataRead(\"ptr1\"),\"\\n\",\n      \"pivot2[pivot_ptr]=\",dataRead(\"ptr3\"),\"\\n\",\n      \"pivots_are_equal=pivots_are_equal&&(pivot1[pivot_ptr]===pivot2[pivot_ptr])\\n\",\n      \"x=\",dataRead(\"ptr0\"),\"\\n\",\n      \"y=\",dataRead(\"ptr2\"),\"\\n\",\n      \"z=\",dataRead(\"ptr4\"),\"\\n\",\n      dataWrite(\"ptr5\", \"x\"),\"\\n\",\n      dataWrite(\"ptr6\", \"y\"),\"\\n\",\n      dataWrite(\"ptr7\", \"z\")\n    ].join(\"\"))\n  } else {\n    code.push([\n      \"pivot1=\", dataRead(toPointer(\"el2\")), \"\\n\",\n      \"pivot2=\", dataRead(toPointer(\"el4\")), \"\\n\",\n      \"pivots_are_equal=pivot1===pivot2\\n\",\n      \"x=\", dataRead(toPointer(\"el1\")), \"\\n\",\n      \"y=\", dataRead(toPointer(\"el3\")), \"\\n\",\n      \"z=\", dataRead(toPointer(\"el5\")), \"\\n\",\n      dataWrite(toPointer(\"index1\"), \"x\"), \"\\n\",\n      dataWrite(toPointer(\"index3\"), \"y\"), \"\\n\",\n      dataWrite(toPointer(\"index5\"), \"z\")\n    ].join(\"\"))\n  }\n  \n\n  function moveElement(dst, src) {\n    if(order.length > 1) {\n      cacheLoop([dst, src], false,\n        dataWrite(\"ptr0\", dataRead(\"ptr1\"))\n      )\n    } else {\n      code.push(dataWrite(toPointer(dst), dataRead(toPointer(src))))\n    }\n  }\n  \n  moveElement(\"index2\", \"left\")\n  moveElement(\"index4\", \"right\")\n  \n  function comparePivot(result, ptr, n) {\n    if(order.length > 1) {\n      var lbl = \"__l\" + (++labelCounter)\n      lexicoLoop(lbl, [ptr], true, [\n        result,\"=\",dataRead(\"ptr0\"),\"-pivot\",n,\"[pivot_ptr]\\n\",\n        \"if(\",result,\"!==0){break \", lbl, \"}\"\n      ].join(\"\"))\n    } else {\n      code.push([result,\"=\", dataRead(toPointer(ptr)), \"-pivot\", n].join(\"\"))\n    }\n  }\n  \n  function swapElements(a, b) {\n    if(order.length > 1) {\n      cacheLoop([a,b],false,[\n        \"tmp=\",dataRead(\"ptr0\"),\"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")),\"\\n\",\n        dataWrite(\"ptr1\", \"tmp\")\n      ].join(\"\"))\n    } else {\n      code.push([\n        \"ptr0=\",toPointer(a),\"\\n\",\n        \"ptr1=\",toPointer(b),\"\\n\",\n        \"tmp=\",dataRead(\"ptr0\"),\"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")),\"\\n\",\n        dataWrite(\"ptr1\", \"tmp\")\n      ].join(\"\"))\n    }\n  }\n  \n  function tripleSwap(k, less, great) {\n    if(order.length > 1) {\n      cacheLoop([k,less,great], false, [\n        \"tmp=\",dataRead(\"ptr0\"),\"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")),\"\\n\",\n        dataWrite(\"ptr1\", dataRead(\"ptr2\")),\"\\n\",\n        dataWrite(\"ptr2\", \"tmp\")\n      ].join(\"\"))\n      code.push(\"++\"+less, \"--\"+great)\n    } else {\n      code.push([\n        \"ptr0=\",toPointer(k),\"\\n\",\n        \"ptr1=\",toPointer(less),\"\\n\",\n        \"ptr2=\",toPointer(great),\"\\n\",\n        \"++\",less,\"\\n\",\n        \"--\",great,\"\\n\",\n        \"tmp=\", dataRead(\"ptr0\"), \"\\n\",\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\",\n        dataWrite(\"ptr1\", dataRead(\"ptr2\")), \"\\n\",\n        dataWrite(\"ptr2\", \"tmp\")\n      ].join(\"\"))\n    }\n  }\n  \n  function swapAndDecrement(k, great) {\n    swapElements(k, great)\n    code.push(\"--\"+great)\n  }\n    \n  code.push(\"if(pivots_are_equal){\")\n    //Pivots are equal case\n    code.push(\"for(k=less;k<=great;++k){\")\n      comparePivot(\"comp\", \"k\", 1)\n      code.push(\"if(comp===0){continue}\")\n      code.push(\"if(comp<0){\")\n        code.push(\"if(k!==less){\")\n          swapElements(\"k\", \"less\")\n        code.push(\"}\")\n        code.push(\"++less\")\n      code.push(\"}else{\")\n        code.push(\"while(true){\")\n          comparePivot(\"comp\", \"great\", 1)\n          code.push(\"if(comp>0){\")\n            code.push(\"great--\")\n          code.push(\"}else if(comp<0){\")\n            tripleSwap(\"k\", \"less\", \"great\")\n            code.push(\"break\")\n          code.push(\"}else{\")\n            swapAndDecrement(\"k\", \"great\")\n            code.push(\"break\")\n          code.push(\"}\")\n        code.push(\"}\")\n      code.push(\"}\")\n    code.push(\"}\")\n  code.push(\"}else{\")\n    //Pivots not equal case\n    code.push(\"for(k=less;k<=great;++k){\")\n      comparePivot(\"comp_pivot1\", \"k\", 1)\n      code.push(\"if(comp_pivot1<0){\")\n        code.push(\"if(k!==less){\")\n          swapElements(\"k\", \"less\")\n        code.push(\"}\")\n        code.push(\"++less\")\n      code.push(\"}else{\")\n        comparePivot(\"comp_pivot2\", \"k\", 2)\n        code.push(\"if(comp_pivot2>0){\")\n          code.push(\"while(true){\")\n            comparePivot(\"comp\", \"great\", 2)\n            code.push(\"if(comp>0){\")\n              code.push(\"if(--great<k){break}\")\n              code.push(\"continue\")\n            code.push(\"}else{\")\n              comparePivot(\"comp\", \"great\", 1)\n              code.push(\"if(comp<0){\")\n                tripleSwap(\"k\", \"less\", \"great\")\n              code.push(\"}else{\")\n                swapAndDecrement(\"k\", \"great\")\n              code.push(\"}\")\n              code.push(\"break\")\n            code.push(\"}\")\n          code.push(\"}\")\n        code.push(\"}\")\n      code.push(\"}\")\n    code.push(\"}\")\n  code.push(\"}\")\n  \n  //Move pivots to correct place\n  function storePivot(mem_dest, pivot_dest, pivot) {\n    if(order.length>1) {\n      cacheLoop([mem_dest, pivot_dest], true, [\n        dataWrite(\"ptr0\", dataRead(\"ptr1\")), \"\\n\",\n        dataWrite(\"ptr1\", [\"pivot\",pivot,\"[pivot_ptr]\"].join(\"\"))\n      ].join(\"\"))\n    } else {\n      code.push(\n          dataWrite(toPointer(mem_dest), dataRead(toPointer(pivot_dest))),\n          dataWrite(toPointer(pivot_dest), \"pivot\"+pivot))\n    }\n  }\n  \n  storePivot(\"left\", \"(less-1)\", 1)\n  storePivot(\"right\", \"(great+1)\", 2)\n\n  //Recursive sort call\n  function doSort(left, right) {\n    code.push([\n      \"if((\",right,\"-\",left,\")<=\",INSERTION_SORT_THRESHOLD,\"){\\n\",\n        \"insertionSort(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\",\n      \"}else{\\n\",\n        funcName, \"(\", left, \",\", right, \",data,offset,\", shapeArgs(order.length).join(\",\"), \")\\n\",\n      \"}\"\n    ].join(\"\"))\n  }\n  doSort(\"left\", \"(less-2)\")\n  doSort(\"(great+2)\", \"right\")\n  \n  //If pivots are equal, then early out\n  code.push(\"if(pivots_are_equal){\")\n    cleanUp()\n    code.push(\"return\")\n  code.push(\"}\")\n  \n  function walkPointer(ptr, pivot, body) {\n    if(order.length > 1) {\n      code.push([\"__l\",++labelCounter,\":while(true){\"].join(\"\"))\n      cacheLoop([ptr], true, [\n        \"if(\", dataRead(\"ptr0\"), \"!==pivot\", pivot, \"[pivot_ptr]){break __l\", labelCounter, \"}\"\n      ].join(\"\"))\n      code.push(body, \"}\")\n    } else {\n      code.push([\"while(\", dataRead(toPointer(ptr)), \"===pivot\", pivot, \"){\", body, \"}\"].join(\"\"))\n    }\n  }\n  \n  //Check bounds\n  code.push(\"if(less<index1&&great>index5){\")\n  \n    walkPointer(\"less\", 1, \"++less\")\n    walkPointer(\"great\", 2, \"--great\")\n  \n    code.push(\"for(k=less;k<=great;++k){\")\n      comparePivot(\"comp_pivot1\", \"k\", 1)\n      code.push(\"if(comp_pivot1===0){\")\n        code.push(\"if(k!==less){\")\n          swapElements(\"k\", \"less\")\n        code.push(\"}\")\n        code.push(\"++less\")\n      code.push(\"}else{\")\n        comparePivot(\"comp_pivot2\", \"k\", 2)\n        code.push(\"if(comp_pivot2===0){\")\n          code.push(\"while(true){\")\n            comparePivot(\"comp\", \"great\", 2)\n            code.push(\"if(comp===0){\")\n              code.push(\"if(--great<k){break}\")\n              code.push(\"continue\")\n            code.push(\"}else{\")\n              comparePivot(\"comp\", \"great\", 1)\n              code.push(\"if(comp<0){\")\n                tripleSwap(\"k\", \"less\", \"great\")\n              code.push(\"}else{\")\n                swapAndDecrement(\"k\", \"great\")\n              code.push(\"}\")\n              code.push(\"break\")\n            code.push(\"}\")\n          code.push(\"}\")\n        code.push(\"}\")\n      code.push(\"}\")\n    code.push(\"}\")\n  code.push(\"}\")\n  \n  //Clean up and do a final sorting pass\n  cleanUp()\n  doSort(\"less\", \"great\")\n \n  //Close off main loop\n  code.push(\"}return \" + funcName)\n  \n  //Compile and link\n  if(order.length > 1 && allocator) {\n    var compiled = new Function(\"insertionSort\", \"malloc\", \"free\", code.join(\"\\n\"))\n    return compiled(insertionSort, allocator[0], allocator[1])\n  }\n  var compiled = new Function(\"insertionSort\", code.join(\"\\n\"))\n  return compiled(insertionSort)\n}\n\nfunction compileSort(order, dtype) {\n  var code = [\"'use strict'\"]\n  var funcName = [\"ndarraySortWrapper\", order.join(\"d\"), dtype].join(\"\")\n  var funcArgs = [ \"array\" ]\n  \n  code.push([\"function \", funcName, \"(\", funcArgs.join(\",\"), \"){\"].join(\"\"))\n  \n  //Unpack local variables from array\n  var vars = [\"data=array.data,offset=array.offset|0,shape=array.shape,stride=array.stride\"]\n  for(var i=0; i<order.length; ++i) {\n    vars.push([\"s\",i,\"=stride[\",i,\"]|0,n\",i,\"=shape[\",i,\"]|0\"].join(\"\"))\n  }\n  \n  var scratch_stride = new Array(order.length)\n  var nprod = []\n  for(var i=0; i<order.length; ++i) {\n    var k = order[i]\n    if(k === 0) {\n      continue\n    }\n    if(nprod.length === 0) {\n      scratch_stride[k] = \"1\"\n    } else {\n      scratch_stride[k] = nprod.join(\"*\")\n    }\n    nprod.push(\"n\"+k)\n  }\n  \n  var p = -1, q = -1\n  for(var i=0; i<order.length; ++i) {\n    var j = order[i]\n    if(j !== 0) {\n      if(p > 0) {\n        vars.push([\"d\",j,\"=s\",j,\"-d\",p,\"*n\",p].join(\"\"))\n      } else {\n        vars.push([\"d\",j,\"=s\",j].join(\"\"))\n      }\n      p = j\n    }\n    var k = order.length-1-i\n    if(k !== 0) {\n      if(q > 0) {\n        vars.push([\"e\",k,\"=s\",k,\"-e\",q,\"*n\",q,\n                  \",f\",k,\"=\",scratch_stride[k],\"-f\",q,\"*n\",q].join(\"\"))\n      } else {\n        vars.push([\"e\",k,\"=s\",k,\",f\",k,\"=\",scratch_stride[k]].join(\"\"))\n      }\n      q = k\n    }\n  }\n  \n  //Declare local variables\n  code.push(\"var \" + vars.join(\",\"))\n  \n  //Create arguments for subroutine\n  var sortArgs = [\"0\", \"n0-1\", \"data\", \"offset\"].concat(shapeArgs(order.length))\n  \n  //Call main sorting routine\n  code.push([\n    \"if(n0<=\",INSERTION_SORT_THRESHOLD,\"){\",\n      \"insertionSort(\", sortArgs.join(\",\"), \")}else{\",\n      \"quickSort(\", sortArgs.join(\",\"),\n    \")}\"\n  ].join(\"\"))\n  \n  //Return\n  code.push(\"}return \" + funcName)\n  \n  //Link everything together\n  var result = new Function(\"insertionSort\", \"quickSort\", code.join(\"\\n\"))\n  var insertionSort = createInsertionSort(order, dtype)\n  var quickSort = createQuickSort(order, dtype, insertionSort)\n  return result(insertionSort, quickSort)\n}\n\nmodule.exports = compileSort"]},"metadata":{},"sourceType":"script"}