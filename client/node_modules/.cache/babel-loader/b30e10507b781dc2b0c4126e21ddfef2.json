{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../color/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar padAttrs = require('../../plots/pad_attributes');\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar buttonsAttrs = templatedArray('button', {\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Determines whether or not this button is visible.'\n  },\n  method: {\n    valType: 'enumerated',\n    values: ['restyle', 'relayout', 'animate', 'update', 'skip'],\n    dflt: 'restyle',\n    role: 'info',\n    description: ['Sets the Plotly method to be called on click.', 'If the `skip` method is used, the API updatemenu will function as normal', 'but will perform no API calls and will not bind automatically to state', 'updates. This may be used to create a component interface and attach to', 'updatemenu events manually via JavaScript.'].join(' ')\n  },\n  args: {\n    valType: 'info_array',\n    role: 'info',\n    freeLength: true,\n    items: [{\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }],\n    description: ['Sets the arguments values to be passed to the Plotly', 'method set in `method` on click.'].join(' ')\n  },\n  args2: {\n    valType: 'info_array',\n    role: 'info',\n    freeLength: true,\n    items: [{\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }],\n    description: ['Sets a 2nd set of `args`,', 'these arguments values are passed to the Plotly', 'method set in `method` when clicking this button while in the active state.', 'Use this to create toggle buttons.'].join(' ')\n  },\n  label: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    description: 'Sets the text label to appear on the button.'\n  },\n  execute: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: ['When true, the API method is executed. When false, all other behaviors are the same', 'and command execution is skipped. This may be useful when hooking into, for example,', 'the `plotly_buttonclicked` method and executing the API command manually without losing', 'the benefit of the updatemenu automatically binding to the state of the plot through the', 'specification of `method` and `args`.'].join(' ')\n  }\n});\nmodule.exports = overrideAll(templatedArray('updatemenu', {\n  _arrayAttrRegexps: [/^updatemenus\\[(0|[1-9][0-9]+)\\]\\.buttons/],\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    description: ['Determines whether or not the update menu is visible.'].join(' ')\n  },\n  type: {\n    valType: 'enumerated',\n    values: ['dropdown', 'buttons'],\n    dflt: 'dropdown',\n    role: 'info',\n    description: ['Determines whether the buttons are accessible via a dropdown menu', 'or whether the buttons are stacked horizontally or vertically'].join(' ')\n  },\n  direction: {\n    valType: 'enumerated',\n    values: ['left', 'right', 'up', 'down'],\n    dflt: 'down',\n    role: 'info',\n    description: ['Determines the direction in which the buttons are laid out, whether', 'in a dropdown menu or a row/column of buttons. For `left` and `up`,', 'the buttons will still appear in left-to-right or top-to-bottom order', 'respectively.'].join(' ')\n  },\n  active: {\n    valType: 'integer',\n    role: 'info',\n    min: -1,\n    dflt: 0,\n    description: ['Determines which button (by index starting from 0) is', 'considered active.'].join(' ')\n  },\n  showactive: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: 'Highlights active dropdown item or active button if true.'\n  },\n  buttons: buttonsAttrs,\n  x: {\n    valType: 'number',\n    min: -2,\n    max: 3,\n    dflt: -0.05,\n    role: 'style',\n    description: 'Sets the x position (in normalized coordinates) of the update menu.'\n  },\n  xanchor: {\n    valType: 'enumerated',\n    values: ['auto', 'left', 'center', 'right'],\n    dflt: 'right',\n    role: 'info',\n    description: ['Sets the update menu\\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the range selector.'].join(' ')\n  },\n  y: {\n    valType: 'number',\n    min: -2,\n    max: 3,\n    dflt: 1,\n    role: 'style',\n    description: 'Sets the y position (in normalized coordinates) of the update menu.'\n  },\n  yanchor: {\n    valType: 'enumerated',\n    values: ['auto', 'top', 'middle', 'bottom'],\n    dflt: 'top',\n    role: 'info',\n    description: ['Sets the update menu\\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the range selector.'].join(' ')\n  },\n  pad: extendFlat(padAttrs({\n    editType: 'arraydraw'\n  }), {\n    description: 'Sets the padding around the buttons or dropdown menu.'\n  }),\n  font: fontAttrs({\n    description: 'Sets the font of the update menu button text.'\n  }),\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    description: 'Sets the background color of the update menu buttons.'\n  },\n  bordercolor: {\n    valType: 'color',\n    dflt: colorAttrs.borderLine,\n    role: 'style',\n    description: 'Sets the color of the border enclosing the update menu.'\n  },\n  borderwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    editType: 'arraydraw',\n    description: 'Sets the width (in px) of the border enclosing the update menu.'\n  }\n}), 'arraydraw', 'from-root');","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/components/updatemenus/attributes.js"],"names":["fontAttrs","require","colorAttrs","extendFlat","overrideAll","padAttrs","templatedArray","buttonsAttrs","visible","valType","role","description","method","values","dflt","join","args","freeLength","items","args2","label","execute","module","exports","_arrayAttrRegexps","type","direction","active","min","showactive","buttons","x","max","xanchor","y","yanchor","pad","editType","font","bgcolor","bordercolor","borderLine","borderwidth"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,6BAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,kBAAD,CAAP,CAA4BE,UAA7C;;AACA,IAAIC,WAAW,GAAGH,OAAO,CAAC,2BAAD,CAAP,CAAqCG,WAAvD;;AACA,IAAIC,QAAQ,GAAGJ,OAAO,CAAC,4BAAD,CAAtB;;AACA,IAAIK,cAAc,GAAGL,OAAO,CAAC,8BAAD,CAAP,CAAwCK,cAA7D;;AAEA,IAAIC,YAAY,GAAGD,cAAc,CAAC,QAAD,EAAW;AACxCE,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,SADJ;AAELC,IAAAA,IAAI,EAAE,MAFD;AAGLC,IAAAA,WAAW,EAAE;AAHR,GAD+B;AAMxCC,EAAAA,MAAM,EAAE;AACJH,IAAAA,OAAO,EAAE,YADL;AAEJI,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,EAAmC,QAAnC,EAA6C,MAA7C,CAFJ;AAGJC,IAAAA,IAAI,EAAE,SAHF;AAIJJ,IAAAA,IAAI,EAAE,MAJF;AAKJC,IAAAA,WAAW,EAAE,CACT,+CADS,EAET,0EAFS,EAGT,wEAHS,EAIT,yEAJS,EAKT,4CALS,EAMXI,IANW,CAMN,GANM;AALT,GANgC;AAmBxCC,EAAAA,IAAI,EAAE;AACFP,IAAAA,OAAO,EAAE,YADP;AAEFC,IAAAA,IAAI,EAAE,MAFJ;AAGFO,IAAAA,UAAU,EAAE,IAHV;AAIFC,IAAAA,KAAK,EAAE,CACH;AAACT,MAAAA,OAAO,EAAE;AAAV,KADG,EAEH;AAACA,MAAAA,OAAO,EAAE;AAAV,KAFG,EAGH;AAACA,MAAAA,OAAO,EAAE;AAAV,KAHG,CAJL;AASFE,IAAAA,WAAW,EAAE,CACT,sDADS,EAET,kCAFS,EAGXI,IAHW,CAGN,GAHM;AATX,GAnBkC;AAiCxCI,EAAAA,KAAK,EAAE;AACHV,IAAAA,OAAO,EAAE,YADN;AAEHC,IAAAA,IAAI,EAAE,MAFH;AAGHO,IAAAA,UAAU,EAAE,IAHT;AAIHC,IAAAA,KAAK,EAAE,CACH;AAACT,MAAAA,OAAO,EAAE;AAAV,KADG,EAEH;AAACA,MAAAA,OAAO,EAAE;AAAV,KAFG,EAGH;AAACA,MAAAA,OAAO,EAAE;AAAV,KAHG,CAJJ;AASHE,IAAAA,WAAW,EAAE,CACT,2BADS,EAET,iDAFS,EAGT,6EAHS,EAIT,oCAJS,EAKXI,IALW,CAKN,GALM;AATV,GAjCiC;AAiDxCK,EAAAA,KAAK,EAAE;AACHX,IAAAA,OAAO,EAAE,QADN;AAEHC,IAAAA,IAAI,EAAE,MAFH;AAGHI,IAAAA,IAAI,EAAE,EAHH;AAIHH,IAAAA,WAAW,EAAE;AAJV,GAjDiC;AAuDxCU,EAAAA,OAAO,EAAE;AACLZ,IAAAA,OAAO,EAAE,SADJ;AAELC,IAAAA,IAAI,EAAE,MAFD;AAGLI,IAAAA,IAAI,EAAE,IAHD;AAILH,IAAAA,WAAW,EAAE,CACT,qFADS,EAET,sFAFS,EAGT,yFAHS,EAIT,0FAJS,EAKT,uCALS,EAMXI,IANW,CAMN,GANM;AAJR;AAvD+B,CAAX,CAAjC;AAqEAO,MAAM,CAACC,OAAP,GAAiBnB,WAAW,CAACE,cAAc,CAAC,YAAD,EAAe;AACtDkB,EAAAA,iBAAiB,EAAE,CAAC,0CAAD,CADmC;AAGtDhB,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,SADJ;AAELC,IAAAA,IAAI,EAAE,MAFD;AAGLC,IAAAA,WAAW,EAAE,CACT,uDADS,EAEXI,IAFW,CAEN,GAFM;AAHR,GAH6C;AAWtDU,EAAAA,IAAI,EAAE;AACFhB,IAAAA,OAAO,EAAE,YADP;AAEFI,IAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb,CAFN;AAGFC,IAAAA,IAAI,EAAE,UAHJ;AAIFJ,IAAAA,IAAI,EAAE,MAJJ;AAKFC,IAAAA,WAAW,EAAE,CACT,mEADS,EAET,+DAFS,EAGXI,IAHW,CAGN,GAHM;AALX,GAXgD;AAsBtDW,EAAAA,SAAS,EAAE;AACPjB,IAAAA,OAAO,EAAE,YADF;AAEPI,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,EAAwB,MAAxB,CAFD;AAGPC,IAAAA,IAAI,EAAE,MAHC;AAIPJ,IAAAA,IAAI,EAAE,MAJC;AAKPC,IAAAA,WAAW,EAAE,CACT,qEADS,EAET,qEAFS,EAGT,uEAHS,EAIT,eAJS,EAKXI,IALW,CAKN,GALM;AALN,GAtB2C;AAmCtDY,EAAAA,MAAM,EAAE;AACJlB,IAAAA,OAAO,EAAE,SADL;AAEJC,IAAAA,IAAI,EAAE,MAFF;AAGJkB,IAAAA,GAAG,EAAE,CAAC,CAHF;AAIJd,IAAAA,IAAI,EAAE,CAJF;AAKJH,IAAAA,WAAW,EAAE,CACT,uDADS,EAET,oBAFS,EAGXI,IAHW,CAGN,GAHM;AALT,GAnC8C;AA8CtDc,EAAAA,UAAU,EAAE;AACRpB,IAAAA,OAAO,EAAE,SADD;AAERC,IAAAA,IAAI,EAAE,MAFE;AAGRI,IAAAA,IAAI,EAAE,IAHE;AAIRH,IAAAA,WAAW,EAAE;AAJL,GA9C0C;AAqDtDmB,EAAAA,OAAO,EAAEvB,YArD6C;AAuDtDwB,EAAAA,CAAC,EAAE;AACCtB,IAAAA,OAAO,EAAE,QADV;AAECmB,IAAAA,GAAG,EAAE,CAAC,CAFP;AAGCI,IAAAA,GAAG,EAAE,CAHN;AAIClB,IAAAA,IAAI,EAAE,CAAC,IAJR;AAKCJ,IAAAA,IAAI,EAAE,OALP;AAMCC,IAAAA,WAAW,EAAE;AANd,GAvDmD;AA+DtDsB,EAAAA,OAAO,EAAE;AACLxB,IAAAA,OAAO,EAAE,YADJ;AAELI,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,EAA2B,OAA3B,CAFH;AAGLC,IAAAA,IAAI,EAAE,OAHD;AAILJ,IAAAA,IAAI,EAAE,MAJD;AAKLC,IAAAA,WAAW,EAAE,CACT,qDADS,EAET,4DAFS,EAGT,mCAHS,EAIXI,IAJW,CAIN,GAJM;AALR,GA/D6C;AA0EtDmB,EAAAA,CAAC,EAAE;AACCzB,IAAAA,OAAO,EAAE,QADV;AAECmB,IAAAA,GAAG,EAAE,CAAC,CAFP;AAGCI,IAAAA,GAAG,EAAE,CAHN;AAIClB,IAAAA,IAAI,EAAE,CAJP;AAKCJ,IAAAA,IAAI,EAAE,OALP;AAMCC,IAAAA,WAAW,EAAE;AANd,GA1EmD;AAkFtDwB,EAAAA,OAAO,EAAE;AACL1B,IAAAA,OAAO,EAAE,YADJ;AAELI,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,EAA0B,QAA1B,CAFH;AAGLC,IAAAA,IAAI,EAAE,KAHD;AAILJ,IAAAA,IAAI,EAAE,MAJD;AAKLC,IAAAA,WAAW,EAAE,CACT,kDADS,EAET,2DAFS,EAGT,oCAHS,EAIXI,IAJW,CAIN,GAJM;AALR,GAlF6C;AA8FtDqB,EAAAA,GAAG,EAAEjC,UAAU,CAACE,QAAQ,CAAC;AAACgC,IAAAA,QAAQ,EAAE;AAAX,GAAD,CAAT,EAAoC;AAC/C1B,IAAAA,WAAW,EAAE;AADkC,GAApC,CA9FuC;AAkGtD2B,EAAAA,IAAI,EAAEtC,SAAS,CAAC;AACZW,IAAAA,WAAW,EAAE;AADD,GAAD,CAlGuC;AAsGtD4B,EAAAA,OAAO,EAAE;AACL9B,IAAAA,OAAO,EAAE,OADJ;AAELC,IAAAA,IAAI,EAAE,OAFD;AAGLC,IAAAA,WAAW,EAAE;AAHR,GAtG6C;AA2GtD6B,EAAAA,WAAW,EAAE;AACT/B,IAAAA,OAAO,EAAE,OADA;AAETK,IAAAA,IAAI,EAAEZ,UAAU,CAACuC,UAFR;AAGT/B,IAAAA,IAAI,EAAE,OAHG;AAITC,IAAAA,WAAW,EAAE;AAJJ,GA3GyC;AAiHtD+B,EAAAA,WAAW,EAAE;AACTjC,IAAAA,OAAO,EAAE,QADA;AAETmB,IAAAA,GAAG,EAAE,CAFI;AAGTd,IAAAA,IAAI,EAAE,CAHG;AAITJ,IAAAA,IAAI,EAAE,OAJG;AAKT2B,IAAAA,QAAQ,EAAE,WALD;AAMT1B,IAAAA,WAAW,EAAE;AANJ;AAjHyC,CAAf,CAAf,EAyHxB,WAzHwB,EAyHX,WAzHW,CAA5B","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../color/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar padAttrs = require('../../plots/pad_attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar buttonsAttrs = templatedArray('button', {\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        description: 'Determines whether or not this button is visible.'\n    },\n    method: {\n        valType: 'enumerated',\n        values: ['restyle', 'relayout', 'animate', 'update', 'skip'],\n        dflt: 'restyle',\n        role: 'info',\n        description: [\n            'Sets the Plotly method to be called on click.',\n            'If the `skip` method is used, the API updatemenu will function as normal',\n            'but will perform no API calls and will not bind automatically to state',\n            'updates. This may be used to create a component interface and attach to',\n            'updatemenu events manually via JavaScript.'\n        ].join(' ')\n    },\n    args: {\n        valType: 'info_array',\n        role: 'info',\n        freeLength: true,\n        items: [\n            {valType: 'any'},\n            {valType: 'any'},\n            {valType: 'any'}\n        ],\n        description: [\n            'Sets the arguments values to be passed to the Plotly',\n            'method set in `method` on click.'\n        ].join(' ')\n    },\n    args2: {\n        valType: 'info_array',\n        role: 'info',\n        freeLength: true,\n        items: [\n            {valType: 'any'},\n            {valType: 'any'},\n            {valType: 'any'}\n        ],\n        description: [\n            'Sets a 2nd set of `args`,',\n            'these arguments values are passed to the Plotly',\n            'method set in `method` when clicking this button while in the active state.',\n            'Use this to create toggle buttons.'\n        ].join(' ')\n    },\n    label: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        description: 'Sets the text label to appear on the button.'\n    },\n    execute: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: [\n            'When true, the API method is executed. When false, all other behaviors are the same',\n            'and command execution is skipped. This may be useful when hooking into, for example,',\n            'the `plotly_buttonclicked` method and executing the API command manually without losing',\n            'the benefit of the updatemenu automatically binding to the state of the plot through the',\n            'specification of `method` and `args`.'\n        ].join(' ')\n    }\n});\n\nmodule.exports = overrideAll(templatedArray('updatemenu', {\n    _arrayAttrRegexps: [/^updatemenus\\[(0|[1-9][0-9]+)\\]\\.buttons/],\n\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        description: [\n            'Determines whether or not the update menu is visible.'\n        ].join(' ')\n    },\n\n    type: {\n        valType: 'enumerated',\n        values: ['dropdown', 'buttons'],\n        dflt: 'dropdown',\n        role: 'info',\n        description: [\n            'Determines whether the buttons are accessible via a dropdown menu',\n            'or whether the buttons are stacked horizontally or vertically'\n        ].join(' ')\n    },\n\n    direction: {\n        valType: 'enumerated',\n        values: ['left', 'right', 'up', 'down'],\n        dflt: 'down',\n        role: 'info',\n        description: [\n            'Determines the direction in which the buttons are laid out, whether',\n            'in a dropdown menu or a row/column of buttons. For `left` and `up`,',\n            'the buttons will still appear in left-to-right or top-to-bottom order',\n            'respectively.'\n        ].join(' ')\n    },\n\n    active: {\n        valType: 'integer',\n        role: 'info',\n        min: -1,\n        dflt: 0,\n        description: [\n            'Determines which button (by index starting from 0) is',\n            'considered active.'\n        ].join(' ')\n    },\n\n    showactive: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: 'Highlights active dropdown item or active button if true.'\n    },\n\n    buttons: buttonsAttrs,\n\n    x: {\n        valType: 'number',\n        min: -2,\n        max: 3,\n        dflt: -0.05,\n        role: 'style',\n        description: 'Sets the x position (in normalized coordinates) of the update menu.'\n    },\n    xanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'left', 'center', 'right'],\n        dflt: 'right',\n        role: 'info',\n        description: [\n            'Sets the update menu\\'s horizontal position anchor.',\n            'This anchor binds the `x` position to the *left*, *center*',\n            'or *right* of the range selector.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'number',\n        min: -2,\n        max: 3,\n        dflt: 1,\n        role: 'style',\n        description: 'Sets the y position (in normalized coordinates) of the update menu.'\n    },\n    yanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'top', 'middle', 'bottom'],\n        dflt: 'top',\n        role: 'info',\n        description: [\n            'Sets the update menu\\'s vertical position anchor',\n            'This anchor binds the `y` position to the *top*, *middle*',\n            'or *bottom* of the range selector.'\n        ].join(' ')\n    },\n\n    pad: extendFlat(padAttrs({editType: 'arraydraw'}), {\n        description: 'Sets the padding around the buttons or dropdown menu.'\n    }),\n\n    font: fontAttrs({\n        description: 'Sets the font of the update menu button text.'\n    }),\n\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        description: 'Sets the background color of the update menu buttons.'\n    },\n    bordercolor: {\n        valType: 'color',\n        dflt: colorAttrs.borderLine,\n        role: 'style',\n        description: 'Sets the color of the border enclosing the update menu.'\n    },\n    borderwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'arraydraw',\n        description: 'Sets the width (in px) of the border enclosing the update menu.'\n    }\n}), 'arraydraw', 'from-root');\n"]},"metadata":{},"sourceType":"script"}