{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport Plot from \"react-plotly.js\";\nimport { isNumber } from \"lodash\";\nimport _ from 'lodash';\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\";\n\nconst ExistingPVA = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    // if (polyLine) {\n    // //   if (data.length === 0) {\n    // //     return []\n    // //   }  else {\n    //     return data.map((line, index) => line[\"Easting\"])\n    // //   }\n    // } else {\n    // //   if (data.length === 0) {\n    // //     return []\n    // //   } else {\n    return data.map((lineItem, index) => {\n      return parseInt(lineItem.Easting);\n    }); //   }\n    // }\n  };\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    // if (polyLine) {\n    //   // if (data.length === 0) {\n    //   //   return []\n    //   // }  else {\n    //     console.log(data.response.Items)\n    //     return data.map((line, index) => line.response.Items[\"Northing\"])\n    //   // }\n    // } else {\n    // if (data.length === 0) {\n    //   return []\n    // } else {\n    return data.map((lineItem, index) => {\n      return parseInt(lineItem[\"Northing\"]);\n    }); // }\n    // }\n  };\n\n  const createTVDCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((lineItem, index) => {\n        return parseInt(lineItem[\"TVD\"]) * -1;\n      });\n    }\n  };\n\n  const createSectCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      const sectCoordinates = data.map((lineItem, index) => {\n        return parseInt(lineItem.VS);\n      });\n      return sectCoordinates;\n    }\n  };\n\n  const convertNumberStringsToNumbersAndSort = (data, dataSource) => {\n    let dataCopy = [...data];\n    dataCopy.map((element, index) => {\n      switch (dataSource) {\n        case 'Plan':\n          dataCopy[index].Plan_Number = parseInt(dataCopy[index].Plan_Line_Number);\n          break;\n\n        case 'Survey':\n          dataCopy[index].SurveyNumber = parseInt(dataCopy[index].SurveyNumber);\n          break;\n\n        case 'HardLines':\n          dataCopy[index].Hard_Line_Number = parseInt(dataCopy[index].Hard_Line_Number);\n          break;\n\n        case 'LeaseLine':\n          dataCopy[index].Lease_Line_Number = parseInt(dataCopy[index].Lease_Line_Number);\n          break;\n\n        default:\n      }\n    });\n\n    switch (dataSource) {\n      case 'Plan':\n        return _.orderBy(dataCopy, ['Plan_Line_Number'], ['asc']);\n\n      case 'Survey':\n        return _.orderBy(dataCopy, ['SurveyNumber'], ['asc']);\n\n      case 'HardLines':\n        return _.orderBy(dataCopy, ['Hard_Line_Number'], ['asc']);\n\n      case 'LeaseLine':\n        return _.orderBy(dataCopy, ['Lease_Line_Number'], ['asc']);\n\n      default:\n    }\n  };\n\n  const renderSectionView = () => {\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n        y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n        y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"Red\"\n        },\n        name: \"Surveys\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Section View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderPlanView = () => {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"mt-7\",\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicEmail\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              className: \"mt-3\",\n              type: \"float\",\n              disabled: true,\n              placeholder: \"Enter VS Here\",\n              onChange: event => event.target.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"blue\"\n          },\n          name: \"Plan\"\n        }, {\n          x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n          y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          },\n          name: \"Surveys\"\n        }, {\n          x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getLeaseLinesFromDynamoDbReducer.response.Items, \"LeaseLine\"), true),\n          y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getLeaseLinesFromDynamoDbReducer.response.Items, \"LeaseLine\"), true),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"black\"\n          },\n          name: \"Lease Lines\"\n        }, {\n          x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getHardLinesFromDynamoDbReducer.response.Items, \"HardLines\"), true),\n          y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getHardLinesFromDynamoDbReducer.response.Items, \"HardLines\"), true),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          },\n          name: \"Hard Lines\"\n        }],\n        layout: {\n          width: 1000,\n          height: 800,\n          title: 'Plan View'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [activeWell.response.Operator.S, \" - \", activeWell.response.Rig.S, \" - \", activeWell.response.Well_Name.S]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), renderSectionView(), renderPlanView()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this); // <Container>\n    //   {renderPlanView()}\n    // </Container>\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_c = ExistingPVA;\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","isNumber","_","saveSurveysToReduxStore","ExistingPVA","savePlansToReduxStoreReducer","getHardLinesFromDynamoDbReducer","saveSurveysToReduxStoreReducer","getSurveysFromDynamoDbReducer","getWellPlansFromDynamoDbReducer","activeWell","getLeaseLinesFromDynamoDbReducer","createEastingCoordinates","data","polyLine","map","lineItem","index","parseInt","Easting","createNorthingCoordinates","createTVDCoordinates","length","createSectCoordinates","sectCoordinates","VS","convertNumberStringsToNumbersAndSort","dataSource","dataCopy","element","Plan_Number","Plan_Line_Number","SurveyNumber","Hard_Line_Number","Lease_Line_Number","orderBy","renderSectionView","x","response","Items","y","type","mode","marker","color","name","width","height","title","renderPlanView","event","target","value","status","Operator","S","Rig","Well_Name","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport _ from 'lodash';\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer }) => {\n\n\n    const createEastingCoordinates = (data, polyLine = false) => {\n      // if (polyLine) {\n      // //   if (data.length === 0) {\n      // //     return []\n      // //   }  else {\n      //     return data.map((line, index) => line[\"Easting\"])\n      // //   }\n      // } else {\n      // //   if (data.length === 0) {\n      // //     return []\n      // //   } else {\n          return data.map((lineItem, index) => {\n            return parseInt(lineItem.Easting)\n            })\n      //   }\n      // }\n    }\n\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    // if (polyLine) {\n    //   // if (data.length === 0) {\n    //   //   return []\n    //   // }  else {\n    //     console.log(data.response.Items)\n    //     return data.map((line, index) => line.response.Items[\"Northing\"])\n    //   // }\n    // } else {\n      // if (data.length === 0) {\n      //   return []\n      // } else {\n\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Northing\"])\n          })\n      // }\n    // }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"TVD\"]) *-1\n            })\n    }\n  }\n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      const sectCoordinates = data.map((lineItem, index) => {\n        return parseInt(lineItem.VS)\n          })\n      return sectCoordinates\n    }\n  }\n\n  const convertNumberStringsToNumbersAndSort = (data, dataSource) => {\n    let dataCopy = [...data]\n    dataCopy.map((element, index) => {\n      switch (dataSource) {\n        case 'Plan':\n          dataCopy[index].Plan_Number = parseInt(dataCopy[index].Plan_Line_Number)\n          break;\n        case 'Survey':\n          dataCopy[index].SurveyNumber = parseInt(dataCopy[index].SurveyNumber)\n          break;\n        case 'HardLines':\n          dataCopy[index].Hard_Line_Number = parseInt(dataCopy[index].Hard_Line_Number)\n          break;\n        case 'LeaseLine':\n          dataCopy[index].Lease_Line_Number = parseInt(dataCopy[index].Lease_Line_Number)\n          break;\n        default:\n\n      }\n    })\n    switch (dataSource) {\n      case 'Plan':\n        return _.orderBy(dataCopy, ['Plan_Line_Number'], ['asc'])\n      case 'Survey':\n        return _.orderBy(dataCopy, ['SurveyNumber'], ['asc'])\n      case 'HardLines':\n        return _.orderBy(dataCopy, ['Hard_Line_Number'], ['asc'])\n      case 'LeaseLine':\n        return _.orderBy(dataCopy, ['Lease_Line_Number'], ['asc'])\n      default:\n\n    }\n  }\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n          y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n\n  const renderPlanView = () => {\n    return (\n      <Container>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n            </Form.Group>\n          </Form>\n        </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Survey\")),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getLeaseLinesFromDynamoDbReducer.response.Items, \"LeaseLine\"), true),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getLeaseLinesFromDynamoDbReducer.response.Items, \"LeaseLine\"), true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getHardLinesFromDynamoDbReducer.response.Items,\"HardLines\"), true),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getHardLinesFromDynamoDbReducer.response.Items, \"HardLines\"), true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Hard Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n      </Container>\n    )\n  }\n\n\n\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.response.Operator.S} - {activeWell.response.Rig.S} - {activeWell.response.Well_Name.S}</h3>\n        {renderSectionView()}\n        {renderPlanView()}\n      </Container>\n    )\n\n      // <Container>\n      //   {renderPlanView()}\n      // </Container>\n\n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}