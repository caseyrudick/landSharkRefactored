{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\"; //other libs\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport savePlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"; //helper functions\n\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\";\nimport calculateNS from \"../HelperFunctions/Calculations/NS\";\nimport calculateEW from \"../HelperFunctions/Calculations/EW\";\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\";\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\";\n\nconst Plans = ({\n  savePlansToReduxStore,\n  savePlansToReduxStoreReducer,\n  savePlansToJSONDb\n}) => {\n  _s();\n\n  const [editGrid, setEditGrid] = useState(true);\n  const [input, setInput] = useState(false);\n  const [vsDirection, setVSDirection] = useState(0);\n  const initialGrid = [[{\n    value: '',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Measured Depth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Inclination\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Azimuth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"TVD\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    readOnly: true,\n    value: 2\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 3\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 4\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    readOnly: true,\n    value: 5\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [grid, setGrid] = useState(initialGrid);\n  useEffect(() => {\n    if (input) {//performcalcs doesn't happen bc we're copying from plans. Currently not needed\n    }\n  }, [input]);\n  useEffect(() => {\n    handleAddRow(95);\n  }, []);\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {// nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value);\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value);\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value);\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection);\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value);\n        grid[index][4] = { ...grid[index][4],\n          readOnly: true,\n          value: calculateTVD\n        };\n        grid[index][5] = { ...grid[index][5],\n          readOnly: true,\n          value: calculatedNS\n        };\n        grid[index][6] = { ...grid[index][6],\n          readOnly: true,\n          value: calculatedEW\n        };\n        grid[index][7] = { ...grid[index][7],\n          readOnly: true,\n          value: calculatedSECT\n        };\n        grid[index][8] = { ...grid[index][8],\n          readOnly: true,\n          value: calculatedDLS\n        };\n      }\n    });\n  };\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]); // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newGrid[row#][col#] to the new value \n\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...grid[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n    setInput(true);\n  };\n\n  const handleVSDirection = val => {\n    setVSDirection(val);\n    setInput(true);\n  };\n\n  const handleWellSubmit = () => {\n    const {\n      well,\n      operator,\n      rig,\n      county,\n      state\n    } = saveWellInfoToReduxStoreReducer.response;\n    postPlansToDyna;\n  };\n\n  const addNewRow = () => {\n    const localGrid = [{\n      value: grid.length + 1,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    setGrid([...grid, localGrid]);\n  };\n\n  const editPlans = () => {\n    setEditGrid(!editGrid);\n    const gridNew = grid.map(row => [...row]);\n\n    for (let row = 1; row < gridNew.length; row++) {\n      for (let col = 1; col < gridNew[row].length; col++) {\n        gridNew[row][col].readOnly = editGrid;\n      }\n    }\n\n    setGrid(gridNew);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createNewPlan = () => {\n    let wellPlans = currentWell.plans;\n    let wellPlanCount = wellPlans.length;\n    let newWellPlanNumberAndPlan = {\n      \"id\": wellPlanCount += 1,\n      \"planDetails\": grid\n    };\n    const activeWellCopy = { ...currentWell\n    };\n    activeWellCopy.plans.push(newWellPlanNumberAndPlan);\n    saveWellPlansToJSONDb(activeWellCopy, currentWellId); // saveNewPlanToReduxStore(activeWellCopy);\n    // postPlansToJSONdb(activeWellCopy)\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      xs: 30,\n      children: nameConcat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      xs: 30,\n      children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n        data: grid,\n        valueRenderer: cell => cell.value,\n        onCellsChanged: onCellsChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"mt-4 mb-4\",\n      onClick: () => addNewRow(),\n      children: \"Add a Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"danger\",\n      className: \"my-4 ml-4\",\n      onClick: () => removeRow(),\n      children: \"Remove a Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"info\",\n      className: \"my-4 ml-4\",\n      onClick: () => editPlans(),\n      children: \"Edit Plans\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"info\",\n      className: \"my-4 ml-4\",\n      onClick: () => createNewPlan(),\n      children: \"Create New Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}; //check\n\n\n_s(Plans, \"9hs1+8aVOfMoAfvuGCHxgUL7BIY=\");\n\n_c = Plans;\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer\n}) => {\n  return {\n    savePlansToReduxStoreReducer\n  };\n}; //check\n\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  savePlansToJSONDb\n})(Plans); // const mapStateToProps = ({activeWell}) => {\n//   console.log(activeWell.payload)\n//   const currentlyActiveWell = Object.values(activeWell.payload[0])\n//   const wellInfo = `${activeWell.operator} - ${activeWell.rig} - ${activeWell.well}`;\n//   const wellPlans= activeWell.plans\n//   return {\n//     currentlyActiveWell,\n//     wellInfo,\n//     wellPlans\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","savePlansToJSONDb","savePlansToReduxStore","calculateTVD","calculateNS","calculateEW","calculateSECT","calculateDLS","Plans","savePlansToReduxStoreReducer","editGrid","setEditGrid","input","setInput","vsDirection","setVSDirection","initialGrid","value","readOnly","width","grid","setGrid","handleAddRow","performCalculations","map","row","index","calculatedTVD","calculatedNS","calculatedEW","calculatedSECT","calculatedDLS","onCellsChanged","changes","gridNew","forEach","cell","col","handleVSDirection","val","handleWellSubmit","well","operator","rig","county","state","saveWellInfoToReduxStoreReducer","response","postPlansToDyna","addNewRow","localGrid","length","editPlans","removeRow","newGrid","pop","createNewPlan","wellPlans","currentWell","plans","wellPlanCount","newWellPlanNumberAndPlan","activeWellCopy","push","saveWellPlansToJSONDb","currentWellId","nameConcat","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\nimport savePlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\n\n\n\nconst Plans = ({savePlansToReduxStore, savePlansToReduxStoreReducer, savePlansToJSONDb}) => {\n  \n  const [editGrid, setEditGrid] = useState(true)\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVSDirection] = useState(0)\n  \n  const initialGrid = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n\n  const [grid, setGrid] = useState(initialGrid);\n\n\n  useEffect(()=>{\n    if (input) {\n      //performcalcs doesn't happen bc we're copying from plans. Currently not needed\n    }\n  },[input])\n\n  useEffect(()=> {\n    handleAddRow(95)\n  }, [])\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n\n        grid[index][4] = {...grid[index][4], readOnly: true, value: calculateTVD}\n        grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n        grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n        grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n        grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n      }\n    })\n  }\n\n\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      gridNew[row][col] = { ...grid[row][col], value };\n    });\n    setGrid(gridNew)\n    setInput(true)\n  };\n\n  const handleVSDirection = (val) => {\n    setVSDirection(val)\n    setInput(true)\n  }\n\n  const handleWellSubmit = () => {\n    const {well, operator, rig, county, state} = saveWellInfoToReduxStoreReducer.response\n    postPlansToDyna\n  }\n\n  const addNewRow = () => {\n    const localGrid = [{value: grid.length + 1, readOnly: true}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n    setGrid([...grid, localGrid])\n  };\n\n  const editPlans = () => {\n    setEditGrid(!editGrid)\n    const gridNew = grid.map(row => [...row]);\n    for (let row = 1; row < gridNew.length; row ++) {\n      for (let col = 1; col < gridNew[row].length; col ++) {\n        gridNew[row][col].readOnly = editGrid;\n      }\n    }\n    setGrid(gridNew);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createNewPlan = () => {\n      let wellPlans = currentWell.plans\n      let wellPlanCount = wellPlans.length;\n      let newWellPlanNumberAndPlan = {\n        \"id\": wellPlanCount += 1,\n        \"planDetails\": grid\n      };\n      const activeWellCopy = {...currentWell};\n      activeWellCopy.plans.push(newWellPlanNumberAndPlan);\n\n      saveWellPlansToJSONDb(activeWellCopy, currentWellId)\n      // saveNewPlanToReduxStore(activeWellCopy);\n      // postPlansToJSONdb(activeWellCopy)\n  };\n\n\n\n  return (\n    <Container>\n      <Col xs={30}>{nameConcat}</Col>\n      <Col xs={30}>\n    <ReactDataSheet\n        data={grid}\n        valueRenderer={(cell) => cell.value}\n        onCellsChanged={onCellsChanged}\n       \n    />\n    </Col>\n    <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n    <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n    <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n    <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n    </Container>\n  )\n}\n\n//check\nconst mapStateToProps = ({savePlansToReduxStoreReducer}) => {\n  return {\n    savePlansToReduxStoreReducer\n  }\n}\n\n//check\nexport default connect(mapStateToProps, { savePlansToReduxStore, savePlansToJSONDb})(Plans)\n\n\n// const mapStateToProps = ({activeWell}) => {\n//   console.log(activeWell.payload)\n//   const currentlyActiveWell = Object.values(activeWell.payload[0])\n//   const wellInfo = `${activeWell.operator} - ${activeWell.rig} - ${activeWell.well}`;\n//   const wellPlans= activeWell.plans\n//   return {\n//     currentlyActiveWell,\n//     wellInfo,\n//     wellPlans\n//   }\n// }"]},"metadata":{},"sourceType":"module"}