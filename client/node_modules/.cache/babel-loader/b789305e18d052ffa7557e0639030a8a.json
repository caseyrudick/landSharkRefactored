{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\n// react\nimport React, { useState, useEffect } from 'react'; // react-bootstrap\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown'; // other libs/imports\n\nimport { connect } from 'react-redux';\nimport _ from 'lodash'; // images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\n\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"; // import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\n\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\";\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\";\n\nconst Home = ({\n  postWellInfoToJSONDb,\n  saveWellInfoToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  getWellsFromJSONDbReducer,\n  getWellsFromJSONDb\n}) => {\n  _s();\n\n  const [selectedWell, setSelectedWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n  useEffect(() => {\n    setTimeout(getWellsFromJSONDb, 1000);\n  }, []); // const renderWellNames = () => {\n  //   const wells = getWellsFromJSONDb\n  //     return (\n  //       <Dropdown.Menu>\n  //         {filteredWells.map(({ Operator, Rig, Well }, index) => {\n  //           index++;\n  //           return (\n  //             <Dropdown.Item href=\"\" onClick={() => setSelectedWell(Well.S)}>\n  //               {Operator.S} - {Rig.S} - {Well.S}\n  //             </Dropdown.Item>\n  //           )\n  //         })}\n  //       </Dropdown.Menu>\n  //     )\n  //   } if (getWellNamesFromDynamoDbReducer.status === 'received' && getWellNamesFromDynamoDbReducer.response.data.errorType === 'TypeError') {\n  //     return 'Data load error'\n  //   } else {\n  //     return 'Data loading';\n  //   }\n  // };\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      uSstate,\n      northing,\n      easting\n    };\n    postWellInfoToJSONDb(wellInfo);\n    saveWellInfoToReduxStore(wellInfo);\n  }; // const handleFetchData = () => {\n  //   setTimeout(getWellPlansFromDynamoDb(selectedWell), 500);\n  //   setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   setTimeout(getWellLeaseLinesFromDynamoDb(selectedWell), 1500);\n  //   setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   setTimeout(getOffsets(selectedWell), 2500);\n  // }\n\n\n  const renderSelectWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select existing well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: /*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: [\"Selected Well: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: selectedWell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderNewWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Add new well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Operator\",\n        onChange: event => setOperator(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Rig\",\n        onChange: event => setRig(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Well\",\n        onChange: event => setWell(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"County\",\n        onChange: event => setCounty(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"State\",\n        onChange: event => setUSstate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Northing\",\n        onChange: event => setNorthing(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Easting\",\n        onChange: event => setEasting(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"info\",\n        disabled: operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false,\n        onClick: handleNewWellSubmit,\n        children: \"Submit and begin adding well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }; // if (getWellNamesFromDynamoDbReducer.status === \"\" || getWellNamesFromDynamoDbReducer.status === \"waiting\") {\n  //   return 'Data loading'\n  // } else if (getWellNamesFromDynamoDbReducer.status === \"received\") {\n\n\n  let arr = Object.values(saveWellInfoToReduxStoreReducer);\n  console.log(`reducer's status: ${arr}`);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: renderNewWell()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 7\n  }, this); // }\n};\n\n_s(Home, \"4Ntn9S/cgL4FVjSMZhaMHyVACnc=\");\n\n_c = Home;\n\nconst mapStateToProps = ({\n  saveWellInfoToReduxStoreReducer,\n  postWellInfoToJSONDbReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    getWellsFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveWellInfoToReduxStore,\n  postWellInfoToJSONDb,\n  getWellsFromJSONDb\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js"],"names":["React","useState","useEffect","Container","Row","Col","Button","Form","Dropdown","connect","_","saveWellInfoToReduxStore","postWellInfoToJSONDb","getWellsFromJSONDb","Home","saveWellInfoToReduxStoreReducer","getWellsFromJSONDbReducer","selectedWell","setSelectedWell","operator","setOperator","rig","setRig","well","setWell","county","setCounty","uSstate","setUSstate","northing","setNorthing","easting","setEasting","setTimeout","handleNewWellSubmit","wellInfo","renderSelectWell","renderNewWell","event","target","value","arr","Object","values","console","log","mapStateToProps","postWellInfoToJSONDbReducer"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,CAAP,MAAc,QAAd,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,wBAAP,MAAqC,4CAArC,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,wCAAjC;AACA,OAAOC,kBAAP,MAA+B,sCAA/B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACF,EAAAA,oBAAD;AAAuBD,EAAAA,wBAAvB;AAAiDI,EAAAA,+BAAjD;AAAkFC,EAAAA,yBAAlF;AAA6GH,EAAAA;AAA7G,CAAD,KAAsI;AAAA;;AACjJ,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,MAAD,CAAhD;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,GAAD,EAAMC,MAAN,IAAgBrB,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC0B,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC4B,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEd+B,IAAAA,UAAU,CAACpB,kBAAD,EAAqB,IAArB,CAAV;AACD,GAHQ,EAGN,EAHM,CAAT,CAViJ,CAejJ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMqB,mBAAmB,GAAG,MAAM;AAChC,UAAMC,QAAQ,GAAG;AACfhB,MAAAA,QADe;AAEfE,MAAAA,GAFe;AAGfE,MAAAA,IAHe;AAIfE,MAAAA,MAJe;AAKfE,MAAAA,OALe;AAMfE,MAAAA,QANe;AAOfE,MAAAA;AAPe,KAAjB;AASAnB,IAAAA,oBAAoB,CAACuB,QAAD,CAApB;AACAxB,IAAAA,wBAAwB,CAACwB,QAAD,CAAxB;AACD,GAZD,CArCiJ,CAmDjJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,wBACE,QAAC,GAAD;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAA,+BACE,QAAC,QAAD,CAAU,MAAV;AAAiB,UAAA,OAAO,EAAC,SAAzB;AAAmC,UAAA,EAAE,EAAC,gBAAtC;AAAA,qDACiB;AAAA,sBAASnB;AAAT;AAAA;AAAA;AAAA;AAAA,kBADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAbD;;AAeA,QAAMoB,aAAa,GAAG,MAAM;AAC1B,wBACE,QAAC,GAAD;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,UAA3C;AAAsD,QAAA,QAAQ,EAAEC,KAAK,IAAIlB,WAAW,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAApF;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,KAA3C;AAAiD,QAAA,QAAQ,EAAEF,KAAK,IAAIhB,MAAM,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA1E;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,MAA3C;AAAkD,QAAA,QAAQ,EAAEF,KAAK,IAAId,OAAO,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA5E;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,QAA3C;AAAoD,QAAA,QAAQ,EAAEF,KAAK,IAAIZ,SAAS,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAhF;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,OAA3C;AAAmD,QAAA,QAAQ,EAAEF,KAAK,IAAIV,UAAU,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAhF;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,UAA3C;AAAsD,QAAA,QAAQ,EAAEF,KAAK,IAAIR,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd;AAApF;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,SAA3C;AAAqD,QAAA,QAAQ,EAAEF,KAAK,IAAIN,UAAU,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAlF;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,MAAlB;AAAyB,QAAA,OAAO,EAAC,MAAjC;AAAwC,QAAA,QAAQ,EAAGrB,QAAQ,KAAK,EAAb,IAAmBE,GAAG,KAAK,EAA3B,IAAiCE,IAAI,KAAK,EAA1C,IAAgDE,MAAM,KAAK,EAA3D,IAAiEE,OAAO,KAAK,EAA7E,GAAkF,IAAlF,GAAyF,KAA5I;AAAoJ,QAAA,OAAO,EAAEO,mBAA7J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAdD,CA1EiJ,CA0FjJ;AACA;AACA;;;AACE,MAAIO,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc5B,+BAAd,CAAV;AACF6B,EAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBJ,GAAI,EAArC;AAEA,sBACI,QAAC,SAAD;AAAA,2BACE,QAAC,GAAD;AAAA,gBAEGJ,aAAa;AAFhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ,CAhGiJ,CAwGjJ;AACD,CAzGD;;GAAMvB,I;;KAAAA,I;;AA2GN,MAAMgC,eAAe,GAAG,CAAC;AAAE/B,EAAAA,+BAAF;AAAmCgC,EAAAA,2BAAnC;AAAgE/B,EAAAA;AAAhE,CAAD,KAAiG;AACvH,SAAO;AACLD,IAAAA,+BADK;AAELgC,IAAAA,2BAFK;AAGL/B,IAAAA;AAHK,GAAP;AAKD,CAND;;AAQA,eAAeP,OAAO,CAACqC,eAAD,EAAkB;AAAEnC,EAAAA,wBAAF;AAA4BC,EAAAA,oBAA5B;AAAkDC,EAAAA;AAAlD,CAAlB,CAAP,CAAiGC,IAAjG,CAAf","sourcesContent":["// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n// import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\"\n\nconst Home = ({postWellInfoToJSONDb, saveWellInfoToReduxStore, saveWellInfoToReduxStoreReducer, getWellsFromJSONDbReducer, getWellsFromJSONDb}) => {\n  const [selectedWell, setSelectedWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n  useEffect(() => {\n\n    setTimeout(getWellsFromJSONDb, 1000);\n  }, []);\n\n  // const renderWellNames = () => {\n  //   const wells = getWellsFromJSONDb\n\n  //     return (\n  //       <Dropdown.Menu>\n  //         {filteredWells.map(({ Operator, Rig, Well }, index) => {\n  //           index++;\n  //           return (\n  //             <Dropdown.Item href=\"\" onClick={() => setSelectedWell(Well.S)}>\n  //               {Operator.S} - {Rig.S} - {Well.S}\n  //             </Dropdown.Item>\n  //           )\n  //         })}\n  //       </Dropdown.Menu>\n  //     )\n  //   } if (getWellNamesFromDynamoDbReducer.status === 'received' && getWellNamesFromDynamoDbReducer.response.data.errorType === 'TypeError') {\n  //     return 'Data load error'\n  //   } else {\n  //     return 'Data loading';\n  //   }\n  // };\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      uSstate,\n      northing,\n      easting\n    }\n    postWellInfoToJSONDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n  }\n\n  // const handleFetchData = () => {\n  //   setTimeout(getWellPlansFromDynamoDb(selectedWell), 500);\n  //   setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   setTimeout(getWellLeaseLinesFromDynamoDb(selectedWell), 1500);\n  //   setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   setTimeout(getOffsets(selectedWell), 2500);\n  // }\n\n  const renderSelectWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select existing well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            Selected Well: <strong>{selectedWell}</strong>\n          </Dropdown.Toggle>\n          {/* // {renderWellNames()} */}\n        </Dropdown>\n        {/* <Button className=\"mt-4\" variant=\"success\" disabled={ selectedWell === \"None\" ? true : false } onClick={handleFetchData}>Fetch well data</Button> */}\n      </Col>\n    )\n  }\n\n  const renderNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false } onClick={handleNewWellSubmit}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  // if (getWellNamesFromDynamoDbReducer.status === \"\" || getWellNamesFromDynamoDbReducer.status === \"waiting\") {\n  //   return 'Data loading'\n  // } else if (getWellNamesFromDynamoDbReducer.status === \"received\") {\n    let arr = Object.values(saveWellInfoToReduxStoreReducer)\n  console.log(`reducer's status: ${arr}`)  \n  \n  return (\n      <Container>\n        <Row>\n          {/* {renderSelectWell()} */}\n          {renderNewWell()}\n        </Row>\n      </Container>\n    )\n  // }\n}\n\nconst mapStateToProps = ({ saveWellInfoToReduxStoreReducer, postWellInfoToJSONDbReducer, getWellsFromJSONDbReducer }) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    getWellsFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, { saveWellInfoToReduxStore, postWellInfoToJSONDb, getWellsFromJSONDb })(Home);\n"]},"metadata":{},"sourceType":"module"}