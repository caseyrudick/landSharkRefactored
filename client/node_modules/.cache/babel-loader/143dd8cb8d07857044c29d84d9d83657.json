{"ast":null,"code":"import { GET_HARD_LINES_FROM_JSONDB_REQUESTED, GET_HARD_LINES_FROM_JSONDB_RECEIVED, GET_HARD_LINES_FROM_JSONDB_FAILED } from \"./types\";\nexport default (selectedWell => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_HARD_LINES_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWell_Well = selectedWellConvertedToArray[2];\n      let wells = getState().getWellsWithHardLinesFromJSONDbReducer.response;\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well;\n      });\n      dispatch({\n        type: GET_HARD_LINES_FROM_JSONDB_RECEIVED,\n        payload: result[0].grid\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_HARD_LINES_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getHardLinesFromJSONDb.js"],"names":["GET_HARD_LINES_FROM_JSONDB_REQUESTED","GET_HARD_LINES_FROM_JSONDB_RECEIVED","GET_HARD_LINES_FROM_JSONDB_FAILED","selectedWell","dispatch","getState","type","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWell_Well","wells","getWellsWithHardLinesFromJSONDbReducer","response","result","filter","well","operator","payload","grid","error"],"mappings":"AAAA,SAASA,oCAAT,EACEC,mCADF,EAEEC,iCAFF,QAE2C,SAF3C;AAIE,gBAAgBC,YAAD,IAAkB;AAC/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,YAAMO,4BAA4B,GAAGJ,YAAY,CAACK,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,iBAAiB,GAAGN,4BAA4B,CAAC,CAAD,CAAtD;AACA,UAAIO,KAAK,GAAGT,QAAQ,GAAGU,sCAAX,CAAkDC,QAA9D;AACA,UAAIC,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAaC,IAAI,IAAI;AAChC,eAAOA,IAAI,CAACC,QAAL,KAAkBR,oBAAlB,IAA0CO,IAAI,CAACA,IAAL,KAAcN,iBAA/D;AACD,OAFY,CAAb;AAGAT,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEL,mCADC;AAEPoB,QAAAA,OAAO,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUK;AAFZ,OAAD,CAAR;AAID,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdnB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEJ,iCADC;AAEPmB,QAAAA,OAAO,EAAEE;AAFF,OAAD,CAAR;AAID;AACF,GAtBD;AAuBD,CAxBD","sourcesContent":["import { GET_HARD_LINES_FROM_JSONDB_REQUESTED,\n  GET_HARD_LINES_FROM_JSONDB_RECEIVED,\n  GET_HARD_LINES_FROM_JSONDB_FAILED } from \"./types\"\n\n  export default (selectedWell) => {\n    return async (dispatch, getState) => {\n      dispatch({\n        type: GET_HARD_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        let wells = getState().getWellsWithHardLinesFromJSONDbReducer.response\n        let result = wells.filter(well => {\n          return well.operator === selectedWellOperator && well.well === selectedWell_Well\n        })\n        dispatch({\n          type: GET_HARD_LINES_FROM_JSONDB_RECEIVED,\n          payload: result[0].grid\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_HARD_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}