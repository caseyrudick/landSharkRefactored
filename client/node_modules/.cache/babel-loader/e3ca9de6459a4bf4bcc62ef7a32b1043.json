{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/Components/Plans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet';\nimport saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\";\n\nconst Plans = ({\n  wellInfo,\n  currentPlan\n}) => {\n  _s();\n\n  const [editGrid, setEditGrid] = useState(false);\n  const [grid, setGrid] = useState(initialGrid); // const [currentPlan, setCurrentPlan] = useState(currentPlan[0].id || 0)\n\n  const initialGrid = [[{\n    value: '',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Measured Depth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Inclination\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Azimuth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"TVD\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 2,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 3,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 4,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 5,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 6,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }]];\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]); // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \n\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...grid[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n  };\n\n  const addNewRow = () => {\n    const localGrid = [{\n      value: grid.length + 1,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    setGrid([...grid, localGrid]);\n  };\n\n  const editPlans = () => {\n    setEditGrid(!editGrid);\n    const gridNew = grid.map(row => [...row]);\n\n    for (let row = 1; row < gridNew.length; row++) {\n      for (let col = 1; col < gridNew[row].length; col++) {\n        gridNew[row][col].readOnly = editGrid;\n      }\n    }\n\n    setGrid(gridNew);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createNewPlan = () => {// if (currentPlan.id === 0) {\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      xs: 30,\n      children: wellInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      xs: 30,\n      children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n        data: grid,\n        valueRenderer: cell => cell.value,\n        onCellsChanged: onCellsChanged // editPlans={(cell) => {\n        //   setEditGrid(!editGrid)\n        //   cell.readOnly = editGrid\n        // }}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"mt-4 mb-4\",\n      onClick: () => addNewRow(),\n      children: \"Add a Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"danger\",\n      className: \"my-4 ml-4\",\n      onClick: () => removeRow(),\n      children: \"Remove a Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"info\",\n      className: \"my-4 ml-4\",\n      onClick: () => editPlans(),\n      children: \"Edit Plans\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"info\",\n      className: \"my-4 ml-4\",\n      onClick: () => createNewPlan(),\n      children: \"Create New Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Plans, \"XV66ffXPCEbkVXFpMzkwsmY7Ruo=\");\n\n_c = Plans;\n\nconst mapStateToProps = ({\n  selectedWell\n}) => {\n  const currentPlanPrototype = [{\n    id: 1,\n    plan: {\n      \"a\": 'b'\n    }\n  }, {\n    id: 2,\n    plan: {\n      \"c\": 'd'\n    }\n  }];\n  console.log(currentPlanPrototype);\n  const currentWellId = Object.values(selectedWell)[0];\n  const wellInfo = `${currentWellId.operator} - ${currentWellId.rig} - ${currentWellId.well}`;\n  const currentPlan = currentWellId.plans;\n  return {\n    wellInfo,\n    currentPlan\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveNewPlanToReduxStore\n})(Plans);\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/Components/Plans.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveNewPlanToReduxStore","Plans","wellInfo","currentPlan","editGrid","setEditGrid","grid","setGrid","initialGrid","value","readOnly","width","onCellsChanged","changes","gridNew","map","row","forEach","cell","col","addNewRow","localGrid","length","editPlans","removeRow","newGrid","pop","createNewPlan","mapStateToProps","selectedWell","currentPlanPrototype","id","plan","console","log","currentWellId","Object","values","operator","rig","well","plans"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\nimport saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\n\n\n\nconst Plans = ({wellInfo, currentPlan}) => {\n  const [editGrid, setEditGrid] = useState(false)\n  const [grid, setGrid] = useState(initialGrid)\n  // const [currentPlan, setCurrentPlan] = useState(currentPlan[0].id || 0)\n\n  const initialGrid = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}],\n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 2, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 3, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 4, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 5, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 6, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    ]\n\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n\n      gridNew[row][col] = { ...grid[row][col], value };\n    });\n    setGrid(gridNew)\n  };\n\n  const addNewRow = () => {\n    const localGrid = [{value: grid.length + 1, readOnly: true}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n    setGrid([...grid, localGrid])\n  }\n\n  const editPlans = () => {\n    setEditGrid(!editGrid)\n    const gridNew = grid.map(row => [...row]);\n    for (let row = 1; row < gridNew.length; row ++) {\n      for (let col = 1; col < gridNew[row].length; col ++) {\n        gridNew[row][col].readOnly = editGrid\n      }\n    }\n    setGrid(gridNew)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...grid]\n    newGrid.pop()\n    setGrid(newGrid)\n  }\n\n  const createNewPlan = () => {\n    // if (currentPlan.id === 0) {\n\n    // }\n  }\n\n\n  return (\n    <Container>\n      <Col xs={30}>{wellInfo}</Col>\n      <Col xs={30}>\n    <ReactDataSheet\n        data={grid}\n        valueRenderer={(cell) => cell.value}\n        onCellsChanged={onCellsChanged}\n        // editPlans={(cell) => {\n        //   setEditGrid(!editGrid)\n        //   cell.readOnly = editGrid\n        // }}\n        \n    />\n    </Col>\n    <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n    <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n    <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n    <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n    </Container>\n  )\n}\n\nconst mapStateToProps = ({selectedWell}) => {\n  const currentPlanPrototype = [{id: 1, plan: {\"a\":'b'}}, {id: 2, plan: {\"c\":'d'}}]\n  console.log(currentPlanPrototype)\n  const currentWellId = Object.values(selectedWell)[0];\n  const wellInfo = `${currentWellId.operator} - ${currentWellId.rig} - ${currentWellId.well}`;\n  const currentPlan = currentWellId.plans\n  return {\n    wellInfo,\n    currentPlan\n  }\n}\n\nexport default connect(mapStateToProps, {saveNewPlanToReduxStore})(Plans)"]},"metadata":{},"sourceType":"module"}