{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\n\nvar domainAttrs = require('../../domain').attributes;\n\nvar extendFlat = require('../../../lib/extend').extendFlat;\n\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n  return {\n    x: {\n      valType: 'number',\n      role: 'info',\n      dflt: x,\n      editType: 'camera'\n    },\n    y: {\n      valType: 'number',\n      role: 'info',\n      dflt: y,\n      editType: 'camera'\n    },\n    z: {\n      valType: 'number',\n      role: 'info',\n      dflt: z,\n      editType: 'camera'\n    },\n    editType: 'camera'\n  };\n}\n\nmodule.exports = {\n  _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: 'rgba(0,0,0,0)',\n    editType: 'plot'\n  },\n  camera: {\n    up: extendFlat(makeCameraVector(0, 0, 1), {\n      description: ['Sets the (x,y,z) components of the \\'up\\' camera vector.', 'This vector determines the up direction of this scene', 'with respect to the page.', 'The default is *{x: 0, y: 0, z: 1}* which means that', 'the z axis points up.'].join(' ')\n    }),\n    center: extendFlat(makeCameraVector(0, 0, 0), {\n      description: ['Sets the (x,y,z) components of the \\'center\\' camera vector', 'This vector determines the translation (x,y,z) space', 'about the center of this scene.', 'By default, there is no such translation.'].join(' ')\n    }),\n    eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n      description: ['Sets the (x,y,z) components of the \\'eye\\' camera vector.', 'This vector determines the view point about the origin', 'of this scene.'].join(' ')\n    }),\n    projection: {\n      type: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['perspective', 'orthographic'],\n        dflt: 'perspective',\n        editType: 'calc',\n        description: ['Sets the projection type. The projection type could be', 'either *perspective* or *orthographic*. The default is', '*perspective*.'].join(' ')\n      },\n      editType: 'calc'\n    },\n    editType: 'camera'\n  },\n  domain: domainAttrs({\n    name: 'scene',\n    editType: 'plot'\n  }),\n  aspectmode: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['auto', 'cube', 'data', 'manual'],\n    dflt: 'auto',\n    editType: 'plot',\n    impliedEdits: {\n      'aspectratio.x': undefined,\n      'aspectratio.y': undefined,\n      'aspectratio.z': undefined\n    },\n    description: ['If *cube*, this scene\\'s axes are drawn as a cube,', 'regardless of the axes\\' ranges.', 'If *data*, this scene\\'s axes are drawn', 'in proportion with the axes\\' ranges.', 'If *manual*, this scene\\'s axes are drawn', 'in proportion with the input of *aspectratio*', '(the default behavior if *aspectratio* is provided).', 'If *auto*, this scene\\'s axes are drawn', 'using the results of *data* except when one axis', 'is more than four times the size of the two others,', 'where in that case the results of *cube* are used.'].join(' ')\n  },\n  aspectratio: {\n    // must be positive (0's are coerced to 1)\n    x: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    y: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    z: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    editType: 'plot',\n    impliedEdits: {\n      aspectmode: 'manual'\n    },\n    description: ['Sets this scene\\'s axis aspectratio.'].join(' ')\n  },\n  xaxis: gl3dAxisAttrs,\n  yaxis: gl3dAxisAttrs,\n  zaxis: gl3dAxisAttrs,\n  dragmode: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['orbit', 'turntable', 'zoom', 'pan', false],\n    editType: 'plot',\n    description: ['Determines the mode of drag interactions for this scene.'].join(' ')\n  },\n  hovermode: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['closest', false],\n    dflt: 'closest',\n    editType: 'modebar',\n    description: ['Determines the mode of hover interactions for this scene.'].join(' ')\n  },\n  uirevision: {\n    valType: 'any',\n    role: 'info',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in camera attributes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'plot',\n  _deprecated: {\n    cameraposition: {\n      valType: 'info_array',\n      role: 'info',\n      editType: 'camera',\n      description: 'Obsolete. Use `camera` instead.'\n    }\n  }\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plots/gl3d/layout/layout_attributes.js"],"names":["gl3dAxisAttrs","require","domainAttrs","attributes","extendFlat","counterRegex","makeCameraVector","x","y","z","valType","role","dflt","editType","module","exports","_arrayAttrRegexps","bgcolor","camera","up","description","join","center","eye","projection","type","values","domain","name","aspectmode","impliedEdits","undefined","aspectratio","min","xaxis","yaxis","zaxis","dragmode","hovermode","uirevision","_deprecated","cameraposition"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\nvar domainAttrs = require('../../domain').attributes;\nvar extendFlat = require('../../../lib/extend').extendFlat;\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n    return {\n        x: {\n            valType: 'number',\n            role: 'info',\n            dflt: x,\n            editType: 'camera'\n        },\n        y: {\n            valType: 'number',\n            role: 'info',\n            dflt: y,\n            editType: 'camera'\n        },\n        z: {\n            valType: 'number',\n            role: 'info',\n            dflt: z,\n            editType: 'camera'\n        },\n        editType: 'camera'\n    };\n}\n\nmodule.exports = {\n    _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: 'rgba(0,0,0,0)',\n        editType: 'plot'\n    },\n    camera: {\n        up: extendFlat(makeCameraVector(0, 0, 1), {\n            description: [\n                'Sets the (x,y,z) components of the \\'up\\' camera vector.',\n                'This vector determines the up direction of this scene',\n                'with respect to the page.',\n                'The default is *{x: 0, y: 0, z: 1}* which means that',\n                'the z axis points up.'\n            ].join(' ')\n        }),\n        center: extendFlat(makeCameraVector(0, 0, 0), {\n            description: [\n                'Sets the (x,y,z) components of the \\'center\\' camera vector',\n                'This vector determines the translation (x,y,z) space',\n                'about the center of this scene.',\n                'By default, there is no such translation.'\n            ].join(' ')\n        }),\n        eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n            description: [\n                'Sets the (x,y,z) components of the \\'eye\\' camera vector.',\n                'This vector determines the view point about the origin',\n                'of this scene.'\n            ].join(' ')\n        }),\n        projection: {\n            type: {\n                valType: 'enumerated',\n                role: 'info',\n                values: ['perspective', 'orthographic'],\n                dflt: 'perspective',\n                editType: 'calc',\n                description: [\n                    'Sets the projection type. The projection type could be',\n                    'either *perspective* or *orthographic*. The default is',\n                    '*perspective*.'\n                ].join(' ')\n            },\n            editType: 'calc'\n        },\n        editType: 'camera'\n    },\n    domain: domainAttrs({name: 'scene', editType: 'plot'}),\n    aspectmode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['auto', 'cube', 'data', 'manual'],\n        dflt: 'auto',\n        editType: 'plot',\n        impliedEdits: {\n            'aspectratio.x': undefined,\n            'aspectratio.y': undefined,\n            'aspectratio.z': undefined\n        },\n        description: [\n            'If *cube*, this scene\\'s axes are drawn as a cube,',\n            'regardless of the axes\\' ranges.',\n\n            'If *data*, this scene\\'s axes are drawn',\n            'in proportion with the axes\\' ranges.',\n\n            'If *manual*, this scene\\'s axes are drawn',\n            'in proportion with the input of *aspectratio*',\n            '(the default behavior if *aspectratio* is provided).',\n\n            'If *auto*, this scene\\'s axes are drawn',\n            'using the results of *data* except when one axis',\n            'is more than four times the size of the two others,',\n            'where in that case the results of *cube* are used.'\n        ].join(' ')\n    },\n    aspectratio: { // must be positive (0's are coerced to 1)\n        x: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        y: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        z: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        editType: 'plot',\n        impliedEdits: {aspectmode: 'manual'},\n        description: [\n            'Sets this scene\\'s axis aspectratio.'\n        ].join(' ')\n    },\n\n    xaxis: gl3dAxisAttrs,\n    yaxis: gl3dAxisAttrs,\n    zaxis: gl3dAxisAttrs,\n\n    dragmode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['orbit', 'turntable', 'zoom', 'pan', false],\n        editType: 'plot',\n        description: [\n            'Determines the mode of drag interactions for this scene.'\n        ].join(' ')\n    },\n    hovermode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['closest', false],\n        dflt: 'closest',\n        editType: 'modebar',\n        description: [\n            'Determines the mode of hover interactions for this scene.'\n        ].join(' ')\n    },\n    uirevision: {\n        valType: 'any',\n        role: 'info',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in camera attributes.',\n            'Defaults to `layout.uirevision`.'\n        ].join(' ')\n    },\n    editType: 'plot',\n\n    _deprecated: {\n        cameraposition: {\n            valType: 'info_array',\n            role: 'info',\n            editType: 'camera',\n            description: 'Obsolete. Use `camera` instead.'\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}