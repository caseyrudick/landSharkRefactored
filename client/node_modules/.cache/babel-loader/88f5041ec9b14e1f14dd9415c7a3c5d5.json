{"ast":null,"code":"import React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\"; //other libs\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"; //helper functions\n\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\";\nimport calculateNS from \"../HelperFunctions/Calculations/NS\";\nimport calculateEW from \"../HelperFunctions/Calculations/EW\";\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\";\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\";\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\n\nconst Plans = ({\n  savePlansToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  savePlansToReduxStoreReducer,\n  postPlansToJSONDb\n}) => {\n  // const [editGrid, setEditGrid] = useState(true)\n  // const [input, setInput] = useState(false)\n  // const [vsDirection, setVSDirection] = useState(0)\n  // const initialGrid = [\n  //   [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n  //   [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n  //   [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  //   [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  //   [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  //   [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  // ];\n  // const [grid, setGrid] = useState(initialGrid);\n  // useEffect(()=>{\n  //   if (input) {\n  //     //performcalcs doesn't happen bc we're copying from plans. Currently not needed\n  //   }\n  // },[input])\n  // useEffect(()=> {\n  //   handleAddRows(1)\n  // }, [])\n  // const performCalculations = () => {\n  //   grid.map((row, index) => {\n  //     if (index === 0 || index === 1) {\n  //       // nothing because we don't want to run calcs on the header array\n  //     } else {\n  //       // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n  //       // note val after idx is column \n  //       // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n  //       // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n  //       const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n  //       const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n  //       const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n  //       const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n  //       const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n  //       grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n  //       grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n  //       grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n  //       grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n  //       grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n  //       setGrid(grid)\n  //       setInput(false)\n  //     }\n  //   })\n  // }\n  // const onCellsChanged = changes => {\n  //   // iterate through existing grid to get a copy and not mutate current as we iterate over\n  //   const gridNew = grid.map(row => [...row]);\n  //   // iterate through the changes.  Each change is a cell, each cell is an object\n  //   // with cell (previousVal), row, col, currentVal\n  //   // add the value of the newGrid[row#][col#] to the new value \n  //   changes.forEach(({ cell, row, col, value }) => {\n  //     gridNew[row][col] = { ...grid[row][col], value };\n  //   });\n  //   setGrid(gridNew)\n  //   setInput(true)\n  // };\n  // const handleVSDirection = (val) => {\n  //   setVSDirection(val)\n  //   setInput(true)\n  // }\n  // const handleSubmit = () => {\n  //   const {well, operator, rig, county, uSstate} = saveWellInfoToReduxStoreReducer.response\n  //   postPlansToJSONDb(operator, rig ,well, county, uSstate, grid, vsDirection)\n  //   savePlansToReduxStore(grid)\n  // }\n  // const handleRemoveRow = () => {\n  //   const newGrid = [...grid];\n  //   newGrid.pop();\n  //   setGrid(newGrid);\n  // };\n  // const createRows = (numberOfRowsToAdd) => {\n  //   let createdRows = []\n  //   for (let i = 0; i < numberOfRowsToAdd; i++) {\n  //     createdRows.push(\n  //       [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n  //     )\n  //   }\n  //   return createdRows\n  // };\n  // const handleAddRows = (rows) => {\n  //   const newGrid = [...grid, ...createRows(rows)]\n  //   setGrid(newGrid)\n  // }\n  // const renderSetRowsButtons = () => {\n  //   return (\n  //     <Row>\n  //       <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n  //         <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n  //           Add 25 rows\n  //         </Button>\n  //         <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n  //           Add 10 rows\n  //         </Button>\n  //         <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n  //           Add 5 rows\n  //         </Button>\n  //         <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n  //           Add a row\n  //         </Button>\n  //         <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n  //           Remove a row\n  //         </Button>\n  //       </Col>\n  //       <Col xs={2}>\n  //       </Col>\n  //     </Row>\n  //   )\n  // }\n  // const renderSubmitButton = () => {\n  //   return (\n  //     <Row>\n  //       <Col xs={10} className=\"my-4\">\n  //         <Button variant=\"info\" onClick={handleSubmit}>\n  //           Submit Data\n  //         </Button>\n  //       </Col>\n  //       <Col xs={2}>\n  //       </Col>\n  //     </Row>\n  //   )\n  // }\n  // const renderWellData = () => {\n  //   console.log(saveWellInfoToReduxStoreReducer)\n  //   if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n  //     const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n  //     return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No well data\"\n  //   }\n  // }\n  return (// <Container>\n    //   <Row>\n    //     <Col xs={10}>\n    //       {renderWellData()}\n    //       <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n    //     </Col>\n    //     <Col xs={2}>\n    //       <Form className=\"mt-7\">\n    //         <Form.Group controlId=\"formBasicEmail\">\n    //           <Form.Control className=\"mt-3\" type=\"float\" placeHolder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n    //         </Form.Group>\n    //       </Form>\n    //     </Col>\n    //   </Row>\n    //   {renderSetRowsButtons()}\n    //   {renderSubmitButton()}\n    //   <Row>\n    //     <Col xs={10}>\n    //       {/* {renderAlert()} */}\n    //     </Col>\n    //     <Col xs={2}>\n    //     </Col>\n    //   </Row>\n    // </Container>\n    \"hello\"\n  );\n};\n\n_c = Plans;\n\nconst mapStateToProps = ({\n  saveWellInfoToReduxStoreReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  postPlansToJSONDb\n})(Plans);\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","savePlansToReduxStore","calculateTVD","calculateNS","calculateEW","calculateSECT","calculateDLS","postPlansToJSONDb","Plans","saveWellInfoToReduxStoreReducer","savePlansToReduxStoreReducer","mapStateToProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB,C,CACA;;AACA,OAAO,yCAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,iBAA3B,C,CACA;;AAEA,OAAOC,qBAAP,MAAkC,yCAAlC,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;;AAIA,MAAMC,KAAK,GAAG,CAAC;AAACP,EAAAA,qBAAD;AAAwBQ,EAAAA,+BAAxB;AAAwDC,EAAAA,4BAAxD;AAAsFH,EAAAA;AAAtF,CAAD,KAA8G;AAE1H;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBF;AA2BD,CAxLD;;KAAMC,K;;AA0LN,MAAMG,eAAe,GAAG,CAAC;AAACF,EAAAA;AAAD,CAAD,KAAuC;AAC7D,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD,CAJD;;AAMA,eAAeV,OAAO,CAACY,eAAD,EAAkB;AAAEV,EAAAA,qBAAF;AAAyBM,EAAAA;AAAzB,CAAlB,CAAP,CAAsEC,KAAtE,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\n\n\n\nconst Plans = ({savePlansToReduxStore, saveWellInfoToReduxStoreReducer,savePlansToReduxStoreReducer, postPlansToJSONDb}) => {\n  \n  // const [editGrid, setEditGrid] = useState(true)\n  // const [input, setInput] = useState(false)\n  // const [vsDirection, setVSDirection] = useState(0)\n  \n  // const initialGrid = [\n  //   [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n  //   [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n  //   [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  //   [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  //   [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  //   [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  // ];\n\n  // const [grid, setGrid] = useState(initialGrid);\n\n  // useEffect(()=>{\n  //   if (input) {\n  //     //performcalcs doesn't happen bc we're copying from plans. Currently not needed\n  //   }\n  // },[input])\n\n  // useEffect(()=> {\n  //   handleAddRows(1)\n  // }, [])\n\n  // const performCalculations = () => {\n  //   grid.map((row, index) => {\n  //     if (index === 0 || index === 1) {\n  //       // nothing because we don't want to run calcs on the header array\n  //     } else {\n  //       // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n  //       // note val after idx is column \n  //       // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n  //       // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n  //       const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n  //       const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n  //       const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n  //       const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n  //       const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n\n  //       grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n  //       grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n  //       grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n  //       grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n  //       grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n  //       setGrid(grid)\n  //       setInput(false)\n\n  //     }\n  //   })\n  // }\n\n  // const onCellsChanged = changes => {\n  //   // iterate through existing grid to get a copy and not mutate current as we iterate over\n  //   const gridNew = grid.map(row => [...row]);\n  //   // iterate through the changes.  Each change is a cell, each cell is an object\n  //   // with cell (previousVal), row, col, currentVal\n  //   // add the value of the newGrid[row#][col#] to the new value \n  //   changes.forEach(({ cell, row, col, value }) => {\n  //     gridNew[row][col] = { ...grid[row][col], value };\n  //   });\n  //   setGrid(gridNew)\n  //   setInput(true)\n  // };\n\n  // const handleVSDirection = (val) => {\n  //   setVSDirection(val)\n  //   setInput(true)\n  // }\n\n  // const handleSubmit = () => {\n  //   const {well, operator, rig, county, uSstate} = saveWellInfoToReduxStoreReducer.response\n  //   postPlansToJSONDb(operator, rig ,well, county, uSstate, grid, vsDirection)\n  //   savePlansToReduxStore(grid)\n\n  // }\n\n  // const handleRemoveRow = () => {\n  //   const newGrid = [...grid];\n  //   newGrid.pop();\n  //   setGrid(newGrid);\n  // };\n\n  // const createRows = (numberOfRowsToAdd) => {\n  //   let createdRows = []\n  //   for (let i = 0; i < numberOfRowsToAdd; i++) {\n  //     createdRows.push(\n  //       [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n  //     )\n  //   }\n  //   return createdRows\n  // };\n\n  // const handleAddRows = (rows) => {\n  //   const newGrid = [...grid, ...createRows(rows)]\n  //   setGrid(newGrid)\n  // }\n\n  // const renderSetRowsButtons = () => {\n  //   return (\n  //     <Row>\n  //       <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n  //         <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n  //           Add 25 rows\n  //         </Button>\n  //         <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n  //           Add 10 rows\n  //         </Button>\n  //         <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n  //           Add 5 rows\n  //         </Button>\n  //         <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n  //           Add a row\n  //         </Button>\n  //         <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n  //           Remove a row\n  //         </Button>\n  //       </Col>\n  //       <Col xs={2}>\n          \n  //       </Col>\n  //     </Row>\n  //   )\n  // }\n\n  // const renderSubmitButton = () => {\n  //   return (\n  //     <Row>\n  //       <Col xs={10} className=\"my-4\">\n  //         <Button variant=\"info\" onClick={handleSubmit}>\n  //           Submit Data\n  //         </Button>\n  //       </Col>\n  //       <Col xs={2}>\n\n  //       </Col>\n  //     </Row>\n  //   )\n  // }\n\n  // const renderWellData = () => {\n  //   console.log(saveWellInfoToReduxStoreReducer)\n  //   if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n  //     const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n  //     return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No well data\"\n  //   }\n  // }\n\n  return (\n    // <Container>\n    //   <Row>\n    //     <Col xs={10}>\n    //       {renderWellData()}\n    //       <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n    //     </Col>\n    //     <Col xs={2}>\n    //       <Form className=\"mt-7\">\n    //         <Form.Group controlId=\"formBasicEmail\">\n    //           <Form.Control className=\"mt-3\" type=\"float\" placeHolder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n    //         </Form.Group>\n    //       </Form>\n    //     </Col>\n    //   </Row>\n    //   {renderSetRowsButtons()}\n    //   {renderSubmitButton()}\n    //   <Row>\n    //     <Col xs={10}>\n    //       {/* {renderAlert()} */}\n    //     </Col>\n    //     <Col xs={2}>\n    //     </Col>\n    //   </Row>\n    // </Container>\n    \"hello\"\n  )\n}\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, postPlansToJSONDb})(Plans)\n\n\n"]},"metadata":{},"sourceType":"module"}