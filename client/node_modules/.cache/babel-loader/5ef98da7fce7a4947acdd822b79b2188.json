{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar mesh3dAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the x coordinates of the vector field.'\n  },\n  y: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the y coordinates of the vector field.'\n  },\n  z: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the z coordinates of the vector field.'\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  starts: {\n    x: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the x components of the starting position of the streamtubes'].join(' ')\n    },\n    y: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the y components of the starting position of the streamtubes'].join(' ')\n    },\n    z: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the z components of the starting position of the streamtubes'].join(' ')\n    },\n    editType: 'calc'\n  },\n  maxdisplayed: {\n    valType: 'integer',\n    min: 0,\n    dflt: 1000,\n    role: 'info',\n    editType: 'calc',\n    description: ['The maximum number of displayed segments in a streamtube.'].join(' ')\n  },\n  // TODO\n  //\n  // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\n  // `absoluteTubeSize` doesn't behave well enough for our needs.\n  //\n  // 'fixed' would be a nice addition to plot stream 'lines', see\n  // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\n  //\n  // sizemode: {\n  //     valType: 'enumerated',\n  //     values: ['scaled', 'absolute', 'fixed'],\n  //     dflt: 'scaled',\n  //     role: 'info',\n  //     editType: 'calc',\n  //     description: [\n  //         'Sets the mode by which the streamtubes are sized.'\n  //     ].join(' ')\n  // },\n  sizeref: {\n    valType: 'number',\n    role: 'info',\n    editType: 'calc',\n    min: 0,\n    dflt: 1,\n    description: ['The scaling factor for the streamtubes.', 'The default is 1, which avoids two max divergence tubes from touching', 'at adjacent starting positions.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: 'calc',\n    description: ['Sets a text element associated with this trace.', 'If trace `hoverinfo` contains a *text* flag,', 'this text element will be seen in all hover labels.', 'Note that streamtube traces do not support array `text` values.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }, {\n    keys: ['tubex', 'tubey', 'tubez', 'tubeu', 'tubev', 'tubew', 'norm', 'divergence']\n  }),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n};\nextendFlat(attrs, colorScaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}));\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/streamtube/attributes.js"],"names":["colorScaleAttrs","require","hovertemplateAttrs","mesh3dAttrs","baseAttrs","extendFlat","attrs","x","valType","role","editType","description","y","z","u","v","w","starts","join","maxdisplayed","min","dflt","sizeref","text","hovertext","hovertemplate","keys","showlegend","colorAttr","showScaleDflt","editTypeOverride","fromMesh3d","forEach","k","hoverinfo","flags","transforms","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n    x: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the x coordinates of the vector field.'\n    },\n    y: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the y coordinates of the vector field.'\n    },\n    z: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the z coordinates of the vector field.'\n    },\n\n    u: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the x components of the vector field.'\n    },\n    v: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the y components of the vector field.'\n    },\n    w: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the z components of the vector field.'\n    },\n\n    starts: {\n        x: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the x components of the starting position of the streamtubes',\n            ].join(' ')\n        },\n        y: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the y components of the starting position of the streamtubes',\n            ].join(' ')\n        },\n        z: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the z components of the starting position of the streamtubes',\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n\n    maxdisplayed: {\n        valType: 'integer',\n        min: 0,\n        dflt: 1000,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'The maximum number of displayed segments in a streamtube.'\n        ].join(' ')\n    },\n\n    // TODO\n    //\n    // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\n    // `absoluteTubeSize` doesn't behave well enough for our needs.\n    //\n    // 'fixed' would be a nice addition to plot stream 'lines', see\n    // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\n    //\n    // sizemode: {\n    //     valType: 'enumerated',\n    //     values: ['scaled', 'absolute', 'fixed'],\n    //     dflt: 'scaled',\n    //     role: 'info',\n    //     editType: 'calc',\n    //     description: [\n    //         'Sets the mode by which the streamtubes are sized.'\n    //     ].join(' ')\n    // },\n\n    sizeref: {\n        valType: 'number',\n        role: 'info',\n        editType: 'calc',\n        min: 0,\n        dflt: 1,\n        description: [\n            'The scaling factor for the streamtubes.',\n            'The default is 1, which avoids two max divergence tubes from touching',\n            'at adjacent starting positions.'\n        ].join(' ')\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: 'calc',\n        description: [\n            'Sets a text element associated with this trace.',\n            'If trace `hoverinfo` contains a *text* flag,',\n            'this text element will be seen in all hover labels.',\n            'Note that streamtube traces do not support array `text` values.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: 'calc',\n        description: 'Same as `text`.'\n    },\n    hovertemplate: hovertemplateAttrs({editType: 'calc'}, {\n        keys: [\n            'tubex', 'tubey', 'tubez',\n            'tubeu', 'tubev', 'tubew',\n            'norm', 'divergence'\n        ]\n    }),\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n};\n\nextendFlat(attrs, colorScaleAttrs('', {\n    colorAttr: 'u/v/w norm',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}));\n\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function(k) {\n    attrs[k] = mesh3dAttrs[k];\n});\n\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc',\n    flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\n    dflt: 'x+y+z+norm+text+name'\n});\n\nattrs.transforms = undefined;\n\nmodule.exports = attrs;\n"]},"metadata":{},"sourceType":"script"}