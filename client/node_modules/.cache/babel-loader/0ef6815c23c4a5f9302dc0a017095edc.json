{"ast":null,"code":"import wells from \"../APIs/wells\";\nimport { SAVE_WELL_PLANS_TO_JSON_REQUESTED, SAVE_WELL_PLANS_TO_JSON_RECEIVED, SAVE_WELL_PLANS_TO_JSON_FAILED } from \"./types\";\nexport default ((wellInfo, wellId) => {\n  console.log(wellId);\n  return async (dispatch, getState) => {\n    dispatch({\n      type: SAVE_WELL_PLANS_TO_JSON_REQUESTED\n    });\n\n    try {\n      // let listOfWells = getState().getWellsFromJSONDbReducer \n      const response = await wells.put(`wells/${wellId}`, wellInfo);\n      dispatch({\n        type: SAVE_WELL_PLANS_TO_JSON_RECEIVED,\n        payload: response\n      });\n    } catch (error) {\n      dispatch({\n        type: SAVE_WELL_PLANS_TO_JSON_FAILED,\n        payload: error\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveWellPlansToJSONDb.js"],"names":["wells","SAVE_WELL_PLANS_TO_JSON_REQUESTED","SAVE_WELL_PLANS_TO_JSON_RECEIVED","SAVE_WELL_PLANS_TO_JSON_FAILED","wellInfo","wellId","console","log","dispatch","getState","type","response","put","payload","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AACA,SAASC,iCAAT,EACEC,gCADF,EAEEC,8BAFF,QAEwC,SAFxC;AAIA,gBAAe,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO,OAAOG,QAAP,EAAiBC,QAAjB,KAA8B;AAEnCD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;;AAGA,QAAI;AACF;AACA,YAAMU,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,SAAQP,MAAO,EAA1B,EAA6BD,QAA7B,CAAvB;AACAI,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAER,gCADC;AAEPW,QAAAA,OAAO,EAAEF;AAFF,OAAD,CAAR;AAID,KAPD,CAOE,OAAOG,KAAP,EAAc;AAEdN,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEP,8BADC;AAEPU,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GAnBD;AAoBD,CAtBD","sourcesContent":["import wells from \"../APIs/wells\"\nimport { SAVE_WELL_PLANS_TO_JSON_REQUESTED,\n  SAVE_WELL_PLANS_TO_JSON_RECEIVED,\n  SAVE_WELL_PLANS_TO_JSON_FAILED } from \"./types\"\n\nexport default (wellInfo, wellId) => {\n  console.log(wellId)\n  return async (dispatch, getState) => {\n\n    dispatch({\n      type: SAVE_WELL_PLANS_TO_JSON_REQUESTED\n    })\n    try {\n      // let listOfWells = getState().getWellsFromJSONDbReducer \n      const response = await wells.put(`wells/${wellId}`, wellInfo)\n      dispatch({\n        type: SAVE_WELL_PLANS_TO_JSON_RECEIVED,\n        payload: response\n      })\n    } catch (error) {\n\n      dispatch({\n        type: SAVE_WELL_PLANS_TO_JSON_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}