{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/HardLines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\";\nimport postHardLinesToJSONDb from \"../ActionCreators/postHardLinesToJSONDb\";\n\nconst HardLines = ({\n  saveWellInfoToReduxStoreReducer,\n  activeWell,\n  saveHardLinesToReduxStore,\n  postHardLinesToJSONDb\n}) => {\n  _s();\n\n  const {\n    operator,\n    rig,\n    well,\n    county,\n    usState,\n    northing,\n    easting\n  } = activeWell.response; // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialGrid = [[{\n    value: \"\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: \"7rem\"\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 2,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 3,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 4,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 5,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 6,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 7,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 8,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 9,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [grid, setGrid] = useState(initialGrid);\n\n  const renderWellHeader = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const {\n        well,\n        rig,\n        operator\n      } = saveWellInfoToReduxStoreReducer.response;\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"hy-4\",\n        children: [\" \", operator, \" - \", rig, \" - \", well]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n    } else if (activeWell.status === \"received\") {\n      const {\n        Well_Name,\n        Rig,\n        Operator\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"hy-4\",\n        children: [\" \", Operator.S, \" - \", Rig.S, \" - \", Well_Name.S]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n    } else {\n      return \"No well data\";\n    }\n  };\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row]);\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...grid[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n  };\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting,\n      grid\n    }; // const activeWell\n    // saveLeaseLinesToJSON \n\n    postHardLinesToJSONDb(wellInfoAndLeaseLines);\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines);\n  };\n\n  const checkTest = () => {\n    console.log(\"whyyy\");\n  };\n\n  const renderRowsButtons = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"my-4\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: addRow,\n          children: \"Add a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: removeRow,\n          children: \"Remove a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  };\n\n  const addRow = () => {\n    const gridLength = grid.length;\n    const newRow = [{\n      value: gridLength,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    const newGrid = [...grid, newRow];\n    setGrid(newGrid);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: [/*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          onCellsChanged: onCellsChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), renderRowsButtons()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HardLines, \"AwkJSX1oACPagmKnbp0h0/fPMH4=\");\n\n_c = HardLines;\n\nconst mapStateToProps = ({\n  activeWell,\n  postHardLinesToJSONDbReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell,\n    postHardLinesToJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveHardLinesToReduxStore,\n  postHardLinesToJSONDb\n})(HardLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"HardLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/HardLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveHardLinesToReduxStore","postHardLinesToJSONDb","HardLines","saveWellInfoToReduxStoreReducer","activeWell","operator","rig","well","county","usState","northing","easting","response","initialGrid","value","readOnly","width","grid","setGrid","renderWellHeader","status","Well_Name","Rig","Operator","S","onCellsChanged","changes","gridNew","map","row","forEach","cell","col","handleSubmit","wellInfoAndLeaseLines","checkTest","console","log","renderRowsButtons","addRow","removeRow","gridLength","length","newRow","newGrid","pop","mapStateToProps","postHardLinesToJSONDbReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\"\nimport postHardLinesToJSONDb from \"../ActionCreators/postHardLinesToJSONDb\"\n\n\nconst HardLines = ({saveWellInfoToReduxStoreReducer, activeWell, saveHardLinesToReduxStore, postHardLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialGrid = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [grid, setGrid] = useState(initialGrid)\n\n  const renderWellHeader = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    }\n    else if (activeWell.status === \"received\") {\n      const { Well_Name, Rig, Operator} = activeWell.response\n      return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...grid[row][col], value}\n    });\n    setGrid(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      grid\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    postHardLinesToJSONDb(wellInfoAndLeaseLines)\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines)\n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = grid.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...grid, newRow]\n    setGrid(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...grid]\n    newGrid.pop()\n    setGrid(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postHardLinesToJSONDbReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell,\n    postHardLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveHardLinesToReduxStore, postHardLinesToJSONDb})(HardLines)"]},"metadata":{},"sourceType":"module"}