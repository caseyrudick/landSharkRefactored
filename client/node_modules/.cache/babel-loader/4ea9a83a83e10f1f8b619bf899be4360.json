{"ast":null,"code":"'use strict';\n\nvar TYPE_ICON = 1;\n/**\n * ICON Header\n *\n * | Offset | Size | Purpose                                                                                   |\n * | 0\t    | 2    | Reserved. Must always be 0.                                                               |\n * | 2      | 2    | Image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image. Other values are invalid. |\n * | 4      | 2    | Number of images in the file.                                                             |\n *\n **/\n\nvar SIZE_HEADER = 2 + 2 + 2; // 6\n\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose                                                                                          |\n * | 0\t    | 1    | Image width in pixels. Can be any number between 0 and 255. Value 0 means width is 256 pixels.   |\n * | 1      | 1    | Image height in pixels. Can be any number between 0 and 255. Value 0 means height is 256 pixels. |\n * | 2      | 1    | Number of colors in the color palette. Should be 0 if the image does not use a color palette.    |\n * | 3      | 1    | Reserved. Should be 0.                                                                           |\n * | 4      | 2    | ICO format: Color planes. Should be 0 or 1.                                                      |\n * |        |      | CUR format: The horizontal coordinates of the hotspot in number of pixels from the left.         |\n * | 6      | 2    | ICO format: Bits per pixel.                                                                      |\n * |        |      | CUR format: The vertical coordinates of the hotspot in number of pixels from the top.            |\n * | 8      | 4    | The size of the image's data in bytes                                                            |\n * | 12     | 4    | The offset of BMP or PNG data from the beginning of the ICO/CUR file                             |\n *\n **/\n\nvar SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4; // 16\n\nfunction isICO(buffer) {\n  var type;\n\n  if (buffer.readUInt16LE(0) !== 0) {\n    return false;\n  }\n\n  type = buffer.readUInt16LE(2);\n  return type === TYPE_ICON;\n}\n\nfunction getSizeFromOffset(buffer, offset) {\n  var value = buffer.readUInt8(offset);\n  return value === 0 ? 256 : value;\n}\n\nfunction getImageSize(buffer, imageIndex) {\n  var offset = SIZE_HEADER + imageIndex * SIZE_IMAGE_ENTRY;\n  return {\n    'width': getSizeFromOffset(buffer, offset),\n    'height': getSizeFromOffset(buffer, offset + 1)\n  };\n}\n\nfunction calculate(buffer) {\n  var nbImages = buffer.readUInt16LE(4),\n      result = getImageSize(buffer, 0),\n      imageIndex;\n\n  if (nbImages === 1) {\n    return result;\n  }\n\n  result.images = [{\n    width: result.width,\n    height: result.height\n  }];\n\n  for (imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {\n    result.images.push(getImageSize(buffer, imageIndex));\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  'detect': isICO,\n  'calculate': calculate\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/image-size/lib/types/ico.js"],"names":["TYPE_ICON","SIZE_HEADER","SIZE_IMAGE_ENTRY","isICO","buffer","type","readUInt16LE","getSizeFromOffset","offset","value","readUInt8","getImageSize","imageIndex","calculate","nbImages","result","images","width","height","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAG,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,IAAI,CAAJ,GAAQ,CAA1B,C,CAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAAxB,GAA4B,CAAnD,C,CAAsD;;AAEtD,SAASC,KAAT,CAAgBC,MAAhB,EAAwB;AACtB,MAAIC,IAAJ;;AACA,MAAID,MAAM,CAACE,YAAP,CAAoB,CAApB,MAA2B,CAA/B,EAAkC;AAChC,WAAO,KAAP;AACD;;AACDD,EAAAA,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoB,CAApB,CAAP;AACA,SAAOD,IAAI,KAAKL,SAAhB;AACD;;AAED,SAASO,iBAAT,CAA2BH,MAA3B,EAAmCI,MAAnC,EAA2C;AACzC,MAAIC,KAAK,GAAGL,MAAM,CAACM,SAAP,CAAiBF,MAAjB,CAAZ;AACA,SAAOC,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoBA,KAA3B;AACD;;AAED,SAASE,YAAT,CAAsBP,MAAtB,EAA8BQ,UAA9B,EAA0C;AACxC,MAAIJ,MAAM,GAAGP,WAAW,GAAIW,UAAU,GAAGV,gBAAzC;AACA,SAAO;AACL,aAASK,iBAAiB,CAACH,MAAD,EAASI,MAAT,CADrB;AAEL,cAAUD,iBAAiB,CAACH,MAAD,EAASI,MAAM,GAAG,CAAlB;AAFtB,GAAP;AAID;;AAED,SAASK,SAAT,CAAoBT,MAApB,EAA4B;AAC1B,MACEU,QAAQ,GAAGV,MAAM,CAACE,YAAP,CAAoB,CAApB,CADb;AAAA,MAEES,MAAM,GAAGJ,YAAY,CAACP,MAAD,EAAS,CAAT,CAFvB;AAAA,MAGEQ,UAHF;;AAKA,MAAIE,QAAQ,KAAK,CAAjB,EAAoB;AAClB,WAAOC,MAAP;AACD;;AAEDA,EAAAA,MAAM,CAACC,MAAP,GAAgB,CAAC;AACfC,IAAAA,KAAK,EAAEF,MAAM,CAACE,KADC;AAEfC,IAAAA,MAAM,EAAEH,MAAM,CAACG;AAFA,GAAD,CAAhB;;AAKA,OAAKN,UAAU,GAAG,CAAlB,EAAqBA,UAAU,GAAGE,QAAlC,EAA4CF,UAAU,IAAI,CAA1D,EAA6D;AAC3DG,IAAAA,MAAM,CAACC,MAAP,CAAcG,IAAd,CAAmBR,YAAY,CAACP,MAAD,EAASQ,UAAT,CAA/B;AACD;;AAED,SAAOG,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACf,YAAUlB,KADK;AAEf,eAAaU;AAFE,CAAjB","sourcesContent":["'use strict';\n\nvar TYPE_ICON = 1;\n\n/**\n * ICON Header\n *\n * | Offset | Size | Purpose                                                                                   |\n * | 0\t    | 2    | Reserved. Must always be 0.                                                               |\n * | 2      | 2    | Image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image. Other values are invalid. |\n * | 4      | 2    | Number of images in the file.                                                             |\n *\n **/\nvar SIZE_HEADER = 2 + 2 + 2; // 6\n\n/**\n * Image Entry\n *\n * | Offset | Size | Purpose                                                                                          |\n * | 0\t    | 1    | Image width in pixels. Can be any number between 0 and 255. Value 0 means width is 256 pixels.   |\n * | 1      | 1    | Image height in pixels. Can be any number between 0 and 255. Value 0 means height is 256 pixels. |\n * | 2      | 1    | Number of colors in the color palette. Should be 0 if the image does not use a color palette.    |\n * | 3      | 1    | Reserved. Should be 0.                                                                           |\n * | 4      | 2    | ICO format: Color planes. Should be 0 or 1.                                                      |\n * |        |      | CUR format: The horizontal coordinates of the hotspot in number of pixels from the left.         |\n * | 6      | 2    | ICO format: Bits per pixel.                                                                      |\n * |        |      | CUR format: The vertical coordinates of the hotspot in number of pixels from the top.            |\n * | 8      | 4    | The size of the image's data in bytes                                                            |\n * | 12     | 4    | The offset of BMP or PNG data from the beginning of the ICO/CUR file                             |\n *\n **/\nvar SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4; // 16\n\nfunction isICO (buffer) {\n  var type;\n  if (buffer.readUInt16LE(0) !== 0) {\n    return false;\n  }\n  type = buffer.readUInt16LE(2);\n  return type === TYPE_ICON;\n}\n\nfunction getSizeFromOffset(buffer, offset) {\n  var value = buffer.readUInt8(offset);\n  return value === 0 ? 256 : value;\n}\n\nfunction getImageSize(buffer, imageIndex) {\n  var offset = SIZE_HEADER + (imageIndex * SIZE_IMAGE_ENTRY);\n  return {\n    'width': getSizeFromOffset(buffer, offset),\n    'height': getSizeFromOffset(buffer, offset + 1)\n  };\n}\n\nfunction calculate (buffer) {\n  var \n    nbImages = buffer.readUInt16LE(4),\n    result = getImageSize(buffer, 0),\n    imageIndex;\n    \n  if (nbImages === 1) {\n    return result;\n  }\n  \n  result.images = [{\n    width: result.width,\n    height: result.height\n  }];\n  \n  for (imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {\n    result.images.push(getImageSize(buffer, imageIndex));\n  }\n  \n  return result;\n}\n\nmodule.exports = {\n  'detect': isICO,\n  'calculate': calculate\n};\n"]},"metadata":{},"sourceType":"script"}