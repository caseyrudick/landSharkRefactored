{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Fx = require('../../components/fx');\n\nvar Registry = require('../../registry');\n\nvar getTraceColor = require('./get_trace_color');\n\nvar Color = require('../../components/color');\n\nvar fillText = Lib.fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var xa = pointData.xa;\n  var ya = pointData.ya;\n  var xpx = xa.c2p(xval);\n  var ypx = ya.c2p(yval);\n  var pt = [xpx, ypx];\n  var hoveron = trace.hoveron || '';\n  var minRad = trace.mode.indexOf('markers') !== -1 ? 3 : 0.5; // look for points to hover on first, then take fills only if we\n  // didn't find a point\n\n  if (hoveron.indexOf('points') !== -1) {\n    var dx = function (di) {\n      // dx and dy are used in compare modes - here we want to always\n      // prioritize the closest data point, at least as long as markers are\n      // the same size or nonexistent, but still try to prioritize small markers too.\n      var rad = Math.max(3, di.mrc || 0);\n      var kink = 1 - 1 / rad;\n      var dxRaw = Math.abs(xa.c2p(di.x) - xpx);\n      var d = dxRaw < rad ? kink * dxRaw / rad : dxRaw - rad + kink;\n      return d;\n    };\n\n    var dy = function (di) {\n      var rad = Math.max(3, di.mrc || 0);\n      var kink = 1 - 1 / rad;\n      var dyRaw = Math.abs(ya.c2p(di.y) - ypx);\n      return dyRaw < rad ? kink * dyRaw / rad : dyRaw - rad + kink;\n    };\n\n    var dxy = function (di) {\n      // scatter points: d.mrc is the calculated marker radius\n      // adjust the distance so if you're inside the marker it\n      // always will show up regardless of point size, but\n      // prioritize smaller points\n      var rad = Math.max(minRad, di.mrc || 0);\n      var dx = xa.c2p(di.x) - xpx;\n      var dy = ya.c2p(di.y) - ypx;\n      return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);\n    };\n\n    var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n    Fx.getClosest(cd, distfn, pointData); // skip the rest (for this trace) if we didn't find a close point\n\n    if (pointData.index !== false) {\n      // the closest data point\n      var di = cd[pointData.index];\n      var xc = xa.c2p(di.x, true);\n      var yc = ya.c2p(di.y, true);\n      var rad = di.mrc || 1; // now we're done using the whole `calcdata` array, replace the\n      // index with the original index (in case of inserted point from\n      // stacked area)\n\n      pointData.index = di.i;\n      var orientation = cd[0].t.orientation; // TODO: for scatter and bar, option to show (sub)totals and\n      // raw data? Currently stacked and/or normalized bars just show\n      // the normalized individual sizes, so that's what I'm doing here\n      // for now.\n\n      var sizeVal = orientation && (di.sNorm || di.s);\n      var xLabelVal = orientation === 'h' ? sizeVal : di.orig_x !== undefined ? di.orig_x : di.x;\n      var yLabelVal = orientation === 'v' ? sizeVal : di.orig_y !== undefined ? di.orig_y : di.y;\n      Lib.extendFlat(pointData, {\n        color: getTraceColor(trace, di),\n        x0: xc - rad,\n        x1: xc + rad,\n        xLabelVal: xLabelVal,\n        y0: yc - rad,\n        y1: yc + rad,\n        yLabelVal: yLabelVal,\n        spikeDistance: dxy(di),\n        hovertemplate: trace.hovertemplate\n      });\n      fillText(di, trace, pointData);\n      Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n      return [pointData];\n    }\n  } // even if hoveron is 'fills', only use it if we have polygons too\n\n\n  if (hoveron.indexOf('fills') !== -1 && trace._polygons) {\n    var polygons = trace._polygons;\n    var polygonsIn = [];\n    var inside = false;\n    var xmin = Infinity;\n    var xmax = -Infinity;\n    var ymin = Infinity;\n    var ymax = -Infinity;\n    var i, j, polygon, pts, xCross, x0, x1, y0, y1;\n\n    for (i = 0; i < polygons.length; i++) {\n      polygon = polygons[i]; // TODO: this is not going to work right for curved edges, it will\n      // act as though they're straight. That's probably going to need\n      // the elements themselves to capture the events. Worth it?\n\n      if (polygon.contains(pt)) {\n        inside = !inside; // TODO: need better than just the overall bounding box\n\n        polygonsIn.push(polygon);\n        ymin = Math.min(ymin, polygon.ymin);\n        ymax = Math.max(ymax, polygon.ymax);\n      }\n    }\n\n    if (inside) {\n      // constrain ymin/max to the visible plot, so the label goes\n      // at the middle of the piece you can see\n      ymin = Math.max(ymin, 0);\n      ymax = Math.min(ymax, ya._length); // find the overall left-most and right-most points of the\n      // polygon(s) we're inside at their combined vertical midpoint.\n      // This is where we will draw the hover label.\n      // Note that this might not be the vertical midpoint of the\n      // whole trace, if it's disjoint.\n\n      var yAvg = (ymin + ymax) / 2;\n\n      for (i = 0; i < polygonsIn.length; i++) {\n        pts = polygonsIn[i].pts;\n\n        for (j = 1; j < pts.length; j++) {\n          y0 = pts[j - 1][1];\n          y1 = pts[j][1];\n\n          if (y0 > yAvg !== y1 >= yAvg) {\n            x0 = pts[j - 1][0];\n            x1 = pts[j][0];\n\n            if (y1 - y0) {\n              xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);\n              xmin = Math.min(xmin, xCross);\n              xmax = Math.max(xmax, xCross);\n            }\n          }\n        }\n      } // constrain xmin/max to the visible plot now too\n\n\n      xmin = Math.max(xmin, 0);\n      xmax = Math.min(xmax, xa._length); // get only fill or line color for the hover color\n\n      var color = Color.defaultLine;\n      if (Color.opacity(trace.fillcolor)) color = trace.fillcolor;else if (Color.opacity((trace.line || {}).color)) {\n        color = trace.line.color;\n      }\n      Lib.extendFlat(pointData, {\n        // never let a 2D override 1D type as closest point\n        // also: no spikeDistance, it's not allowed for fills\n        distance: pointData.maxHoverDistance,\n        x0: xmin,\n        x1: xmax,\n        y0: yAvg,\n        y1: yAvg,\n        color: color,\n        hovertemplate: false\n      });\n      delete pointData.index;\n\n      if (trace.text && !Array.isArray(trace.text)) {\n        pointData.text = String(trace.text);\n      } else pointData.text = trace.name;\n\n      return [pointData];\n    }\n  }\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/scatter/hover.js"],"names":["Lib","require","Fx","Registry","getTraceColor","Color","fillText","module","exports","hoverPoints","pointData","xval","yval","hovermode","cd","trace","xa","ya","xpx","c2p","ypx","pt","hoveron","minRad","mode","indexOf","dx","di","rad","Math","max","mrc","kink","dxRaw","abs","x","d","dy","dyRaw","y","dxy","sqrt","distfn","getDistanceFunction","getClosest","index","xc","yc","i","orientation","t","sizeVal","sNorm","s","xLabelVal","orig_x","undefined","yLabelVal","orig_y","extendFlat","color","x0","x1","y0","y1","spikeDistance","hovertemplate","getComponentMethod","_polygons","polygons","polygonsIn","inside","xmin","Infinity","xmax","ymin","ymax","j","polygon","pts","xCross","length","contains","push","min","_length","yAvg","defaultLine","opacity","fillcolor","line","distance","maxHoverDistance","text","Array","isArray","String","name"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Fx = require('../../components/fx');\nvar Registry = require('../../registry');\nvar getTraceColor = require('./get_trace_color');\nvar Color = require('../../components/color');\nvar fillText = Lib.fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var xpx = xa.c2p(xval);\n    var ypx = ya.c2p(yval);\n    var pt = [xpx, ypx];\n    var hoveron = trace.hoveron || '';\n    var minRad = (trace.mode.indexOf('markers') !== -1) ? 3 : 0.5;\n\n    // look for points to hover on first, then take fills only if we\n    // didn't find a point\n    if(hoveron.indexOf('points') !== -1) {\n        var dx = function(di) {\n            // dx and dy are used in compare modes - here we want to always\n            // prioritize the closest data point, at least as long as markers are\n            // the same size or nonexistent, but still try to prioritize small markers too.\n            var rad = Math.max(3, di.mrc || 0);\n            var kink = 1 - 1 / rad;\n            var dxRaw = Math.abs(xa.c2p(di.x) - xpx);\n            var d = (dxRaw < rad) ? (kink * dxRaw / rad) : (dxRaw - rad + kink);\n            return d;\n        };\n        var dy = function(di) {\n            var rad = Math.max(3, di.mrc || 0);\n            var kink = 1 - 1 / rad;\n            var dyRaw = Math.abs(ya.c2p(di.y) - ypx);\n            return (dyRaw < rad) ? (kink * dyRaw / rad) : (dyRaw - rad + kink);\n        };\n        var dxy = function(di) {\n            // scatter points: d.mrc is the calculated marker radius\n            // adjust the distance so if you're inside the marker it\n            // always will show up regardless of point size, but\n            // prioritize smaller points\n            var rad = Math.max(minRad, di.mrc || 0);\n            var dx = xa.c2p(di.x) - xpx;\n            var dy = ya.c2p(di.y) - ypx;\n            return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);\n        };\n        var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n\n        Fx.getClosest(cd, distfn, pointData);\n\n        // skip the rest (for this trace) if we didn't find a close point\n        if(pointData.index !== false) {\n            // the closest data point\n            var di = cd[pointData.index];\n            var xc = xa.c2p(di.x, true);\n            var yc = ya.c2p(di.y, true);\n            var rad = di.mrc || 1;\n\n            // now we're done using the whole `calcdata` array, replace the\n            // index with the original index (in case of inserted point from\n            // stacked area)\n            pointData.index = di.i;\n\n            var orientation = cd[0].t.orientation;\n            // TODO: for scatter and bar, option to show (sub)totals and\n            // raw data? Currently stacked and/or normalized bars just show\n            // the normalized individual sizes, so that's what I'm doing here\n            // for now.\n            var sizeVal = orientation && (di.sNorm || di.s);\n            var xLabelVal = (orientation === 'h') ? sizeVal : di.orig_x !== undefined ? di.orig_x : di.x;\n            var yLabelVal = (orientation === 'v') ? sizeVal : di.orig_y !== undefined ? di.orig_y : di.y;\n\n            Lib.extendFlat(pointData, {\n                color: getTraceColor(trace, di),\n\n                x0: xc - rad,\n                x1: xc + rad,\n                xLabelVal: xLabelVal,\n\n                y0: yc - rad,\n                y1: yc + rad,\n                yLabelVal: yLabelVal,\n\n                spikeDistance: dxy(di),\n                hovertemplate: trace.hovertemplate\n            });\n\n            fillText(di, trace, pointData);\n            Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n\n            return [pointData];\n        }\n    }\n\n    // even if hoveron is 'fills', only use it if we have polygons too\n    if(hoveron.indexOf('fills') !== -1 && trace._polygons) {\n        var polygons = trace._polygons;\n        var polygonsIn = [];\n        var inside = false;\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n\n        var i, j, polygon, pts, xCross, x0, x1, y0, y1;\n\n        for(i = 0; i < polygons.length; i++) {\n            polygon = polygons[i];\n            // TODO: this is not going to work right for curved edges, it will\n            // act as though they're straight. That's probably going to need\n            // the elements themselves to capture the events. Worth it?\n            if(polygon.contains(pt)) {\n                inside = !inside;\n                // TODO: need better than just the overall bounding box\n                polygonsIn.push(polygon);\n                ymin = Math.min(ymin, polygon.ymin);\n                ymax = Math.max(ymax, polygon.ymax);\n            }\n        }\n\n        if(inside) {\n            // constrain ymin/max to the visible plot, so the label goes\n            // at the middle of the piece you can see\n            ymin = Math.max(ymin, 0);\n            ymax = Math.min(ymax, ya._length);\n\n            // find the overall left-most and right-most points of the\n            // polygon(s) we're inside at their combined vertical midpoint.\n            // This is where we will draw the hover label.\n            // Note that this might not be the vertical midpoint of the\n            // whole trace, if it's disjoint.\n            var yAvg = (ymin + ymax) / 2;\n            for(i = 0; i < polygonsIn.length; i++) {\n                pts = polygonsIn[i].pts;\n                for(j = 1; j < pts.length; j++) {\n                    y0 = pts[j - 1][1];\n                    y1 = pts[j][1];\n                    if((y0 > yAvg) !== (y1 >= yAvg)) {\n                        x0 = pts[j - 1][0];\n                        x1 = pts[j][0];\n                        if(y1 - y0) {\n                            xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);\n                            xmin = Math.min(xmin, xCross);\n                            xmax = Math.max(xmax, xCross);\n                        }\n                    }\n                }\n            }\n\n            // constrain xmin/max to the visible plot now too\n            xmin = Math.max(xmin, 0);\n            xmax = Math.min(xmax, xa._length);\n\n            // get only fill or line color for the hover color\n            var color = Color.defaultLine;\n            if(Color.opacity(trace.fillcolor)) color = trace.fillcolor;\n            else if(Color.opacity((trace.line || {}).color)) {\n                color = trace.line.color;\n            }\n\n            Lib.extendFlat(pointData, {\n                // never let a 2D override 1D type as closest point\n                // also: no spikeDistance, it's not allowed for fills\n                distance: pointData.maxHoverDistance,\n                x0: xmin,\n                x1: xmax,\n                y0: yAvg,\n                y1: yAvg,\n                color: color,\n                hovertemplate: false\n            });\n\n            delete pointData.index;\n\n            if(trace.text && !Array.isArray(trace.text)) {\n                pointData.text = String(trace.text);\n            } else pointData.text = trace.name;\n\n            return [pointData];\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}