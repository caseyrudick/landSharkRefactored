{"ast":null,"code":"'use strict'; // Abstract reading multi-byte unsigned integers\n\nfunction readUInt(buffer, bits, offset, isBigEndian) {\n  offset = offset || 0;\n  var endian = isBigEndian ? 'BE' : 'LE';\n  var method = buffer['readUInt' + bits + endian];\n  return method.call(buffer, offset);\n}\n\nmodule.exports = readUInt;","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/image-size/lib/readUInt.js"],"names":["readUInt","buffer","bits","offset","isBigEndian","endian","method","call","module","exports"],"mappings":"AAAA,a,CAEA;;AACA,SAASA,QAAT,CAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,WAAzC,EAAsD;AACpDD,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACA,MAAIE,MAAM,GAAGD,WAAW,GAAG,IAAH,GAAU,IAAlC;AACA,MAAIE,MAAM,GAAGL,MAAM,CAAC,aAAaC,IAAb,GAAoBG,MAArB,CAAnB;AACA,SAAOC,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBE,MAApB,CAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["'use strict';\n\n// Abstract reading multi-byte unsigned integers\nfunction readUInt (buffer, bits, offset, isBigEndian) {\n  offset = offset || 0;\n  var endian = isBigEndian ? 'BE' : 'LE';\n  var method = buffer['readUInt' + bits + endian];\n  return method.call(buffer, offset);\n}\n\nmodule.exports = readUInt;\n"]},"metadata":{},"sourceType":"script"}