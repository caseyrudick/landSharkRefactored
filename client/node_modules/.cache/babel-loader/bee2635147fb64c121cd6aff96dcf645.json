{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\nimport fetchWellsFromJSON from \"../ActionCreators/fetchWellsFromJSON\"; // react-bootstrap\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { connect } from \"react-redux\";\n\nconst Home = ({\n  saveWellInfoToReduxStore,\n  fetchWellsFromJSON,\n  getWellsFromReducer\n}) => {\n  _s();\n\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [state, setState] = useState('');\n  const [SHL_Northing, setSHL_Northing] = useState('');\n  const [SHL_Easting, setSHL_Easting] = useState('');\n  useEffect(() => {\n    fetchWellsFromJSON();\n  }, []);\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      state,\n      SHL_Northing,\n      SHL_Easting\n    };\n    console.log(wellInfo);\n    saveWellInfoToReduxStore(wellInfo);\n  };\n\n  const renderWellNames = () => {\n    return /*#__PURE__*/_jsxDEV(Dropdown.Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  };\n\n  const selectExistingWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select Existing Well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n        className: \"my-4\",\n        id: \"homePageSelectWell\",\n        title: `Selected Well:`,\n        children: renderWellNames()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n\n  const inputNewWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      md: 4,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \" Add New Well Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Operator\",\n        onChange: e => setOperator(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Rig\",\n        onChange: e => setRig(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Well\",\n        onChange: e => setWell(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"County\",\n        onChange: e => setCounty(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"State\",\n        onChange: e => setState(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Northing\",\n        onChange: e => setSHL_Northing(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Easting\",\n        onChange: e => setSHL_Easting(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        className: \"mt-4 mb-4\",\n        onClick: handleNewWellSubmit,\n        children: \"Create New Well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [inputNewWell(), selectExistingWell()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Home, \"pC2bL5B85gVKCLrK3RP94KYQxi4=\");\n\n_c = Home;\n\nconst mapStateToProps = state => {\n  return {\n    wells: Object.values(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveWellInfoToReduxStore,\n  fetchWellsFromJSON\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/Components/Home.js"],"names":["React","useEffect","useState","saveWellInfoToReduxStore","fetchWellsFromJSON","Container","Row","Col","Button","DropdownButton","Form","Dropdown","connect","Home","getWellsFromReducer","operator","setOperator","rig","setRig","well","setWell","county","setCounty","state","setState","SHL_Northing","setSHL_Northing","SHL_Easting","setSHL_Easting","handleNewWellSubmit","wellInfo","console","log","renderWellNames","selectExistingWell","inputNewWell","e","target","value","mapStateToProps","wells","Object","values"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\nimport fetchWellsFromJSON from \"../ActionCreators/fetchWellsFromJSON\"\n\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { connect } from \"react-redux\";\n\n\nconst Home = ({saveWellInfoToReduxStore, fetchWellsFromJSON, getWellsFromReducer}) => {\n  const [operator, setOperator] = useState('')\n  const [rig, setRig] = useState('')\n  const [well, setWell] = useState('')\n  const [county, setCounty] = useState('')\n  const [state, setState] = useState('')\n  const [SHL_Northing, setSHL_Northing] = useState('')\n  const [SHL_Easting, setSHL_Easting] = useState('')\n\n  useEffect(()=>{\n    fetchWellsFromJSON()\n  },[])\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      state,\n      SHL_Northing,\n      SHL_Easting,\n    }\n    console.log(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n  }\n  \n  const renderWellNames = () => {\n\n\n    return (\n      <Dropdown.Menu>\n        {/* {fetchWellsFromJSON.map(well => {\n          return (\n            <Dropdown.Item href=\"\">\n              {well.operator - well.rig - well.well}\n            </Dropdown.Item>\n          )\n        })} */}\n      </Dropdown.Menu>\n    )\n  }\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n      <h3 className=\"my-4\">Select Existing Well</h3>\n        <DropdownButton className= \"my-4\" id=\"homePageSelectWell\" title={`Selected Well:`}>\n          {renderWellNames()} \n        </DropdownButton>\n\n    </Col>\n    )\n\n  }\n\n\nconst inputNewWell = () => {\n  return (\n    <Col md={4}>\n      <h3 className=\"my-4\"> Add New Well Data</h3>\n      <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={e => setOperator(e.target.value)}/>\n      <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={e => setRig(e.target.value)}/>\n      <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={e => setWell(e.target.value)}/>\n      <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={e => setCounty(e.target.value)}/>\n      <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={e => setState(e.target.value)}/>\n      <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={e => setSHL_Northing(e.target.value)}/>\n      <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={e => setSHL_Easting(e.target.value)}/>\n      <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={handleNewWellSubmit}>Create New Well</Button>\n      {/* <Button variant=\"primary\" className=\"mt-4 ml-4 mb-4\" onClick={()=>fetchWellsFromJSON()}>Get list of wells</Button> */}\n    </Col>\n  )\n}\n\nreturn (\n  <Container>\n    <Row>\n      {inputNewWell()}\n      {selectExistingWell()}\n    </Row>\n  </Container>\n)\n\n}\n\nconst mapStateToProps = (state) => {\n  return {wells: Object.values(state)}\n}\n\nexport default connect(mapStateToProps, {saveWellInfoToReduxStore, fetchWellsFromJSON})(Home)"]},"metadata":{},"sourceType":"module"}