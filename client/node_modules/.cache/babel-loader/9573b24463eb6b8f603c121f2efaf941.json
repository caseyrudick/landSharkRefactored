{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingHardLines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport { get } from \"lodash\";\n\nconst ExistingHardLines = ({\n  getHardLinesFromDynamoDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [hardLines, setHardLines] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n      createCopy();\n    }\n  }, [getHardLinesFromDynamoDbReducer.response.Items]);\n  useEffect(() => {\n    createReactDataSheetGridFromHardLines();\n  }, [hardLines]);\n\n  const createCopy = () => {\n    console.log(getHardLinesFromDynamoDbReducer.response.Items);\n    setHardLines([...getHardLinesFromDynamoDbReducer.Items]);\n  };\n\n  const createReactDataSheetGridFromHardLines = () => {\n    let dataSheetHeader = [[{\n      value: '',\n      readOnly: true,\n      width: '3rem'\n    }, {\n      value: 'Northing',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'Easting',\n      readOnly: true,\n      width: '7rem'\n    }]];\n    let hardLinesCopy = [...hardLines];\n    hardLinesCopy.forEach((hardLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {\n        value: idx + 1,\n        width: \"4rem\",\n        readOnly: true\n      };\n      newRow[1] = {\n        value: parseInt(hardLineItem.Northing),\n        width: \"7rem\"\n      };\n      newRow[2] = {\n        value: parseInt(hardLineItem.Easting),\n        width: \"7rem\"\n      };\n      dataSheetHeader.push(newRow);\n    });\n    setGrid(dataSheetHeader);\n  };\n\n  const renderMain = () => {\n    if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n      const {\n        operator,\n        rig,\n        well\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  }\n};\n\n_s(ExistingHardLines, \"nM6a77/yUP/nbXebOzwf/UHV4Cw=\");\n\n_c = ExistingHardLines;\n\nconst mapStateToProps = ({\n  activeWell,\n  getHardLinesFromDynamoDbReducer\n}) => {\n  return {\n    activeWell,\n    getHardLinesFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps)(ExistingHardLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingHardLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingHardLines.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","get","ExistingHardLines","getHardLinesFromDynamoDbReducer","activeWell","hardLines","setHardLines","grid","setGrid","status","createCopy","response","Items","createReactDataSheetGridFromHardLines","console","log","dataSheetHeader","value","readOnly","width","hardLinesCopy","forEach","hardLineItem","idx","newRow","parseInt","Northing","Easting","push","renderMain","operator","rig","well","cell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport { get } from \"lodash\"\n\nconst ExistingHardLines = ({getHardLinesFromDynamoDbReducer, activeWell}) => {\n  const [hardLines, setHardLines] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(()=>{\n    if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n      createCopy()\n    }\n  },[getHardLinesFromDynamoDbReducer.response.Items])\n\n  useEffect(() => {\n    createReactDataSheetGridFromHardLines()\n  }, [hardLines])\n\n  const createCopy = () => {\n    console.log(getHardLinesFromDynamoDbReducer.response.Items)\n    setHardLines([...getHardLinesFromDynamoDbReducer.Items])\n  }\n\n  const createReactDataSheetGridFromHardLines = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'},  {value: 'Northing', readOnly: true, width: '7rem'}, {value: 'Easting', readOnly: true, width: '7rem'}]]\n    let hardLinesCopy = [...hardLines];\n    hardLinesCopy.forEach((hardLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx + 1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(hardLineItem.Northing), width: \"7rem\"}\n      newRow[2] = {value: parseInt(hardLineItem.Easting), width: \"7rem\"}\n      dataSheetHeader.push(newRow)\n    })\n    setGrid(dataSheetHeader)\n  }\n\n  const renderMain = () => {\n    if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n      const {operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          {/* <h3 className=\"my-4\">{operator} - {rig} - {well}</h3> */}\n          <ReactDataSheet data = {grid} valueRenderer = {cell => cell.value} width></ReactDataSheet>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n        return \"error\"\n    }\n}\n\nconst mapStateToProps = ({activeWell, getHardLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getHardLinesFromDynamoDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingHardLines)"]},"metadata":{},"sourceType":"module"}