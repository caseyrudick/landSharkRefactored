{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PVA.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\";\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\";\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\n\nconst PVA = ({\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  activeWell\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1);\n        console.log(\"easting\" + result);\n        const eastingCoordinates = [];\n        data.map((row, index) => {\n          if (index === 0 || index === 1) {} else {\n            const x = data[index][2].value;\n            eastingCoordinates.push(x);\n          }\n        });\n        return eastingCoordinates;\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let eastingCoordinates = [];\n        data.map((row, index) => {\n          if (index === 0) {} else {\n            let x = data[index][6].value;\n            eastingCoordinates.push(x);\n          }\n        });\n        return eastingCoordinates;\n      }\n    }\n  };\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][1].value).slice(1);\n        console.log(\"northing:\" + result);\n        let northingCoordinates = [];\n        northingCoordinates = data.map((row, index) => {\n          if (index === 0 || index === 1) {} else {\n            console.log(data);\n            return data[index][5];\n          }\n        });\n        return northingCoordinates;\n      }\n    }\n  }; // const createEastingCoordinates = (polyLine = false, data) => {\n  //   if (polyLine) {\n  //     if (data.length === 0) {\n  //       return []\n  //     } else {\n  //       return data.slice(1).filter((row, index) => index !== 0)\n  //         .map((row, index) => data[index][2])\n  //     }\n  //   } else {\n  //       if (data.length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][6])\n  //       }\n  //     }\n  //   } \n  //   const createNorthingCoordinates = (polyLine = false, data) => {\n  //     if (polyLine) {\n  //       if (data.length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][1])\n  //       }\n  //     } else {\n  //         if (data.length === 0) {\n  //           return []\n  //         } else {\n  //           return data.slice(1).filter((row, index) => index !== 0)\n  //             .map((row, index) => data[index][5])\n  //         }\n  //       }\n  //     } \n\n\n  console.log(saveLeaseLinesToReduxStoreReducer.response.grid);\n\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n        y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n        y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        },\n        name: \"Lease Lines\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Section View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: renderPlanView()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PVA;\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer,\n    saveLeaseLinesToReduxStoreReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  saveLeaseLinesToReduxStore,\n  saveWellInfoToReduxStore\n})(PVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"PVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PVA.js"],"names":["React","Container","Plot","connect","_","savePlansToReduxStore","saveLeaseLinesToReduxStore","saveWellInfoToReduxStore","PVA","savePlansToReduxStoreReducer","saveLeaseLinesToReduxStoreReducer","activeWell","createEastingCoordinates","data","polyLine","Object","keys","length","console","log","result","map","row","index","value","slice","eastingCoordinates","x","push","createNorthingCoordinates","northingCoordinates","response","grid","renderPlanView","y","type","mode","marker","color","name","width","height","title","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\"\nimport _ from \"lodash\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n\nconst PVA = ({savePlansToReduxStoreReducer, saveLeaseLinesToReduxStoreReducer, activeWell}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        console.log(\"easting\" + result)\n        const eastingCoordinates = []\n        data.map((row, index) => {\n          if (index === 0 || index === 1) {\n\n          } else {\n            const x = data[index][2].value\n            eastingCoordinates.push(x)\n          }\n        })\n        return eastingCoordinates\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let eastingCoordinates = []\n        data.map((row, index) => {\n          if (index === 0) {\n\n          } else {\n            let x = data[index][6].value\n            eastingCoordinates.push(x)\n          }\n        })\n        return eastingCoordinates\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][1].value).slice(1)\n        console.log(\"northing:\" + result)\n        let northingCoordinates = []\n        northingCoordinates = data.map((row, index) => {\n          if (index === 0 || index === 1) {\n\n          } else {\n            console.log(data)\n            return data[index][5]\n            \n          }\n        })\n        return northingCoordinates\n      }\n    }\n  }\n\n  // const createEastingCoordinates = (polyLine = false, data) => {\n  //   if (polyLine) {\n  //     if (data.length === 0) {\n  //       return []\n  //     } else {\n  //       return data.slice(1).filter((row, index) => index !== 0)\n  //         .map((row, index) => data[index][2])\n  //     }\n  //   } else {\n  //       if (data.length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][6])\n  //       }\n  //     }\n  //   } \n\n  //   const createNorthingCoordinates = (polyLine = false, data) => {\n  //     if (polyLine) {\n  //       if (data.length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][1])\n  //       }\n  //     } else {\n  //         if (data.length === 0) {\n  //           return []\n  //         } else {\n  //           return data.slice(1).filter((row, index) => index !== 0)\n  //             .map((row, index) => data[index][5])\n  //         }\n  //       }\n  //     } \nconsole.log(saveLeaseLinesToReduxStoreReducer.response.grid)\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return (\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n            y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Lease Lines\"\n          }\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Section View'} }\n        />\n    )\n  }\n\n  return (\n    <Container>\n      {renderPlanView()}\n    </Container>\n  )\n\n}\n\nconst mapStateToProps = ({savePlansToReduxStoreReducer, saveLeaseLinesToReduxStoreReducer, activeWell}) => {\n  return {\n    savePlansToReduxStoreReducer, \n    saveLeaseLinesToReduxStoreReducer, \n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, saveLeaseLinesToReduxStore, saveWellInfoToReduxStore })(PVA)"]},"metadata":{},"sourceType":"module"}