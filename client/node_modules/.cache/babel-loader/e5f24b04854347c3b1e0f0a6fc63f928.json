{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\n// react\nimport React, { useState, useEffect } from 'react'; // react-bootstrap\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown'; // other libs/imports\n\nimport { connect } from 'react-redux';\nimport _ from 'lodash'; // images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\n\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"; // import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\n\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\";\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\";\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\";\n\nconst Home = ({\n  postWellInfoToJSONDb,\n  saveWellInfoToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  wells,\n  getWellsFromJSONDb\n}) => {\n  _s();\n\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n  useEffect(() => {\n    setTimeout(getWellsFromJSONDb, 1000);\n  }, []);\n\n  const createNewWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Add new well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Operator\",\n        onChange: event => setOperator(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Rig\",\n        onChange: event => setRig(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Well\",\n        onChange: event => setWell(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"County\",\n        onChange: event => setCounty(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"State\",\n        onChange: event => setUSstate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Northing\",\n        onChange: event => setNorthing(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Easting\",\n        onChange: event => setEasting(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"info\",\n        disabled: operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false,\n        onClick: handleNewWellSubmit,\n        children: \"Submit and begin adding well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderWellNames = () => {\n    let renderedWells;\n\n    if (wells.status === \"received\") {\n      renderedWells = Object.values(wells)[0].map(well => {\n        let wellFormat = `${well.operator} - ${well.rig} - ${well.well}`;\n        return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          href: \"\",\n          onClick: () => {\n            setActiveWell(wellFormat);\n            saveActiveWellToReduxStore(well);\n          },\n          children: [\" \", wellFormat]\n        }, `${well.rig} + ${well.well}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this);\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n      children: renderedWells\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  };\n\n  const selectExistingWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select Existing Well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: activeWell ? activeWell : `Select Well:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), renderWellNames()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      plans: [],\n      county,\n      uSstate,\n      northing,\n      easting\n    };\n    postWellInfoToJSONDb(wellInfo);\n    saveWellInfoToReduxStore(wellInfo);\n    getWellsFromJSONDb();\n  }; // const handleFetchData = () => {\n  //   setTimeout(getWellPlansFromDynamoDb(selectedWell), 500);\n  //   setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   setTimeout(getWellLeaseLinesFromDynamoDb(selectedWell), 1500);\n  //   setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   setTimeout(getOffsets(selectedWell), 2500);\n  // }\n\n\n  const renderSelectWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select existing well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: /*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: [\"Selected Well: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: activeWell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [createNewWell(), selectExistingWell()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 7\n  }, this); //  }\n};\n\n_s(Home, \"fWUv5S1uO61BorIxo+Iw1TR9Xls=\");\n\n_c = Home;\n\nconst mapStateToProps = ({\n  saveActiveWellToReduxStoreReducer,\n  saveWellInfoToReduxStoreReducer,\n  postWellInfoToJSONDbReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    wells: getWellsFromJSONDbReducer,\n    activeWell: saveActiveWellToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveWellInfoToReduxStore,\n  postWellInfoToJSONDb,\n  getWellsFromJSONDb\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js"],"names":["React","useState","useEffect","Container","Row","Col","Button","Form","Dropdown","connect","_","saveWellInfoToReduxStore","postWellInfoToJSONDb","getWellsFromJSONDb","saveActiveWellToReduxStore","Home","saveWellInfoToReduxStoreReducer","wells","activeWell","setActiveWell","operator","setOperator","rig","setRig","well","setWell","county","setCounty","uSstate","setUSstate","northing","setNorthing","easting","setEasting","setTimeout","createNewWell","event","target","value","handleNewWellSubmit","renderWellNames","renderedWells","status","Object","values","map","wellFormat","selectExistingWell","wellInfo","plans","renderSelectWell","mapStateToProps","saveActiveWellToReduxStoreReducer","postWellInfoToJSONDbReducer","getWellsFromJSONDbReducer"],"mappings":"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","sourcesContent":["// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n// import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\"\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\"\n\n\nconst Home = ({postWellInfoToJSONDb, saveWellInfoToReduxStore, saveWellInfoToReduxStoreReducer, wells, getWellsFromJSONDb}) => {\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n  useEffect(() => {\n\n    setTimeout(getWellsFromJSONDb, 1000);\n  }, []);\n\n  const createNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false } onClick={handleNewWellSubmit}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  const renderWellNames = () => {\n    let renderedWells;\n    if (wells.status === \"received\") {\n      renderedWells = Object.values(wells)[0].map((well) => {\n        let wellFormat = `${well.operator} - ${well.rig} - ${well.well}`\n        return (\n          <Dropdown.Item\n            href=\"\"\n            key={`${well.rig} + ${well.well}`}\n            onClick={()=> {\n              setActiveWell(wellFormat)\n              saveActiveWellToReduxStore(well)\n            }}\n            > {wellFormat}\n          </Dropdown.Item>\n        )\n      })\n    }\n    return (\n      <Dropdown.Menu>\n        {renderedWells}\n      </Dropdown.Menu>\n    )\n  }\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n      <h3 className=\"my-4\">Select Existing Well</h3>\n      <Dropdown>\n        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n          {activeWell ? activeWell : `Select Well:`}\n        </Dropdown.Toggle>\n        {renderWellNames()}\n      </Dropdown>\n\n      </Col>\n    )\n  }\n\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      plans: [],\n      county,\n      uSstate,\n      northing,\n      easting\n    }\n    postWellInfoToJSONDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n    getWellsFromJSONDb()\n  }\n\n  // const handleFetchData = () => {\n  //   setTimeout(getWellPlansFromDynamoDb(selectedWell), 500);\n  //   setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   setTimeout(getWellLeaseLinesFromDynamoDb(selectedWell), 1500);\n  //   setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   setTimeout(getOffsets(selectedWell), 2500);\n  // }\n\n  const renderSelectWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select existing well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            Selected Well: <strong>{activeWell}</strong>\n          </Dropdown.Toggle>\n          {/* // {renderWellNames()} */}\n        </Dropdown>\n        {/* <Button className=\"mt-4\" variant=\"success\" disabled={ selectedWell === \"None\" ? true : false } onClick={handleFetchData}>Fetch well data</Button> */}\n      </Col>\n    )\n  }\n\n\n  \n  return (\n      <Container>\n        <Row>\n          {createNewWell()}\n          {selectExistingWell()}\n        </Row>\n      </Container>\n    )\n//  }\n}\n\nconst mapStateToProps = ({ saveActiveWellToReduxStoreReducer ,saveWellInfoToReduxStoreReducer, postWellInfoToJSONDbReducer, getWellsFromJSONDbReducer }) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    wells: getWellsFromJSONDbReducer,\n    activeWell: saveActiveWellToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, { saveWellInfoToReduxStore, postWellInfoToJSONDb, getWellsFromJSONDb })(Home);\n"]},"metadata":{},"sourceType":"module"}