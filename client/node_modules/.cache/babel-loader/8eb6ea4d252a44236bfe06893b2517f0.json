{"ast":null,"code":"'use strict';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar rgba = require('color-normalize');\n\nvar getBounds = require('array-bounds');\n\nvar colorId = require('color-id');\n\nvar cluster = require('@plotly/point-cluster');\n\nvar extend = require('object-assign');\n\nvar glslify = require('glslify');\n\nvar pick = require('pick-by-alias');\n\nvar updateDiff = require('update-diff');\n\nvar flatten = require('flatten-vertex-data');\n\nvar ie = require('is-iexplorer');\n\nvar f32 = require('to-float32');\n\nvar parseRect = require('parse-rect');\n\nvar scatter = Scatter;\n\nfunction Scatter(regl, options) {\n  var _this = this;\n\n  if (!(this instanceof Scatter)) return new Scatter(regl, options);\n\n  if (typeof regl === 'function') {\n    if (!options) options = {};\n    options.regl = regl;\n  } else {\n    options = regl;\n    regl = null;\n  }\n\n  if (options && options.length) options.positions = options;\n  regl = options.regl; // persistent variables\n\n  var gl = regl._gl,\n      paletteTexture,\n      palette = [],\n      paletteIds = {},\n      // state\n  groups = [],\n      // textures for marker keys\n  markerTextures = [null],\n      markerCache = [null];\n  var maxColors = 255,\n      maxSize = 100; // direct color buffer mode\n  // IE does not support palette anyways\n\n  this.tooManyColors = ie; // texture with color palette\n\n  paletteTexture = regl.texture({\n    data: new Uint8Array(maxColors * 4),\n    width: maxColors,\n    height: 1,\n    type: 'uint8',\n    format: 'rgba',\n    wrapS: 'clamp',\n    wrapT: 'clamp',\n    mag: 'nearest',\n    min: 'nearest'\n  });\n  extend(this, {\n    regl: regl,\n    gl: gl,\n    groups: groups,\n    markerCache: markerCache,\n    markerTextures: markerTextures,\n    palette: palette,\n    paletteIds: paletteIds,\n    paletteTexture: paletteTexture,\n    maxColors: maxColors,\n    maxSize: maxSize,\n    canvas: gl.canvas\n  });\n  this.update(options); // common shader options\n\n  var shaderOptions = {\n    uniforms: {\n      constPointSize: !!options.constPointSize,\n      pixelRatio: regl.context('pixelRatio'),\n      palette: paletteTexture,\n      paletteSize: function paletteSize(ctx, prop) {\n        return [_this.tooManyColors ? 0 : maxColors, paletteTexture.height];\n      },\n      scale: regl.prop('scale'),\n      scaleFract: regl.prop('scaleFract'),\n      translate: regl.prop('translate'),\n      translateFract: regl.prop('translateFract'),\n      opacity: regl.prop('opacity'),\n      marker: regl.prop('markerTexture')\n    },\n    attributes: {\n      // FIXME: optimize these parts\n      x: function x(ctx, prop) {\n        return prop.xAttr || {\n          buffer: prop.positionBuffer,\n          stride: 8,\n          offset: 0\n        };\n      },\n      y: function y(ctx, prop) {\n        return prop.yAttr || {\n          buffer: prop.positionBuffer,\n          stride: 8,\n          offset: 4\n        };\n      },\n      xFract: function xFract(ctx, prop) {\n        return prop.xAttr ? {\n          constant: [0, 0]\n        } : {\n          buffer: prop.positionFractBuffer,\n          stride: 8,\n          offset: 0\n        };\n      },\n      yFract: function yFract(ctx, prop) {\n        return prop.yAttr ? {\n          constant: [0, 0]\n        } : {\n          buffer: prop.positionFractBuffer,\n          stride: 8,\n          offset: 4\n        };\n      },\n      size: function size(ctx, prop) {\n        return prop.size.length ? {\n          buffer: prop.sizeBuffer,\n          stride: 2,\n          offset: 0\n        } : {\n          constant: [Math.round(prop.size * 255 / _this.maxSize)]\n        };\n      },\n      borderSize: function borderSize(ctx, prop) {\n        return prop.borderSize.length ? {\n          buffer: prop.sizeBuffer,\n          stride: 2,\n          offset: 1\n        } : {\n          constant: [Math.round(prop.borderSize * 255 / _this.maxSize)]\n        };\n      },\n      colorId: function colorId(ctx, prop) {\n        return prop.color.length ? {\n          buffer: prop.colorBuffer,\n          stride: _this.tooManyColors ? 8 : 4,\n          offset: 0\n        } : {\n          constant: _this.tooManyColors ? palette.slice(prop.color * 4, prop.color * 4 + 4) : [prop.color]\n        };\n      },\n      borderColorId: function borderColorId(ctx, prop) {\n        return prop.borderColor.length ? {\n          buffer: prop.colorBuffer,\n          stride: _this.tooManyColors ? 8 : 4,\n          offset: _this.tooManyColors ? 4 : 2\n        } : {\n          constant: _this.tooManyColors ? palette.slice(prop.borderColor * 4, prop.borderColor * 4 + 4) : [prop.borderColor]\n        };\n      },\n      isActive: function isActive(ctx, prop) {\n        return prop.activation === true ? {\n          constant: [1]\n        } : prop.activation ? prop.activation : {\n          constant: [0]\n        };\n      }\n    },\n    blend: {\n      enable: true,\n      color: [0, 0, 0, 1],\n      // photoshop blending\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 'one minus dst alpha',\n        dstAlpha: 'one'\n      }\n    },\n    scissor: {\n      enable: true,\n      box: regl.prop('viewport')\n    },\n    viewport: regl.prop('viewport'),\n    stencil: {\n      enable: false\n    },\n    depth: {\n      enable: false\n    },\n    elements: regl.prop('elements'),\n    count: regl.prop('count'),\n    offset: regl.prop('offset'),\n    primitive: 'points'\n  }; // draw sdf-marker\n\n  var markerOptions = extend({}, shaderOptions);\n  markerOptions.frag = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragColor, fragBorderColor;\\nvarying float fragWidth, fragBorderColorLevel, fragColorLevel;\\n\\nuniform sampler2D marker;\\nuniform float opacity;\\n\\nfloat smoothStep(float x, float y) {\\n  return 1.0 / (1.0 + exp(50.0*(x - y)));\\n}\\n\\nvoid main() {\\n  float dist = texture2D(marker, gl_PointCoord).r, delta = fragWidth;\\n\\n  // max-distance alpha\\n  if (dist < 0.003) discard;\\n\\n  // null-border case\\n  if (fragBorderColorLevel == fragColorLevel || fragBorderColor.a == 0.) {\\n    float colorAmt = smoothstep(.5 - delta, .5 + delta, dist);\\n    gl_FragColor = vec4(fragColor.rgb, colorAmt * fragColor.a * opacity);\\n  }\\n  else {\\n    float borderColorAmt = smoothstep(fragBorderColorLevel - delta, fragBorderColorLevel + delta, dist);\\n    float colorAmt = smoothstep(fragColorLevel - delta, fragColorLevel + delta, dist);\\n\\n    vec4 color = fragBorderColor;\\n    color.a *= borderColorAmt;\\n    color = mix(color, fragColor, colorAmt);\\n    color.a *= opacity;\\n\\n    gl_FragColor = color;\\n  }\\n\\n}\\n\"]);\n  markerOptions.vert = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute float x, y, xFract, yFract;\\nattribute float size, borderSize;\\nattribute vec4 colorId, borderColorId;\\nattribute float isActive;\\n\\nuniform vec2 scale, scaleFract, translate, translateFract, paletteSize;\\nuniform float pixelRatio;\\nuniform bool constPointSize;\\nuniform sampler2D palette;\\n\\nconst float maxSize = 100.;\\nconst float borderLevel = .5;\\n\\nvarying vec4 fragColor, fragBorderColor;\\nvarying float fragPointSize, fragBorderRadius, fragWidth, fragBorderColorLevel, fragColorLevel;\\n\\nfloat pointSizeScale = (constPointSize) ? 2. : pixelRatio;\\n\\nbool isDirect = (paletteSize.x < 1.);\\n\\nvec4 getColor(vec4 id) {\\n  return isDirect ? id / 255. : texture2D(palette,\\n    vec2(\\n      (id.x + .5) / paletteSize.x,\\n      (id.y + .5) / paletteSize.y\\n    )\\n  );\\n}\\n\\nvoid main() {\\n  // ignore inactive points\\n  if (isActive == 0.) return;\\n\\n  vec2 position = vec2(x, y);\\n  vec2 positionFract = vec2(xFract, yFract);\\n\\n  vec4 color = getColor(colorId);\\n  vec4 borderColor = getColor(borderColorId);\\n\\n  float size = size * maxSize / 255.;\\n  float borderSize = borderSize * maxSize / 255.;\\n\\n  gl_PointSize = 2. * size * pointSizeScale;\\n  fragPointSize = size * pixelRatio;\\n\\n  vec2 pos = (position + translate) * scale\\n      + (positionFract + translateFract) * scale\\n      + (position + translate) * scaleFract\\n      + (positionFract + translateFract) * scaleFract;\\n\\n  gl_Position = vec4(pos * 2. - 1., 0., 1.);\\n\\n  fragColor = color;\\n  fragBorderColor = borderColor;\\n  fragWidth = 1. / gl_PointSize;\\n\\n  fragBorderColorLevel = clamp(borderLevel - borderLevel * borderSize / size, 0., 1.);\\n  fragColorLevel = clamp(borderLevel + (1. - borderLevel) * borderSize / size, 0., 1.);\\n}\"]);\n  this.drawMarker = regl(markerOptions); // draw circle\n\n  var circleOptions = extend({}, shaderOptions);\n  circleOptions.frag = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragColor, fragBorderColor;\\n\\nuniform float opacity;\\nvarying float fragBorderRadius, fragWidth;\\n\\nfloat smoothStep(float edge0, float edge1, float x) {\\n\\tfloat t;\\n\\tt = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n\\treturn t * t * (3.0 - 2.0 * t);\\n}\\n\\nvoid main() {\\n\\tfloat radius, alpha = 1.0, delta = fragWidth;\\n\\n\\tradius = length(2.0 * gl_PointCoord.xy - 1.0);\\n\\n\\tif (radius > 1.0 + delta) {\\n\\t\\tdiscard;\\n\\t}\\n\\n\\talpha -= smoothstep(1.0 - delta, 1.0 + delta, radius);\\n\\n\\tfloat borderRadius = fragBorderRadius;\\n\\tfloat ratio = smoothstep(borderRadius - delta, borderRadius + delta, radius);\\n\\tvec4 color = mix(fragColor, fragBorderColor, ratio);\\n\\tcolor.a *= alpha * opacity;\\n\\tgl_FragColor = color;\\n}\\n\"]);\n  circleOptions.vert = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute float x, y, xFract, yFract;\\nattribute float size, borderSize;\\nattribute vec4 colorId, borderColorId;\\nattribute float isActive;\\n\\nuniform vec2 scale, scaleFract, translate, translateFract;\\nuniform float pixelRatio;\\nuniform bool constPointSize;\\nuniform sampler2D palette;\\nuniform vec2 paletteSize;\\n\\nconst float maxSize = 100.;\\n\\nvarying vec4 fragColor, fragBorderColor;\\nvarying float fragBorderRadius, fragWidth;\\n\\nfloat pointSizeScale = (constPointSize) ? 2. : pixelRatio;\\n\\nbool isDirect = (paletteSize.x < 1.);\\n\\nvec4 getColor(vec4 id) {\\n  return isDirect ? id / 255. : texture2D(palette,\\n    vec2(\\n      (id.x + .5) / paletteSize.x,\\n      (id.y + .5) / paletteSize.y\\n    )\\n  );\\n}\\n\\nvoid main() {\\n  // ignore inactive points\\n  if (isActive == 0.) return;\\n\\n  vec2 position = vec2(x, y);\\n  vec2 positionFract = vec2(xFract, yFract);\\n\\n  vec4 color = getColor(colorId);\\n  vec4 borderColor = getColor(borderColorId);\\n\\n  float size = size * maxSize / 255.;\\n  float borderSize = borderSize * maxSize / 255.;\\n\\n  gl_PointSize = (size + borderSize) * pointSizeScale;\\n\\n  vec2 pos = (position + translate) * scale\\n      + (positionFract + translateFract) * scale\\n      + (position + translate) * scaleFract\\n      + (positionFract + translateFract) * scaleFract;\\n\\n  gl_Position = vec4(pos * 2. - 1., 0., 1.);\\n\\n  fragBorderRadius = 1. - 2. * borderSize / (size + borderSize);\\n  fragColor = color;\\n  fragBorderColor = borderColor.a == 0. || borderSize == 0. ? vec4(color.rgb, 0.) : borderColor;\\n  fragWidth = 1. / gl_PointSize;\\n}\\n\"]); // polyfill IE\n\n  if (ie) {\n    circleOptions.frag = circleOptions.frag.replace('smoothstep', 'smoothStep');\n    markerOptions.frag = markerOptions.frag.replace('smoothstep', 'smoothStep');\n  }\n\n  this.drawCircle = regl(circleOptions);\n} // single pass defaults\n\n\nScatter.defaults = {\n  color: 'black',\n  borderColor: 'transparent',\n  borderSize: 0,\n  size: 12,\n  opacity: 1,\n  marker: undefined,\n  viewport: null,\n  range: null,\n  pixelSize: null,\n  count: 0,\n  offset: 0,\n  bounds: null,\n  positions: [],\n  snap: 1e4\n}; // update & redraw\n\nScatter.prototype.render = function () {\n  if (arguments.length) {\n    this.update.apply(this, arguments);\n  }\n\n  this.draw();\n  return this;\n}; // draw all groups or only indicated ones\n\n\nScatter.prototype.draw = function () {\n  var _this2 = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var groups = this.groups; // if directly array passed - treat as passes\n\n  if (args.length === 1 && Array.isArray(args[0]) && (args[0][0] === null || Array.isArray(args[0][0]))) {\n    args = args[0];\n  } // FIXME: remove once https://github.com/regl-project/regl/issues/474 resolved\n\n\n  this.regl._refresh();\n\n  if (args.length) {\n    for (var i = 0; i < args.length; i++) {\n      this.drawItem(i, args[i]);\n    }\n  } // draw all passes\n  else {\n      groups.forEach(function (group, i) {\n        _this2.drawItem(i);\n      });\n    }\n\n  return this;\n}; // draw specific scatter group\n\n\nScatter.prototype.drawItem = function (id, els) {\n  var groups = this.groups;\n  var group = groups[id]; // debug viewport\n  // let { viewport } = group\n  // gl.enable(gl.SCISSOR_TEST);\n  // gl.scissor(viewport.x, viewport.y, viewport.width, viewport.height);\n  // gl.clearColor(0, 0, 0, .5);\n  // gl.clear(gl.COLOR_BUFFER_BIT);\n\n  if (typeof els === 'number') {\n    id = els;\n    group = groups[els];\n    els = null;\n  }\n\n  if (!(group && group.count && group.opacity)) return; // draw circles\n\n  if (group.activation[0]) {\n    // TODO: optimize this performance by making groups and regl.this props\n    this.drawCircle(this.getMarkerDrawOptions(0, group, els));\n  } // draw all other available markers\n\n\n  var batch = [];\n\n  for (var i = 1; i < group.activation.length; i++) {\n    if (!group.activation[i] || group.activation[i] !== true && !group.activation[i].data.length) continue;\n    batch.push.apply(batch, _toConsumableArray(this.getMarkerDrawOptions(i, group, els)));\n  }\n\n  if (batch.length) {\n    this.drawMarker(batch);\n  }\n}; // get options for the marker ids\n\n\nScatter.prototype.getMarkerDrawOptions = function (markerId, group, elements) {\n  var range = group.range,\n      tree = group.tree,\n      viewport = group.viewport,\n      activation = group.activation,\n      selectionBuffer = group.selectionBuffer,\n      count = group.count;\n  var regl = this.regl; // direct points\n\n  if (!tree) {\n    // if elements array - draw unclustered points\n    if (elements) {\n      return [extend({}, group, {\n        markerTexture: this.markerTextures[markerId],\n        activation: activation[markerId],\n        count: elements.length,\n        elements: elements,\n        offset: 0\n      })];\n    }\n\n    return [extend({}, group, {\n      markerTexture: this.markerTextures[markerId],\n      activation: activation[markerId],\n      offset: 0\n    })];\n  } // clustered points\n\n\n  var batch = [];\n  var lod = tree.range(range, {\n    lod: true,\n    px: [(range[2] - range[0]) / viewport.width, (range[3] - range[1]) / viewport.height]\n  }); // enable elements by using selection buffer\n\n  if (elements) {\n    var markerActivation = activation[markerId];\n    var mask = markerActivation.data;\n    var data = new Uint8Array(count);\n\n    for (var i = 0; i < elements.length; i++) {\n      var id = elements[i];\n      data[id] = mask ? mask[id] : 1;\n    }\n\n    selectionBuffer.subdata(data);\n  }\n\n  for (var l = lod.length; l--;) {\n    var _lod$l = _slicedToArray(lod[l], 2),\n        from = _lod$l[0],\n        to = _lod$l[1];\n\n    batch.push(extend({}, group, {\n      markerTexture: this.markerTextures[markerId],\n      activation: elements ? selectionBuffer : activation[markerId],\n      offset: from,\n      count: to - from\n    }));\n  }\n\n  return batch;\n}; // update groups options\n\n\nScatter.prototype.update = function () {\n  var _this3 = this;\n\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  if (!args.length) return; // passes are as single array\n\n  if (args.length === 1 && Array.isArray(args[0])) args = args[0];\n  var groups = this.groups,\n      gl = this.gl,\n      regl = this.regl,\n      maxSize = this.maxSize,\n      maxColors = this.maxColors,\n      palette = this.palette;\n  this.groups = groups = args.map(function (options, i) {\n    var group = groups[i];\n    if (options === undefined) return group;\n    if (options === null) options = {\n      positions: null\n    };else if (typeof options === 'function') options = {\n      ondraw: options\n    };else if (typeof options[0] === 'number') options = {\n      positions: options\n    }; // copy options to avoid mutation & handle aliases\n\n    options = pick(options, {\n      positions: 'positions data points',\n      snap: 'snap cluster lod tree',\n      size: 'sizes size radius',\n      borderSize: 'borderSizes borderSize border-size bordersize borderWidth borderWidths border-width borderwidth stroke-width strokeWidth strokewidth outline',\n      color: 'colors color fill fill-color fillColor',\n      borderColor: 'borderColors borderColor stroke stroke-color strokeColor',\n      marker: 'markers marker shape',\n      range: 'range dataBox databox',\n      viewport: 'viewport viewPort viewBox viewbox',\n      opacity: 'opacity alpha transparency',\n      bounds: 'bound bounds boundaries limits',\n      tooManyColors: 'tooManyColors palette paletteMode optimizePalette enablePalette'\n    });\n    if (options.positions === null) options.positions = [];\n    if (options.tooManyColors != null) _this3.tooManyColors = options.tooManyColors;\n\n    if (!group) {\n      groups[i] = group = {\n        id: i,\n        scale: null,\n        translate: null,\n        scaleFract: null,\n        translateFract: null,\n        // buffers for active markers\n        activation: [],\n        // buffer for filtered markers\n        selectionBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'stream',\n          type: 'uint8'\n        }),\n        // buffers with data: it is faster to switch them per-pass\n        // than provide one congregate buffer\n        sizeBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'uint8'\n        }),\n        colorBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'uint8'\n        }),\n        positionBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'float'\n        }),\n        positionFractBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'float'\n        })\n      };\n      options = extend({}, Scatter.defaults, options);\n    } // force update triggers\n\n\n    if (options.positions && !('marker' in options)) {\n      options.marker = group.marker;\n      delete group.marker;\n    } // updating markers cause recalculating snapping\n\n\n    if (options.marker && !('positions' in options)) {\n      options.positions = group.positions;\n      delete group.positions;\n    } // global count of points\n\n\n    var hasSize = 0,\n        hasColor = 0;\n    updateDiff(group, options, [{\n      snap: true,\n      size: function size(s, group) {\n        if (s == null) s = Scatter.defaults.size;\n        hasSize += s && s.length ? 1 : 0;\n        return s;\n      },\n      borderSize: function borderSize(s, group) {\n        if (s == null) s = Scatter.defaults.borderSize;\n        hasSize += s && s.length ? 1 : 0;\n        return s;\n      },\n      opacity: parseFloat,\n      // add colors to palette, save references\n      color: function color(c, group) {\n        if (c == null) c = Scatter.defaults.color;\n        c = _this3.updateColor(c);\n        hasColor++;\n        return c;\n      },\n      borderColor: function borderColor(c, group) {\n        if (c == null) c = Scatter.defaults.borderColor;\n        c = _this3.updateColor(c);\n        hasColor++;\n        return c;\n      },\n      bounds: function bounds(_bounds, group, options) {\n        if (!('range' in options)) options.range = null;\n        return _bounds;\n      },\n      positions: function positions(_positions, group, options) {\n        var snap = group.snap;\n        var positionBuffer = group.positionBuffer,\n            positionFractBuffer = group.positionFractBuffer,\n            selectionBuffer = group.selectionBuffer; // separate buffers for x/y coordinates\n\n        if (_positions.x || _positions.y) {\n          if (_positions.x.length) {\n            group.xAttr = {\n              buffer: regl.buffer(_positions.x),\n              offset: 0,\n              stride: 4,\n              count: _positions.x.length\n            };\n          } else {\n            group.xAttr = {\n              buffer: _positions.x.buffer,\n              offset: _positions.x.offset * 4 || 0,\n              stride: (_positions.x.stride || 1) * 4,\n              count: _positions.x.count\n            };\n          }\n\n          if (_positions.y.length) {\n            group.yAttr = {\n              buffer: regl.buffer(_positions.y),\n              offset: 0,\n              stride: 4,\n              count: _positions.y.length\n            };\n          } else {\n            group.yAttr = {\n              buffer: _positions.y.buffer,\n              offset: _positions.y.offset * 4 || 0,\n              stride: (_positions.y.stride || 1) * 4,\n              count: _positions.y.count\n            };\n          }\n\n          group.count = Math.max(group.xAttr.count, group.yAttr.count);\n          return _positions;\n        }\n\n        _positions = flatten(_positions, 'float64');\n        var count = group.count = Math.floor(_positions.length / 2);\n        var bounds = group.bounds = count ? getBounds(_positions, 2) : null; // if range is not provided updated - recalc it\n\n        if (!options.range && !group.range) {\n          delete group.range;\n          options.range = bounds;\n        } // reset marker\n\n\n        if (!options.marker && !group.marker) {\n          delete group.marker;\n          options.marker = null;\n        } // build cluster tree if required\n\n\n        if (snap && (snap === true || count > snap)) {\n          group.tree = cluster(_positions, {\n            bounds: bounds\n          });\n        } // existing tree instance\n        else if (snap && snap.length) {\n            group.tree = snap;\n          }\n\n        if (group.tree) {\n          var opts = {\n            primitive: 'points',\n            usage: 'static',\n            data: group.tree,\n            type: 'uint32'\n          };\n          if (group.elements) group.elements(opts);else group.elements = regl.elements(opts);\n        } // update position buffers\n\n\n        positionBuffer({\n          data: f32.float(_positions),\n          usage: 'dynamic'\n        });\n        positionFractBuffer({\n          data: f32.fract(_positions),\n          usage: 'dynamic'\n        }); // expand selectionBuffer\n\n        selectionBuffer({\n          data: new Uint8Array(count),\n          type: 'uint8',\n          usage: 'stream'\n        });\n        return _positions;\n      }\n    }, {\n      // create marker ids corresponding to known marker textures\n      marker: function marker(markers, group, options) {\n        var activation = group.activation; // reset marker elements\n\n        activation.forEach(function (buffer) {\n          return buffer && buffer.destroy && buffer.destroy();\n        });\n        activation.length = 0; // single sdf marker\n\n        if (!markers || typeof markers[0] === 'number') {\n          var id = _this3.addMarker(markers);\n\n          activation[id] = true;\n        } // per-point markers use mask buffers to enable markers in vert shader\n        else {\n            var markerMasks = [];\n\n            for (var _i = 0, l = Math.min(markers.length, group.count); _i < l; _i++) {\n              var _id = _this3.addMarker(markers[_i]);\n\n              if (!markerMasks[_id]) markerMasks[_id] = new Uint8Array(group.count); // enable marker by default\n\n              markerMasks[_id][_i] = 1;\n            }\n\n            for (var _id2 = 0; _id2 < markerMasks.length; _id2++) {\n              if (!markerMasks[_id2]) continue;\n              var opts = {\n                data: markerMasks[_id2],\n                type: 'uint8',\n                usage: 'static'\n              };\n\n              if (!activation[_id2]) {\n                activation[_id2] = regl.buffer(opts);\n              } else {\n                activation[_id2](opts);\n              }\n\n              activation[_id2].data = markerMasks[_id2];\n            }\n          }\n\n        return markers;\n      },\n      range: function range(_range, group, options) {\n        var bounds = group.bounds; // FIXME: why do we need this?\n\n        if (!bounds) return;\n        if (!_range) _range = bounds;\n        group.scale = [1 / (_range[2] - _range[0]), 1 / (_range[3] - _range[1])];\n        group.translate = [-_range[0], -_range[1]];\n        group.scaleFract = f32.fract(group.scale);\n        group.translateFract = f32.fract(group.translate);\n        return _range;\n      },\n      viewport: function viewport(vp) {\n        var rect = parseRect(vp || [gl.drawingBufferWidth, gl.drawingBufferHeight]); // normalize viewport to the canvas coordinates\n        // rect.y = gl.drawingBufferHeight - rect.height - rect.y\n\n        return rect;\n      }\n    }]); // update size buffer, if needed\n\n    if (hasSize) {\n      var _group = group,\n          count = _group.count,\n          size = _group.size,\n          borderSize = _group.borderSize,\n          sizeBuffer = _group.sizeBuffer;\n      var sizes = new Uint8Array(count * 2);\n\n      if (size.length || borderSize.length) {\n        for (var _i2 = 0; _i2 < count; _i2++) {\n          // we downscale size to allow for fractions\n          sizes[_i2 * 2] = Math.round((size[_i2] == null ? size : size[_i2]) * 255 / maxSize);\n          sizes[_i2 * 2 + 1] = Math.round((borderSize[_i2] == null ? borderSize : borderSize[_i2]) * 255 / maxSize);\n        }\n      }\n\n      sizeBuffer({\n        data: sizes,\n        usage: 'dynamic'\n      });\n    } // update color buffer if needed\n\n\n    if (hasColor) {\n      var _group2 = group,\n          _count = _group2.count,\n          color = _group2.color,\n          borderColor = _group2.borderColor,\n          colorBuffer = _group2.colorBuffer;\n      var colors; // if too many colors - put colors to buffer directly\n\n      if (_this3.tooManyColors) {\n        if (color.length || borderColor.length) {\n          colors = new Uint8Array(_count * 8);\n\n          for (var _i3 = 0; _i3 < _count; _i3++) {\n            var _colorId = color[_i3];\n            colors[_i3 * 8] = palette[_colorId * 4];\n            colors[_i3 * 8 + 1] = palette[_colorId * 4 + 1];\n            colors[_i3 * 8 + 2] = palette[_colorId * 4 + 2];\n            colors[_i3 * 8 + 3] = palette[_colorId * 4 + 3];\n            var borderColorId = borderColor[_i3];\n            colors[_i3 * 8 + 4] = palette[borderColorId * 4];\n            colors[_i3 * 8 + 5] = palette[borderColorId * 4 + 1];\n            colors[_i3 * 8 + 6] = palette[borderColorId * 4 + 2];\n            colors[_i3 * 8 + 7] = palette[borderColorId * 4 + 3];\n          }\n        }\n      } // if limited amount of colors - keep palette color picking\n      // that saves significant memory\n      else {\n          if (color.length || borderColor.length) {\n            // we need slight data increase by 2 due to vec4 borderId in shader\n            colors = new Uint8Array(_count * 4 + 2);\n\n            for (var _i4 = 0; _i4 < _count; _i4++) {\n              // put color coords in palette texture\n              if (color[_i4] != null) {\n                colors[_i4 * 4] = color[_i4] % maxColors;\n                colors[_i4 * 4 + 1] = Math.floor(color[_i4] / maxColors);\n              }\n\n              if (borderColor[_i4] != null) {\n                colors[_i4 * 4 + 2] = borderColor[_i4] % maxColors;\n                colors[_i4 * 4 + 3] = Math.floor(borderColor[_i4] / maxColors);\n              }\n            }\n          }\n        }\n\n      colorBuffer({\n        data: colors || new Uint8Array(0),\n        type: 'uint8',\n        usage: 'dynamic'\n      });\n    }\n\n    return group;\n  });\n}; // get (and create) marker texture id\n\n\nScatter.prototype.addMarker = function (sdf) {\n  var markerTextures = this.markerTextures,\n      regl = this.regl,\n      markerCache = this.markerCache;\n  var pos = sdf == null ? 0 : markerCache.indexOf(sdf);\n  if (pos >= 0) return pos; // convert sdf to 0..255 range\n\n  var distArr;\n\n  if (sdf instanceof Uint8Array || sdf instanceof Uint8ClampedArray) {\n    distArr = sdf;\n  } else {\n    distArr = new Uint8Array(sdf.length);\n\n    for (var i = 0, l = sdf.length; i < l; i++) {\n      distArr[i] = sdf[i] * 255;\n    }\n  }\n\n  var radius = Math.floor(Math.sqrt(distArr.length));\n  pos = markerTextures.length;\n  markerCache.push(sdf);\n  markerTextures.push(regl.texture({\n    channels: 1,\n    data: distArr,\n    radius: radius,\n    mag: 'linear',\n    min: 'linear'\n  }));\n  return pos;\n}; // register color to palette, return it's index or list of indexes\n\n\nScatter.prototype.updateColor = function (colors) {\n  var paletteIds = this.paletteIds,\n      palette = this.palette,\n      maxColors = this.maxColors;\n\n  if (!Array.isArray(colors)) {\n    colors = [colors];\n  }\n\n  var idx = []; // if color groups - flatten them\n\n  if (typeof colors[0] === 'number') {\n    var grouped = [];\n\n    if (Array.isArray(colors)) {\n      for (var i = 0; i < colors.length; i += 4) {\n        grouped.push(colors.slice(i, i + 4));\n      }\n    } else {\n      for (var _i5 = 0; _i5 < colors.length; _i5 += 4) {\n        grouped.push(colors.subarray(_i5, _i5 + 4));\n      }\n    }\n\n    colors = grouped;\n  }\n\n  for (var _i6 = 0; _i6 < colors.length; _i6++) {\n    var color = colors[_i6];\n    color = rgba(color, 'uint8');\n    var id = colorId(color, false); // if new color - save it\n\n    if (paletteIds[id] == null) {\n      var pos = palette.length;\n      paletteIds[id] = Math.floor(pos / 4);\n      palette[pos] = color[0];\n      palette[pos + 1] = color[1];\n      palette[pos + 2] = color[2];\n      palette[pos + 3] = color[3];\n    }\n\n    idx[_i6] = paletteIds[id];\n  } // detect if too many colors in palette\n\n\n  if (!this.tooManyColors && palette.length > maxColors * 4) this.tooManyColors = true; // limit max color\n\n  this.updatePalette(palette); // keep static index for single-color property\n\n  return idx.length === 1 ? idx[0] : idx;\n};\n\nScatter.prototype.updatePalette = function (palette) {\n  if (this.tooManyColors) return;\n  var maxColors = this.maxColors,\n      paletteTexture = this.paletteTexture;\n  var requiredHeight = Math.ceil(palette.length * .25 / maxColors); // pad data\n\n  if (requiredHeight > 1) {\n    palette = palette.slice();\n\n    for (var i = palette.length * .25 % maxColors; i < requiredHeight * maxColors; i++) {\n      palette.push(0, 0, 0, 0);\n    }\n  } // ensure height\n\n\n  if (paletteTexture.height < requiredHeight) {\n    paletteTexture.resize(maxColors, requiredHeight);\n  } // update full data\n\n\n  paletteTexture.subimage({\n    width: Math.min(palette.length * .25, maxColors),\n    height: requiredHeight,\n    data: palette\n  }, 0, 0);\n}; // remove unused stuff\n\n\nScatter.prototype.destroy = function () {\n  this.groups.forEach(function (group) {\n    group.sizeBuffer.destroy();\n    group.positionBuffer.destroy();\n    group.positionFractBuffer.destroy();\n    group.colorBuffer.destroy();\n    group.activation.forEach(function (b) {\n      return b && b.destroy && b.destroy();\n    });\n    group.selectionBuffer.destroy();\n    if (group.elements) group.elements.destroy();\n  });\n  this.groups.length = 0;\n  this.paletteTexture.destroy();\n  this.markerTextures.forEach(function (txt) {\n    return txt && txt.destroy && txt.destroy();\n  });\n  return this;\n};\n\nvar extend$1 = require('object-assign');\n\nvar reglScatter2d = function reglScatter2d(regl, options) {\n  var scatter$1 = new scatter(regl, options);\n  var render = scatter$1.render.bind(scatter$1); // expose API\n\n  extend$1(render, {\n    render: render,\n    update: scatter$1.update.bind(scatter$1),\n    draw: scatter$1.draw.bind(scatter$1),\n    destroy: scatter$1.destroy.bind(scatter$1),\n    regl: scatter$1.regl,\n    gl: scatter$1.gl,\n    canvas: scatter$1.gl.canvas,\n    groups: scatter$1.groups,\n    markers: scatter$1.markerCache,\n    palette: scatter$1.palette\n  });\n  return render;\n};\n\nmodule.exports = reglScatter2d;","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/regl-scatter2d/bundle.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","Array","isArray","_arrayLikeToArray","iter","Symbol","iterator","Object","from","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","o","minLen","n","prototype","toString","call","slice","constructor","name","test","len","arr2","TypeError","rgba","require","getBounds","colorId","cluster","extend","glslify","pick","updateDiff","flatten","ie","f32","parseRect","scatter","Scatter","regl","options","_this","positions","gl","_gl","paletteTexture","palette","paletteIds","groups","markerTextures","markerCache","maxColors","maxSize","tooManyColors","texture","data","Uint8Array","width","height","type","format","wrapS","wrapT","mag","min","canvas","update","shaderOptions","uniforms","constPointSize","pixelRatio","context","paletteSize","ctx","prop","scale","scaleFract","translate","translateFract","opacity","marker","attributes","x","xAttr","buffer","positionBuffer","stride","offset","y","yAttr","xFract","constant","positionFractBuffer","yFract","size","sizeBuffer","Math","round","borderSize","color","colorBuffer","borderColorId","borderColor","isActive","activation","blend","enable","func","srcRGB","dstRGB","srcAlpha","dstAlpha","scissor","box","viewport","stencil","depth","elements","count","primitive","markerOptions","frag","vert","drawMarker","circleOptions","replace","drawCircle","defaults","range","pixelSize","bounds","snap","render","arguments","apply","draw","_this2","_len","args","_key","_refresh","drawItem","forEach","group","id","els","getMarkerDrawOptions","batch","markerId","tree","selectionBuffer","markerTexture","lod","px","markerActivation","mask","subdata","l","_lod$l","to","_this3","_len2","_key2","map","ondraw","usage","hasSize","hasColor","s","parseFloat","c","updateColor","_bounds","_positions","max","floor","opts","float","fract","markers","destroy","addMarker","markerMasks","_id","_id2","_range","vp","rect","drawingBufferWidth","drawingBufferHeight","_group","sizes","_i2","_group2","_count","colors","_i3","_colorId","_i4","sdf","pos","indexOf","distArr","Uint8ClampedArray","radius","sqrt","channels","idx","grouped","_i5","subarray","_i6","updatePalette","requiredHeight","ceil","resize","subimage","b","txt","extend$1","reglScatter2d","scatter$1","bind","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar rgba = require('color-normalize');\n\nvar getBounds = require('array-bounds');\n\nvar colorId = require('color-id');\n\nvar cluster = require('@plotly/point-cluster');\n\nvar extend = require('object-assign');\n\nvar glslify = require('glslify');\n\nvar pick = require('pick-by-alias');\n\nvar updateDiff = require('update-diff');\n\nvar flatten = require('flatten-vertex-data');\n\nvar ie = require('is-iexplorer');\n\nvar f32 = require('to-float32');\n\nvar parseRect = require('parse-rect');\n\nvar scatter = Scatter;\n\nfunction Scatter(regl, options) {\n  var _this = this;\n\n  if (!(this instanceof Scatter)) return new Scatter(regl, options);\n\n  if (typeof regl === 'function') {\n    if (!options) options = {};\n    options.regl = regl;\n  } else {\n    options = regl;\n    regl = null;\n  }\n\n  if (options && options.length) options.positions = options;\n  regl = options.regl; // persistent variables\n\n  var gl = regl._gl,\n      paletteTexture,\n      palette = [],\n      paletteIds = {},\n      // state\n  groups = [],\n      // textures for marker keys\n  markerTextures = [null],\n      markerCache = [null];\n  var maxColors = 255,\n      maxSize = 100; // direct color buffer mode\n  // IE does not support palette anyways\n\n  this.tooManyColors = ie; // texture with color palette\n\n  paletteTexture = regl.texture({\n    data: new Uint8Array(maxColors * 4),\n    width: maxColors,\n    height: 1,\n    type: 'uint8',\n    format: 'rgba',\n    wrapS: 'clamp',\n    wrapT: 'clamp',\n    mag: 'nearest',\n    min: 'nearest'\n  });\n  extend(this, {\n    regl: regl,\n    gl: gl,\n    groups: groups,\n    markerCache: markerCache,\n    markerTextures: markerTextures,\n    palette: palette,\n    paletteIds: paletteIds,\n    paletteTexture: paletteTexture,\n    maxColors: maxColors,\n    maxSize: maxSize,\n    canvas: gl.canvas\n  });\n  this.update(options); // common shader options\n\n  var shaderOptions = {\n    uniforms: {\n      constPointSize: !!options.constPointSize,\n      pixelRatio: regl.context('pixelRatio'),\n      palette: paletteTexture,\n      paletteSize: function paletteSize(ctx, prop) {\n        return [_this.tooManyColors ? 0 : maxColors, paletteTexture.height];\n      },\n      scale: regl.prop('scale'),\n      scaleFract: regl.prop('scaleFract'),\n      translate: regl.prop('translate'),\n      translateFract: regl.prop('translateFract'),\n      opacity: regl.prop('opacity'),\n      marker: regl.prop('markerTexture')\n    },\n    attributes: {\n      // FIXME: optimize these parts\n      x: function x(ctx, prop) {\n        return prop.xAttr || {\n          buffer: prop.positionBuffer,\n          stride: 8,\n          offset: 0\n        };\n      },\n      y: function y(ctx, prop) {\n        return prop.yAttr || {\n          buffer: prop.positionBuffer,\n          stride: 8,\n          offset: 4\n        };\n      },\n      xFract: function xFract(ctx, prop) {\n        return prop.xAttr ? {\n          constant: [0, 0]\n        } : {\n          buffer: prop.positionFractBuffer,\n          stride: 8,\n          offset: 0\n        };\n      },\n      yFract: function yFract(ctx, prop) {\n        return prop.yAttr ? {\n          constant: [0, 0]\n        } : {\n          buffer: prop.positionFractBuffer,\n          stride: 8,\n          offset: 4\n        };\n      },\n      size: function size(ctx, prop) {\n        return prop.size.length ? {\n          buffer: prop.sizeBuffer,\n          stride: 2,\n          offset: 0\n        } : {\n          constant: [Math.round(prop.size * 255 / _this.maxSize)]\n        };\n      },\n      borderSize: function borderSize(ctx, prop) {\n        return prop.borderSize.length ? {\n          buffer: prop.sizeBuffer,\n          stride: 2,\n          offset: 1\n        } : {\n          constant: [Math.round(prop.borderSize * 255 / _this.maxSize)]\n        };\n      },\n      colorId: function colorId(ctx, prop) {\n        return prop.color.length ? {\n          buffer: prop.colorBuffer,\n          stride: _this.tooManyColors ? 8 : 4,\n          offset: 0\n        } : {\n          constant: _this.tooManyColors ? palette.slice(prop.color * 4, prop.color * 4 + 4) : [prop.color]\n        };\n      },\n      borderColorId: function borderColorId(ctx, prop) {\n        return prop.borderColor.length ? {\n          buffer: prop.colorBuffer,\n          stride: _this.tooManyColors ? 8 : 4,\n          offset: _this.tooManyColors ? 4 : 2\n        } : {\n          constant: _this.tooManyColors ? palette.slice(prop.borderColor * 4, prop.borderColor * 4 + 4) : [prop.borderColor]\n        };\n      },\n      isActive: function isActive(ctx, prop) {\n        return prop.activation === true ? {\n          constant: [1]\n        } : prop.activation ? prop.activation : {\n          constant: [0]\n        };\n      }\n    },\n    blend: {\n      enable: true,\n      color: [0, 0, 0, 1],\n      // photoshop blending\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 'one minus dst alpha',\n        dstAlpha: 'one'\n      }\n    },\n    scissor: {\n      enable: true,\n      box: regl.prop('viewport')\n    },\n    viewport: regl.prop('viewport'),\n    stencil: {\n      enable: false\n    },\n    depth: {\n      enable: false\n    },\n    elements: regl.prop('elements'),\n    count: regl.prop('count'),\n    offset: regl.prop('offset'),\n    primitive: 'points'\n  }; // draw sdf-marker\n\n  var markerOptions = extend({}, shaderOptions);\n  markerOptions.frag = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragColor, fragBorderColor;\\nvarying float fragWidth, fragBorderColorLevel, fragColorLevel;\\n\\nuniform sampler2D marker;\\nuniform float opacity;\\n\\nfloat smoothStep(float x, float y) {\\n  return 1.0 / (1.0 + exp(50.0*(x - y)));\\n}\\n\\nvoid main() {\\n  float dist = texture2D(marker, gl_PointCoord).r, delta = fragWidth;\\n\\n  // max-distance alpha\\n  if (dist < 0.003) discard;\\n\\n  // null-border case\\n  if (fragBorderColorLevel == fragColorLevel || fragBorderColor.a == 0.) {\\n    float colorAmt = smoothstep(.5 - delta, .5 + delta, dist);\\n    gl_FragColor = vec4(fragColor.rgb, colorAmt * fragColor.a * opacity);\\n  }\\n  else {\\n    float borderColorAmt = smoothstep(fragBorderColorLevel - delta, fragBorderColorLevel + delta, dist);\\n    float colorAmt = smoothstep(fragColorLevel - delta, fragColorLevel + delta, dist);\\n\\n    vec4 color = fragBorderColor;\\n    color.a *= borderColorAmt;\\n    color = mix(color, fragColor, colorAmt);\\n    color.a *= opacity;\\n\\n    gl_FragColor = color;\\n  }\\n\\n}\\n\"]);\n  markerOptions.vert = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute float x, y, xFract, yFract;\\nattribute float size, borderSize;\\nattribute vec4 colorId, borderColorId;\\nattribute float isActive;\\n\\nuniform vec2 scale, scaleFract, translate, translateFract, paletteSize;\\nuniform float pixelRatio;\\nuniform bool constPointSize;\\nuniform sampler2D palette;\\n\\nconst float maxSize = 100.;\\nconst float borderLevel = .5;\\n\\nvarying vec4 fragColor, fragBorderColor;\\nvarying float fragPointSize, fragBorderRadius, fragWidth, fragBorderColorLevel, fragColorLevel;\\n\\nfloat pointSizeScale = (constPointSize) ? 2. : pixelRatio;\\n\\nbool isDirect = (paletteSize.x < 1.);\\n\\nvec4 getColor(vec4 id) {\\n  return isDirect ? id / 255. : texture2D(palette,\\n    vec2(\\n      (id.x + .5) / paletteSize.x,\\n      (id.y + .5) / paletteSize.y\\n    )\\n  );\\n}\\n\\nvoid main() {\\n  // ignore inactive points\\n  if (isActive == 0.) return;\\n\\n  vec2 position = vec2(x, y);\\n  vec2 positionFract = vec2(xFract, yFract);\\n\\n  vec4 color = getColor(colorId);\\n  vec4 borderColor = getColor(borderColorId);\\n\\n  float size = size * maxSize / 255.;\\n  float borderSize = borderSize * maxSize / 255.;\\n\\n  gl_PointSize = 2. * size * pointSizeScale;\\n  fragPointSize = size * pixelRatio;\\n\\n  vec2 pos = (position + translate) * scale\\n      + (positionFract + translateFract) * scale\\n      + (position + translate) * scaleFract\\n      + (positionFract + translateFract) * scaleFract;\\n\\n  gl_Position = vec4(pos * 2. - 1., 0., 1.);\\n\\n  fragColor = color;\\n  fragBorderColor = borderColor;\\n  fragWidth = 1. / gl_PointSize;\\n\\n  fragBorderColorLevel = clamp(borderLevel - borderLevel * borderSize / size, 0., 1.);\\n  fragColorLevel = clamp(borderLevel + (1. - borderLevel) * borderSize / size, 0., 1.);\\n}\"]);\n  this.drawMarker = regl(markerOptions); // draw circle\n\n  var circleOptions = extend({}, shaderOptions);\n  circleOptions.frag = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragColor, fragBorderColor;\\n\\nuniform float opacity;\\nvarying float fragBorderRadius, fragWidth;\\n\\nfloat smoothStep(float edge0, float edge1, float x) {\\n\\tfloat t;\\n\\tt = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n\\treturn t * t * (3.0 - 2.0 * t);\\n}\\n\\nvoid main() {\\n\\tfloat radius, alpha = 1.0, delta = fragWidth;\\n\\n\\tradius = length(2.0 * gl_PointCoord.xy - 1.0);\\n\\n\\tif (radius > 1.0 + delta) {\\n\\t\\tdiscard;\\n\\t}\\n\\n\\talpha -= smoothstep(1.0 - delta, 1.0 + delta, radius);\\n\\n\\tfloat borderRadius = fragBorderRadius;\\n\\tfloat ratio = smoothstep(borderRadius - delta, borderRadius + delta, radius);\\n\\tvec4 color = mix(fragColor, fragBorderColor, ratio);\\n\\tcolor.a *= alpha * opacity;\\n\\tgl_FragColor = color;\\n}\\n\"]);\n  circleOptions.vert = glslify([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute float x, y, xFract, yFract;\\nattribute float size, borderSize;\\nattribute vec4 colorId, borderColorId;\\nattribute float isActive;\\n\\nuniform vec2 scale, scaleFract, translate, translateFract;\\nuniform float pixelRatio;\\nuniform bool constPointSize;\\nuniform sampler2D palette;\\nuniform vec2 paletteSize;\\n\\nconst float maxSize = 100.;\\n\\nvarying vec4 fragColor, fragBorderColor;\\nvarying float fragBorderRadius, fragWidth;\\n\\nfloat pointSizeScale = (constPointSize) ? 2. : pixelRatio;\\n\\nbool isDirect = (paletteSize.x < 1.);\\n\\nvec4 getColor(vec4 id) {\\n  return isDirect ? id / 255. : texture2D(palette,\\n    vec2(\\n      (id.x + .5) / paletteSize.x,\\n      (id.y + .5) / paletteSize.y\\n    )\\n  );\\n}\\n\\nvoid main() {\\n  // ignore inactive points\\n  if (isActive == 0.) return;\\n\\n  vec2 position = vec2(x, y);\\n  vec2 positionFract = vec2(xFract, yFract);\\n\\n  vec4 color = getColor(colorId);\\n  vec4 borderColor = getColor(borderColorId);\\n\\n  float size = size * maxSize / 255.;\\n  float borderSize = borderSize * maxSize / 255.;\\n\\n  gl_PointSize = (size + borderSize) * pointSizeScale;\\n\\n  vec2 pos = (position + translate) * scale\\n      + (positionFract + translateFract) * scale\\n      + (position + translate) * scaleFract\\n      + (positionFract + translateFract) * scaleFract;\\n\\n  gl_Position = vec4(pos * 2. - 1., 0., 1.);\\n\\n  fragBorderRadius = 1. - 2. * borderSize / (size + borderSize);\\n  fragColor = color;\\n  fragBorderColor = borderColor.a == 0. || borderSize == 0. ? vec4(color.rgb, 0.) : borderColor;\\n  fragWidth = 1. / gl_PointSize;\\n}\\n\"]); // polyfill IE\n\n  if (ie) {\n    circleOptions.frag = circleOptions.frag.replace('smoothstep', 'smoothStep');\n    markerOptions.frag = markerOptions.frag.replace('smoothstep', 'smoothStep');\n  }\n\n  this.drawCircle = regl(circleOptions);\n} // single pass defaults\n\n\nScatter.defaults = {\n  color: 'black',\n  borderColor: 'transparent',\n  borderSize: 0,\n  size: 12,\n  opacity: 1,\n  marker: undefined,\n  viewport: null,\n  range: null,\n  pixelSize: null,\n  count: 0,\n  offset: 0,\n  bounds: null,\n  positions: [],\n  snap: 1e4\n}; // update & redraw\n\nScatter.prototype.render = function () {\n  if (arguments.length) {\n    this.update.apply(this, arguments);\n  }\n\n  this.draw();\n  return this;\n}; // draw all groups or only indicated ones\n\n\nScatter.prototype.draw = function () {\n  var _this2 = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var groups = this.groups; // if directly array passed - treat as passes\n\n  if (args.length === 1 && Array.isArray(args[0]) && (args[0][0] === null || Array.isArray(args[0][0]))) {\n    args = args[0];\n  } // FIXME: remove once https://github.com/regl-project/regl/issues/474 resolved\n\n\n  this.regl._refresh();\n\n  if (args.length) {\n    for (var i = 0; i < args.length; i++) {\n      this.drawItem(i, args[i]);\n    }\n  } // draw all passes\n  else {\n      groups.forEach(function (group, i) {\n        _this2.drawItem(i);\n      });\n    }\n\n  return this;\n}; // draw specific scatter group\n\n\nScatter.prototype.drawItem = function (id, els) {\n  var groups = this.groups;\n  var group = groups[id]; // debug viewport\n  // let { viewport } = group\n  // gl.enable(gl.SCISSOR_TEST);\n  // gl.scissor(viewport.x, viewport.y, viewport.width, viewport.height);\n  // gl.clearColor(0, 0, 0, .5);\n  // gl.clear(gl.COLOR_BUFFER_BIT);\n\n  if (typeof els === 'number') {\n    id = els;\n    group = groups[els];\n    els = null;\n  }\n\n  if (!(group && group.count && group.opacity)) return; // draw circles\n\n  if (group.activation[0]) {\n    // TODO: optimize this performance by making groups and regl.this props\n    this.drawCircle(this.getMarkerDrawOptions(0, group, els));\n  } // draw all other available markers\n\n\n  var batch = [];\n\n  for (var i = 1; i < group.activation.length; i++) {\n    if (!group.activation[i] || group.activation[i] !== true && !group.activation[i].data.length) continue;\n    batch.push.apply(batch, _toConsumableArray(this.getMarkerDrawOptions(i, group, els)));\n  }\n\n  if (batch.length) {\n    this.drawMarker(batch);\n  }\n}; // get options for the marker ids\n\n\nScatter.prototype.getMarkerDrawOptions = function (markerId, group, elements) {\n  var range = group.range,\n      tree = group.tree,\n      viewport = group.viewport,\n      activation = group.activation,\n      selectionBuffer = group.selectionBuffer,\n      count = group.count;\n  var regl = this.regl; // direct points\n\n  if (!tree) {\n    // if elements array - draw unclustered points\n    if (elements) {\n      return [extend({}, group, {\n        markerTexture: this.markerTextures[markerId],\n        activation: activation[markerId],\n        count: elements.length,\n        elements: elements,\n        offset: 0\n      })];\n    }\n\n    return [extend({}, group, {\n      markerTexture: this.markerTextures[markerId],\n      activation: activation[markerId],\n      offset: 0\n    })];\n  } // clustered points\n\n\n  var batch = [];\n  var lod = tree.range(range, {\n    lod: true,\n    px: [(range[2] - range[0]) / viewport.width, (range[3] - range[1]) / viewport.height]\n  }); // enable elements by using selection buffer\n\n  if (elements) {\n    var markerActivation = activation[markerId];\n    var mask = markerActivation.data;\n    var data = new Uint8Array(count);\n\n    for (var i = 0; i < elements.length; i++) {\n      var id = elements[i];\n      data[id] = mask ? mask[id] : 1;\n    }\n\n    selectionBuffer.subdata(data);\n  }\n\n  for (var l = lod.length; l--;) {\n    var _lod$l = _slicedToArray(lod[l], 2),\n        from = _lod$l[0],\n        to = _lod$l[1];\n\n    batch.push(extend({}, group, {\n      markerTexture: this.markerTextures[markerId],\n      activation: elements ? selectionBuffer : activation[markerId],\n      offset: from,\n      count: to - from\n    }));\n  }\n\n  return batch;\n}; // update groups options\n\n\nScatter.prototype.update = function () {\n  var _this3 = this;\n\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  if (!args.length) return; // passes are as single array\n\n  if (args.length === 1 && Array.isArray(args[0])) args = args[0];\n  var groups = this.groups,\n      gl = this.gl,\n      regl = this.regl,\n      maxSize = this.maxSize,\n      maxColors = this.maxColors,\n      palette = this.palette;\n  this.groups = groups = args.map(function (options, i) {\n    var group = groups[i];\n    if (options === undefined) return group;\n    if (options === null) options = {\n      positions: null\n    };else if (typeof options === 'function') options = {\n      ondraw: options\n    };else if (typeof options[0] === 'number') options = {\n      positions: options\n    }; // copy options to avoid mutation & handle aliases\n\n    options = pick(options, {\n      positions: 'positions data points',\n      snap: 'snap cluster lod tree',\n      size: 'sizes size radius',\n      borderSize: 'borderSizes borderSize border-size bordersize borderWidth borderWidths border-width borderwidth stroke-width strokeWidth strokewidth outline',\n      color: 'colors color fill fill-color fillColor',\n      borderColor: 'borderColors borderColor stroke stroke-color strokeColor',\n      marker: 'markers marker shape',\n      range: 'range dataBox databox',\n      viewport: 'viewport viewPort viewBox viewbox',\n      opacity: 'opacity alpha transparency',\n      bounds: 'bound bounds boundaries limits',\n      tooManyColors: 'tooManyColors palette paletteMode optimizePalette enablePalette'\n    });\n    if (options.positions === null) options.positions = [];\n    if (options.tooManyColors != null) _this3.tooManyColors = options.tooManyColors;\n\n    if (!group) {\n      groups[i] = group = {\n        id: i,\n        scale: null,\n        translate: null,\n        scaleFract: null,\n        translateFract: null,\n        // buffers for active markers\n        activation: [],\n        // buffer for filtered markers\n        selectionBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'stream',\n          type: 'uint8'\n        }),\n        // buffers with data: it is faster to switch them per-pass\n        // than provide one congregate buffer\n        sizeBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'uint8'\n        }),\n        colorBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'uint8'\n        }),\n        positionBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'float'\n        }),\n        positionFractBuffer: regl.buffer({\n          data: new Uint8Array(0),\n          usage: 'dynamic',\n          type: 'float'\n        })\n      };\n      options = extend({}, Scatter.defaults, options);\n    } // force update triggers\n\n\n    if (options.positions && !('marker' in options)) {\n      options.marker = group.marker;\n      delete group.marker;\n    } // updating markers cause recalculating snapping\n\n\n    if (options.marker && !('positions' in options)) {\n      options.positions = group.positions;\n      delete group.positions;\n    } // global count of points\n\n\n    var hasSize = 0,\n        hasColor = 0;\n    updateDiff(group, options, [{\n      snap: true,\n      size: function size(s, group) {\n        if (s == null) s = Scatter.defaults.size;\n        hasSize += s && s.length ? 1 : 0;\n        return s;\n      },\n      borderSize: function borderSize(s, group) {\n        if (s == null) s = Scatter.defaults.borderSize;\n        hasSize += s && s.length ? 1 : 0;\n        return s;\n      },\n      opacity: parseFloat,\n      // add colors to palette, save references\n      color: function color(c, group) {\n        if (c == null) c = Scatter.defaults.color;\n        c = _this3.updateColor(c);\n        hasColor++;\n        return c;\n      },\n      borderColor: function borderColor(c, group) {\n        if (c == null) c = Scatter.defaults.borderColor;\n        c = _this3.updateColor(c);\n        hasColor++;\n        return c;\n      },\n      bounds: function bounds(_bounds, group, options) {\n        if (!('range' in options)) options.range = null;\n        return _bounds;\n      },\n      positions: function positions(_positions, group, options) {\n        var snap = group.snap;\n        var positionBuffer = group.positionBuffer,\n            positionFractBuffer = group.positionFractBuffer,\n            selectionBuffer = group.selectionBuffer; // separate buffers for x/y coordinates\n\n        if (_positions.x || _positions.y) {\n          if (_positions.x.length) {\n            group.xAttr = {\n              buffer: regl.buffer(_positions.x),\n              offset: 0,\n              stride: 4,\n              count: _positions.x.length\n            };\n          } else {\n            group.xAttr = {\n              buffer: _positions.x.buffer,\n              offset: _positions.x.offset * 4 || 0,\n              stride: (_positions.x.stride || 1) * 4,\n              count: _positions.x.count\n            };\n          }\n\n          if (_positions.y.length) {\n            group.yAttr = {\n              buffer: regl.buffer(_positions.y),\n              offset: 0,\n              stride: 4,\n              count: _positions.y.length\n            };\n          } else {\n            group.yAttr = {\n              buffer: _positions.y.buffer,\n              offset: _positions.y.offset * 4 || 0,\n              stride: (_positions.y.stride || 1) * 4,\n              count: _positions.y.count\n            };\n          }\n\n          group.count = Math.max(group.xAttr.count, group.yAttr.count);\n          return _positions;\n        }\n\n        _positions = flatten(_positions, 'float64');\n        var count = group.count = Math.floor(_positions.length / 2);\n        var bounds = group.bounds = count ? getBounds(_positions, 2) : null; // if range is not provided updated - recalc it\n\n        if (!options.range && !group.range) {\n          delete group.range;\n          options.range = bounds;\n        } // reset marker\n\n\n        if (!options.marker && !group.marker) {\n          delete group.marker;\n          options.marker = null;\n        } // build cluster tree if required\n\n\n        if (snap && (snap === true || count > snap)) {\n          group.tree = cluster(_positions, {\n            bounds: bounds\n          });\n        } // existing tree instance\n        else if (snap && snap.length) {\n            group.tree = snap;\n          }\n\n        if (group.tree) {\n          var opts = {\n            primitive: 'points',\n            usage: 'static',\n            data: group.tree,\n            type: 'uint32'\n          };\n          if (group.elements) group.elements(opts);else group.elements = regl.elements(opts);\n        } // update position buffers\n\n\n        positionBuffer({\n          data: f32.float(_positions),\n          usage: 'dynamic'\n        });\n        positionFractBuffer({\n          data: f32.fract(_positions),\n          usage: 'dynamic'\n        }); // expand selectionBuffer\n\n        selectionBuffer({\n          data: new Uint8Array(count),\n          type: 'uint8',\n          usage: 'stream'\n        });\n        return _positions;\n      }\n    }, {\n      // create marker ids corresponding to known marker textures\n      marker: function marker(markers, group, options) {\n        var activation = group.activation; // reset marker elements\n\n        activation.forEach(function (buffer) {\n          return buffer && buffer.destroy && buffer.destroy();\n        });\n        activation.length = 0; // single sdf marker\n\n        if (!markers || typeof markers[0] === 'number') {\n          var id = _this3.addMarker(markers);\n\n          activation[id] = true;\n        } // per-point markers use mask buffers to enable markers in vert shader\n        else {\n            var markerMasks = [];\n\n            for (var _i = 0, l = Math.min(markers.length, group.count); _i < l; _i++) {\n              var _id = _this3.addMarker(markers[_i]);\n\n              if (!markerMasks[_id]) markerMasks[_id] = new Uint8Array(group.count); // enable marker by default\n\n              markerMasks[_id][_i] = 1;\n            }\n\n            for (var _id2 = 0; _id2 < markerMasks.length; _id2++) {\n              if (!markerMasks[_id2]) continue;\n              var opts = {\n                data: markerMasks[_id2],\n                type: 'uint8',\n                usage: 'static'\n              };\n\n              if (!activation[_id2]) {\n                activation[_id2] = regl.buffer(opts);\n              } else {\n                activation[_id2](opts);\n              }\n\n              activation[_id2].data = markerMasks[_id2];\n            }\n          }\n\n        return markers;\n      },\n      range: function range(_range, group, options) {\n        var bounds = group.bounds; // FIXME: why do we need this?\n\n        if (!bounds) return;\n        if (!_range) _range = bounds;\n        group.scale = [1 / (_range[2] - _range[0]), 1 / (_range[3] - _range[1])];\n        group.translate = [-_range[0], -_range[1]];\n        group.scaleFract = f32.fract(group.scale);\n        group.translateFract = f32.fract(group.translate);\n        return _range;\n      },\n      viewport: function viewport(vp) {\n        var rect = parseRect(vp || [gl.drawingBufferWidth, gl.drawingBufferHeight]); // normalize viewport to the canvas coordinates\n        // rect.y = gl.drawingBufferHeight - rect.height - rect.y\n\n        return rect;\n      }\n    }]); // update size buffer, if needed\n\n    if (hasSize) {\n      var _group = group,\n          count = _group.count,\n          size = _group.size,\n          borderSize = _group.borderSize,\n          sizeBuffer = _group.sizeBuffer;\n      var sizes = new Uint8Array(count * 2);\n\n      if (size.length || borderSize.length) {\n        for (var _i2 = 0; _i2 < count; _i2++) {\n          // we downscale size to allow for fractions\n          sizes[_i2 * 2] = Math.round((size[_i2] == null ? size : size[_i2]) * 255 / maxSize);\n          sizes[_i2 * 2 + 1] = Math.round((borderSize[_i2] == null ? borderSize : borderSize[_i2]) * 255 / maxSize);\n        }\n      }\n\n      sizeBuffer({\n        data: sizes,\n        usage: 'dynamic'\n      });\n    } // update color buffer if needed\n\n\n    if (hasColor) {\n      var _group2 = group,\n          _count = _group2.count,\n          color = _group2.color,\n          borderColor = _group2.borderColor,\n          colorBuffer = _group2.colorBuffer;\n      var colors; // if too many colors - put colors to buffer directly\n\n      if (_this3.tooManyColors) {\n        if (color.length || borderColor.length) {\n          colors = new Uint8Array(_count * 8);\n\n          for (var _i3 = 0; _i3 < _count; _i3++) {\n            var _colorId = color[_i3];\n            colors[_i3 * 8] = palette[_colorId * 4];\n            colors[_i3 * 8 + 1] = palette[_colorId * 4 + 1];\n            colors[_i3 * 8 + 2] = palette[_colorId * 4 + 2];\n            colors[_i3 * 8 + 3] = palette[_colorId * 4 + 3];\n            var borderColorId = borderColor[_i3];\n            colors[_i3 * 8 + 4] = palette[borderColorId * 4];\n            colors[_i3 * 8 + 5] = palette[borderColorId * 4 + 1];\n            colors[_i3 * 8 + 6] = palette[borderColorId * 4 + 2];\n            colors[_i3 * 8 + 7] = palette[borderColorId * 4 + 3];\n          }\n        }\n      } // if limited amount of colors - keep palette color picking\n      // that saves significant memory\n      else {\n          if (color.length || borderColor.length) {\n            // we need slight data increase by 2 due to vec4 borderId in shader\n            colors = new Uint8Array(_count * 4 + 2);\n\n            for (var _i4 = 0; _i4 < _count; _i4++) {\n              // put color coords in palette texture\n              if (color[_i4] != null) {\n                colors[_i4 * 4] = color[_i4] % maxColors;\n                colors[_i4 * 4 + 1] = Math.floor(color[_i4] / maxColors);\n              }\n\n              if (borderColor[_i4] != null) {\n                colors[_i4 * 4 + 2] = borderColor[_i4] % maxColors;\n                colors[_i4 * 4 + 3] = Math.floor(borderColor[_i4] / maxColors);\n              }\n            }\n          }\n        }\n\n      colorBuffer({\n        data: colors || new Uint8Array(0),\n        type: 'uint8',\n        usage: 'dynamic'\n      });\n    }\n\n    return group;\n  });\n}; // get (and create) marker texture id\n\n\nScatter.prototype.addMarker = function (sdf) {\n  var markerTextures = this.markerTextures,\n      regl = this.regl,\n      markerCache = this.markerCache;\n  var pos = sdf == null ? 0 : markerCache.indexOf(sdf);\n  if (pos >= 0) return pos; // convert sdf to 0..255 range\n\n  var distArr;\n\n  if (sdf instanceof Uint8Array || sdf instanceof Uint8ClampedArray) {\n    distArr = sdf;\n  } else {\n    distArr = new Uint8Array(sdf.length);\n\n    for (var i = 0, l = sdf.length; i < l; i++) {\n      distArr[i] = sdf[i] * 255;\n    }\n  }\n\n  var radius = Math.floor(Math.sqrt(distArr.length));\n  pos = markerTextures.length;\n  markerCache.push(sdf);\n  markerTextures.push(regl.texture({\n    channels: 1,\n    data: distArr,\n    radius: radius,\n    mag: 'linear',\n    min: 'linear'\n  }));\n  return pos;\n}; // register color to palette, return it's index or list of indexes\n\n\nScatter.prototype.updateColor = function (colors) {\n  var paletteIds = this.paletteIds,\n      palette = this.palette,\n      maxColors = this.maxColors;\n\n  if (!Array.isArray(colors)) {\n    colors = [colors];\n  }\n\n  var idx = []; // if color groups - flatten them\n\n  if (typeof colors[0] === 'number') {\n    var grouped = [];\n\n    if (Array.isArray(colors)) {\n      for (var i = 0; i < colors.length; i += 4) {\n        grouped.push(colors.slice(i, i + 4));\n      }\n    } else {\n      for (var _i5 = 0; _i5 < colors.length; _i5 += 4) {\n        grouped.push(colors.subarray(_i5, _i5 + 4));\n      }\n    }\n\n    colors = grouped;\n  }\n\n  for (var _i6 = 0; _i6 < colors.length; _i6++) {\n    var color = colors[_i6];\n    color = rgba(color, 'uint8');\n    var id = colorId(color, false); // if new color - save it\n\n    if (paletteIds[id] == null) {\n      var pos = palette.length;\n      paletteIds[id] = Math.floor(pos / 4);\n      palette[pos] = color[0];\n      palette[pos + 1] = color[1];\n      palette[pos + 2] = color[2];\n      palette[pos + 3] = color[3];\n    }\n\n    idx[_i6] = paletteIds[id];\n  } // detect if too many colors in palette\n\n\n  if (!this.tooManyColors && palette.length > maxColors * 4) this.tooManyColors = true; // limit max color\n\n  this.updatePalette(palette); // keep static index for single-color property\n\n  return idx.length === 1 ? idx[0] : idx;\n};\n\nScatter.prototype.updatePalette = function (palette) {\n  if (this.tooManyColors) return;\n  var maxColors = this.maxColors,\n      paletteTexture = this.paletteTexture;\n  var requiredHeight = Math.ceil(palette.length * .25 / maxColors); // pad data\n\n  if (requiredHeight > 1) {\n    palette = palette.slice();\n\n    for (var i = palette.length * .25 % maxColors; i < requiredHeight * maxColors; i++) {\n      palette.push(0, 0, 0, 0);\n    }\n  } // ensure height\n\n\n  if (paletteTexture.height < requiredHeight) {\n    paletteTexture.resize(maxColors, requiredHeight);\n  } // update full data\n\n\n  paletteTexture.subimage({\n    width: Math.min(palette.length * .25, maxColors),\n    height: requiredHeight,\n    data: palette\n  }, 0, 0);\n}; // remove unused stuff\n\n\nScatter.prototype.destroy = function () {\n  this.groups.forEach(function (group) {\n    group.sizeBuffer.destroy();\n    group.positionBuffer.destroy();\n    group.positionFractBuffer.destroy();\n    group.colorBuffer.destroy();\n    group.activation.forEach(function (b) {\n      return b && b.destroy && b.destroy();\n    });\n    group.selectionBuffer.destroy();\n    if (group.elements) group.elements.destroy();\n  });\n  this.groups.length = 0;\n  this.paletteTexture.destroy();\n  this.markerTextures.forEach(function (txt) {\n    return txt && txt.destroy && txt.destroy();\n  });\n  return this;\n};\n\nvar extend$1 = require('object-assign');\n\nvar reglScatter2d = function reglScatter2d(regl, options) {\n  var scatter$1 = new scatter(regl, options);\n  var render = scatter$1.render.bind(scatter$1); // expose API\n\n  extend$1(render, {\n    render: render,\n    update: scatter$1.update.bind(scatter$1),\n    draw: scatter$1.draw.bind(scatter$1),\n    destroy: scatter$1.destroy.bind(scatter$1),\n    regl: scatter$1.regl,\n    gl: scatter$1.gl,\n    canvas: scatter$1.gl.canvas,\n    groups: scatter$1.groups,\n    markers: scatter$1.markerCache,\n    palette: scatter$1.palette\n  });\n  return render;\n};\n\nmodule.exports = reglScatter2d;\n"]},"metadata":{},"sourceType":"script"}