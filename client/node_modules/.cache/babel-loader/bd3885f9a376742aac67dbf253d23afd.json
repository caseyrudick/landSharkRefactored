{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PolyLines.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport ExistingLeaseLines from \"./ExistingLeaseLines\";\nimport ExistingHardLines from \"./ExistingHardLines\";\nimport LeaseLines from \"./LeaseLines\";\nimport HardLines from \"./HardLines\";\n\nconst PolyLines = ({\n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  activeWell\n}) => {\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const {\n        well,\n        rig,\n        operator\n      } = saveWellInfoToReduxStoreReducer.response;\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"hy-4\",\n        children: [\" \", operator, \" - \", rig, \" - \", well]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }, this);\n    } else if (activeWell.status === \"received\") {\n      const {\n        Well_Name,\n        Rig,\n        Operator\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"hy-4\",\n        children: [\" \", Operator.S, \" - \", Rig.S, \" - \", Well_Name.S]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }, this);\n    } else {\n      return \"No well data\";\n    }\n  };\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [renderWellData(), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Lease Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ExistingLeaseLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Hard Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ExistingHardLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  } else if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [renderWellData(), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Lease Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ExistingLeaseLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Hard Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(HardLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  } else if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n    /*#__PURE__*/\n    _jsxDEV(Container, {\n      children: [renderWellData(), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Lease Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(LeaseLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Hard Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ExistingHardLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [renderWellData(), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Lease Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LeaseLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Hard Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(HardLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = PolyLines;\n\nconst mapStateToProps = ({\n  activeWell,\n  getHardLinesFromDynamoDbReducer,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  return {\n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps)(PolyLines); // import React, { useEffect, useState } from \"react\"\n// import { connect } from \"react-redux\"\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import ExistingLeaseLines from \"./ExistingLeaseLines\"\n// import ExistingHardLines from \"./ExistingHardLines\"\n// import LeaseLines from \"./LeaseLines\"\n// import HardLines from \"./HardLines\"\n// const PolyLines = ({saveWellInfoToReduxStoreReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer,}) => {\n//   const renderWellData = () => {\n//     if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n//       const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n//     }\n//     else if (activeWell.status === \"received\") {\n//       const { Well_Name, Rig, Operator} = activeWell.response\n//       return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n//     } else {\n//       return \"No well data\"\n//     }\n//   }\n//   const renderLeaseLines = () => {\n//     // if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getLeaseLinesFromJSONDbReducer.response) {\n//     //   return <ExistingLeaseLines/>\n//     // } else {\n//       return <LeaseLines/>\n//     // }\n//   }\n//   const renderHardLines = () => {\n//     // if (getHardLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.response) {\n//     //   return <ExistingHardLines/>\n//     // } else {\n//       return <HardLines/>\n//     // }\n//   }\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           {renderLeaseLines()}\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           {renderHardLines()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n// const mapStateToProps = ({saveWellInfoToReduxStoreReducer, getHardLinesFromDynamoDbReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer}) => {\n//  return {\n//   saveWellInfoToReduxStoreReducer,\n//   getHardLinesFromDynamoDbReducer,\n//   // getLeaseLinesFromJSONDbReducer,\n//   // getHardLinesFromJSONDbReducer,\n//   activeWell, \n//  }\n// }\n// export default connect(mapStateToProps)(PolyLines)\n// // import React, { useState, useEffect } from \"react\"\n// // //bootstrap\n// // import Container from \"react-bootstrap/esm/Container\";\n// // import Form from \"react-bootstrap/Form\"\n// // import Row from \"react-bootstrap/Row\"\n// // import Col from \"react-bootstrap/Col\"\n// // import Button from \"react-bootstrap/Button\"\n// // import 'react-datasheet/lib/react-datasheet.css';\n// // import { connect } from \"react-redux\"\n// // import ReactDataSheet from 'react-datasheet';\n// // // actionCreators\n// // import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// // import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n// // const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n// //   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n// //   // set up initial grid\n// //   // create local state to setGrid\n// //   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// //   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// //   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// //   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n// //   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n// //   const initialGrid = [\n// //     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n// //     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n// //   ]\n// //   const [grid, setGrid] = useState(initialGrid)\n// //   const renderWellHeader = () => {\n// //     if (activeWell.status === \"received\") {\n// //       // const {operator, rig, well} = activeWell.response\n// //       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n// //     } else {\n// //       return \"No Well Data\"\n// //     }\n// //   }\n// //   const onCellsChanged = changes => {\n// //     const gridNew = grid.map(row => [...row])\n// //     changes.forEach(({cell, row, col, value}) => {\n// //       gridNew[row][col] = {...grid[row][col], value}\n// //     });\n// //     setGrid(gridNew);\n// //   }\n// //   const handleSubmit = () => {\n// //     const wellInfoAndLeaseLines = {\n// //       operator,\n// //       rig, \n// //       well, \n// //       county,\n// //       usState, \n// //       northing,\n// //       easting,\n// //       grid\n// //     }\n// //     // const activeWell\n// //     // saveLeaseLinesToJSON \n// //     checkTest()\n// //     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n// //     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n// //   }\n// //   const checkTest = () => {\n// //     console.log(\"whyyy\")\n// //   }\n// //   const renderRowsButtons = () => {\n// //     return (\n// //       <Row>\n// //         <Col xs={10} className=\"my-4\">\n// //           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n// //             Submit\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n// //             Add a Row\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n// //             Remove a Row\n// //           </Button>\n// //         </Col>\n// //       </Row>\n// //     )\n// //   }\n// //   const addRow = () => {\n// //     const gridLength = grid.length\n// //     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n// //     const newGrid = [...grid, newRow]\n// //     setGrid(newGrid)\n// //   }\n// //   const removeRow = () => {\n// //     const newGrid = [...grid]\n// //     newGrid.pop()\n// //     setGrid(newGrid)\n// //   }\n// //   return (\n// //     <Container>\n// //       <Row>\n// //         <Col xs={10}>\n// //           {renderWellHeader()}\n// //           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n// //           {renderRowsButtons()}\n// //         </Col>\n// //       </Row>\n// //     </Container>\n// //   )\n// // }\n// // const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n// //   return {\n// //     activeWell,\n// //     postLeaseLinesToJSONDbReducer,\n// //   }\n// // }\n// // export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)\n\nvar _c;\n\n$RefreshReg$(_c, \"PolyLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PolyLines.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","ExistingLeaseLines","ExistingHardLines","LeaseLines","HardLines","PolyLines","getLeaseLinesFromDynamoDbReducer","getHardLinesFromDynamoDbReducer","activeWell","renderWellData","saveWellInfoToReduxStoreReducer","status","well","rig","operator","response","Well_Name","Rig","Operator","S","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,gCAAD;AAAmCC,EAAAA,+BAAnC;AAAoEC,EAAAA;AAApE,CAAD,KAAqF;AACrG,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIC,+BAA+B,CAACC,MAAhC,KAA2C,UAA/C,EAA2D;AACzD,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,GAAR;AAAaC,QAAAA;AAAb,UAAyBJ,+BAA+B,CAACK,QAA/D;AACA,0BAAO;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,wBAAuBD,QAAvB,SAAoCD,GAApC,SAA4CD,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHD,MAIK,IAAIJ,UAAU,CAACG,MAAX,KAAsB,UAA1B,EAAsC;AACzC,YAAM;AAAEK,QAAAA,SAAF;AAAaC,QAAAA,GAAb;AAAkBC,QAAAA;AAAlB,UAA8BV,UAAU,CAACO,QAA/C;AACA,0BAAO;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,wBAAuBG,QAAQ,CAACC,CAAhC,SAAsCF,GAAG,CAACE,CAA1C,SAAgDH,SAAS,CAACG,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHI,MAGE;AACL,aAAO,cAAP;AACD;AACF,GAXD;;AAYA,MAAIb,gCAAgC,CAACK,MAAjC,KAA4C,UAA5C,IAA0DJ,+BAA+B,CAACI,MAAhC,KAA2C,UAAzG,EAAqH;AACnH,wBACE,QAAC,SAAD;AAAA,iBACGF,cAAc,EADjB,eAEE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,GAAD;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,GAAD;AAAA,kCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD,GAhBD,MAgBO,IAAIH,gCAAgC,CAACK,MAAjC,KAA4C,UAAhD,EAA4D;AACjE,wBACE,QAAC,SAAD;AAAA,iBACGF,cAAc,EADjB,eAEE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,GAAD;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,GAAD;AAAA,kCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD,GAhBM,MAgBA,IAAIF,+BAA+B,CAACI,MAAhC,KAA2C,UAA/C,EAA2D;AAChE;AAAA,YAAC,SAAD;AAAA,iBACGF,cAAc,EADjB,eAEE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,GAAD;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,GAAD;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAaD,GAdM,MAcA;AACL,wBACE,QAAC,SAAD;AAAA,iBACGA,cAAc,EADjB,eAEE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,GAAD;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,GAAD;AAAA,kCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;AAGF,CA9ED;;KAAMJ,S;;AAgFN,MAAMe,eAAe,GAAG,CAAC;AAACZ,EAAAA,UAAD;AAAaD,EAAAA,+BAAb;AAA8CD,EAAAA;AAA9C,CAAD,KAAqF;AAC5G,SAAO;AACNE,IAAAA,UADM;AAENF,IAAAA,gCAFM;AAGNC,IAAAA;AAHM,GAAP;AAKA,CAND;;AAQA,eAAeb,OAAO,CAAC0B,eAAD,CAAP,CAAyBf,SAAzB,CAAfsourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport ExistingLeaseLines from \"./ExistingLeaseLines\"\nimport ExistingHardLines from \"./ExistingHardLines\"\nimport LeaseLines from \"./LeaseLines\"\nimport HardLines from \"./HardLines\"\n\n\nconst PolyLines = ({getLeaseLinesFromDynamoDbReducer, getHardLinesFromDynamoDbReducer, activeWell}) => {\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    }\n    else if (activeWell.status === \"received\") {\n      const { Well_Name, Rig, Operator} = activeWell.response\n      return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderWellData()}\n        <Row className=\"mt-4\">\n          <Col>\n            <h4>Lease Lines</h4>\n            <ExistingLeaseLines/>\n          </Col>\n          <Col>\n          <h4>Hard Lines</h4>\n            <ExistingHardLines/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  } else if (getLeaseLinesFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderWellData()}\n        <Row className=\"mt-4\">\n          <Col>\n            <h4>Lease Lines</h4>\n            <ExistingLeaseLines/>\n          </Col>\n          <Col>\n          <h4>Hard Lines</h4>\n            <HardLines/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  } else if (getHardLinesFromDynamoDbReducer.status === \"received\") {\n    <Container>\n      {renderWellData()}\n      <Row className=\"mt-4\">\n        <Col>\n          <h4>Lease Lines</h4>\n          <LeaseLines/>\n        </Col>\n        <Col>\n          <h4>Hard Lines</h4>\n          <ExistingHardLines/>\n        </Col>\n      </Row>\n  </Container>\n  } else {\n    return (\n      <Container>\n        {renderWellData()}\n        <Row className=\"mt-4\">\n          <Col>\n            <h4>Lease Lines</h4>\n            <LeaseLines/>\n          </Col>\n          <Col>\n          <h4>Hard Lines</h4>\n            <HardLines/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({activeWell, getHardLinesFromDynamoDbReducer, getLeaseLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(PolyLines)\n\n// import React, { useEffect, useState } from \"react\"\n// import { connect } from \"react-redux\"\n\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import ExistingLeaseLines from \"./ExistingLeaseLines\"\n// import ExistingHardLines from \"./ExistingHardLines\"\n// import LeaseLines from \"./LeaseLines\"\n// import HardLines from \"./HardLines\"\n\n// const PolyLines = ({saveWellInfoToReduxStoreReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer,}) => {\n//   const renderWellData = () => {\n//     if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n//       const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n//     }\n//     else if (activeWell.status === \"received\") {\n//       const { Well_Name, Rig, Operator} = activeWell.response\n//       return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n//     } else {\n//       return \"No well data\"\n//     }\n//   }\n  \n//   const renderLeaseLines = () => {\n//     // if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getLeaseLinesFromJSONDbReducer.response) {\n//     //   return <ExistingLeaseLines/>\n//     // } else {\n//       return <LeaseLines/>\n//     // }\n//   }\n\n//   const renderHardLines = () => {\n//     // if (getHardLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.response) {\n//     //   return <ExistingHardLines/>\n//     // } else {\n//       return <HardLines/>\n//     // }\n//   }\n\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           {renderLeaseLines()}\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           {renderHardLines()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({saveWellInfoToReduxStoreReducer, getHardLinesFromDynamoDbReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer}) => {\n//  return {\n//   saveWellInfoToReduxStoreReducer,\n//   getHardLinesFromDynamoDbReducer,\n//   // getLeaseLinesFromJSONDbReducer,\n//   // getHardLinesFromJSONDbReducer,\n//   activeWell, \n//  }\n// }\n\n// export default connect(mapStateToProps)(PolyLines)\n\n\n\n\n// // import React, { useState, useEffect } from \"react\"\n// // //bootstrap\n// // import Container from \"react-bootstrap/esm/Container\";\n// // import Form from \"react-bootstrap/Form\"\n// // import Row from \"react-bootstrap/Row\"\n// // import Col from \"react-bootstrap/Col\"\n// // import Button from \"react-bootstrap/Button\"\n\n// // import 'react-datasheet/lib/react-datasheet.css';\n// // import { connect } from \"react-redux\"\n// // import ReactDataSheet from 'react-datasheet';\n\n// // // actionCreators\n// // import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// // import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\n// // const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n// //   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n// //   // set up initial grid\n// //   // create local state to setGrid\n// //   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// //   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// //   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// //   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n// //   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n// //   const initialGrid = [\n// //     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n// //     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n// //   ]\n// //   const [grid, setGrid] = useState(initialGrid)\n\n// //   const renderWellHeader = () => {\n// //     if (activeWell.status === \"received\") {\n// //       // const {operator, rig, well} = activeWell.response\n// //       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n// //     } else {\n// //       return \"No Well Data\"\n// //     }\n// //   }\n\n// //   const onCellsChanged = changes => {\n// //     const gridNew = grid.map(row => [...row])\n// //     changes.forEach(({cell, row, col, value}) => {\n// //       gridNew[row][col] = {...grid[row][col], value}\n// //     });\n// //     setGrid(gridNew);\n    \n// //   }\n\n// //   const handleSubmit = () => {\n// //     const wellInfoAndLeaseLines = {\n// //       operator,\n// //       rig, \n// //       well, \n// //       county,\n// //       usState, \n// //       northing,\n// //       easting,\n// //       grid\n// //     }\n// //     // const activeWell\n// //     // saveLeaseLinesToJSON \n// //     checkTest()\n// //     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n// //     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n// //   }\n\n// //   const checkTest = () => {\n// //     console.log(\"whyyy\")\n// //   }\n\n// //   const renderRowsButtons = () => {\n// //     return (\n// //       <Row>\n// //         <Col xs={10} className=\"my-4\">\n// //           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n// //             Submit\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n// //             Add a Row\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n// //             Remove a Row\n// //           </Button>\n\n// //         </Col>\n// //       </Row>\n// //     )\n// //   }\n\n// //   const addRow = () => {\n// //     const gridLength = grid.length\n// //     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n// //     const newGrid = [...grid, newRow]\n// //     setGrid(newGrid)\n// //   }\n\n// //   const removeRow = () => {\n// //     const newGrid = [...grid]\n// //     newGrid.pop()\n// //     setGrid(newGrid)\n// //   }\n  \n\n// //   return (\n// //     <Container>\n// //       <Row>\n// //         <Col xs={10}>\n// //           {renderWellHeader()}\n// //           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n// //           {renderRowsButtons()}\n// //         </Col>\n// //       </Row>\n// //     </Container>\n// //   )\n// // }\n\n// // const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n// //   return {\n// //     activeWell,\n// //     postLeaseLinesToJSONDbReducer,\n// //   }\n// // }\n\n// // export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)"]},"metadata":{},"sourceType":"module"}