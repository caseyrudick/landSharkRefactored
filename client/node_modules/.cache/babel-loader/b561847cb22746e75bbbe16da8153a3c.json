{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar scatterMapboxHoverPoints = require('../scattermapbox/hover');\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n  var pts = scatterMapboxHoverPoints(pointData, xval, yval);\n  if (!pts) return;\n  var newPointData = pts[0];\n  var cd = newPointData.cd;\n  var trace = cd[0].trace;\n  var di = cd[newPointData.index]; // let Fx.hover pick the color\n\n  delete newPointData.color;\n\n  if ('z' in di) {\n    var ax = newPointData.subplot.mockAxis;\n    newPointData.z = di.z;\n    newPointData.zLabel = Axes.tickText(ax, ax.c2l(di.z), 'hover').text;\n  }\n\n  newPointData.extraText = getExtraText(trace, di, cd[0].t.labels);\n  return [newPointData];\n};\n\nfunction getExtraText(trace, di, labels) {\n  if (trace.hovertemplate) return;\n  var hoverinfo = di.hi || trace.hoverinfo;\n  var parts = hoverinfo.split('+');\n  var isAll = parts.indexOf('all') !== -1;\n  var hasLon = parts.indexOf('lon') !== -1;\n  var hasLat = parts.indexOf('lat') !== -1;\n  var lonlat = di.lonlat;\n  var text = [];\n\n  function format(v) {\n    return v + '\\u00B0';\n  }\n\n  if (isAll || hasLon && hasLat) {\n    text.push('(' + format(lonlat[0]) + ', ' + format(lonlat[1]) + ')');\n  } else if (hasLon) {\n    text.push(labels.lon + format(lonlat[0]));\n  } else if (hasLat) {\n    text.push(labels.lat + format(lonlat[1]));\n  }\n\n  if (isAll || parts.indexOf('text') !== -1) {\n    Lib.fillText(di, trace, text);\n  }\n\n  return text.join('<br>');\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/densitymapbox/hover.js"],"names":["Lib","require","Axes","scatterMapboxHoverPoints","module","exports","hoverPoints","pointData","xval","yval","pts","newPointData","cd","trace","di","index","color","ax","subplot","mockAxis","z","zLabel","tickText","c2l","text","extraText","getExtraText","t","labels","hovertemplate","hoverinfo","hi","parts","split","isAll","indexOf","hasLon","hasLat","lonlat","format","v","push","lon","lat","fillText","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,wBAAD,CAAtC;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4C;AACzD,MAAIC,GAAG,GAAGP,wBAAwB,CAACI,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,CAAlC;AACA,MAAG,CAACC,GAAJ,EAAS;AAET,MAAIC,YAAY,GAAGD,GAAG,CAAC,CAAD,CAAtB;AACA,MAAIE,EAAE,GAAGD,YAAY,CAACC,EAAtB;AACA,MAAIC,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAF,CAAMC,KAAlB;AACA,MAAIC,EAAE,GAAGF,EAAE,CAACD,YAAY,CAACI,KAAd,CAAX,CAPyD,CASzD;;AACA,SAAOJ,YAAY,CAACK,KAApB;;AAEA,MAAG,OAAOF,EAAV,EAAc;AACV,QAAIG,EAAE,GAAGN,YAAY,CAACO,OAAb,CAAqBC,QAA9B;AACAR,IAAAA,YAAY,CAACS,CAAb,GAAiBN,EAAE,CAACM,CAApB;AACAT,IAAAA,YAAY,CAACU,MAAb,GAAsBnB,IAAI,CAACoB,QAAL,CAAcL,EAAd,EAAkBA,EAAE,CAACM,GAAH,CAAOT,EAAE,CAACM,CAAV,CAAlB,EAAgC,OAAhC,EAAyCI,IAA/D;AACH;;AAEDb,EAAAA,YAAY,CAACc,SAAb,GAAyBC,YAAY,CAACb,KAAD,EAAQC,EAAR,EAAYF,EAAE,CAAC,CAAD,CAAF,CAAMe,CAAN,CAAQC,MAApB,CAArC;AAEA,SAAO,CAACjB,YAAD,CAAP;AACH,CArBD;;AAuBA,SAASe,YAAT,CAAsBb,KAAtB,EAA6BC,EAA7B,EAAiCc,MAAjC,EAAyC;AACrC,MAAGf,KAAK,CAACgB,aAAT,EAAwB;AAExB,MAAIC,SAAS,GAAGhB,EAAE,CAACiB,EAAH,IAASlB,KAAK,CAACiB,SAA/B;AACA,MAAIE,KAAK,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAZ;AACA,MAAIC,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,KAAd,MAAyB,CAAC,CAAtC;AACA,MAAIC,MAAM,GAAGJ,KAAK,CAACG,OAAN,CAAc,KAAd,MAAyB,CAAC,CAAvC;AACA,MAAIE,MAAM,GAAGL,KAAK,CAACG,OAAN,CAAc,KAAd,MAAyB,CAAC,CAAvC;AACA,MAAIG,MAAM,GAAGxB,EAAE,CAACwB,MAAhB;AACA,MAAId,IAAI,GAAG,EAAX;;AAEA,WAASe,MAAT,CAAgBC,CAAhB,EAAmB;AACf,WAAOA,CAAC,GAAG,QAAX;AACH;;AAED,MAAGN,KAAK,IAAKE,MAAM,IAAIC,MAAvB,EAAgC;AAC5Bb,IAAAA,IAAI,CAACiB,IAAL,CAAU,MAAMF,MAAM,CAACD,MAAM,CAAC,CAAD,CAAP,CAAZ,GAA0B,IAA1B,GAAiCC,MAAM,CAACD,MAAM,CAAC,CAAD,CAAP,CAAvC,GAAqD,GAA/D;AACH,GAFD,MAEO,IAAGF,MAAH,EAAW;AACdZ,IAAAA,IAAI,CAACiB,IAAL,CAAUb,MAAM,CAACc,GAAP,GAAaH,MAAM,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7B;AACH,GAFM,MAEA,IAAGD,MAAH,EAAW;AACdb,IAAAA,IAAI,CAACiB,IAAL,CAAUb,MAAM,CAACe,GAAP,GAAaJ,MAAM,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7B;AACH;;AAED,MAAGJ,KAAK,IAAIF,KAAK,CAACG,OAAN,CAAc,MAAd,MAA0B,CAAC,CAAvC,EAA0C;AACtCnC,IAAAA,GAAG,CAAC4C,QAAJ,CAAa9B,EAAb,EAAiBD,KAAjB,EAAwBW,IAAxB;AACH;;AAED,SAAOA,IAAI,CAACqB,IAAL,CAAU,MAAV,CAAP;AACH","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar scatterMapboxHoverPoints = require('../scattermapbox/hover');\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n    var pts = scatterMapboxHoverPoints(pointData, xval, yval);\n    if(!pts) return;\n\n    var newPointData = pts[0];\n    var cd = newPointData.cd;\n    var trace = cd[0].trace;\n    var di = cd[newPointData.index];\n\n    // let Fx.hover pick the color\n    delete newPointData.color;\n\n    if('z' in di) {\n        var ax = newPointData.subplot.mockAxis;\n        newPointData.z = di.z;\n        newPointData.zLabel = Axes.tickText(ax, ax.c2l(di.z), 'hover').text;\n    }\n\n    newPointData.extraText = getExtraText(trace, di, cd[0].t.labels);\n\n    return [newPointData];\n};\n\nfunction getExtraText(trace, di, labels) {\n    if(trace.hovertemplate) return;\n\n    var hoverinfo = di.hi || trace.hoverinfo;\n    var parts = hoverinfo.split('+');\n    var isAll = parts.indexOf('all') !== -1;\n    var hasLon = parts.indexOf('lon') !== -1;\n    var hasLat = parts.indexOf('lat') !== -1;\n    var lonlat = di.lonlat;\n    var text = [];\n\n    function format(v) {\n        return v + '\\u00B0';\n    }\n\n    if(isAll || (hasLon && hasLat)) {\n        text.push('(' + format(lonlat[0]) + ', ' + format(lonlat[1]) + ')');\n    } else if(hasLon) {\n        text.push(labels.lon + format(lonlat[0]));\n    } else if(hasLat) {\n        text.push(labels.lat + format(lonlat[1]));\n    }\n\n    if(isAll || parts.indexOf('text') !== -1) {\n        Lib.fillText(di, trace, text);\n    }\n\n    return text.join('<br>');\n}\n"]},"metadata":{},"sourceType":"script"}