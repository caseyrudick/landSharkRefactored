{"ast":null,"code":"import { CREATE_NEW_PLAN } from \"./types\";\nexport default ((wellPlans, currentWell) => {\n  return (dispatch, getState) => {\n    let val = {};\n    console.log(getState().wells[wellPlans.plans]); // console.log(key)\n\n    val.key = newPlan; // console.log(val)\n    // getState().wells[currentWell.plans] = newPlan \n    // console.log(getState().wells)\n    // console.log(getState().wells[currentWell.plans])\n    //   const currentPlanNumber = currentWellId.plan.slice(-1).planNumber ? currentWellId.plan.slice(-1).planNumber : 0;\n    // const currentPlan = currentWellId.plan.slice(-1).plan ? currentWellId.plan.slice(-1).plan : {};\n\n    dispatch({\n      type: CREATE_NEW_PLAN,\n      payload: val\n    });\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/LandShark/landsharkrefactored/client/src/ActionCreators/saveNewPlanToReduxStore.js"],"names":["CREATE_NEW_PLAN","wellPlans","currentWell","dispatch","getState","val","console","log","wells","plans","key","newPlan","type","payload"],"mappings":"AAAA,SAASA,eAAT,QAAgC,SAAhC;AAEA,gBAAe,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACzC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B,QAAIC,GAAG,GAAG,EAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,GAAGI,KAAX,CAAiBP,SAAS,CAACQ,KAA3B,CAAZ,EAF6B,CAG7B;;AACAJ,IAAAA,GAAG,CAACK,GAAJ,GAAUC,OAAV,CAJ6B,CAK7B;AACA;AACA;AACA;AACF;AACA;;AACER,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEZ,eADC;AAEPa,MAAAA,OAAO,EAAER;AAFF,KAAD,CAAR;AAID,GAfD;AAiBD,CAlBD","sourcesContent":["import { CREATE_NEW_PLAN } from \"./types\"\n\nexport default (wellPlans, currentWell) => {\n  return (dispatch, getState) => {\n    let val = {}\n    console.log(getState().wells[wellPlans.plans])\n    // console.log(key)\n    val.key = newPlan\n    // console.log(val)\n    // getState().wells[currentWell.plans] = newPlan \n    // console.log(getState().wells)\n    // console.log(getState().wells[currentWell.plans])\n  //   const currentPlanNumber = currentWellId.plan.slice(-1).planNumber ? currentWellId.plan.slice(-1).planNumber : 0;\n  // const currentPlan = currentWellId.plan.slice(-1).plan ? currentWellId.plan.slice(-1).plan : {};\n    dispatch({\n      type: CREATE_NEW_PLAN, \n      payload: val\n    })\n  }\n\n}"]},"metadata":{},"sourceType":"module"}