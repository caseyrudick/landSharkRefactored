{"ast":null,"code":"import _objectSpread from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from\"react\";//bootstrap\nimport Container from\"react-bootstrap/esm/Container\";import Form from\"react-bootstrap/Form\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Button from\"react-bootstrap/Button\";import'react-datasheet/lib/react-datasheet.css';import{connect}from\"react-redux\";import ReactDataSheet from'react-datasheet';// actionCreators\nimport saveLeaseLinesToReduxStore from\"../ActionCreators/saveLeaseLinesToReduxStore\";import postLeaseLinesToDynamoDb from\"../ActionCreators/postLeaseLinesToDynamoDb\";var LeaseLines=function LeaseLines(_ref){var postLeaseLinesToDynamoDb=_ref.postLeaseLinesToDynamoDb,activeWell=_ref.activeWell,saveLeaseLinesToReduxStore=_ref.saveLeaseLinesToReduxStore,postLeaseLinesToJSONDb=_ref.postLeaseLinesToJSONDb;var _activeWell$response=activeWell.response,operator=_activeWell$response.operator,rig=_activeWell$response.rig,well=_activeWell$response.well,county=_activeWell$response.county,usState=_activeWell$response.usState,northing=_activeWell$response.northing,easting=_activeWell$response.easting;// set up initial grid\n// create local state to setGrid\n// renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n// addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\nvar initialLeaseLines=[[{value:\"\",readOnly:true,width:\"7rem\"},{value:\"Northing\",readOnly:true,width:\"7rem\"},{value:\"Easting\",readOnly:true,width:\"7rem\"}],[{value:1,readOnly:true},{value:0},{value:0}],[{value:2,readOnly:true},{value:0},{value:0}],[{value:3,readOnly:true},{value:0},{value:0}],[{value:4,readOnly:true},{value:0},{value:0}],[{value:5,readOnly:true},{value:0},{value:0}],[{value:6,readOnly:true},{value:0},{value:0}],[{value:7,readOnly:true},{value:0},{value:0}],[{value:8,readOnly:true},{value:0},{value:0}],[{value:9,readOnly:true},{value:0},{value:0}]];var _useState=useState(initialLeaseLines),_useState2=_slicedToArray(_useState,2),leaseLines=_useState2[0],setLeaseLines=_useState2[1];// const renderWellHeader = () => {\n//   if (activeWell.status === \"received\") {\n//     // const {operator, rig, well} = activeWell.response\n//     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//   } else {\n//     return \"No Well Data\"\n//   }\n// }\nvar onCellsChanged=function onCellsChanged(changes){var gridNew=leaseLines.map(function(row){return _toConsumableArray(row);});changes.forEach(function(_ref2){var cell=_ref2.cell,row=_ref2.row,col=_ref2.col,value=_ref2.value;gridNew[row][col]=_objectSpread(_objectSpread({},leaseLines[row][col]),{},{value:value});});setLeaseLines(gridNew);};var handleSubmit=function handleSubmit(){var wellInfoAndLeaseLines={operator:operator,rig:rig,well:well,county:county,usState:usState,northing:northing,easting:easting,leaseLines:leaseLines};postLeaseLinesToDynamoDb(wellInfoAndLeaseLines);saveLeaseLinesToReduxStore(wellInfoAndLeaseLines);};var renderRowsButtons=function renderRowsButtons(){return/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{xs:10,className:\"my-4\",children:[/*#__PURE__*/_jsx(Button,{variant:\"success\",className:\"my-4\",onClick:handleSubmit,children:\"Submit\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"ml-4\",onClick:addRow,children:\"Add a Row\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"ml-4\",onClick:removeRow,children:\"Remove a Row\"})]})});};var addRow=function addRow(){var gridLength=leaseLines.length;var newRow=[{value:gridLength,readOnly:true},{value:0},{value:0}];var newGrid=[].concat(_toConsumableArray(leaseLines),[newRow]);setLeaseLines(newGrid);};var removeRow=function removeRow(){var newGrid=_toConsumableArray(leaseLines);newGrid.pop();setLeaseLines(newGrid);};return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{xs:10,children:[/*#__PURE__*/_jsx(ReactDataSheet,{data:leaseLines,valueRenderer:function valueRenderer(cell){return cell.value;},onCellsChanged:onCellsChanged}),renderRowsButtons()]})})});};var mapStateToProps=function mapStateToProps(_ref3){var activeWell=_ref3.activeWell,postLeaseLinesToJSONDbReducer=_ref3.postLeaseLinesToJSONDbReducer;return{activeWell:activeWell,postLeaseLinesToJSONDbReducer:postLeaseLinesToJSONDbReducer};};export default connect(mapStateToProps,{saveLeaseLinesToReduxStore:saveLeaseLinesToReduxStore,postLeaseLinesToDynamoDb:postLeaseLinesToDynamoDb})(LeaseLines);","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/LeaseLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveLeaseLinesToReduxStore","postLeaseLinesToDynamoDb","LeaseLines","activeWell","postLeaseLinesToJSONDb","response","operator","rig","well","county","usState","northing","easting","initialLeaseLines","value","readOnly","width","leaseLines","setLeaseLines","onCellsChanged","changes","gridNew","map","row","forEach","cell","col","handleSubmit","wellInfoAndLeaseLines","renderRowsButtons","addRow","removeRow","gridLength","length","newRow","newGrid","pop","mapStateToProps","postLeaseLinesToJSONDbReducer"],"mappings":"qqBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA;AACA,MAAOC,CAAAA,SAAP,KAAsB,+BAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,sBAAjB,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CACA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CAEA,MAAO,yCAAP,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,iBAA3B,CAEA;AACA,MAAOC,CAAAA,0BAAP,KAAuC,8CAAvC,CACA,MAAOC,CAAAA,wBAAP,KAAqC,4CAArC,CAGA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAgG,IAA9FD,CAAAA,wBAA8F,MAA9FA,wBAA8F,CAApEE,UAAoE,MAApEA,UAAoE,CAAxDH,0BAAwD,MAAxDA,0BAAwD,CAA5BI,sBAA4B,MAA5BA,sBAA4B,0BAC/CD,UAAU,CAACE,QADoC,CAC1GC,QAD0G,sBAC1GA,QAD0G,CAChGC,GADgG,sBAChGA,GADgG,CAC3FC,IAD2F,sBAC3FA,IAD2F,CACrFC,MADqF,sBACrFA,MADqF,CAC7EC,OAD6E,sBAC7EA,OAD6E,CACpEC,QADoE,sBACpEA,QADoE,CAC1DC,OAD0D,sBAC1DA,OAD0D,CAEjH;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,iBAAiB,CAAG,CACxB,CAAC,CAACC,KAAK,CAAE,EAAR,CAAYC,QAAQ,CAAE,IAAtB,CAA4BC,KAAK,CAAE,MAAnC,CAAD,CAA6C,CAACF,KAAK,CAAE,UAAR,CAAoBC,QAAQ,CAAE,IAA9B,CAAoCC,KAAK,CAAE,MAA3C,CAA7C,CAAiG,CAACF,KAAK,CAAC,SAAP,CAAkBC,QAAQ,CAAE,IAA5B,CAAkCC,KAAK,CAAE,MAAzC,CAAjG,CADwB,CAExB,CAAC,CAACF,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CAFwB,CAGxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CAHwB,CAIxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CAJwB,CAKxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CALwB,CAMxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CANwB,CAOxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CAPwB,CAQxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CARwB,CASxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CATwB,CAUxB,CAAC,CAACA,KAAK,CAAE,CAAR,CAAWC,QAAQ,CAAE,IAArB,CAAD,CAA6B,CAACD,KAAK,CAAE,CAAR,CAA7B,CAAyC,CAACA,KAAK,CAAE,CAAR,CAAzC,CAVwB,CAA1B,CAViH,cAsB7EvB,QAAQ,CAACsB,iBAAD,CAtBqE,wCAsB1GI,UAtB0G,eAsB9FC,aAtB8F,eAwBjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,OAAO,CAAI,CAChC,GAAMC,CAAAA,OAAO,CAAGJ,UAAU,CAACK,GAAX,CAAe,SAAAC,GAAG,4BAAQA,GAAR,GAAlB,CAAhB,CACAH,OAAO,CAACI,OAAR,CAAgB,eAA6B,IAA3BC,CAAAA,IAA2B,OAA3BA,IAA2B,CAArBF,GAAqB,OAArBA,GAAqB,CAAhBG,GAAgB,OAAhBA,GAAgB,CAAXZ,KAAW,OAAXA,KAAW,CAC3CO,OAAO,CAACE,GAAD,CAAP,CAAaG,GAAb,iCAAwBT,UAAU,CAACM,GAAD,CAAV,CAAgBG,GAAhB,CAAxB,MAA8CZ,KAAK,CAALA,KAA9C,GACD,CAFD,EAGAI,aAAa,CAACG,OAAD,CAAb,CAED,CAPD,CASA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMC,CAAAA,qBAAqB,CAAG,CAC5BtB,QAAQ,CAARA,QAD4B,CAE5BC,GAAG,CAAHA,GAF4B,CAG5BC,IAAI,CAAJA,IAH4B,CAI5BC,MAAM,CAANA,MAJ4B,CAK5BC,OAAO,CAAPA,OAL4B,CAM5BC,QAAQ,CAARA,QAN4B,CAO5BC,OAAO,CAAPA,OAP4B,CAQ5BK,UAAU,CAAVA,UAR4B,CAA9B,CAWAhB,wBAAwB,CAAC2B,qBAAD,CAAxB,CACA5B,0BAA0B,CAAC4B,qBAAD,CAA1B,CAGD,CAhBD,CAkBA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,mBACE,KAAC,GAAD,wBACE,MAAC,GAAD,EAAK,EAAE,CAAE,EAAT,CAAa,SAAS,CAAC,MAAvB,wBACE,KAAC,MAAD,EAAQ,OAAO,CAAC,SAAhB,CAA0B,SAAS,CAAC,MAApC,CAA2C,OAAO,CAAEF,YAApD,oBADF,cAIE,KAAC,MAAD,EAAQ,OAAO,CAAC,SAAhB,CAA0B,SAAS,CAAC,MAApC,CAA2C,OAAO,CAAEG,MAApD,uBAJF,cAOE,KAAC,MAAD,EAAQ,OAAO,CAAC,SAAhB,CAA0B,SAAS,CAAC,MAApC,CAA2C,OAAO,CAAEC,SAApD,0BAPF,GADF,EADF,CAgBD,CAjBD,CAmBA,GAAMD,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnB,GAAME,CAAAA,UAAU,CAAGf,UAAU,CAACgB,MAA9B,CACA,GAAMC,CAAAA,MAAM,CAAG,CAAC,CAACpB,KAAK,CAAEkB,UAAR,CAAoBjB,QAAQ,CAAE,IAA9B,CAAD,CAAsC,CAACD,KAAK,CAAE,CAAR,CAAtC,CAAkD,CAACA,KAAK,CAAE,CAAR,CAAlD,CAAf,CACA,GAAMqB,CAAAA,OAAO,8BAAOlB,UAAP,GAAmBiB,MAAnB,EAAb,CACAhB,aAAa,CAACiB,OAAD,CAAb,CACD,CALD,CAOA,GAAMJ,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAMI,CAAAA,OAAO,oBAAOlB,UAAP,CAAb,CACAkB,OAAO,CAACC,GAAR,GACAlB,aAAa,CAACiB,OAAD,CAAb,CACD,CAJD,CAOA,mBACE,KAAC,SAAD,wBACE,KAAC,GAAD,wBACE,MAAC,GAAD,EAAK,EAAE,CAAE,EAAT,wBAEE,KAAC,cAAD,EAAgB,IAAI,CAAElB,UAAtB,CAAkC,aAAa,CAAE,uBAACQ,IAAD,QAASA,CAAAA,IAAI,CAACX,KAAd,EAAjD,CAAsE,cAAc,CAAEK,cAAtF,EAFF,CAGGU,iBAAiB,EAHpB,GADF,EADF,EADF,CAWD,CAxGD,CA0GA,GAAMQ,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,OAAiD,IAA/ClC,CAAAA,UAA+C,OAA/CA,UAA+C,CAAnCmC,6BAAmC,OAAnCA,6BAAmC,CACvE,MAAO,CACLnC,UAAU,CAAVA,UADK,CAELmC,6BAA6B,CAA7BA,6BAFK,CAAP,CAID,CALD,CAOA,cAAexC,CAAAA,OAAO,CAACuC,eAAD,CAAkB,CAACrC,0BAA0B,CAA1BA,0BAAD,CAA6BC,wBAAwB,CAAxBA,wBAA7B,CAAlB,CAAP,CAAiFC,UAAjF,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport postLeaseLinesToDynamoDb from \"../ActionCreators/postLeaseLinesToDynamoDb\"\n\n\nconst LeaseLines = ({postLeaseLinesToDynamoDb, activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialLeaseLines = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [leaseLines, setLeaseLines] = useState(initialLeaseLines)\n\n  // const renderWellHeader = () => {\n  //   if (activeWell.status === \"received\") {\n  //     // const {operator, rig, well} = activeWell.response\n  //     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No Well Data\"\n  //   }\n  // }\n\n  const onCellsChanged = changes => {\n    const gridNew = leaseLines.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...leaseLines[row][col], value}\n    });\n    setLeaseLines(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      leaseLines\n    }\n\n    postLeaseLinesToDynamoDb(wellInfoAndLeaseLines)\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = leaseLines.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...leaseLines, newRow]\n    setLeaseLines(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...leaseLines]\n    newGrid.pop()\n    setLeaseLines(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={leaseLines} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToDynamoDb})(LeaseLines)"]},"metadata":{},"sourceType":"module"}