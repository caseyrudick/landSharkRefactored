{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingSurveys.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getSurveysFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingSurveys = ({\n  activeWell,\n  getSurveysFromJSONDbReducer,\n  getSurveysFromJSONDb\n}) => {\n  _s();\n\n  const [surveys, setSurveys] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getSurveysFromJSONDbReducer.status === \"received\") {\n      let plansFromReducerCopy = [...getSurveysFromJSONDbReducer.response];\n      setSurveys[plansFromReducerCopy];\n    }\n  }, [getSurveysFromJSONDbReducer.status]);\n\n  const renderMain = () => {\n    const {\n      operator,\n      rig,\n      well\n    } = activeWell.response;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: [operator, \" - \", rig, \" - \", well]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (getSurveysFromJSONDbReducer.status === \"received\" && getSurveysFromJSONDbReducer.response) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: \"\\\"TBD\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_s(ExistingSurveys, \"sgR3ZdsP+xd27d7HAB4R7H5jnFc=\");\n\n_c = ExistingSurveys;\n\nconst mapStateToProps = ({\n  activeWell,\n  getSurveysFromJSONDbReducer\n}) => {\n  return {\n    activeWell,\n    getSurveysFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSurveysFromJSONDb\n})(ExistingSurveys);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingSurveys\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingSurveys.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getSurveysFromJSONDb","ExistingSurveys","activeWell","getSurveysFromJSONDbReducer","surveys","setSurveys","grid","setGrid","status","plansFromReducerCopy","response","renderMain","operator","rig","well","mapStateToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,oBAAP,MAAiC,0CAAjC;;AAGA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,2BAAb;AAA0CH,EAAAA;AAA1C,CAAD,KAAqE;AAAA;;AAC3F,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,2BAA2B,CAACK,MAA5B,KAAuC,UAA3C,EAAuD;AACrD,UAAIC,oBAAoB,GAAG,CAAC,GAAGN,2BAA2B,CAACO,QAAhC,CAA3B;AACAL,MAAAA,UAAU,CAACI,oBAAD,CAAV;AACD;AACF,GALQ,EAKP,CAACN,2BAA2B,CAACK,MAA7B,CALO,CAAT;;AAOA,QAAMG,UAAU,GAAG,MAAM;AACvB,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,GAAZ;AAAiBC,MAAAA;AAAjB,QAA0BZ,UAAU,CAACQ,QAA3C;AACA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,mBAAsBE,QAAtB,SAAmCC,GAAnC,SAA2CC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAVD;;AAYA,MAAIX,2BAA2B,CAACK,MAA5B,KAAuC,UAAvC,IAAqDL,2BAA2B,CAACO,QAArF,EAA+F;AAC7F,wBACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD,GAPD,MAOO;AACL,WACE,cADF;AAGD;AACF,CAnCD;;GAAMT,e;;KAAAA,e;;AAqCN,MAAMc,eAAe,GAAG,CAAC;AAACb,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAA+C;AACrE,SAAO;AACLD,IAAAA,UADK;AAELC,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,eAAeV,OAAO,CAACsB,eAAD,EAAkB;AAACf,EAAAA;AAAD,CAAlB,CAAP,CAAiDC,eAAjD,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getSurveysFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\n\nconst ExistingSurveys = ({activeWell, getSurveysFromJSONDbReducer, getSurveysFromJSONDb}) => {\n  const [surveys, setSurveys] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(() => {\n    if (getSurveysFromJSONDbReducer.status === \"received\") {\n      let plansFromReducerCopy = [...getSurveysFromJSONDbReducer.response]\n      setSurveys[plansFromReducerCopy]\n    }\n  },[getSurveysFromJSONDbReducer.status])\n\n  const renderMain = () => {\n    const { operator, rig, well } = activeWell.response\n    return (\n      <React.Fragment>\n        <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n        <ReactDataSheet\n\n        />\n      </React.Fragment>\n    )\n  }\n\n  if (getSurveysFromJSONDbReducer.status === \"received\" && getSurveysFromJSONDbReducer.response) {\n    return (\n      <Container>\n        \"TBD\"\n        {/* {renderMain()} */}\n      </Container>\n    )\n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n}\n\nconst mapStateToProps = ({activeWell, getSurveysFromJSONDbReducer}) => {\n  return {\n    activeWell, \n    getSurveysFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getSurveysFromJSONDb})(ExistingSurveys)"]},"metadata":{},"sourceType":"module"}