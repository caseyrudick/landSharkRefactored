{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\n\nmodule.exports = function partition(entry, size, opts) {\n  var flipX = opts.flipX;\n  var flipY = opts.flipY;\n  var swapXY = opts.packing === 'dice-slice';\n  var top = opts.pad[flipY ? 'bottom' : 'top'];\n  var left = opts.pad[flipX ? 'right' : 'left'];\n  var right = opts.pad[flipX ? 'left' : 'right'];\n  var bottom = opts.pad[flipY ? 'top' : 'bottom'];\n  var tmp;\n\n  if (swapXY) {\n    tmp = left;\n    left = top;\n    top = tmp;\n    tmp = right;\n    right = bottom;\n    bottom = tmp;\n  }\n\n  var result = d3Hierarchy.treemap().tile(getTilingMethod(opts.packing, opts.squarifyratio)).paddingInner(opts.pad.inner).paddingLeft(left).paddingRight(right).paddingTop(top).paddingBottom(bottom).size(swapXY ? [size[1], size[0]] : size)(entry);\n\n  if (swapXY || flipX || flipY) {\n    flipTree(result, size, {\n      swapXY: swapXY,\n      flipX: flipX,\n      flipY: flipY\n    });\n  }\n\n  return result;\n};\n\nfunction getTilingMethod(key, squarifyratio) {\n  switch (key) {\n    case 'squarify':\n      return d3Hierarchy.treemapSquarify.ratio(squarifyratio);\n\n    case 'binary':\n      return d3Hierarchy.treemapBinary;\n\n    case 'dice':\n      return d3Hierarchy.treemapDice;\n\n    case 'slice':\n      return d3Hierarchy.treemapSlice;\n\n    default:\n      // i.e. 'slice-dice' | 'dice-slice'\n      return d3Hierarchy.treemapSliceDice;\n  }\n}\n\nfunction flipTree(node, size, opts) {\n  var tmp;\n\n  if (opts.swapXY) {\n    // swap x0 and y0\n    tmp = node.x0;\n    node.x0 = node.y0;\n    node.y0 = tmp; // swap x1 and y1\n\n    tmp = node.x1;\n    node.x1 = node.y1;\n    node.y1 = tmp;\n  }\n\n  if (opts.flipX) {\n    tmp = node.x0;\n    node.x0 = size[0] - node.x1;\n    node.x1 = size[0] - tmp;\n  }\n\n  if (opts.flipY) {\n    tmp = node.y0;\n    node.y0 = size[1] - node.y1;\n    node.y1 = size[1] - tmp;\n  }\n\n  var children = node.children;\n\n  if (children) {\n    for (var i = 0; i < children.length; i++) {\n      flipTree(children[i], size, opts);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/treemap/partition.js"],"names":["d3Hierarchy","require","module","exports","partition","entry","size","opts","flipX","flipY","swapXY","packing","top","pad","left","right","bottom","tmp","result","treemap","tile","getTilingMethod","squarifyratio","paddingInner","inner","paddingLeft","paddingRight","paddingTop","paddingBottom","flipTree","key","treemapSquarify","ratio","treemapBinary","treemapDice","treemapSlice","treemapSliceDice","node","x0","y0","x1","y1","children","i","length"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\n\nmodule.exports = function partition(entry, size, opts) {\n    var flipX = opts.flipX;\n    var flipY = opts.flipY;\n    var swapXY = opts.packing === 'dice-slice';\n\n    var top = opts.pad[flipY ? 'bottom' : 'top'];\n    var left = opts.pad[flipX ? 'right' : 'left'];\n    var right = opts.pad[flipX ? 'left' : 'right'];\n    var bottom = opts.pad[flipY ? 'top' : 'bottom'];\n\n    var tmp;\n    if(swapXY) {\n        tmp = left;\n        left = top;\n        top = tmp;\n\n        tmp = right;\n        right = bottom;\n        bottom = tmp;\n    }\n\n    var result = d3Hierarchy\n        .treemap()\n        .tile(getTilingMethod(opts.packing, opts.squarifyratio))\n        .paddingInner(opts.pad.inner)\n        .paddingLeft(left)\n        .paddingRight(right)\n        .paddingTop(top)\n        .paddingBottom(bottom)\n        .size(\n            swapXY ? [size[1], size[0]] : size\n        )(entry);\n\n    if(swapXY || flipX || flipY) {\n        flipTree(result, size, {\n            swapXY: swapXY,\n            flipX: flipX,\n            flipY: flipY\n        });\n    }\n    return result;\n};\n\nfunction getTilingMethod(key, squarifyratio) {\n    switch(key) {\n        case 'squarify':\n            return d3Hierarchy.treemapSquarify.ratio(squarifyratio);\n        case 'binary':\n            return d3Hierarchy.treemapBinary;\n        case 'dice':\n            return d3Hierarchy.treemapDice;\n        case 'slice':\n            return d3Hierarchy.treemapSlice;\n        default: // i.e. 'slice-dice' | 'dice-slice'\n            return d3Hierarchy.treemapSliceDice;\n    }\n}\n\nfunction flipTree(node, size, opts) {\n    var tmp;\n\n    if(opts.swapXY) {\n        // swap x0 and y0\n        tmp = node.x0;\n        node.x0 = node.y0;\n        node.y0 = tmp;\n\n        // swap x1 and y1\n        tmp = node.x1;\n        node.x1 = node.y1;\n        node.y1 = tmp;\n    }\n\n    if(opts.flipX) {\n        tmp = node.x0;\n        node.x0 = size[0] - node.x1;\n        node.x1 = size[0] - tmp;\n    }\n\n    if(opts.flipY) {\n        tmp = node.y0;\n        node.y0 = size[1] - node.y1;\n        node.y1 = size[1] - tmp;\n    }\n\n    var children = node.children;\n    if(children) {\n        for(var i = 0; i < children.length; i++) {\n            flipTree(children[i], size, opts);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}