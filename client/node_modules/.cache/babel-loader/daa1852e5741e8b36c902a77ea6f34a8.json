{"ast":null,"code":"import _objectSpread from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from\"react\";//bootstrap\nimport Container from\"react-bootstrap/esm/Container\";import Form from\"react-bootstrap/Form\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Button from\"react-bootstrap/Button\";import'react-datasheet/lib/react-datasheet.css';import{connect}from\"react-redux\";import ReactDataSheet from'react-datasheet';// actionCreators\nimport saveHardLinesToReduxStore from\"../ActionCreators/saveHardLinesToReduxStore\";import postHardLinesToDynamoDb from\"../ActionCreators/postHardLinesToDynamoDb\";var HardLines=function HardLines(_ref){var saveWellInfoToReduxStoreReducer=_ref.saveWellInfoToReduxStoreReducer,activeWell=_ref.activeWell,saveHardLinesToReduxStore=_ref.saveHardLinesToReduxStore,postHardLinesToDynamoDb=_ref.postHardLinesToDynamoDb;var _activeWell$response=activeWell.response,operator=_activeWell$response.operator,rig=_activeWell$response.rig,well=_activeWell$response.well,county=_activeWell$response.county,usState=_activeWell$response.usState,northing=_activeWell$response.northing,easting=_activeWell$response.easting;// set up initial hardLineRecords\n// create local state to setHardLineRecords\n// renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// render out ReactData sheet data = {hardLineRecords} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// handlesubmit = postHardLinesToDynamoDb saveHardLinesToRedux\n// addRows: newhardLineRecords =  [...hardLineRecords, addedRow] setHardLineRecords(newhardLineRecords)\nvar initialHardLineRecords=[[{value:\"\",readOnly:true,width:\"7rem\"},{value:\"Northing\",readOnly:true,width:\"7rem\"},{value:\"Easting\",readOnly:true,width:\"7rem\"}],[{value:1,readOnly:true},{value:0},{value:0}],[{value:2,readOnly:true},{value:0},{value:0}],[{value:3,readOnly:true},{value:0},{value:0}],[{value:4,readOnly:true},{value:0},{value:0}],[{value:5,readOnly:true},{value:0},{value:0}],[{value:6,readOnly:true},{value:0},{value:0}],[{value:7,readOnly:true},{value:0},{value:0}],[{value:8,readOnly:true},{value:0},{value:0}],[{value:9,readOnly:true},{value:0},{value:0}]];var _useState=useState(initialHardLineRecords),_useState2=_slicedToArray(_useState,2),hardLineRecords=_useState2[0],setHardLineRecords=_useState2[1];var onCellsChanged=function onCellsChanged(changes){var hardLineRecordsNew=hardLineRecords.map(function(row){return _toConsumableArray(row);});changes.forEach(function(_ref2){var cell=_ref2.cell,row=_ref2.row,col=_ref2.col,value=_ref2.value;hardLineRecordsNew[row][col]=_objectSpread(_objectSpread({},hardLineRecords[row][col]),{},{value:value});});setHardLineRecords(hardLineRecordsNew);};var handleSubmit=function handleSubmit(){var wellInfoAndLeaseLines={operator:operator,rig:rig,well:well,county:county,usState:usState,northing:northing,easting:easting,hardLineRecords:hardLineRecords};// const activeWell\n// saveLeaseLinesToJSON \npostHardLinesToDynamoDb(wellInfoAndLeaseLines);saveHardLinesToReduxStore(wellInfoAndLeaseLines);};var checkTest=function checkTest(){console.log(\"whyyy\");};var renderRowsButtons=function renderRowsButtons(){return/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{xs:10,className:\"my-4\",children:[/*#__PURE__*/_jsx(Button,{variant:\"success\",className:\"my-4\",onClick:handleSubmit,children:\"Submit\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"ml-4\",onClick:addRow,children:\"Add a Row\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"ml-4\",onClick:removeRow,children:\"Remove a Row\"})]})});};var addRow=function addRow(){var hardLineRecordsLength=hardLineRecords.length;var newRow=[{value:hardLineRecordsLength,readOnly:true},{value:0},{value:0}];var newhardLineRecords=[].concat(_toConsumableArray(hardLineRecords),[newRow]);setHardLineRecords(newhardLineRecords);};var removeRow=function removeRow(){var newhardLineRecords=_toConsumableArray(hardLineRecords);newhardLineRecords.pop();setHardLineRecords(newhardLineRecords);};return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{xs:10,children:[/*#__PURE__*/_jsx(ReactDataSheet,{data:hardLineRecords,valueRenderer:function valueRenderer(cell){return cell.value;},onCellsChanged:onCellsChanged}),renderRowsButtons()]})})});};var mapStateToProps=function mapStateToProps(_ref3){var saveWellInfoToReduxStoreReducer=_ref3.saveWellInfoToReduxStoreReducer,activeWell=_ref3.activeWell,postHardLinesToDynamoDbReducer=_ref3.postHardLinesToDynamoDbReducer;return{saveWellInfoToReduxStoreReducer:saveWellInfoToReduxStoreReducer,activeWell:activeWell,postHardLinesToDynamoDbReducer:postHardLinesToDynamoDbReducer};};export default connect(mapStateToProps,{saveHardLinesToReduxStore:saveHardLinesToReduxStore,postHardLinesToDynamoDb:postHardLinesToDynamoDb})(HardLines);","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/HardLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveHardLinesToReduxStore","postHardLinesToDynamoDb","HardLines","saveWellInfoToReduxStoreReducer","activeWell","response","operator","rig","well","county","usState","northing","easting","initialHardLineRecords","value","readOnly","width","hardLineRecords","setHardLineRecords","onCellsChanged","changes","hardLineRecordsNew","map","row","forEach","cell","col","handleSubmit","wellInfoAndLeaseLines","checkTest","console","log","renderRowsButtons","addRow","removeRow","hardLineRecordsLength","length","newRow","newhardLineRecords","pop","mapStateToProps","postHardLinesToDynamoDbReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\"\nimport postHardLinesToDynamoDb from \"../ActionCreators/postHardLinesToDynamoDb\"\n\n\nconst HardLines = ({saveWellInfoToReduxStoreReducer, activeWell, saveHardLinesToReduxStore, postHardLinesToDynamoDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial hardLineRecords\n  // create local state to setHardLineRecords\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {hardLineRecords} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToDynamoDb saveHardLinesToRedux\n  // addRows: newhardLineRecords =  [...hardLineRecords, addedRow] setHardLineRecords(newhardLineRecords)\n\n  const initialHardLineRecords = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [hardLineRecords, setHardLineRecords] = useState(initialHardLineRecords)\n\n\n  const onCellsChanged = changes => {\n    const hardLineRecordsNew = hardLineRecords.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      hardLineRecordsNew[row][col] = {...hardLineRecords[row][col], value}\n    });\n    setHardLineRecords(hardLineRecordsNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      hardLineRecords\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    postHardLinesToDynamoDb(wellInfoAndLeaseLines)\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines)\n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const hardLineRecordsLength = hardLineRecords.length\n    const newRow = [{value: hardLineRecordsLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newhardLineRecords = [...hardLineRecords, newRow]\n    setHardLineRecords(newhardLineRecords)\n  }\n\n  const removeRow = () => {\n    const newhardLineRecords = [...hardLineRecords]\n    newhardLineRecords.pop()\n    setHardLineRecords(newhardLineRecords)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={hardLineRecords} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer, activeWell, postHardLinesToDynamoDbReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell,\n    postHardLinesToDynamoDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveHardLinesToReduxStore, postHardLinesToDynamoDb})(HardLines)"]},"metadata":{},"sourceType":"module"}