{"ast":null,"code":"import { GET_SURVEYS_FROM_JSONDB_REQUESTED, GET_SURVEYS_FROM_JSONDB_RECEIVED, GET_SURVEYS_FROM_JSONDB_FAILED } from \"./types\";\nexport default (selectedWell => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_SURVEYS_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWell_Well = selectedWellConvertedToArray[2];\n      let wells = getState().getWellsWithSurveysFromJSONDbReducer.response;\n      console.log(getState().getWellsWithSurveysFromJSONDbReducer.response);\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well;\n      });\n      dispatch({\n        type: GET_SURVEYS_FROM_JSONDB_RECEIVED,\n        payload: result[0].grid\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SURVEYS_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getSurveysFromJSONDb.js"],"names":["GET_SURVEYS_FROM_JSONDB_REQUESTED","GET_SURVEYS_FROM_JSONDB_RECEIVED","GET_SURVEYS_FROM_JSONDB_FAILED","selectedWell","dispatch","getState","type","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWell_Well","wells","getWellsWithSurveysFromJSONDbReducer","response","console","log","result","filter","well","operator","payload","grid","error"],"mappings":"AAAA,SACEA,iCADF,EAEEC,gCAFF,EAGEC,8BAHF,QAIO,SAJP;AAOA,gBAAgBC,YAAD,IAAkB;AAC/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,YAAMO,4BAA4B,GAAGJ,YAAY,CAACK,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,iBAAiB,GAAGN,4BAA4B,CAAC,CAAD,CAAtD;AACA,UAAIO,KAAK,GAAGT,QAAQ,GAAGU,oCAAX,CAAgDC,QAA5D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,GAAGU,oCAAX,CAAgDC,QAA5D;AACA,UAAIG,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAI;AAChC,eAAOA,IAAI,CAACC,QAAL,KAAkBV,oBAAlB,IAA0CS,IAAI,CAACA,IAAL,KAAcR,iBAA/D;AACD,OAFY,CAAb;AAGAT,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEL,gCADC;AAEPsB,QAAAA,OAAO,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAUK;AAFZ,OAAD,CAAR;AAID,KAbD,CAaE,OAAOC,KAAP,EAAc;AACdrB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEJ,8BADC;AAEPqB,QAAAA,OAAO,EAAEE;AAFF,OAAD,CAAR;AAID;AACF,GAvBD;AAwBD,CAzBD","sourcesContent":["import { \n  GET_SURVEYS_FROM_JSONDB_REQUESTED,\n  GET_SURVEYS_FROM_JSONDB_RECEIVED,\n  GET_SURVEYS_FROM_JSONDB_FAILED,\n} from \"./types\"\n\n\nexport default (selectedWell) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_SURVEYS_FROM_JSONDB_REQUESTED\n    })\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n      const selectedWellOperator = selectedWellConvertedToArray[0]\n      const selectedWell_Well = selectedWellConvertedToArray[2]\n      let wells = getState().getWellsWithSurveysFromJSONDbReducer.response\n      console.log(getState().getWellsWithSurveysFromJSONDbReducer.response)\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well\n      })\n      dispatch({\n        type: GET_SURVEYS_FROM_JSONDB_RECEIVED,\n        payload: result[0].grid\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_SURVEYS_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}