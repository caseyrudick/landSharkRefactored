{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar heatmapAttrs = require('../heatmap/attributes');\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar filterOps = require('../../constants/filter_ops');\n\nvar COMPARISON_OPS2 = filterOps.COMPARISON_OPS2;\nvar INTERVAL_OPS = filterOps.INTERVAL_OPS;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\n\nvar scatterLineAttrs = scatterAttrs.line;\nmodule.exports = extendFlat({\n  z: heatmapAttrs.z,\n  x: heatmapAttrs.x,\n  x0: heatmapAttrs.x0,\n  dx: heatmapAttrs.dx,\n  y: heatmapAttrs.y,\n  y0: heatmapAttrs.y0,\n  dy: heatmapAttrs.dy,\n  xperiod: heatmapAttrs.xperiod,\n  yperiod: heatmapAttrs.yperiod,\n  xperiod0: scatterAttrs.xperiod0,\n  yperiod0: scatterAttrs.yperiod0,\n  xperiodalignment: heatmapAttrs.xperiodalignment,\n  yperiodalignment: heatmapAttrs.yperiodalignment,\n  text: heatmapAttrs.text,\n  hovertext: heatmapAttrs.hovertext,\n  transpose: heatmapAttrs.transpose,\n  xtype: heatmapAttrs.xtype,\n  ytype: heatmapAttrs.ytype,\n  zhoverformat: heatmapAttrs.zhoverformat,\n  hovertemplate: heatmapAttrs.hovertemplate,\n  hoverongaps: heatmapAttrs.hoverongaps,\n  connectgaps: extendFlat({}, heatmapAttrs.connectgaps, {\n    description: ['Determines whether or not gaps', '(i.e. {nan} or missing values)', 'in the `z` data are filled in.', 'It is defaulted to true if `z` is a', 'one dimensional array', 'otherwise it is defaulted to false.'].join(' ')\n  }),\n  fillcolor: {\n    valType: 'color',\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets the fill color if `contours.type` is *constraint*.', 'Defaults to a half-transparent variant of the line color,', 'marker color, or marker line color, whichever is available.'].join(' ')\n  },\n  autocontour: {\n    valType: 'boolean',\n    dflt: true,\n    role: 'style',\n    editType: 'calc',\n    impliedEdits: {\n      'contours.start': undefined,\n      'contours.end': undefined,\n      'contours.size': undefined\n    },\n    description: ['Determines whether or not the contour level attributes are', 'picked by an algorithm.', 'If *true*, the number of contour levels can be set in `ncontours`.', 'If *false*, set the contour level attributes in `contours`.'].join(' ')\n  },\n  ncontours: {\n    valType: 'integer',\n    dflt: 15,\n    min: 1,\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets the maximum number of contour levels. The actual number', 'of contours will be chosen automatically to be less than or', 'equal to the value of `ncontours`.', 'Has an effect only if `autocontour` is *true* or if', '`contours.size` is missing.'].join(' ')\n  },\n  contours: {\n    type: {\n      valType: 'enumerated',\n      values: ['levels', 'constraint'],\n      dflt: 'levels',\n      role: 'info',\n      editType: 'calc',\n      description: ['If `levels`, the data is represented as a contour plot with multiple', 'levels displayed. If `constraint`, the data is represented as constraints', 'with the invalid region shaded as specified by the `operation` and', '`value` parameters.'].join(' ')\n    },\n    start: {\n      valType: 'number',\n      dflt: null,\n      role: 'style',\n      editType: 'plot',\n      impliedEdits: {\n        '^autocontour': false\n      },\n      description: ['Sets the starting contour level value.', 'Must be less than `contours.end`'].join(' ')\n    },\n    end: {\n      valType: 'number',\n      dflt: null,\n      role: 'style',\n      editType: 'plot',\n      impliedEdits: {\n        '^autocontour': false\n      },\n      description: ['Sets the end contour level value.', 'Must be more than `contours.start`'].join(' ')\n    },\n    size: {\n      valType: 'number',\n      dflt: null,\n      min: 0,\n      role: 'style',\n      editType: 'plot',\n      impliedEdits: {\n        '^autocontour': false\n      },\n      description: ['Sets the step between each contour level.', 'Must be positive.'].join(' ')\n    },\n    coloring: {\n      valType: 'enumerated',\n      values: ['fill', 'heatmap', 'lines', 'none'],\n      dflt: 'fill',\n      role: 'style',\n      editType: 'calc',\n      description: ['Determines the coloring method showing the contour values.', 'If *fill*, coloring is done evenly between each contour level', 'If *heatmap*, a heatmap gradient coloring is applied', 'between each contour level.', 'If *lines*, coloring is done on the contour lines.', 'If *none*, no coloring is applied on this trace.'].join(' ')\n    },\n    showlines: {\n      valType: 'boolean',\n      dflt: true,\n      role: 'style',\n      editType: 'plot',\n      description: ['Determines whether or not the contour lines are drawn.', 'Has an effect only if `contours.coloring` is set to *fill*.'].join(' ')\n    },\n    showlabels: {\n      valType: 'boolean',\n      dflt: false,\n      role: 'style',\n      editType: 'plot',\n      description: ['Determines whether to label the contour lines with their values.'].join(' ')\n    },\n    labelfont: fontAttrs({\n      editType: 'plot',\n      colorEditType: 'style',\n      description: ['Sets the font used for labeling the contour levels.', 'The default color comes from the lines, if shown.', 'The default family and size come from `layout.font`.'].join(' ')\n    }),\n    labelformat: {\n      valType: 'string',\n      dflt: '',\n      role: 'style',\n      editType: 'plot',\n      description: ['Sets the contour label formatting rule using d3 formatting', 'mini-language which is very similar to Python, see:', FORMAT_LINK].join(' ')\n    },\n    operation: {\n      valType: 'enumerated',\n      values: [].concat(COMPARISON_OPS2).concat(INTERVAL_OPS),\n      role: 'info',\n      dflt: '=',\n      editType: 'calc',\n      description: ['Sets the constraint operation.', '*=* keeps regions equal to `value`', '*<* and *<=* keep regions less than `value`', '*>* and *>=* keep regions greater than `value`', '*[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]`', '*][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]`', 'Open vs. closed intervals make no difference to constraint display, but', 'all versions are allowed for consistency with filter transforms.'].join(' ')\n    },\n    value: {\n      valType: 'any',\n      dflt: 0,\n      role: 'info',\n      editType: 'calc',\n      description: ['Sets the value or values of the constraint boundary.', 'When `operation` is set to one of the comparison values', '(' + COMPARISON_OPS2 + ')', '*value* is expected to be a number.', 'When `operation` is set to one of the interval values', '(' + INTERVAL_OPS + ')', '*value* is expected to be an array of two numbers where the first', 'is the lower bound and the second is the upper bound.'].join(' ')\n    },\n    editType: 'calc',\n    impliedEdits: {\n      'autocontour': false\n    }\n  },\n  line: {\n    color: extendFlat({}, scatterLineAttrs.color, {\n      editType: 'style+colorbars',\n      description: ['Sets the color of the contour level.', 'Has no effect if `contours.coloring` is set to *lines*.'].join(' ')\n    }),\n    width: {\n      valType: 'number',\n      min: 0,\n      role: 'style',\n      editType: 'style+colorbars',\n      description: ['Sets the contour line width in (in px)', 'Defaults to *0.5* when `contours.type` is *levels*.', 'Defaults to *2* when `contour.type` is *constraint*.'].join(' ')\n    },\n    dash: dash,\n    smoothing: extendFlat({}, scatterLineAttrs.smoothing, {\n      description: ['Sets the amount of smoothing for the contour lines,', 'where *0* corresponds to no smoothing.'].join(' ')\n    }),\n    editType: 'plot'\n  }\n}, colorScaleAttrs('', {\n  cLetter: 'z',\n  autoColorDflt: false,\n  editTypeOverride: 'calc'\n}));","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/contour/attributes.js"],"names":["heatmapAttrs","require","scatterAttrs","colorScaleAttrs","dash","fontAttrs","extendFlat","filterOps","COMPARISON_OPS2","INTERVAL_OPS","FORMAT_LINK","scatterLineAttrs","line","module","exports","z","x","x0","dx","y","y0","dy","xperiod","yperiod","xperiod0","yperiod0","xperiodalignment","yperiodalignment","text","hovertext","transpose","xtype","ytype","zhoverformat","hovertemplate","hoverongaps","connectgaps","description","join","fillcolor","valType","role","editType","autocontour","dflt","impliedEdits","undefined","ncontours","min","contours","type","values","start","end","size","coloring","showlines","showlabels","labelfont","colorEditType","labelformat","operation","concat","value","color","width","smoothing","cLetter","autoColorDflt","editTypeOverride"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar heatmapAttrs = require('../heatmap/attributes');\nvar scatterAttrs = require('../scatter/attributes');\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\nvar fontAttrs = require('../../plots/font_attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar filterOps = require('../../constants/filter_ops');\nvar COMPARISON_OPS2 = filterOps.COMPARISON_OPS2;\nvar INTERVAL_OPS = filterOps.INTERVAL_OPS;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\n\nvar scatterLineAttrs = scatterAttrs.line;\n\nmodule.exports = extendFlat({\n    z: heatmapAttrs.z,\n    x: heatmapAttrs.x,\n    x0: heatmapAttrs.x0,\n    dx: heatmapAttrs.dx,\n    y: heatmapAttrs.y,\n    y0: heatmapAttrs.y0,\n    dy: heatmapAttrs.dy,\n\n    xperiod: heatmapAttrs.xperiod,\n    yperiod: heatmapAttrs.yperiod,\n    xperiod0: scatterAttrs.xperiod0,\n    yperiod0: scatterAttrs.yperiod0,\n    xperiodalignment: heatmapAttrs.xperiodalignment,\n    yperiodalignment: heatmapAttrs.yperiodalignment,\n\n    text: heatmapAttrs.text,\n    hovertext: heatmapAttrs.hovertext,\n    transpose: heatmapAttrs.transpose,\n    xtype: heatmapAttrs.xtype,\n    ytype: heatmapAttrs.ytype,\n    zhoverformat: heatmapAttrs.zhoverformat,\n    hovertemplate: heatmapAttrs.hovertemplate,\n    hoverongaps: heatmapAttrs.hoverongaps,\n    connectgaps: extendFlat({}, heatmapAttrs.connectgaps, {\n        description: [\n            'Determines whether or not gaps',\n            '(i.e. {nan} or missing values)',\n            'in the `z` data are filled in.',\n            'It is defaulted to true if `z` is a',\n            'one dimensional array',\n            'otherwise it is defaulted to false.'\n        ].join(' ')\n    }),\n\n    fillcolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the fill color if `contours.type` is *constraint*.',\n            'Defaults to a half-transparent variant of the line color,',\n            'marker color, or marker line color, whichever is available.'\n        ].join(' ')\n    },\n\n    autocontour: {\n        valType: 'boolean',\n        dflt: true,\n        role: 'style',\n        editType: 'calc',\n        impliedEdits: {\n            'contours.start': undefined,\n            'contours.end': undefined,\n            'contours.size': undefined\n        },\n        description: [\n            'Determines whether or not the contour level attributes are',\n            'picked by an algorithm.',\n            'If *true*, the number of contour levels can be set in `ncontours`.',\n            'If *false*, set the contour level attributes in `contours`.'\n        ].join(' ')\n    },\n    ncontours: {\n        valType: 'integer',\n        dflt: 15,\n        min: 1,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the maximum number of contour levels. The actual number',\n            'of contours will be chosen automatically to be less than or',\n            'equal to the value of `ncontours`.',\n            'Has an effect only if `autocontour` is *true* or if',\n            '`contours.size` is missing.'\n        ].join(' ')\n    },\n\n    contours: {\n        type: {\n            valType: 'enumerated',\n            values: ['levels', 'constraint'],\n            dflt: 'levels',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'If `levels`, the data is represented as a contour plot with multiple',\n                'levels displayed. If `constraint`, the data is represented as constraints',\n                'with the invalid region shaded as specified by the `operation` and',\n                '`value` parameters.'\n            ].join(' ')\n        },\n        start: {\n            valType: 'number',\n            dflt: null,\n            role: 'style',\n            editType: 'plot',\n            impliedEdits: {'^autocontour': false},\n            description: [\n                'Sets the starting contour level value.',\n                'Must be less than `contours.end`'\n            ].join(' ')\n        },\n        end: {\n            valType: 'number',\n            dflt: null,\n            role: 'style',\n            editType: 'plot',\n            impliedEdits: {'^autocontour': false},\n            description: [\n                'Sets the end contour level value.',\n                'Must be more than `contours.start`'\n            ].join(' ')\n        },\n        size: {\n            valType: 'number',\n            dflt: null,\n            min: 0,\n            role: 'style',\n            editType: 'plot',\n            impliedEdits: {'^autocontour': false},\n            description: [\n                'Sets the step between each contour level.',\n                'Must be positive.'\n            ].join(' ')\n        },\n        coloring: {\n            valType: 'enumerated',\n            values: ['fill', 'heatmap', 'lines', 'none'],\n            dflt: 'fill',\n            role: 'style',\n            editType: 'calc',\n            description: [\n                'Determines the coloring method showing the contour values.',\n                'If *fill*, coloring is done evenly between each contour level',\n                'If *heatmap*, a heatmap gradient coloring is applied',\n                'between each contour level.',\n                'If *lines*, coloring is done on the contour lines.',\n                'If *none*, no coloring is applied on this trace.'\n            ].join(' ')\n        },\n        showlines: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'style',\n            editType: 'plot',\n            description: [\n                'Determines whether or not the contour lines are drawn.',\n                'Has an effect only if `contours.coloring` is set to *fill*.'\n            ].join(' ')\n        },\n        showlabels: {\n            valType: 'boolean',\n            dflt: false,\n            role: 'style',\n            editType: 'plot',\n            description: [\n                'Determines whether to label the contour lines with their values.'\n            ].join(' ')\n        },\n        labelfont: fontAttrs({\n            editType: 'plot',\n            colorEditType: 'style',\n            description: [\n                'Sets the font used for labeling the contour levels.',\n                'The default color comes from the lines, if shown.',\n                'The default family and size come from `layout.font`.'\n            ].join(' '),\n        }),\n        labelformat: {\n            valType: 'string',\n            dflt: '',\n            role: 'style',\n            editType: 'plot',\n            description: [\n                'Sets the contour label formatting rule using d3 formatting',\n                'mini-language which is very similar to Python, see:',\n                FORMAT_LINK\n            ].join(' ')\n        },\n        operation: {\n            valType: 'enumerated',\n            values: [].concat(COMPARISON_OPS2).concat(INTERVAL_OPS),\n            role: 'info',\n            dflt: '=',\n            editType: 'calc',\n            description: [\n                'Sets the constraint operation.',\n\n                '*=* keeps regions equal to `value`',\n\n                '*<* and *<=* keep regions less than `value`',\n\n                '*>* and *>=* keep regions greater than `value`',\n\n                '*[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]`',\n\n                '*][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]`',\n\n                'Open vs. closed intervals make no difference to constraint display, but',\n                'all versions are allowed for consistency with filter transforms.'\n            ].join(' ')\n        },\n        value: {\n            valType: 'any',\n            dflt: 0,\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Sets the value or values of the constraint boundary.',\n\n                'When `operation` is set to one of the comparison values',\n                '(' + COMPARISON_OPS2 + ')',\n                '*value* is expected to be a number.',\n\n                'When `operation` is set to one of the interval values',\n                '(' + INTERVAL_OPS + ')',\n                '*value* is expected to be an array of two numbers where the first',\n                'is the lower bound and the second is the upper bound.',\n            ].join(' ')\n        },\n        editType: 'calc',\n        impliedEdits: {'autocontour': false}\n    },\n\n    line: {\n        color: extendFlat({}, scatterLineAttrs.color, {\n            editType: 'style+colorbars',\n            description: [\n                'Sets the color of the contour level.',\n                'Has no effect if `contours.coloring` is set to *lines*.'\n            ].join(' ')\n        }),\n        width: {\n            valType: 'number',\n            min: 0,\n            role: 'style',\n            editType: 'style+colorbars',\n            description: [\n                'Sets the contour line width in (in px)',\n                'Defaults to *0.5* when `contours.type` is *levels*.',\n                'Defaults to *2* when `contour.type` is *constraint*.'\n            ].join(' ')\n        },\n        dash: dash,\n        smoothing: extendFlat({}, scatterLineAttrs.smoothing, {\n            description: [\n                'Sets the amount of smoothing for the contour lines,',\n                'where *0* corresponds to no smoothing.'\n            ].join(' ')\n        }),\n        editType: 'plot'\n    }\n},\n    colorScaleAttrs('', {\n        cLetter: 'z',\n        autoColorDflt: false,\n        editTypeOverride: 'calc'\n    })\n);\n"]},"metadata":{},"sourceType":"script"}