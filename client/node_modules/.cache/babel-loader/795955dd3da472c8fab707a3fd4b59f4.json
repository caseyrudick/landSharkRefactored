{"ast":null,"code":"import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED, GET_LEASE_LINES_FROM_JSONDB_RECEIVED, GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\";\nimport wells from \"../APIs/wells\";\nexport default (selectedWell => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWell_Well = selectedWellConvertedToArray[2];\n      let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.response.data;\n      console.log(getState().getWellsWithLeaseLinesFromJSONDbReducer.response);\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well;\n      });\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n        payload: result.grid\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n}); // import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n//   GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n//   GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\n// import wells from \"../APIs/wells\"\n//   export default (selectedWell, getState) => {\n//     console.log(selectedWell)\n//     return async dispatch => {\n//       dispatch({\n//         type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n//       })\n//       try {\n//         let result = null;\n//         const response = await wells.get(\"LeaseLines\")\n//         const listOfWells = response.data\n//         console.log(listOfWells)\n//         const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n//         const selectedWellOperator = selectedWellConvertedToArray[0]\n//         const selectedWell_Well = selectedWellConvertedToArray[2]\n//         for (let well in listOfWells) {\n//           if (listOfWells[well].operator === selectedWellOperator && listOfWells[well].well === selectedWell_Well) {\n//             result = [...listOfWells[well].grid]\n//           }\n//         }\n//         console.log(result)\n//         dispatch({\n//           type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n//           payload: result\n//         })\n//       } catch (error) {\n//         dispatch({\n//           type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n//           payload: error\n//         })\n//       }\n//     }\n//   }","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getLeaseLinesFromJSONDb.js"],"names":["GET_LEASE_LINES_FROM_JSONDB_REQUESTED","GET_LEASE_LINES_FROM_JSONDB_RECEIVED","GET_LEASE_LINES_FROM_JSONDB_FAILED","wells","selectedWell","dispatch","getState","type","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWell_Well","getWellsWithLeaseLinesFromJSONDbReducer","response","data","console","log","result","filter","well","operator","payload","grid","error"],"mappings":"AAAA,SAASA,qCAAT,EACEC,oCADF,EAEEC,kCAFF,QAE4C,SAF5C;AAGA,OAAOC,KAAP,MAAkB,eAAlB;AACE,gBAAgBC,YAAD,IAAkB;AAE/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,YAAMQ,4BAA4B,GAAGJ,YAAY,CAACK,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,iBAAiB,GAAGN,4BAA4B,CAAC,CAAD,CAAtD;AACA,UAAIL,KAAK,GAAGG,QAAQ,GAAGS,uCAAX,CAAmDC,QAAnD,CAA4DC,IAAxE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,GAAGS,uCAAX,CAAmDC,QAA/D;AACA,UAAII,MAAM,GAAGjB,KAAK,CAACkB,MAAN,CAAaC,IAAI,IAAI;AAChC,eAAOA,IAAI,CAACC,QAAL,KAAkBV,oBAAlB,IAA0CS,IAAI,CAACA,IAAL,KAAcR,iBAA/D;AACD,OAFY,CAAb;AAGAT,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEN,oCADC;AAEPuB,QAAAA,OAAO,EAAEJ,MAAM,CAACK;AAFT,OAAD,CAAR;AAID,KAbD,CAaE,OAAOC,KAAP,EAAc;AACdrB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEL,kCADC;AAEPsB,QAAAA,OAAO,EAAEE;AAFF,OAAD,CAAR;AAID;AACF,GAvBD;AAwBD,CA1BD,E,CA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\nimport wells from \"../APIs/wells\"\n  export default (selectedWell) => {\n\n    return async (dispatch, getState) => {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.response.data\n        console.log(getState().getWellsWithLeaseLinesFromJSONDbReducer.response)\n        let result = wells.filter(well => {\n          return well.operator === selectedWellOperator && well.well === selectedWell_Well\n        })\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n          payload: result.grid\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }\n\n  // import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  //   GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  //   GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\n  // import wells from \"../APIs/wells\"\n  //   export default (selectedWell, getState) => {\n  //     console.log(selectedWell)\n  //     return async dispatch => {\n  //       dispatch({\n  //         type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n  //       })\n  //       try {\n  //         let result = null;\n  //         const response = await wells.get(\"LeaseLines\")\n  //         const listOfWells = response.data\n  //         console.log(listOfWells)\n  //         const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n  //         const selectedWellOperator = selectedWellConvertedToArray[0]\n  //         const selectedWell_Well = selectedWellConvertedToArray[2]\n  //         for (let well in listOfWells) {\n  //           if (listOfWells[well].operator === selectedWellOperator && listOfWells[well].well === selectedWell_Well) {\n  //             result = [...listOfWells[well].grid]\n  //           }\n  //         }\n  //         console.log(result)\n  //         dispatch({\n  //           type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  //           payload: result\n  //         })\n  //       } catch (error) {\n  //         dispatch({\n  //           type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n  //           payload: error\n  //         })\n  //       }\n  //     }\n  //   }\n  "]},"metadata":{},"sourceType":"module"}