{"ast":null,"code":"'use strict';\n\nmodule.exports = createTable;\n\nvar chull = require('convex-hull');\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d);\n\n  for (var i = 0; i < d; ++i) {\n    x[i] = 0.0;\n\n    if (i === a) {\n      x[i] += 0.5;\n    }\n\n    if (i === b) {\n      x[i] += 0.5;\n    }\n  }\n\n  return x;\n}\n\nfunction constructCell(dimension, mask) {\n  if (mask === 0 || mask === (1 << dimension + 1) - 1) {\n    return [];\n  }\n\n  var points = [];\n  var index = [];\n\n  for (var i = 0; i <= dimension; ++i) {\n    if (mask & 1 << i) {\n      points.push(constructVertex(dimension, i - 1, i - 1));\n      index.push(null);\n\n      for (var j = 0; j <= dimension; ++j) {\n        if (~mask & 1 << j) {\n          points.push(constructVertex(dimension, i - 1, j - 1));\n          index.push([i, j]);\n        }\n      }\n    }\n  } //Preprocess points so first d+1 points are linearly independent\n\n\n  var hull = chull(points);\n  var faces = [];\n\n  i_loop: for (var i = 0; i < hull.length; ++i) {\n    var face = hull[i];\n    var nface = [];\n\n    for (var j = 0; j < face.length; ++j) {\n      if (!index[face[j]]) {\n        continue i_loop;\n      }\n\n      nface.push(index[face[j]].slice());\n    }\n\n    faces.push(nface);\n  }\n\n  return faces;\n}\n\nfunction createTable(dimension) {\n  var numCells = 1 << dimension + 1;\n  var result = new Array(numCells);\n\n  for (var i = 0; i < numCells; ++i) {\n    result[i] = constructCell(dimension, i);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/marching-simplex-table/mstab.js"],"names":["module","exports","createTable","chull","require","constructVertex","d","a","b","x","Array","i","constructCell","dimension","mask","points","index","push","j","hull","faces","i_loop","length","face","nface","slice","numCells","result"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = createTable\n\nvar chull = require('convex-hull')\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d)\n  for(var i=0; i<d; ++i) {\n    x[i] = 0.0\n    if(i === a) {\n      x[i] += 0.5\n    }\n    if(i === b) {\n      x[i] += 0.5\n    }\n  }\n  return x\n}\n\nfunction constructCell(dimension, mask) {\n  if(mask === 0 || mask === (1<<(dimension+1))-1) {\n    return []\n  }\n  var points = []\n  var index  = []\n  for(var i=0; i<=dimension; ++i) {\n    if(mask & (1<<i)) {\n      points.push(constructVertex(dimension, i-1, i-1))\n      index.push(null)\n      for(var j=0; j<=dimension; ++j) {\n        if(~mask & (1<<j)) {\n          points.push(constructVertex(dimension, i-1, j-1))\n          index.push([i,j])\n        }\n      }\n    }\n  }\n  \n  //Preprocess points so first d+1 points are linearly independent\n  var hull = chull(points)\n  var faces = []\ni_loop:\n  for(var i=0; i<hull.length; ++i) {\n    var face = hull[i]\n    var nface = []\n    for(var j=0; j<face.length; ++j) {\n      if(!index[face[j]]) {\n        continue i_loop\n      }\n      nface.push(index[face[j]].slice())\n    }\n    faces.push(nface)\n  }\n  return faces\n}\n\nfunction createTable(dimension) {\n  var numCells = 1<<(dimension+1)\n  var result = new Array(numCells)\n  for(var i=0; i<numCells; ++i) {\n    result[i] = constructCell(dimension, i)\n  }\n  return result\n}"]},"metadata":{},"sourceType":"script"}