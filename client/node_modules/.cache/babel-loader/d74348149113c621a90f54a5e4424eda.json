{"ast":null,"code":"import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED, GET_LEASE_LINES_FROM_JSONDB_RECEIVED, GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\";\nexport default (selectedWell => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWell_Well = selectedWellConvertedToArray[2];\n      let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.response;\n      console.log(getState().getWellsWithLeaseLinesFromJSONDbReducer.response);\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well;\n      });\n      console.log(result);\n      console.log(result[0].grid);\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n        payload: result[0].grid\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getLeaseLinesFromJSONDb.js"],"names":["GET_LEASE_LINES_FROM_JSONDB_REQUESTED","GET_LEASE_LINES_FROM_JSONDB_RECEIVED","GET_LEASE_LINES_FROM_JSONDB_FAILED","selectedWell","dispatch","getState","type","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWell_Well","wells","getWellsWithLeaseLinesFromJSONDbReducer","response","console","log","result","filter","well","operator","grid","payload","error"],"mappings":"AAAA,SAASA,qCAAT,EACEC,oCADF,EAEEC,kCAFF,QAE4C,SAF5C;AAIE,gBAAgBC,YAAD,IAAkB;AAE/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,YAAMO,4BAA4B,GAAGJ,YAAY,CAACK,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,iBAAiB,GAAGN,4BAA4B,CAAC,CAAD,CAAtD;AACA,UAAIO,KAAK,GAAGT,QAAQ,GAAGU,uCAAX,CAAmDC,QAA/D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,GAAGU,uCAAX,CAAmDC,QAA/D;AACA,UAAIG,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAI;AAChC,eAAOA,IAAI,CAACC,QAAL,KAAkBV,oBAAlB,IAA0CS,IAAI,CAACA,IAAL,KAAcR,iBAA/D;AACD,OAFY,CAAb;AAGAI,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAtB;AACAnB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEL,oCADC;AAEPuB,QAAAA,OAAO,EAAEL,MAAM,CAAC,CAAD,CAAN,CAAUI;AAFZ,OAAD,CAAR;AAID,KAfD,CAeE,OAAOE,KAAP,EAAc;AACdrB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEJ,kCADC;AAEPsB,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GAzBD;AA0BD,CA5BD","sourcesContent":["import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\n\n  export default (selectedWell) => {\n\n    return async (dispatch, getState) => {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.response\n        console.log(getState().getWellsWithLeaseLinesFromJSONDbReducer.response)\n        let result = wells.filter(well => {\n          return well.operator === selectedWellOperator && well.well === selectedWell_Well\n        })\n        console.log(result)\n        console.log(result[0].grid)\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n          payload: result[0].grid\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}