{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar domainAttrs = require('../domain').attributes;\n\nvar constants = require('./constants');\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar geoAxesAttrs = {\n  range: {\n    valType: 'info_array',\n    role: 'info',\n    items: [{\n      valType: 'number'\n    }, {\n      valType: 'number'\n    }],\n    description: ['Sets the range of this axis (in degrees),', 'sets the map\\'s clipped coordinates.'].join(' ')\n  },\n  showgrid: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not graticule are shown on the map.'\n  },\n  tick0: {\n    valType: 'number',\n    role: 'info',\n    dflt: 0,\n    description: ['Sets the graticule\\'s starting tick longitude/latitude.'].join(' ')\n  },\n  dtick: {\n    valType: 'number',\n    role: 'info',\n    description: ['Sets the graticule\\'s longitude/latitude tick step.'].join(' ')\n  },\n  gridcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.lightLine,\n    description: ['Sets the graticule\\'s stroke color.'].join(' ')\n  },\n  gridwidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: ['Sets the graticule\\'s stroke width (in px).'].join(' ')\n  }\n};\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'geo'\n  }, {\n    description: ['Note that geo subplots are constrained by domain.', 'In general, when `projection.scale` is set to 1.', 'a map will fit either its x or y domain, but not both.'].join(' ')\n  }),\n  fitbounds: {\n    valType: 'enumerated',\n    values: [false, 'locations', 'geojson'],\n    dflt: false,\n    role: 'info',\n    editType: 'plot',\n    description: ['Determines if this subplot\\'s view settings are auto-computed to fit trace data.', 'On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled.', 'On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,', 'and `projection.rotation.lon` getting auto-filled.', 'On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,', '`projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range`', 'getting auto-filled.', // TODO we should auto-fill `projection.parallels` for maps\n    // with conic projection, but how?\n    'If *locations*, only the trace\\'s visible locations are considered in the `fitbounds` computations.', 'If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations,', 'Defaults to *false*.'].join(' ')\n  },\n  resolution: {\n    valType: 'enumerated',\n    values: [110, 50],\n    role: 'info',\n    dflt: 110,\n    coerceNumber: true,\n    description: ['Sets the resolution of the base layers.', 'The values have units of km/mm', 'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'].join(' ')\n  },\n  scope: {\n    valType: 'enumerated',\n    role: 'info',\n    values: Object.keys(constants.scopeDefaults),\n    dflt: 'world',\n    description: 'Set the scope of the map.'\n  },\n  projection: {\n    type: {\n      valType: 'enumerated',\n      role: 'info',\n      values: Object.keys(constants.projNames),\n      description: 'Sets the projection type.'\n    },\n    rotation: {\n      lon: {\n        valType: 'number',\n        role: 'info',\n        description: ['Rotates the map along parallels', '(in degrees East).', 'Defaults to the center of the `lonaxis.range` values.'].join(' ')\n      },\n      lat: {\n        valType: 'number',\n        role: 'info',\n        description: ['Rotates the map along meridians', '(in degrees North).'].join(' ')\n      },\n      roll: {\n        valType: 'number',\n        role: 'info',\n        description: ['Roll the map (in degrees)', 'For example, a roll of *180* makes the map appear upside down.'].join(' ')\n      }\n    },\n    parallels: {\n      valType: 'info_array',\n      role: 'info',\n      items: [{\n        valType: 'number'\n      }, {\n        valType: 'number'\n      }],\n      description: ['For conic projection types only.', 'Sets the parallels (tangent, secant)', 'where the cone intersects the sphere.'].join(' ')\n    },\n    scale: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      dflt: 1,\n      description: ['Zooms in or out on the map view.', 'A scale of *1* corresponds to the largest zoom level', 'that fits the map\\'s lon and lat ranges. '].join(' ')\n    }\n  },\n  center: {\n    lon: {\n      valType: 'number',\n      role: 'info',\n      description: ['Sets the longitude of the map\\'s center.', 'By default, the map\\'s longitude center lies at the middle of the longitude range', 'for scoped projection and above `projection.rotation.lon` otherwise.'].join(' ')\n    },\n    lat: {\n      valType: 'number',\n      role: 'info',\n      description: ['Sets the latitude of the map\\'s center.', 'For all projection types, the map\\'s latitude center lies', 'at the middle of the latitude range by default.'].join(' ')\n    }\n  },\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: 'Sets the default visibility of the base layers.'\n  },\n  showcoastlines: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Sets whether or not the coastlines are drawn.'\n  },\n  coastlinecolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the coastline color.'\n  },\n  coastlinewidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the coastline stroke width (in px).'\n  },\n  showland: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not land masses are filled in color.'\n  },\n  landcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.landColor,\n    description: 'Sets the land mass color.'\n  },\n  showocean: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not oceans are filled in color.'\n  },\n  oceancolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.waterColor,\n    description: 'Sets the ocean color'\n  },\n  showlakes: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not lakes are drawn.'\n  },\n  lakecolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.waterColor,\n    description: 'Sets the color of the lakes.'\n  },\n  showrivers: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not rivers are drawn.'\n  },\n  rivercolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.waterColor,\n    description: 'Sets color of the rivers.'\n  },\n  riverwidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the rivers.'\n  },\n  showcountries: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Sets whether or not country boundaries are drawn.'\n  },\n  countrycolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets line color of the country boundaries.'\n  },\n  countrywidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets line width (in px) of the country boundaries.'\n  },\n  showsubunits: {\n    valType: 'boolean',\n    role: 'info',\n    description: ['Sets whether or not boundaries of subunits within countries', '(e.g. states, provinces) are drawn.'].join(' ')\n  },\n  subunitcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color of the subunits boundaries.'\n  },\n  subunitwidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the subunits boundaries.'\n  },\n  showframe: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Sets whether or not a frame is drawn around the map.'\n  },\n  framecolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color the frame.'\n  },\n  framewidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the frame.'\n  },\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the map'\n  },\n  lonaxis: geoAxesAttrs,\n  lataxis: geoAxesAttrs\n}, 'plot', 'from-root'); // set uirevision outside of overrideAll so it can be `editType: 'none'`\n\nattrs.uirevision = {\n  valType: 'any',\n  role: 'info',\n  editType: 'none',\n  description: ['Controls persistence of user-driven changes in the view', '(projection and center). Defaults to `layout.uirevision`.'].join(' ')\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plots/geo/layout_attributes.js"],"names":["colorAttrs","require","domainAttrs","attributes","constants","overrideAll","geoAxesAttrs","range","valType","role","items","description","join","showgrid","dflt","tick0","dtick","gridcolor","lightLine","gridwidth","min","attrs","module","exports","domain","name","fitbounds","values","editType","resolution","coerceNumber","scope","Object","keys","scopeDefaults","projection","type","projNames","rotation","lon","lat","roll","parallels","scale","center","visible","showcoastlines","coastlinecolor","defaultLine","coastlinewidth","showland","landcolor","landColor","showocean","oceancolor","waterColor","showlakes","lakecolor","showrivers","rivercolor","riverwidth","showcountries","countrycolor","countrywidth","showsubunits","subunitcolor","subunitwidth","showframe","framecolor","framewidth","bgcolor","background","lonaxis","lataxis","uirevision"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar domainAttrs = require('../domain').attributes;\nvar constants = require('./constants');\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar geoAxesAttrs = {\n    range: {\n        valType: 'info_array',\n        role: 'info',\n        items: [\n            {valType: 'number'},\n            {valType: 'number'}\n        ],\n        description: [\n            'Sets the range of this axis (in degrees),',\n            'sets the map\\'s clipped coordinates.'\n        ].join(' ')\n    },\n    showgrid: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: 'Sets whether or not graticule are shown on the map.'\n    },\n    tick0: {\n        valType: 'number',\n        role: 'info',\n        dflt: 0,\n        description: [\n            'Sets the graticule\\'s starting tick longitude/latitude.'\n        ].join(' ')\n    },\n    dtick: {\n        valType: 'number',\n        role: 'info',\n        description: [\n            'Sets the graticule\\'s longitude/latitude tick step.'\n        ].join(' ')\n    },\n    gridcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: colorAttrs.lightLine,\n        description: [\n            'Sets the graticule\\'s stroke color.'\n        ].join(' ')\n    },\n    gridwidth: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 1,\n        description: [\n            'Sets the graticule\\'s stroke width (in px).'\n        ].join(' ')\n    }\n};\n\nvar attrs = module.exports = overrideAll({\n    domain: domainAttrs({name: 'geo'}, {\n        description: [\n            'Note that geo subplots are constrained by domain.',\n            'In general, when `projection.scale` is set to 1.',\n            'a map will fit either its x or y domain, but not both.'\n        ].join(' ')\n    }),\n\n    fitbounds: {\n        valType: 'enumerated',\n        values: [false, 'locations', 'geojson'],\n        dflt: false,\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Determines if this subplot\\'s view settings are auto-computed to fit trace data.',\n\n            'On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled.',\n\n            'On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,',\n            'and `projection.rotation.lon` getting auto-filled.',\n\n            'On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,',\n            '`projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range`',\n            'getting auto-filled.',\n\n            // TODO we should auto-fill `projection.parallels` for maps\n            // with conic projection, but how?\n\n            'If *locations*, only the trace\\'s visible locations are considered in the `fitbounds` computations.',\n            'If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations,',\n            'Defaults to *false*.'\n        ].join(' ')\n    },\n\n    resolution: {\n        valType: 'enumerated',\n        values: [110, 50],\n        role: 'info',\n        dflt: 110,\n        coerceNumber: true,\n        description: [\n            'Sets the resolution of the base layers.',\n            'The values have units of km/mm',\n            'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'\n        ].join(' ')\n    },\n    scope: {\n        valType: 'enumerated',\n        role: 'info',\n        values: Object.keys(constants.scopeDefaults),\n        dflt: 'world',\n        description: 'Set the scope of the map.'\n    },\n    projection: {\n        type: {\n            valType: 'enumerated',\n            role: 'info',\n            values: Object.keys(constants.projNames),\n            description: 'Sets the projection type.'\n        },\n        rotation: {\n            lon: {\n                valType: 'number',\n                role: 'info',\n                description: [\n                    'Rotates the map along parallels',\n                    '(in degrees East).',\n                    'Defaults to the center of the `lonaxis.range` values.'\n                ].join(' ')\n            },\n            lat: {\n                valType: 'number',\n                role: 'info',\n                description: [\n                    'Rotates the map along meridians',\n                    '(in degrees North).'\n                ].join(' ')\n            },\n            roll: {\n                valType: 'number',\n                role: 'info',\n                description: [\n                    'Roll the map (in degrees)',\n                    'For example, a roll of *180* makes the map appear upside down.'\n                ].join(' ')\n            }\n        },\n        parallels: {\n            valType: 'info_array',\n            role: 'info',\n            items: [\n                {valType: 'number'},\n                {valType: 'number'}\n            ],\n            description: [\n                'For conic projection types only.',\n                'Sets the parallels (tangent, secant)',\n                'where the cone intersects the sphere.'\n            ].join(' ')\n        },\n        scale: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            dflt: 1,\n            description: [\n                'Zooms in or out on the map view.',\n                'A scale of *1* corresponds to the largest zoom level',\n                'that fits the map\\'s lon and lat ranges. '\n            ].join(' ')\n        },\n    },\n    center: {\n        lon: {\n            valType: 'number',\n            role: 'info',\n            description: [\n                'Sets the longitude of the map\\'s center.',\n                'By default, the map\\'s longitude center lies at the middle of the longitude range',\n                'for scoped projection and above `projection.rotation.lon` otherwise.'\n            ].join(' ')\n        },\n        lat: {\n            valType: 'number',\n            role: 'info',\n            description: [\n                'Sets the latitude of the map\\'s center.',\n                'For all projection types, the map\\'s latitude center lies',\n                'at the middle of the latitude range by default.'\n            ].join(' ')\n        }\n    },\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: 'Sets the default visibility of the base layers.'\n    },\n    showcoastlines: {\n        valType: 'boolean',\n        role: 'info',\n        description: 'Sets whether or not the coastlines are drawn.'\n    },\n    coastlinecolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets the coastline color.'\n    },\n    coastlinewidth: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the coastline stroke width (in px).'\n    },\n    showland: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: 'Sets whether or not land masses are filled in color.'\n    },\n    landcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: constants.landColor,\n        description: 'Sets the land mass color.'\n    },\n    showocean: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: 'Sets whether or not oceans are filled in color.'\n    },\n    oceancolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: constants.waterColor,\n        description: 'Sets the ocean color'\n    },\n    showlakes: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: 'Sets whether or not lakes are drawn.'\n    },\n    lakecolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: constants.waterColor,\n        description: 'Sets the color of the lakes.'\n    },\n    showrivers: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: 'Sets whether or not rivers are drawn.'\n    },\n    rivercolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: constants.waterColor,\n        description: 'Sets color of the rivers.'\n    },\n    riverwidth: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the stroke width (in px) of the rivers.'\n    },\n    showcountries: {\n        valType: 'boolean',\n        role: 'info',\n        description: 'Sets whether or not country boundaries are drawn.'\n    },\n    countrycolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets line color of the country boundaries.'\n    },\n    countrywidth: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 1,\n        description: 'Sets line width (in px) of the country boundaries.'\n    },\n    showsubunits: {\n        valType: 'boolean',\n        role: 'info',\n        description: [\n            'Sets whether or not boundaries of subunits within countries',\n            '(e.g. states, provinces) are drawn.'\n        ].join(' ')\n    },\n    subunitcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets the color of the subunits boundaries.'\n    },\n    subunitwidth: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the stroke width (in px) of the subunits boundaries.'\n    },\n    showframe: {\n        valType: 'boolean',\n        role: 'info',\n        description: 'Sets whether or not a frame is drawn around the map.'\n    },\n    framecolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets the color the frame.'\n    },\n    framewidth: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the stroke width (in px) of the frame.'\n    },\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: colorAttrs.background,\n        description: 'Set the background color of the map'\n    },\n    lonaxis: geoAxesAttrs,\n    lataxis: geoAxesAttrs\n}, 'plot', 'from-root');\n\n// set uirevision outside of overrideAll so it can be `editType: 'none'`\nattrs.uirevision = {\n    valType: 'any',\n    role: 'info',\n    editType: 'none',\n    description: [\n        'Controls persistence of user-driven changes in the view',\n        '(projection and center). Defaults to `layout.uirevision`.'\n    ].join(' ')\n};\n"]},"metadata":{},"sourceType":"script"}