{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar fxAttrs = require('../components/fx/attributes');\n\nmodule.exports = {\n  type: {\n    valType: 'enumerated',\n    role: 'info',\n    values: [],\n    // listed dynamically\n    dflt: 'scatter',\n    editType: 'calc+clearAxisTypes',\n    _noTemplating: true // we handle this at a higher level\n\n  },\n  visible: {\n    valType: 'enumerated',\n    values: [true, false, 'legendonly'],\n    role: 'info',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not this trace is visible.', 'If *legendonly*, the trace is not drawn,', 'but can appear as a legend item', '(provided that the legend itself is visible).'].join(' ')\n  },\n  showlegend: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    editType: 'style',\n    description: ['Determines whether or not an item corresponding to this', 'trace is shown in the legend.'].join(' ')\n  },\n  legendgroup: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: 'style',\n    description: ['Sets the legend group for this trace.', 'Traces part of the same legend group hide/show at the same time', 'when toggling legend items.'].join(' ')\n  },\n  opacity: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    max: 1,\n    dflt: 1,\n    editType: 'style',\n    description: 'Sets the opacity of the trace.'\n  },\n  name: {\n    valType: 'string',\n    role: 'info',\n    editType: 'style',\n    description: ['Sets the trace name.', 'The trace name appear as the legend item and on hover.'].join(' ')\n  },\n  uid: {\n    valType: 'string',\n    role: 'info',\n    editType: 'plot',\n    anim: true,\n    description: ['Assign an id to this trace,', 'Use this to provide object constancy between traces during animations', 'and transitions.'].join(' ')\n  },\n  ids: {\n    valType: 'data_array',\n    editType: 'calc',\n    anim: true,\n    description: ['Assigns id labels to each datum.', 'These ids for object constancy of data points during animation.', 'Should be an array of strings, not numbers or any other type.'].join(' ')\n  },\n  customdata: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Assigns extra data each datum.', 'This may be useful when listening to hover, click and selection events.', 'Note that, *scatter* traces also appends customdata items in the markers', 'DOM elements'].join(' ')\n  },\n  meta: {\n    valType: 'any',\n    arrayOk: true,\n    role: 'info',\n    editType: 'plot',\n    description: ['Assigns extra meta information associated with this trace', 'that can be used in various text attributes.', 'Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text`', '`rangeselector`, `updatemenues` and `sliders` `label` text', 'all support `meta`.', 'To access the trace `meta` values in an attribute in the same trace, simply use', '`%{meta[i]}` where `i` is the index or key of the `meta`', 'item in question.', 'To access trace `meta` in layout attributes, use', '`%{data[n[.meta[i]}` where `i` is the index or key of the `meta`', 'and `n` is the trace index.'].join(' ')\n  },\n  // N.B. these cannot be 'data_array' as they do not have the same length as\n  // other data arrays and arrayOk attributes in general\n  //\n  // Maybe add another valType:\n  // https://github.com/plotly/plotly.js/issues/1894\n  selectedpoints: {\n    valType: 'any',\n    role: 'info',\n    editType: 'calc',\n    description: ['Array containing integer indices of selected points.', 'Has an effect only for traces that support selections.', 'Note that an empty array means an empty selection where the `unselected`', 'are turned on for all points, whereas, any other non-array values means no', 'selection all where the `selected` and `unselected` styles have no effect.'].join(' ')\n  },\n  hoverinfo: {\n    valType: 'flaglist',\n    role: 'info',\n    flags: ['x', 'y', 'z', 'text', 'name'],\n    extras: ['all', 'none', 'skip'],\n    arrayOk: true,\n    dflt: 'all',\n    editType: 'none',\n    description: ['Determines which trace information appear on hover.', 'If `none` or `skip` are set, no information is displayed upon hovering.', 'But, if `none` is set, click and hover events are still fired.'].join(' ')\n  },\n  hoverlabel: fxAttrs.hoverlabel,\n  stream: {\n    token: {\n      valType: 'string',\n      noBlank: true,\n      strict: true,\n      role: 'info',\n      editType: 'calc',\n      description: ['The stream id number links a data trace on a plot with a stream.', 'See https://chart-studio.plotly.com/settings for more details.'].join(' ')\n    },\n    maxpoints: {\n      valType: 'number',\n      min: 0,\n      max: 10000,\n      dflt: 500,\n      role: 'info',\n      editType: 'calc',\n      description: ['Sets the maximum number of points to keep on the plots from an', 'incoming stream.', 'If `maxpoints` is set to *50*, only the newest 50 points will', 'be displayed on the plot.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  transforms: {\n    _isLinkedToArray: 'transform',\n    editType: 'calc',\n    description: ['An array of operations that manipulate the trace data,', 'for example filtering or sorting the data arrays.'].join(' ')\n  },\n  uirevision: {\n    valType: 'any',\n    role: 'info',\n    editType: 'none',\n    description: ['Controls persistence of some user-driven changes to the trace:', '`constraintrange` in `parcoords` traces, as well as some', '`editable: true` modifications such as `name` and `colorbar.title`.', 'Defaults to `layout.uirevision`.', 'Note that other user-driven trace attribute changes are controlled', 'by `layout` attributes:', '`trace.visible` is controlled by `layout.legend.uirevision`,', '`selectedpoints` is controlled by `layout.selectionrevision`,', 'and `colorbar.(x|y)` (accessible with `config: {editable: true}`)', 'is controlled by `layout.editrevision`.', 'Trace changes are tracked by `uid`, which only falls back on trace', 'index if no `uid` is provided. So if your app can add/remove traces', 'before the end of the `data` array, such that the same trace has a', 'different index, you can still preserve user-driven changes if you', 'give each trace a `uid` that stays with it as it moves.'].join(' ')\n  }\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plots/attributes.js"],"names":["fxAttrs","require","module","exports","type","valType","role","values","dflt","editType","_noTemplating","visible","description","join","showlegend","legendgroup","opacity","min","max","name","uid","anim","ids","customdata","meta","arrayOk","selectedpoints","hoverinfo","flags","extras","hoverlabel","stream","token","noBlank","strict","maxpoints","transforms","_isLinkedToArray","uirevision"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fxAttrs = require('../components/fx/attributes');\n\nmodule.exports = {\n    type: {\n        valType: 'enumerated',\n        role: 'info',\n        values: [],     // listed dynamically\n        dflt: 'scatter',\n        editType: 'calc+clearAxisTypes',\n        _noTemplating: true // we handle this at a higher level\n    },\n    visible: {\n        valType: 'enumerated',\n        values: [true, false, 'legendonly'],\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not this trace is visible.',\n            'If *legendonly*, the trace is not drawn,',\n            'but can appear as a legend item',\n            '(provided that the legend itself is visible).'\n        ].join(' ')\n    },\n    showlegend: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'style',\n        description: [\n            'Determines whether or not an item corresponding to this',\n            'trace is shown in the legend.'\n        ].join(' ')\n    },\n    legendgroup: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: 'style',\n        description: [\n            'Sets the legend group for this trace.',\n            'Traces part of the same legend group hide/show at the same time',\n            'when toggling legend items.'\n        ].join(' ')\n    },\n    opacity: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        max: 1,\n        dflt: 1,\n        editType: 'style',\n        description: 'Sets the opacity of the trace.'\n    },\n    name: {\n        valType: 'string',\n        role: 'info',\n        editType: 'style',\n        description: [\n            'Sets the trace name.',\n            'The trace name appear as the legend item and on hover.'\n        ].join(' ')\n    },\n    uid: {\n        valType: 'string',\n        role: 'info',\n        editType: 'plot',\n        anim: true,\n        description: [\n            'Assign an id to this trace,',\n            'Use this to provide object constancy between traces during animations',\n            'and transitions.'\n        ].join(' ')\n    },\n    ids: {\n        valType: 'data_array',\n        editType: 'calc',\n        anim: true,\n        description: [\n            'Assigns id labels to each datum.',\n            'These ids for object constancy of data points during animation.',\n            'Should be an array of strings, not numbers or any other type.'\n        ].join(' ')\n    },\n    customdata: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Assigns extra data each datum.',\n            'This may be useful when listening to hover, click and selection events.',\n            'Note that, *scatter* traces also appends customdata items in the markers',\n            'DOM elements'\n        ].join(' ')\n    },\n    meta: {\n        valType: 'any',\n        arrayOk: true,\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Assigns extra meta information associated with this trace',\n            'that can be used in various text attributes.',\n            'Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text`',\n            '`rangeselector`, `updatemenues` and `sliders` `label` text',\n            'all support `meta`.',\n            'To access the trace `meta` values in an attribute in the same trace, simply use',\n            '`%{meta[i]}` where `i` is the index or key of the `meta`',\n            'item in question.',\n            'To access trace `meta` in layout attributes, use',\n            '`%{data[n[.meta[i]}` where `i` is the index or key of the `meta`',\n            'and `n` is the trace index.'\n        ].join(' ')\n    },\n\n    // N.B. these cannot be 'data_array' as they do not have the same length as\n    // other data arrays and arrayOk attributes in general\n    //\n    // Maybe add another valType:\n    // https://github.com/plotly/plotly.js/issues/1894\n    selectedpoints: {\n        valType: 'any',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Array containing integer indices of selected points.',\n            'Has an effect only for traces that support selections.',\n            'Note that an empty array means an empty selection where the `unselected`',\n            'are turned on for all points, whereas, any other non-array values means no',\n            'selection all where the `selected` and `unselected` styles have no effect.'\n        ].join(' ')\n    },\n\n    hoverinfo: {\n        valType: 'flaglist',\n        role: 'info',\n        flags: ['x', 'y', 'z', 'text', 'name'],\n        extras: ['all', 'none', 'skip'],\n        arrayOk: true,\n        dflt: 'all',\n        editType: 'none',\n        description: [\n            'Determines which trace information appear on hover.',\n            'If `none` or `skip` are set, no information is displayed upon hovering.',\n            'But, if `none` is set, click and hover events are still fired.'\n        ].join(' ')\n    },\n    hoverlabel: fxAttrs.hoverlabel,\n    stream: {\n        token: {\n            valType: 'string',\n            noBlank: true,\n            strict: true,\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'The stream id number links a data trace on a plot with a stream.',\n                'See https://chart-studio.plotly.com/settings for more details.'\n            ].join(' ')\n        },\n        maxpoints: {\n            valType: 'number',\n            min: 0,\n            max: 10000,\n            dflt: 500,\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Sets the maximum number of points to keep on the plots from an',\n                'incoming stream.',\n                'If `maxpoints` is set to *50*, only the newest 50 points will',\n                'be displayed on the plot.'\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n    transforms: {\n        _isLinkedToArray: 'transform',\n        editType: 'calc',\n        description: [\n            'An array of operations that manipulate the trace data,',\n            'for example filtering or sorting the data arrays.'\n        ].join(' ')\n    },\n    uirevision: {\n        valType: 'any',\n        role: 'info',\n        editType: 'none',\n        description: [\n            'Controls persistence of some user-driven changes to the trace:',\n            '`constraintrange` in `parcoords` traces, as well as some',\n            '`editable: true` modifications such as `name` and `colorbar.title`.',\n            'Defaults to `layout.uirevision`.',\n            'Note that other user-driven trace attribute changes are controlled',\n            'by `layout` attributes:',\n            '`trace.visible` is controlled by `layout.legend.uirevision`,',\n            '`selectedpoints` is controlled by `layout.selectionrevision`,',\n            'and `colorbar.(x|y)` (accessible with `config: {editable: true}`)',\n            'is controlled by `layout.editrevision`.',\n            'Trace changes are tracked by `uid`, which only falls back on trace',\n            'index if no `uid` is provided. So if your app can add/remove traces',\n            'before the end of the `data` array, such that the same trace has a',\n            'different index, you can still preserve user-driven changes if you',\n            'give each trace a `uid` that stays with it as it moves.'\n        ].join(' ')\n    }\n};\n"]},"metadata":{},"sourceType":"script"}