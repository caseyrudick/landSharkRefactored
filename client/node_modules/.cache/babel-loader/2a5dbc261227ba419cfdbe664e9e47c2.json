{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PVA.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\";\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\";\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\n\nconst PVA = ({\n  saveSurveysToReduxStoreReducer,\n  saveHardLinesToReduxStoreReducer,\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer,\n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][2].value).slice(1)\n      //   // console.log(\"easting\" + result)\n      //   return result\n      return data.map((row, index) => data[index][2].value).slice(1) || []; // }\n    } else {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][6].value).slice(1)\n      //   // console.log(\"easting\" + result)\n      //   return result\n      return data.map((row, index) => data[index][6].value).slice(1) || [];\n    }\n  };\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      // if (Object.keys(data).length === 0) {\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][1].value).slice(1)\n      //   // console.log(\"northing:\" + result)\n      //   return result\n      return data.map((row, index) => data[index][1].value).slice(1) || []; // }\n    } else {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      // let result = data.map((row, index) => data[index][5].value).slice(1)\n      // console.log(\"northing\" + result)\n      // return result\n      // }\n      return data.map((row, index) => data[index][5].value).slice(1) || [];\n    }\n  };\n\n  const createTVDCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((row, index) => data[index][4].value * -1).slice(1);\n    }\n  };\n\n  const createSectCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((row, index) => data[index][7].value).slice(1);\n    }\n  };\n\n  const renderSectionView = () => {\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createTVDCoordinates(savePlansToReduxStoreReducer.response),\n        y: createSectCoordinates(savePlansToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createTVDCoordinates(saveSurveysToReduxStoreReducer.response),\n        y: createSectCoordinates(saveSurveysToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"Red\"\n        },\n        name: \"Surveys\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Section View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n        y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createEastingCoordinates(saveSurveysToReduxStoreReducer.response),\n        y: createNorthingCoordinates(saveSurveysToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        },\n        name: \"Surveys\"\n      }, {\n        x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n        y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"black\"\n        },\n        name: \"Lease Lines\"\n      }, {\n        x: createEastingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n        y: createNorthingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        },\n        name: \"Lease Lines\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Plan View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [renderSectionView(), renderPlanView()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PVA;\n\nconst mapStateToProps = ({\n  saveHardLinesToReduxStoreReducer,\n  saveSurveysToReduxStoreReducer,\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer,\n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer,\n    saveLeaseLinesToReduxStoreReducer,\n    activeWell,\n    saveHardLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n    getWellPlansFromDynamoDbReducer,\n    getLeaseLinesFromDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  saveLeaseLinesToReduxStore,\n  saveWellInfoToReduxStore\n})(PVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"PVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PVA.js"],"names":["React","Container","Plot","connect","_","savePlansToReduxStore","saveLeaseLinesToReduxStore","saveWellInfoToReduxStore","PVA","saveSurveysToReduxStoreReducer","saveHardLinesToReduxStoreReducer","savePlansToReduxStoreReducer","saveLeaseLinesToReduxStoreReducer","getWellPlansFromDynamoDbReducer","getLeaseLinesFromDynamoDbReducer","getHardLinesFromDynamoDbReducer","getSurveysFromDynamoDbReducer","activeWell","createEastingCoordinates","data","polyLine","map","row","index","value","slice","createNorthingCoordinates","createTVDCoordinates","length","createSectCoordinates","renderSectionView","x","response","y","type","mode","marker","color","name","width","height","title","renderPlanView","grid","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\"\nimport _ from \"lodash\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n\n\nconst PVA = ({\n  saveSurveysToReduxStoreReducer, \n  saveHardLinesToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer, \n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][2].value).slice(1)\n      //   // console.log(\"easting\" + result)\n      //   return result\n      return data.map((row, index) => data[index][2].value).slice(1) || []\n      // }\n    } else {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][6].value).slice(1)\n      //   // console.log(\"easting\" + result)\n      //   return result\n      return data.map((row, index) => data[index][6].value).slice(1) || []\n      }\n    }\n\n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      // if (Object.keys(data).length === 0) {\n      //   return []\n      // } else {\n      //   let result = data.map((row, index) => data[index][1].value).slice(1)\n      //   // console.log(\"northing:\" + result)\n      //   return result\n      return data.map((row, index) => data[index][1].value).slice(1) || []\n      // }\n    } else {\n      // if (Object.keys(data).length === 0) {\n      //   console.log(\"nada\")\n      //   return []\n      // } else {\n        // let result = data.map((row, index) => data[index][5].value).slice(1)\n        // console.log(\"northing\" + result)\n        // return result\n      // }\n      return data.map((row, index) => data[index][5].value).slice(1) || []\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][4].value * -1 ).slice(1)\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][7].value).slice(1)\n    }\n  }\n  \n\n  \n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createTVDCoordinates(savePlansToReduxStoreReducer.response),\n          y: createSectCoordinates(savePlansToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createTVDCoordinates(saveSurveysToReduxStoreReducer.response),\n          y: createSectCoordinates(saveSurveysToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return (\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n            y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(saveSurveysToReduxStoreReducer.response),\n            y: createNorthingCoordinates(saveSurveysToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Lease Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n    )\n  }\n\n  return (\n    <Container>\n      {renderSectionView()}\n      {renderPlanView()}\n    </Container>\n  )\n\n}\n\nconst mapStateToProps = ({\n  saveHardLinesToReduxStoreReducer, \n  saveSurveysToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer, \n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer, \n    saveLeaseLinesToReduxStoreReducer, \n    activeWell,\n    saveHardLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n    getWellPlansFromDynamoDbReducer, \n    getLeaseLinesFromDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer, \n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, saveLeaseLinesToReduxStore, saveWellInfoToReduxStore })(PVA)"]},"metadata":{},"sourceType":"module"}