{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/HardLines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\";\nimport postHardLinesToDynamoDb from \"../ActionCreators/postHardLinesToDynamoDb\";\n\nconst HardLines = ({\n  saveWellInfoToReduxStoreReducer,\n  activeWell,\n  saveHardLinesToReduxStore,\n  postHardLinesToDynamoDb\n}) => {\n  _s();\n\n  const {\n    operator,\n    rig,\n    well,\n    county,\n    usState,\n    northing,\n    easting\n  } = activeWell.response; // set up initial hardLineRecords\n  // create local state to sethardLineRecords\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {hardLineRecords} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToDynamoDb saveHardLinesToRedux\n  // addRows: newhardLineRecords =  [...hardLineRecords, addedRow] sethardLineRecords(newhardLineRecords)\n\n  const initialhardLineRecords = [[{\n    value: \"\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: \"7rem\"\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 2,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 3,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 4,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 5,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 6,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 7,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 8,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 9,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [hardLineRecords, setHardLineRecords] = useState(initialhardLineRecords);\n\n  const onCellsChanged = changes => {\n    const hardLineRecordsNew = hardLineRecords.map(row => [...row]);\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      hardLineRecordsNew[row][col] = { ...hardLineRecords[row][col],\n        value\n      };\n    });\n    sethardLineRecords(hardLineRecordsNew);\n  };\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting,\n      hardLineRecords\n    }; // const activeWell\n    // saveLeaseLinesToJSON \n\n    postHardLinesToDynamoDb(wellInfoAndLeaseLines);\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines);\n  };\n\n  const checkTest = () => {\n    console.log(\"whyyy\");\n  };\n\n  const renderRowsButtons = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"my-4\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: addRow,\n          children: \"Add a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: removeRow,\n          children: \"Remove a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  };\n\n  const addRow = () => {\n    const hardLineRecordsLength = hardLineRecords.length;\n    const newRow = [{\n      value: hardLineRecordsLength,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    const newhardLineRecords = [...hardLineRecords, newRow];\n    sethardLineRecords(newhardLineRecords);\n  };\n\n  const removeRow = () => {\n    const newhardLineRecords = [...hardLineRecords];\n    newhardLineRecords.pop();\n    sethardLineRecords(newhardLineRecords);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: [/*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: hardLineRecords,\n          valueRenderer: cell => cell.value,\n          onCellsChanged: onCellsChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), renderRowsButtons()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HardLines, \"GDsGAdxChVjKhpDbVCyZEvhh+ek=\");\n\n_c = HardLines;\n\nconst mapStateToProps = ({\n  saveWellInfoToReduxStoreReducer,\n  activeWell,\n  postHardLinesToDynamoDbReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell,\n    postHardLinesToDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveHardLinesToReduxStore,\n  postHardLinesToDynamoDb\n})(HardLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"HardLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/HardLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveHardLinesToReduxStore","postHardLinesToDynamoDb","HardLines","saveWellInfoToReduxStoreReducer","activeWell","operator","rig","well","county","usState","northing","easting","response","initialhardLineRecords","value","readOnly","width","hardLineRecords","setHardLineRecords","onCellsChanged","changes","hardLineRecordsNew","map","row","forEach","cell","col","sethardLineRecords","handleSubmit","wellInfoAndLeaseLines","checkTest","console","log","renderRowsButtons","addRow","removeRow","hardLineRecordsLength","length","newRow","newhardLineRecords","pop","mapStateToProps","postHardLinesToDynamoDbReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\"\nimport postHardLinesToDynamoDb from \"../ActionCreators/postHardLinesToDynamoDb\"\n\n\nconst HardLines = ({saveWellInfoToReduxStoreReducer, activeWell, saveHardLinesToReduxStore, postHardLinesToDynamoDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial hardLineRecords\n  // create local state to sethardLineRecords\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {hardLineRecords} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToDynamoDb saveHardLinesToRedux\n  // addRows: newhardLineRecords =  [...hardLineRecords, addedRow] sethardLineRecords(newhardLineRecords)\n\n  const initialhardLineRecords = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [hardLineRecords, setHardLineRecords] = useState(initialhardLineRecords)\n\n\n  const onCellsChanged = changes => {\n    const hardLineRecordsNew = hardLineRecords.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      hardLineRecordsNew[row][col] = {...hardLineRecords[row][col], value}\n    });\n    sethardLineRecords(hardLineRecordsNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      hardLineRecords\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    postHardLinesToDynamoDb(wellInfoAndLeaseLines)\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines)\n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const hardLineRecordsLength = hardLineRecords.length\n    const newRow = [{value: hardLineRecordsLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newhardLineRecords = [...hardLineRecords, newRow]\n    sethardLineRecords(newhardLineRecords)\n  }\n\n  const removeRow = () => {\n    const newhardLineRecords = [...hardLineRecords]\n    newhardLineRecords.pop()\n    sethardLineRecords(newhardLineRecords)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={hardLineRecords} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer, activeWell, postHardLinesToDynamoDbReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell,\n    postHardLinesToDynamoDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveHardLinesToReduxStore, postHardLinesToDynamoDb})(HardLines)"]},"metadata":{},"sourceType":"module"}