{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\";\nimport postPlanstoJSONdb from \"../ActionCreators/saveWellPlansToJSON\";\nimport wellsReducer from \"../Reducers/wellsReducer\"; // iterate through existing grid to get a copy and not mutate current as we iterate over\n// iterate through the changes.  Each change is a cell, each cell is an object\n// with cell (previousVal), row, col, currentVal\n// mutate the value of the newGrid[row#][col#] to the new value \n\nconst ExistingWellPlans = selectedWell => {\n  _s();\n\n  const [grid, setGrid] = useState([\n    /*insert connection to plans prop*/\n  ]);\n  const initialGrid = selectedWell; // const initialGrid = \n\n  const onCellsChanged = changes => {\n    const newGrid = grid.map(row => [...row]); // newGrid is now a copy of old grid\n\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      // each cell of newGrid is a copy of the old grid, plus changed value\n      newGrid[row][col] = { ...grid[row][col],\n        value\n      };\n    }); // set this grid as the local state's grid\n\n    setGrid(newGrid);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      children: \"Insert Name of well\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n      data: grid,\n      valueRenderer: cell => cell.value,\n      onCellsChanged: onCellsChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExistingWellPlans, \"HkAs7HX1iw7snipm/JABerbeEi8=\");\n\n_c = ExistingWellPlans;\n\nconst mapStateToProps = ({\n  saveActiveWellToReduxStoreReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    saveActiveWellToReduxStoreReducer,\n    getWellsFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps)(ExistingWellPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingWellPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js"],"names":["React","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","saveNewPlanToReduxStore","postPlanstoJSONdb","wellsReducer","ExistingWellPlans","selectedWell","grid","setGrid","initialGrid","onCellsChanged","changes","newGrid","map","row","forEach","cell","col","value","mapStateToProps","saveActiveWellToReduxStoreReducer","getWellsFromJSONDbReducer"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAOC,YAAP,MAAyB,0BAAzB,C,CAGA;AACI;AACA;AACA;;AACJ,MAAMC,iBAAiB,GAAIC,YAAD,IAAkB;AAAA;;AAC1C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC;AAAC;AAAD,GAAD,CAAhC;AACA,QAAMe,WAAW,GAAGH,YAApB,CAF0C,CAG1C;;AACA,QAAMI,cAAc,GAAIC,OAAD,IAAa;AAClC,UAAMC,OAAO,GAAGL,IAAI,CAACM,GAAL,CAASC,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAAhB,CAAhB,CADkC,CAElC;;AACAH,IAAAA,OAAO,CAACI,OAAR,CAAgB,CAAC;AAACC,MAAAA,IAAD;AAAOF,MAAAA,GAAP;AAAYG,MAAAA,GAAZ;AAAiBC,MAAAA;AAAjB,KAAD,KAA6B;AAC3C;AACAN,MAAAA,OAAO,CAACE,GAAD,CAAP,CAAaG,GAAb,IAAoB,EAAC,GAAGV,IAAI,CAACO,GAAD,CAAJ,CAAUG,GAAV,CAAJ;AAAoBC,QAAAA;AAApB,OAApB;AACD,KAHD,EAHkC,CAOlC;;AACAV,IAAAA,OAAO,CAACI,OAAD,CAAP;AACD,GATD;;AAUA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,cAAD;AACE,MAAA,IAAI,EAAEL,IADR;AAEE,MAAA,aAAa,EAAGS,IAAD,IAASA,IAAI,CAACE,KAF/B;AAGE,MAAA,cAAc,EAAER;AAHlB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAzBD;;GAAML,iB;;KAAAA,iB;;AA2BN,MAAMc,eAAe,GAAG,CAAC;AAACC,EAAAA,iCAAD;AAAoCC,EAAAA;AAApC,CAAD,KAAoE;AAC1F,SAAO;AACLD,IAAAA,iCADK;AAELC,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,eAAe1B,OAAO,CAACwB,eAAD,CAAP,CAAyBd,iBAAzB,CAAf","sourcesContent":["import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\nimport postPlanstoJSONdb from \"../ActionCreators/saveWellPlansToJSON\"\nimport wellsReducer from \"../Reducers/wellsReducer\"\n\n\n// iterate through existing grid to get a copy and not mutate current as we iterate over\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \nconst ExistingWellPlans = (selectedWell) => {\n  const [grid, setGrid] = useState([/*insert connection to plans prop*/])\n  const initialGrid = selectedWell\n  // const initialGrid = \n  const onCellsChanged = (changes) => {\n    const newGrid = grid.map(row => [...row])\n    // newGrid is now a copy of old grid\n    changes.forEach(({cell, row, col, value}) => {\n      // each cell of newGrid is a copy of the old grid, plus changed value\n      newGrid[row][col] = {...grid[row][col], value}\n    })\n    // set this grid as the local state's grid\n    setGrid(newGrid)\n  }\n  return (\n    <Container>\n      <Col>Insert Name of well</Col>\n\n      <ReactDataSheet\n        data={grid}\n        valueRenderer={(cell)=> cell.value}\n        onCellsChanged={onCellsChanged}\n      ></ReactDataSheet>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({saveActiveWellToReduxStoreReducer, getWellsFromJSONDbReducer}) => {\n  return {\n    saveActiveWellToReduxStoreReducer,\n    getWellsFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps)(ExistingWellPlans)"]},"metadata":{},"sourceType":"module"}