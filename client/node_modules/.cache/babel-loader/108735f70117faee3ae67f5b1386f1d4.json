{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\n// react\nimport React, { useState, useEffect } from 'react'; // react-bootstrap\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown'; // other libs/imports\n\nimport { connect } from 'react-redux';\nimport _ from 'lodash'; // images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\n\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\nimport getWellPlansFromDynamoDb from '../ActionCreators/getWellPlansFromDynamoDb'; // import postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\n// import getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\"; // import getLeaseLinesFromJSONDb from \"../ActionCreators/getLeaseLinesFromJSONDb\"\n// import getWellsWithLeaseLinesFromJSONDb from \"../ActionCreators/getWellsWithLeaseLinesFromJSONDb\"\n// import getSurveysFromJSONDb from \"../ActionCreators/getSurveysFromJSONDb\"\n//import getWellsWithSurveysFromJSONDb from \"../ActionCreators/getWellsWithSurveysFromJSONDb\"\n//import getWellsWithHardLinesFromJSONDb from \"../ActionCreators/getWellsWithHardLinesFromJSONDb\"\n\nimport getHardLinesFromDynamoDb from \"../ActionCreators/getHardLinesFromDynamoDb\";\nimport postWellInfoToDynamoDb from \"../ActionCreators/postWellInfoToDynamoDb\";\nimport getWellsFromDynamoDb from \"../ActionCreators/getWellsFromDynamoDb\";\nimport getLeaseLinesFromDynamoDb from '../ActionCreators/getLeaseLinesFromDynamoDb';\nimport getSurveysFromDynamoDb from \"../ActionCreators/getSurveysFromDynamoDb\";\n\nconst Home = ({\n  getHardLinesFromDynamoDb,\n  getSurveysFromDynamoDb,\n  getWellPlansFromDynamoDb,\n  getWellsFromDynamoDbReducer,\n  getWellsFromDynamoDb,\n  postWellInfoToDynamoDb,\n  saveActiveWellToReduxStore,\n  saveWellInfoToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  getLeaseLinesFromDynamoDb\n}) => {\n  _s();\n\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [usState, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n  useEffect(() => {\n    // getWellsWithLeaseLinesFromJSONDb()\n    // getWellsWithSurveysFromJSONDb()\n    // getWellsWithHardLinesFromJSONDb()\n    getWellsFromDynamoDb();\n  }, []);\n\n  const renderWellNames = () => {\n    if (getWellsFromDynamoDbReducer.status === \"received\") {\n      let wells = getWellsFromDynamoDbReducer.response.Items;\n      return /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n        children: wells.map(well => {\n          return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            href: \"\",\n            onClick: () => {\n              setActiveWell(`${well.Operator.S} - ${well.Rig.S} - ${well.Well_Name.S}`);\n              saveActiveWellToReduxStore(well);\n              console.log();\n            },\n            children: [well.Operator.S, \" - \", well.Rig.S, \" - \", well.Well_Name.S]\n          }, `${well.Operator.S}${well.Well_Name.S}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this);\n    } else {\n      return \"Data loading\";\n    }\n  };\n\n  const createNewWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Add new well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Operator\",\n        onChange: event => setOperator(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Rig\",\n        onChange: event => setRig(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Well\",\n        onChange: event => setWell(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"County\",\n        onChange: event => setCounty(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"State\",\n        onChange: event => setUSstate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Northing\",\n        onChange: event => setNorthing(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Easting\",\n        onChange: event => setEasting(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"info\",\n        disabled: operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || usState === \"\" ? true : false,\n        onClick: () => handleNewWellSubmit(),\n        children: \"Submit and begin adding well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting\n    }; // postWellInfoToJSONDb(wellInfo)\n\n    console.log(\"submit puta\");\n    postWellInfoToDynamoDb(wellInfo);\n    saveWellInfoToReduxStore(wellInfo);\n    saveActiveWellToReduxStore(wellInfo);\n  };\n\n  const handleFetchData = () => {\n    getWellPlansFromDynamoDb(activeWell);\n    getLeaseLinesFromDynamoDb(activeWell);\n    getHardLinesFromDynamoDb(activeWell);\n    getSurveysFromDynamoDb(activeWell); // setTimeout(getWellPlansFromJSONDb, 500, activeWell);\n    //setTimeout(getLeaseLinesFromJSONDb, 1000, activeWell);\n    // setTimeout(getSurveysFromJSONDb, 1500, activeWell)\n    //getHardLinesFromJSONDb(activeWell)\n    //   // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n    //   // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n    //   // setTimeout(getOffsets(selectedWell), 2500);\n  };\n\n  const selectExistingWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select Existing Well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: activeWell ? activeWell : `Select Well:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), renderWellNames()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"success\",\n        disabled: activeWell === \"None\" ? true : false,\n        onClick: handleFetchData,\n        children: \"Fetch well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [createNewWell(), selectExistingWell()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Home, \"JnUfelRL+BN95keNFNznCi904IM=\");\n\n_c = Home;\n\nconst mapStateToProps = ({\n  getSurveysFromDynamoDbReducer,\n  getWellsFromDynamoDbReducer,\n  postWellInfoToDynamoDbReducer,\n  saveActiveWellToReduxStoreReducer,\n  saveWellInfoToReduxStoreReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToDynamoDbReducer,\n    getWellsFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getLeaseLinesFromDynamoDb,\n  getWellPlansFromDynamoDb,\n  getSurveysFromDynamoDb,\n  getWellsFromDynamoDb,\n  postWellInfoToDynamoDb,\n  getHardLinesFromDynamoDb,\n  saveActiveWellToReduxStore,\n  saveWellInfoToReduxStore\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/Home.js"],"names":["React","useState","useEffect","Container","Row","Col","Button","Form","Dropdown","connect","_","saveWellInfoToReduxStore","getWellPlansFromDynamoDb","saveActiveWellToReduxStore","getHardLinesFromDynamoDb","postWellInfoToDynamoDb","getWellsFromDynamoDb","getLeaseLinesFromDynamoDb","getSurveysFromDynamoDb","Home","getWellsFromDynamoDbReducer","saveWellInfoToReduxStoreReducer","activeWell","setActiveWell","operator","setOperator","rig","setRig","well","setWell","county","setCounty","usState","setUSstate","northing","setNorthing","easting","setEasting","renderWellNames","status","wells","response","Items","map","Operator","S","Rig","Well_Name","console","log","createNewWell","event","target","value","handleNewWellSubmit","wellInfo","handleFetchData","selectExistingWell","mapStateToProps","getSurveysFromDynamoDbReducer","postWellInfoToDynamoDbReducer","saveActiveWellToReduxStoreReducer"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,CAAP,MAAc,QAAd,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,wBAAP,MAAqC,4CAArC;AACA,OAAOC,wBAAP,MAAqC,4CAArC,C,CACA;AACA;;AACA,OAAOC,0BAAP,MAAuC,8CAAvC,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,wBAAP,MAAqC,4CAArC;AACA,OAAOC,sBAAP,MAAmC,0CAAnC;AACA,OAAOC,oBAAP,MAAiC,wCAAjC;AACA,OAAOC,yBAAP,MAAsC,6CAAtC;AACA,OAAOC,sBAAP,MAAmC,0CAAnC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZL,EAAAA,wBADY;AAEZI,EAAAA,sBAFY;AAGZN,EAAAA,wBAHY;AAIZQ,EAAAA,2BAJY;AAKZJ,EAAAA,oBALY;AAMZD,EAAAA,sBANY;AAOZF,EAAAA,0BAPY;AAQZF,EAAAA,wBARY;AASZU,EAAAA,+BATY;AAUZJ,EAAAA;AAVY,CAAD,KAUoB;AAAA;;AAE/B,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,MAAD,CAA5C;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACyB,GAAD,EAAMC,MAAN,IAAgB1B,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC2B,IAAD,EAAOC,OAAP,IAAkB5B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC6B,MAAD,EAASC,SAAT,IAAsB9B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC+B,OAAD,EAAUC,UAAV,IAAwBhC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACiC,QAAD,EAAWC,WAAX,IAA0BlC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmC,OAAD,EAAUC,UAAV,IAAwBpC,QAAQ,CAAC,EAAD,CAAtC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACAc,IAAAA,oBAAoB;AACrB,GALQ,EAKN,EALM,CAAT;;AAQA,QAAMsB,eAAe,GAAG,MAAM;AAC5B,QAAIlB,2BAA2B,CAACmB,MAA5B,KAAuC,UAA3C,EAAuD;AACrD,UAAIC,KAAK,GAAGpB,2BAA2B,CAACqB,QAA5B,CAAqCC,KAAjD;AACA,0BACE,QAAC,QAAD,CAAU,IAAV;AAAA,kBACGF,KAAK,CAACG,GAAN,CAAUf,IAAI,IAAI;AACjB,8BACE,QAAC,QAAD,CAAU,IAAV;AACE,YAAA,IAAI,EAAC,EADP;AAGE,YAAA,OAAO,EAAE,MAAK;AACZL,cAAAA,aAAa,CAAE,GAAEK,IAAI,CAACgB,QAAL,CAAcC,CAAE,MAAKjB,IAAI,CAACkB,GAAL,CAASD,CAAE,MAAKjB,IAAI,CAACmB,SAAL,CAAeF,CAAE,EAA1D,CAAb;AACAhC,cAAAA,0BAA0B,CAACe,IAAD,CAA1B;AACAoB,cAAAA,OAAO,CAACC,GAAR;AACH,aAPD;AAAA,uBAQGrB,IAAI,CAACgB,QAAL,CAAcC,CARjB,SAQuBjB,IAAI,CAACkB,GAAL,CAASD,CARhC,SAQsCjB,IAAI,CAACmB,SAAL,CAAeF,CARrD;AAAA,aAEQ,GAAEjB,IAAI,CAACgB,QAAL,CAAcC,CAAE,GAAEjB,IAAI,CAACmB,SAAL,CAAeF,CAAE,EAF7C;AAAA;AAAA;AAAA;AAAA,kBADF;AAYD,SAbA;AADH;AAAA;AAAA;AAAA;AAAA,cADF;AAkBD,KApBD,MAqBK;AACH,aAAO,cAAP;AACD;AACF,GAzBD;;AA2BA,QAAMK,aAAa,GAAG,MAAM;AAC1B,wBACE,QAAC,GAAD;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,UAA3C;AAAsD,QAAA,QAAQ,EAAEC,KAAK,IAAI1B,WAAW,CAAC0B,KAAK,CAACC,MAAN,CAAaC,KAAd;AAApF;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,KAA3C;AAAiD,QAAA,QAAQ,EAAEF,KAAK,IAAIxB,MAAM,CAACwB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA1E;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,MAA3C;AAAkD,QAAA,QAAQ,EAAEF,KAAK,IAAItB,OAAO,CAACsB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA5E;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,QAA3C;AAAoD,QAAA,QAAQ,EAAEF,KAAK,IAAIpB,SAAS,CAACoB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAhF;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,OAA3C;AAAmD,QAAA,QAAQ,EAAEF,KAAK,IAAIlB,UAAU,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAhF;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,UAA3C;AAAsD,QAAA,QAAQ,EAAEF,KAAK,IAAIhB,WAAW,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAApF;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC,SAA3C;AAAqD,QAAA,QAAQ,EAAEF,KAAK,IAAId,UAAU,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAlF;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,MAAlB;AAAyB,QAAA,OAAO,EAAC,MAAjC;AAAwC,QAAA,QAAQ,EAAG7B,QAAQ,KAAK,EAAb,IAAmBE,GAAG,KAAK,EAA3B,IAAiCE,IAAI,KAAK,EAA1C,IAAgDE,MAAM,KAAK,EAA3D,IAAiEE,OAAO,KAAK,EAA7E,GAAkF,IAAlF,GAAyF,KAA5I;AAAoJ,QAAA,OAAO,EAAE,MAAIsB,mBAAmB,EAApL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAdD;;AAgBA,QAAMA,mBAAmB,GAAG,MAAM;AAChC,UAAMC,QAAQ,GAAG;AACf/B,MAAAA,QADe;AAEfE,MAAAA,GAFe;AAGfE,MAAAA,IAHe;AAIfE,MAAAA,MAJe;AAKfE,MAAAA,OALe;AAMfE,MAAAA,QANe;AAOfE,MAAAA;AAPe,KAAjB,CADgC,CAUhC;;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAlC,IAAAA,sBAAsB,CAACwC,QAAD,CAAtB;AACA5C,IAAAA,wBAAwB,CAAC4C,QAAD,CAAxB;AACA1C,IAAAA,0BAA0B,CAAC0C,QAAD,CAA1B;AACD,GAfD;;AAiBA,QAAMC,eAAe,GAAG,MAAM;AAC5B5C,IAAAA,wBAAwB,CAACU,UAAD,CAAxB;AACAL,IAAAA,yBAAyB,CAACK,UAAD,CAAzB;AACAR,IAAAA,wBAAwB,CAACQ,UAAD,CAAxB;AACAJ,IAAAA,sBAAsB,CAACI,UAAD,CAAtB,CAJ4B,CAK5B;AACA;AACA;AACA;AACF;AACA;AACA;AACC,GAZD;;AAgBA,QAAMmC,kBAAkB,GAAG,MAAM;AAC/B,wBACE,QAAC,GAAD;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAA,gCACE,QAAC,QAAD,CAAU,MAAV;AAAiB,UAAA,OAAO,EAAC,SAAzB;AAAmC,UAAA,EAAE,EAAC,gBAAtC;AAAA,oBACGnC,UAAU,GAAGA,UAAH,GAAiB;AAD9B;AAAA;AAAA;AAAA;AAAA,gBADF,EAIGgB,eAAe,EAJlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,MAAlB;AAAyB,QAAA,OAAO,EAAC,SAAjC;AAA2C,QAAA,QAAQ,EAAGhB,UAAU,KAAK,MAAf,GAAwB,IAAxB,GAA+B,KAArF;AAA6F,QAAA,OAAO,EAAEkC,eAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAbD;;AAgBA,sBACI,QAAC,SAAD;AAAA,2BACE,QAAC,GAAD;AAAA,iBACGN,aAAa,EADhB,EAEGO,kBAAkB,EAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,CAnID;;GAAMtC,I;;KAAAA,I;;AAqIN,MAAMuC,eAAe,GAAG,CAAC;AACvBC,EAAAA,6BADuB;AAEvBvC,EAAAA,2BAFuB;AAGvBwC,EAAAA,6BAHuB;AAIvBC,EAAAA,iCAJuB;AAKvBxC,EAAAA;AALuB,CAAD,KAKgB;AAEtC,SAAO;AACLA,IAAAA,+BADK;AAELuC,IAAAA,6BAFK;AAGLxC,IAAAA;AAHK,GAAP;AAKD,CAZD;;AAcA,eAAeX,OAAO,CACpBiD,eADoB,EAEpB;AAAEzC,EAAAA,yBAAF;AACEL,EAAAA,wBADF;AAEEM,EAAAA,sBAFF;AAGEF,EAAAA,oBAHF;AAIED,EAAAA,sBAJF;AAKED,EAAAA,wBALF;AAMED,EAAAA,0BANF;AAOEF,EAAAA;AAPF,CAFoB,CAAP,CAUVQ,IAVU,CAAf","sourcesContent":["// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\nimport getWellPlansFromDynamoDb from '../ActionCreators/getWellPlansFromDynamoDb';\n// import postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\n// import getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\"\n// import getLeaseLinesFromJSONDb from \"../ActionCreators/getLeaseLinesFromJSONDb\"\n// import getWellsWithLeaseLinesFromJSONDb from \"../ActionCreators/getWellsWithLeaseLinesFromJSONDb\"\n// import getSurveysFromJSONDb from \"../ActionCreators/getSurveysFromJSONDb\"\n//import getWellsWithSurveysFromJSONDb from \"../ActionCreators/getWellsWithSurveysFromJSONDb\"\n//import getWellsWithHardLinesFromJSONDb from \"../ActionCreators/getWellsWithHardLinesFromJSONDb\"\nimport getHardLinesFromDynamoDb from \"../ActionCreators/getHardLinesFromDynamoDb\"\nimport postWellInfoToDynamoDb from \"../ActionCreators/postWellInfoToDynamoDb\"\nimport getWellsFromDynamoDb from \"../ActionCreators/getWellsFromDynamoDb\"\nimport getLeaseLinesFromDynamoDb from '../ActionCreators/getLeaseLinesFromDynamoDb';\nimport getSurveysFromDynamoDb from \"../ActionCreators/getSurveysFromDynamoDb\"\n\nconst Home = ({ \n  getHardLinesFromDynamoDb, \n  getSurveysFromDynamoDb,\n  getWellPlansFromDynamoDb, \n  getWellsFromDynamoDbReducer, \n  getWellsFromDynamoDb, \n  postWellInfoToDynamoDb, \n  saveActiveWellToReduxStore, \n  saveWellInfoToReduxStore, \n  saveWellInfoToReduxStoreReducer, \n  getLeaseLinesFromDynamoDb}) => {\n\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [usState, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n\n  useEffect(() => {\n    // getWellsWithLeaseLinesFromJSONDb()\n    // getWellsWithSurveysFromJSONDb()\n    // getWellsWithHardLinesFromJSONDb()\n    getWellsFromDynamoDb()\n  }, []);\n\n\n  const renderWellNames = () => {\n    if (getWellsFromDynamoDbReducer.status === \"received\") {\n      let wells = getWellsFromDynamoDbReducer.response.Items\n      return (\n        <Dropdown.Menu>\n          {wells.map(well => {\n            return (\n              <Dropdown.Item \n                href=\"\" \n                key={`${well.Operator.S}${well.Well_Name.S}`} \n                onClick={()=> {\n                  setActiveWell(`${well.Operator.S} - ${well.Rig.S} - ${well.Well_Name.S}`)\n                  saveActiveWellToReduxStore(well)\n                  console.log()\n              } }>\n                {well.Operator.S} - {well.Rig.S} - {well.Well_Name.S}\n              </Dropdown.Item>\n            )\n          })}\n        </Dropdown.Menu>\n      )\n    }\n    else {\n      return \"Data loading\"\n    }\n  }\n\n  const createNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || usState === \"\" ? true : false } onClick={()=>handleNewWellSubmit()}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting\n    }\n    // postWellInfoToJSONDb(wellInfo)\n    console.log(\"submit puta\")\n    postWellInfoToDynamoDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n    saveActiveWellToReduxStore(wellInfo)\n  }\n\n  const handleFetchData = () => {\n    getWellPlansFromDynamoDb(activeWell)\n    getLeaseLinesFromDynamoDb(activeWell)\n    getHardLinesFromDynamoDb(activeWell)\n    getSurveysFromDynamoDb(activeWell)\n    // setTimeout(getWellPlansFromJSONDb, 500, activeWell);\n    //setTimeout(getLeaseLinesFromJSONDb, 1000, activeWell);\n    // setTimeout(getSurveysFromJSONDb, 1500, activeWell)\n    //getHardLinesFromJSONDb(activeWell)\n  //   // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   // setTimeout(getOffsets(selectedWell), 2500);\n  }\n\n\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select Existing Well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            {activeWell ? activeWell : `Select Well:`}\n          </Dropdown.Toggle>\n          {renderWellNames()}\n        </Dropdown>\n        <Button className=\"mt-4\" variant=\"success\" disabled={ activeWell === \"None\" ? true : false } onClick={handleFetchData}>Fetch well data</Button>\n      </Col>\n    )\n  }\n\n\n  return (\n      <Container>\n        <Row>\n          {createNewWell()}\n          {selectExistingWell()}\n        </Row>\n      </Container>\n    )\n\n}\n\nconst mapStateToProps = ({\n  getSurveysFromDynamoDbReducer, \n  getWellsFromDynamoDbReducer, \n  postWellInfoToDynamoDbReducer, \n  saveActiveWellToReduxStoreReducer, \n  saveWellInfoToReduxStoreReducer }) => {\n  \n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToDynamoDbReducer,\n    getWellsFromDynamoDbReducer\n  }\n}\n\nexport default connect(\n  mapStateToProps, \n  { getLeaseLinesFromDynamoDb, \n    getWellPlansFromDynamoDb,\n    getSurveysFromDynamoDb, \n    getWellsFromDynamoDb, \n    postWellInfoToDynamoDb, \n    getHardLinesFromDynamoDb, \n    saveActiveWellToReduxStore, \n    saveWellInfoToReduxStore \n  })(Home);\n"]},"metadata":{},"sourceType":"module"}