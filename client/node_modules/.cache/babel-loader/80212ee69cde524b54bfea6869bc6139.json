{"ast":null,"code":"import { get } from \"lodash\";\nimport wells from \"../APIs/wells\";\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\";\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, GET_WELL_PLANS_FROM_JSONDB_RECEIVED, GET_WELL_PLANS_FROM_JSONDB_FAILED } from \"./types\";\nexport default (selectedWell => {\n  return async (dispatch, getState) => {\n    console.log(selectedWell);\n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      let result = null;\n      const wellList = getState().getWellsFromJSONDbReducer.response;\n\n      for (let well in wellList) {\n        if (wellList[well].operator === selectedWell.operator && wellList[well].well === selectedWell.well) {\n          result = [...wellList[well].grid];\n        }\n      }\n\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n}); // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n// if (getState.getWellsFromJSONDbReducer.response[well].operator )\n// }","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellPlansFromJSONDb.js"],"names":["get","wells","getWellsFromJSONDb","GET_WELL_PLANS_FROM_JSONDB_REQUESTED","GET_WELL_PLANS_FROM_JSONDB_RECEIVED","GET_WELL_PLANS_FROM_JSONDB_FAILED","selectedWell","dispatch","getState","console","log","type","result","wellList","getWellsFromJSONDbReducer","response","well","operator","grid","payload","error"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,oCAAT,EACEC,mCADF,EAEEC,iCAFF,QAE0C,SAF1C;AAIA,gBAAgBC,YAAD,IAAkB;AAC/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEAC,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,UAAIS,MAAM,GAAG,IAAb;AACA,YAAMC,QAAQ,GAAGL,QAAQ,GAAGM,yBAAX,CAAqCC,QAAtD;;AACA,WAAK,IAAIC,IAAT,IAAiBH,QAAjB,EAA2B;AACzB,YAAIA,QAAQ,CAACG,IAAD,CAAR,CAAeC,QAAf,KAA4BX,YAAY,CAACW,QAAzC,IAAqDJ,QAAQ,CAACG,IAAD,CAAR,CAAeA,IAAf,KAAwBV,YAAY,CAACU,IAA9F,EAAoG;AAClGJ,UAAAA,MAAM,GAAG,CAAC,GAAGC,QAAQ,CAACG,IAAD,CAAR,CAAeE,IAAnB,CAAT;AACD;AACF;;AACDX,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEP,mCADC;AAEPe,QAAAA,OAAO,EAAEP;AAFF,OAAD,CAAR;AAID,KAZD,CAYE,OAAOQ,KAAP,EAAc;AAEdb,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEN,iCADC;AAEPc,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GAzBD;AA2BD,CA5BD,E,CA+BI;AACI;AACJ","sourcesContent":["import { get } from \"lodash\"\nimport wells from \"../APIs/wells\"\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\"\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n  GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n  GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"./types\"\n\nexport default (selectedWell) => {\n  return async (dispatch, getState) => {\n    console.log(selectedWell)\n    \n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n    })\n    try {\n      let result = null\n      const wellList = getState().getWellsFromJSONDbReducer.response\n      for (let well in wellList) {\n        if (wellList[well].operator === selectedWell.operator && wellList[well].well === selectedWell.well) {\n          result = [...wellList[well].grid]\n        }\n      }\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      }) \n    } catch (error) {\n      \n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n\n} \n\n\n    // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n        // if (getState.getWellsFromJSONDbReducer.response[well].operator )\n    // }\n\n"]},"metadata":{},"sourceType":"module"}