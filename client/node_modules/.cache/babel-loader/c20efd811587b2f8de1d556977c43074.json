{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/Surveys.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\"; //other libs\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"; //helper functions\n\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\";\nimport calculateNS from \"../HelperFunctions/Calculations/NS\";\nimport calculateEW from \"../HelperFunctions/Calculations/EW\";\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\";\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\";\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\";\nimport postSurveysToDynamoDb from \"../ActionCreators/postSurveysToDynamoDb\";\n\nconst Surveys = ({\n  postSurveysToDynamoDb,\n  activeWell,\n  saveSurveysToReduxStore,\n  savePlansToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  savePlansToReduxStoreReducer,\n  postPlansToJSONDb\n}) => {\n  _s();\n\n  const [editsurveys, setEditsurveys] = useState(true);\n  const [input, setInput] = useState(false);\n  const [vsDirection, setVSDirection] = useState(0);\n  const initialSurveys = [[{\n    value: '',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Measured Depth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Inclination\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Azimuth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"TVD\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"VS\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"DLS\",\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }] // [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  // [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  // [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  // [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n  const [surveys, setSurveys] = useState(initialSurveys);\n  useEffect(() => {\n    if (input) {\n      performCalculations();\n    }\n  }, [input]);\n  useEffect(() => {\n    handleAddRows(1);\n  }, []);\n\n  const performCalculations = () => {\n    surveys.map((row, index) => {\n      if (index === 0 || index === 1) {// nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within surveys array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n        const calculatedTVD = calculateTVD(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][4].value);\n        const calculatedNS = calculateNS(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][5].value);\n        const calculatedEW = calculateEW(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][6].value);\n        const calculatedSECT = calculateSECT(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][5].value, surveys[index - 1][6].value, index, vsDirection);\n        const calculatedDLS = calculateDLS(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value);\n        surveys[index][4] = { ...surveys[index][4],\n          readOnly: true,\n          value: calculatedTVD\n        };\n        console.log(calculatedTVD);\n        surveys[index][5] = { ...surveys[index][5],\n          readOnly: true,\n          value: calculatedNS\n        };\n        surveys[index][6] = { ...surveys[index][6],\n          readOnly: true,\n          value: calculatedEW\n        };\n        surveys[index][7] = { ...surveys[index][7],\n          readOnly: true,\n          value: calculatedSECT\n        };\n        surveys[index][8] = { ...surveys[index][8],\n          readOnly: true,\n          value: calculatedDLS\n        };\n        setSurveys(surveys);\n        setInput(false);\n      }\n    });\n  };\n\n  const onCellsChanged = changes => {\n    // iterate through existing surveys to get a copy and not mutate current as we iterate over\n    const surveysNew = surveys.map(row => [...row]); // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newsurveys[row#][col#] to the new value \n\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      surveysNew[row][col] = { ...surveys[row][col],\n        value\n      };\n    });\n    setSurveys(surveysNew);\n    setInput(true);\n  };\n\n  const handleVSDirection = val => {\n    setVSDirection(val);\n    setInput(true);\n  };\n\n  const handleSubmit = () => {\n    const {\n      well,\n      operator,\n      rig,\n      county,\n      uSstate,\n      northing,\n      easting\n    } = activeWell.response;\n    const wellInfo = {\n      operator,\n      well,\n      rig,\n      county,\n      uSstate,\n      northing,\n      easting,\n      surveys\n    };\n    console.log(surveys);\n    saveSurveysToReduxStore(surveys);\n    postSurveysToDynamoDb(wellInfo);\n  };\n\n  const handleRemoveRow = () => {\n    const newsurveys = [...surveys];\n    newsurveys.pop();\n    setSurveys(newsurveys);\n  };\n\n  const createRows = numberOfRowsToAdd => {\n    let createdRows = [];\n\n    for (let i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push([{\n        readOnly: true,\n        value: surveys.length + i\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }, {\n        value: 0\n      }]);\n    }\n\n    return createdRows;\n  };\n\n  const handleAddRows = rows => {\n    const newsurveys = [...surveys, ...createRows(rows)];\n    setSurveys(newsurveys);\n  };\n\n  const renderSetRowsButtons = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"d-flex justify-content-start mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          value: 25,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add 25 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"ml-4\",\n          value: 10,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add 10 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"ml-4\",\n          value: 5,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add 5 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"ml-4\",\n          value: 1,\n          onClick: event => handleAddRows(event.target.value),\n          children: \"Add a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: () => handleRemoveRow(),\n          children: \"Remove a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderSubmitButton = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"my-4\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"info\",\n          onClick: () => handleSubmit(),\n          children: \"Submit Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const {\n        well,\n        rig,\n        operator\n      } = saveWellInfoToReduxStoreReducer.response;\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"hy-4\",\n        children: [\" \", operator, \" - \", rig, \" - \", well]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }, this);\n    } else {\n      return \"No well data\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: [renderWellData(), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: surveys,\n          valueRenderer: cell => cell.value,\n          onCellsChanged: onCellsChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"mt-7\",\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicEmail\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              className: \"mt-3\",\n              type: \"float\",\n              placeholder: \"Enter VS Here\",\n              onChange: event => handleVSDirection(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), renderSetRowsButtons(), renderSubmitButton(), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Surveys, \"XEI3YDM4s4APvO3vH+CCShXxnJk=\");\n\n_c = Surveys;\n\nconst mapStateToProps = ({\n  activeWell,\n  saveWellInfoToReduxStoreReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postSurveysToDynamoDb,\n  saveSurveysToReduxStore,\n  savePlansToReduxStore,\n  postPlansToJSONDb\n})(Surveys);\n\nvar _c;\n\n$RefreshReg$(_c, \"Surveys\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/Surveys.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","savePlansToReduxStore","calculateTVD","calculateNS","calculateEW","calculateSECT","calculateDLS","postPlansToJSONDb","saveSurveysToReduxStore","postSurveysToDynamoDb","Surveys","activeWell","saveWellInfoToReduxStoreReducer","savePlansToReduxStoreReducer","editsurveys","setEditsurveys","input","setInput","vsDirection","setVSDirection","initialSurveys","value","readOnly","width","surveys","setSurveys","performCalculations","handleAddRows","map","row","index","calculatedTVD","calculatedNS","calculatedEW","calculatedSECT","calculatedDLS","console","log","onCellsChanged","changes","surveysNew","forEach","cell","col","handleVSDirection","val","handleSubmit","well","operator","rig","county","uSstate","northing","easting","response","wellInfo","handleRemoveRow","newsurveys","pop","createRows","numberOfRowsToAdd","createdRows","i","push","length","rows","renderSetRowsButtons","event","target","renderSubmitButton","renderWellData","status","mapStateToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB,C,CACA;;AACA,OAAO,yCAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,iBAA3B,C,CACA;;AAEA,OAAOC,qBAAP,MAAkC,yCAAlC,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAED,EAAAA,qBAAF;AAAyBE,EAAAA,UAAzB;AAAqCH,EAAAA,uBAArC;AAA8DP,EAAAA,qBAA9D;AAAqFW,EAAAA,+BAArF;AAAqHC,EAAAA,4BAArH;AAAmJN,EAAAA;AAAnJ,CAAD,KAA2K;AAAA;;AAEzL,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,CAAD,CAA9C;AAEA,QAAM4B,cAAc,GAAG,CACrB,CAAC;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,IAAtB;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GAAD,EAA6C;AAACF,IAAAA,KAAK,EAAC,gBAAP;AAAyBC,IAAAA,QAAQ,EAAE,IAAnC;AAAyCC,IAAAA,KAAK,EAAE;AAAhD,GAA7C,EAAsG;AAACF,IAAAA,KAAK,EAAC,aAAP;AAAsBC,IAAAA,QAAQ,EAAE,IAAhC;AAAsCC,IAAAA,KAAK,EAAE;AAA7C,GAAtG,EAA4J;AAACF,IAAAA,KAAK,EAAC,SAAP;AAAkBC,IAAAA,QAAQ,EAAE,IAA5B;AAAkCC,IAAAA,KAAK,EAAE;AAAzC,GAA5J,EAA8M;AAACF,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,QAAQ,EAAE,IAAxB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GAA9M,EAA4P;AAACF,IAAAA,KAAK,EAAC,UAAP;AAAmBC,IAAAA,QAAQ,EAAE,IAA7B;AAAmCC,IAAAA,KAAK,EAAE;AAA1C,GAA5P,EAA+S;AAACF,IAAAA,KAAK,EAAC,SAAP;AAAkBC,IAAAA,QAAQ,EAAE,IAA5B;AAAkCC,IAAAA,KAAK,EAAE;AAAzC,GAA/S,EAAiW;AAACF,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,QAAQ,EAAE,IAAvB;AAA6BC,IAAAA,KAAK,EAAE;AAApC,GAAjW,EAA6Y;AAACF,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,QAAQ,EAAE,IAAxB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GAA7Y,CADqB,EAGrB,CAAC;AAACF,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAA7B,EAAyD;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAzD,EAAqF;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAArF,EAAiH;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAjH,EAA6I;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAA7I,EAAyK;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAzK,EAAqM;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAArM,EAAiO;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAjO,CAHqB,CAKrB;AACA;AACA;AACA;AARqB,GAAvB;AAWA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC4B,cAAD,CAAtC;AAEA3B,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIuB,KAAJ,EAAW;AACTU,MAAAA,mBAAmB;AACpB;AACF,GAJQ,EAIP,CAACV,KAAD,CAJO,CAAT;AAMAvB,EAAAA,SAAS,CAAC,MAAK;AACbkC,IAAAA,aAAa,CAAC,CAAD,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMD,mBAAmB,GAAG,MAAM;AAChCF,IAAAA,OAAO,CAACI,GAAR,CAAY,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1B,UAAIA,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,CAA7B,EAAgC,CAC9B;AACD,OAFD,MAEO;AACL;AACA;AACA;AACA;AAEA,cAAMC,aAAa,GAAG7B,YAAY,CAACsB,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAAnB,EAA0BG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAA5C,EAAmDG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAArE,EAA4EG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAlG,EAAyGG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA/H,EAAsIG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA5J,EAAmKG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAzL,CAAlC;AACA,cAAMW,YAAY,GAAG7B,WAAW,CAACqB,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAAnB,EAA0BG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAA5C,EAAmDG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAArE,EAA4EG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAlG,EAAyGG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA/H,EAAsIG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA5J,EAAmKG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAzL,CAAhC;AACA,cAAMY,YAAY,GAAG7B,WAAW,CAACoB,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAAnB,EAA0BG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAA5C,EAAmDG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAArE,EAA4EG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAlG,EAAyGG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA/H,EAAsIG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA5J,EAAmKG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAzL,CAAhC;AACA,cAAMa,cAAc,GAAG7B,aAAa,CAACmB,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAAnB,EAA0BG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAA5C,EAAmDG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAArE,EAA4EG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAlG,EAAyGG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA/H,EAAsIG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA5J,EAAmKG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAzL,EAAgMG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAtN,EAA6NS,KAA7N,EAAoOZ,WAApO,CAApC;AACA,cAAMiB,aAAa,GAAG7B,YAAY,CAACkB,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAAnB,EAA0BG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAA5C,EAAmDG,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,EAAkBT,KAArE,EAA4EG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAAlG,EAAyGG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA/H,EAAsIG,OAAO,CAACM,KAAK,GAAG,CAAT,CAAP,CAAmB,CAAnB,EAAsBT,KAA5J,CAAlC;AAGAG,QAAAA,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,IAAoB,EAAC,GAAGN,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,CAAJ;AAAuBR,UAAAA,QAAQ,EAAE,IAAjC;AAAuCD,UAAAA,KAAK,EAAEU;AAA9C,SAApB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;AACAP,QAAAA,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,IAAoB,EAAC,GAAGN,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,CAAJ;AAAuBR,UAAAA,QAAQ,EAAE,IAAjC;AAAuCD,UAAAA,KAAK,EAAEW;AAA9C,SAApB;AACAR,QAAAA,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,IAAoB,EAAC,GAAGN,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,CAAJ;AAAuBR,UAAAA,QAAQ,EAAE,IAAjC;AAAuCD,UAAAA,KAAK,EAAEY;AAA9C,SAApB;AACAT,QAAAA,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,IAAoB,EAAC,GAAGN,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,CAAJ;AAAuBR,UAAAA,QAAQ,EAAE,IAAjC;AAAuCD,UAAAA,KAAK,EAAEa;AAA9C,SAApB;AACAV,QAAAA,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,IAAoB,EAAC,GAAGN,OAAO,CAACM,KAAD,CAAP,CAAe,CAAf,CAAJ;AAAuBR,UAAAA,QAAQ,EAAE,IAAjC;AAAuCD,UAAAA,KAAK,EAAEc;AAA9C,SAApB;AAEAV,QAAAA,UAAU,CAACD,OAAD,CAAV;AACAP,QAAAA,QAAQ,CAAC,KAAD,CAAR;AAED;AACF,KA3BD;AA4BD,GA7BD;;AA+BA,QAAMqB,cAAc,GAAGC,OAAO,IAAI;AAChC;AACA,UAAMC,UAAU,GAAGhB,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAAnB,CAAnB,CAFgC,CAGhC;AACA;AACA;;AACAU,IAAAA,OAAO,CAACE,OAAR,CAAgB,CAAC;AAAEC,MAAAA,IAAF;AAAQb,MAAAA,GAAR;AAAac,MAAAA,GAAb;AAAkBtB,MAAAA;AAAlB,KAAD,KAA+B;AAC7CmB,MAAAA,UAAU,CAACX,GAAD,CAAV,CAAgBc,GAAhB,IAAuB,EAAC,GAAGnB,OAAO,CAACK,GAAD,CAAP,CAAac,GAAb,CAAJ;AAAuBtB,QAAAA;AAAvB,OAAvB;AACD,KAFD;AAGAI,IAAAA,UAAU,CAACe,UAAD,CAAV;AACAvB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAXD;;AAaA,QAAM2B,iBAAiB,GAAIC,GAAD,IAAS;AACjC1B,IAAAA,cAAc,CAAC0B,GAAD,CAAd;AACA5B,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAHD;;AAKA,QAAM6B,YAAY,GAAG,MAAM;AACzB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,GAAlB;AAAuBC,MAAAA,MAAvB;AAA+BC,MAAAA,OAA/B;AAAwCC,MAAAA,QAAxC;AAAkDC,MAAAA;AAAlD,QAA8D1C,UAAU,CAAC2C,QAA/E;AACA,UAAMC,QAAQ,GAAG;AAACP,MAAAA,QAAD;AAAWD,MAAAA,IAAX;AAAiBE,MAAAA,GAAjB;AAAsBC,MAAAA,MAAtB;AAA8BC,MAAAA,OAA9B;AAAuCC,MAAAA,QAAvC;AAAiDC,MAAAA,OAAjD;AAA0D7B,MAAAA;AAA1D,KAAjB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;AACAhB,IAAAA,uBAAuB,CAACgB,OAAD,CAAvB;AACAf,IAAAA,qBAAqB,CAAC8C,QAAD,CAArB;AAED,GAPD;;AASA,QAAMC,eAAe,GAAG,MAAM;AAC5B,UAAMC,UAAU,GAAG,CAAC,GAAGjC,OAAJ,CAAnB;AACAiC,IAAAA,UAAU,CAACC,GAAX;AACAjC,IAAAA,UAAU,CAACgC,UAAD,CAAV;AACD,GAJD;;AAMA,QAAME,UAAU,GAAIC,iBAAD,IAAuB;AACxC,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,iBAApB,EAAuCE,CAAC,EAAxC,EAA4C;AAC1CD,MAAAA,WAAW,CAACE,IAAZ,CACE,CAAC;AAACzC,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,KAAK,EAAEG,OAAO,CAACwC,MAAR,GAAiBF;AAAzC,OAAD,EAA8C;AAACzC,QAAAA,KAAK,EAAE;AAAR,OAA9C,EAA0D;AAACA,QAAAA,KAAK,EAAE;AAAR,OAA1D,EAAsE;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAtE,EAAkF;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAlF,EAA8F;AAACA,QAAAA,KAAK,EAAE;AAAR,OAA9F,EAA0G;AAACA,QAAAA,KAAK,EAAE;AAAR,OAA1G,EAAsH;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAtH,EAAkI;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAlI,CADF;AAGD;;AACD,WAAOwC,WAAP;AACD,GARD;;AAUA,QAAMlC,aAAa,GAAIsC,IAAD,IAAU;AAC9B,UAAMR,UAAU,GAAG,CAAC,GAAGjC,OAAJ,EAAa,GAAGmC,UAAU,CAACM,IAAD,CAA1B,CAAnB;AACAxC,IAAAA,UAAU,CAACgC,UAAD,CAAV;AACD,GAHD;;AAMA,QAAMS,oBAAoB,GAAG,MAAM;AACjC,wBACE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,SAAS,EAAC,mCAAvB;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,KAAK,EAAE,EAAjC;AAAqC,UAAA,OAAO,EAAGC,KAAD,IAAUxC,aAAa,CAACwC,KAAK,CAACC,MAAN,CAAa/C,KAAd,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,KAAK,EAAE,EAAlD;AAAsD,UAAA,OAAO,EAAG8C,KAAD,IAAWxC,aAAa,CAACwC,KAAK,CAACC,MAAN,CAAa/C,KAAd,CAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,KAAK,EAAE,CAAlD;AAAqD,UAAA,OAAO,EAAG8C,KAAD,IAAWxC,aAAa,CAACwC,KAAK,CAACC,MAAN,CAAa/C,KAAd,CAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,KAAK,EAAE,CAAlD;AAAqD,UAAA,OAAO,EAAG8C,KAAD,IAAWxC,aAAa,CAACwC,KAAK,CAACC,MAAN,CAAa/C,KAAd,CAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,eAaE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,OAAO,EAAE,MAAImC,eAAe,EAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAkBE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAT;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD,GAzBD;;AA2BA,QAAMa,kBAAkB,GAAG,MAAM;AAC/B,wBACE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,SAAS,EAAC,MAAvB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,MAAhB;AAAuB,UAAA,OAAO,EAAE,MAAIvB,YAAY,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAT;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAbD;;AAeA,QAAMwB,cAAc,GAAG,MAAM;AAC3B,QAAI1D,+BAA+B,CAAC2D,MAAhC,KAA2C,UAA/C,EAA2D;AACzD,YAAM;AAAExB,QAAAA,IAAF;AAAQE,QAAAA,GAAR;AAAaD,QAAAA;AAAb,UAAyBpC,+BAA+B,CAAC0C,QAA/D;AACA,0BAAO;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,wBAAuBN,QAAvB,SAAoCC,GAApC,SAA4CF,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHD,MAGO;AACL,aAAO,cAAP;AACD;AACF,GAPD;;AASA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA,mBACGuB,cAAc,EADjB,eAEE,QAAC,cAAD;AAAgB,UAAA,IAAI,EAAE9C,OAAtB;AAA+B,UAAA,aAAa,EAAGkB,IAAD,IAASA,IAAI,CAACrB,KAA5D;AAAmE,UAAA,cAAc,EAAEiB;AAAnF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAA,iCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,gBAAtB;AAAA,mCACE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,SAAS,EAAC,MAAxB;AAA+B,cAAA,IAAI,EAAC,OAApC;AAA4C,cAAA,WAAW,EAAC,eAAxD;AAAwE,cAAA,QAAQ,EAAE6B,KAAK,IAAIvB,iBAAiB,CAACuB,KAAK,CAACC,MAAN,CAAa/C,KAAd;AAA5G;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAcG6C,oBAAoB,EAdvB,EAeGG,kBAAkB,EAfrB,eAgBE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAT;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA1LD;;GAAM3D,O;;KAAAA,O;;AA4LN,MAAM8D,eAAe,GAAG,CAAC;AAAC7D,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAmD;AACzE,SAAO;AACLA,IAAAA,+BADK;AAELD,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,eAAeZ,OAAO,CAACyE,eAAD,EAAkB;AAAE/D,EAAAA,qBAAF;AAAyBD,EAAAA,uBAAzB;AAAkDP,EAAAA,qBAAlD;AAAyEM,EAAAA;AAAzE,CAAlB,CAAP,CAAsHG,OAAtH,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\nimport postSurveysToDynamoDb from \"../ActionCreators/postSurveysToDynamoDb\"\n\nconst Surveys = ({ postSurveysToDynamoDb, activeWell, saveSurveysToReduxStore ,savePlansToReduxStore, saveWellInfoToReduxStoreReducer,savePlansToReduxStoreReducer, postPlansToJSONDb}) => {\n  \n  const [editsurveys, setEditsurveys] = useState(true)\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVSDirection] = useState(0)\n  \n  const initialSurveys = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    // [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    // [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    // [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    // [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n\n  const [surveys, setSurveys] = useState(initialSurveys);\n\n  useEffect(()=>{\n    if (input) {\n      performCalculations()\n    }\n  },[input])\n\n  useEffect(()=> {\n    handleAddRows(1)\n  }, [])\n\n  const performCalculations = () => {\n    surveys.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within surveys array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n        const calculatedTVD = calculateTVD(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][4].value)\n        const calculatedNS = calculateNS(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][5].value)\n        const calculatedEW = calculateEW(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][6].value)\n        const calculatedSECT = calculateSECT(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value, surveys[index - 1][5].value, surveys[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(surveys[index][1].value, surveys[index][2].value, surveys[index][3].value, surveys[index - 1][1].value, surveys[index - 1][2].value, surveys[index - 1][3].value)\n\n\n        surveys[index][4] = {...surveys[index][4], readOnly: true, value: calculatedTVD}\n        console.log(calculatedTVD)\n        surveys[index][5] = {...surveys[index][5], readOnly: true, value: calculatedNS}\n        surveys[index][6] = {...surveys[index][6], readOnly: true, value: calculatedEW}\n        surveys[index][7] = {...surveys[index][7], readOnly: true, value: calculatedSECT}\n        surveys[index][8] = {...surveys[index][8], readOnly: true, value: calculatedDLS}\n\n        setSurveys(surveys)\n        setInput(false)\n\n      }\n    })\n  }\n\n  const onCellsChanged = changes => {\n    // iterate through existing surveys to get a copy and not mutate current as we iterate over\n    const surveysNew = surveys.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newsurveys[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      surveysNew[row][col] = {...surveys[row][col], value };\n    });\n    setSurveys(surveysNew)\n    setInput(true)\n  };\n\n  const handleVSDirection = (val) => {\n    setVSDirection(val)\n    setInput(true)\n  }\n\n  const handleSubmit = () => {\n    const { well, operator, rig, county, uSstate, northing, easting } = activeWell.response\n    const wellInfo = {operator, well, rig, county, uSstate, northing, easting, surveys}\n    console.log(surveys)\n    saveSurveysToReduxStore(surveys)\n    postSurveysToDynamoDb(wellInfo)\n\n  }\n\n  const handleRemoveRow = () => {\n    const newsurveys = [...surveys];\n    newsurveys.pop();\n    setSurveys(newsurveys);\n  };\n\n  const createRows = (numberOfRowsToAdd) => {\n    let createdRows = []\n    for (let i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push(\n        [{readOnly: true, value: surveys.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n      )\n    }\n    return createdRows\n  };\n\n  const handleAddRows = (rows) => {\n    const newsurveys = [...surveys, ...createRows(rows)]\n    setSurveys(newsurveys)\n  }\n\n\n  const renderSetRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n          <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n            Add 25 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 10 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 5 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n            Add a row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={()=>handleRemoveRow()}>\n            Remove a row\n          </Button>\n        </Col>\n        <Col xs={2}>\n          \n        </Col>\n      </Row>\n    )\n  }\n\n  const renderSubmitButton = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"info\" onClick={()=>handleSubmit()}>\n            Submit Data\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {renderWellData()}\n          <ReactDataSheet data={surveys} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n        </Col>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" placeholder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderSetRowsButtons()}\n      {renderSubmitButton()}\n      <Row>\n        <Col xs={10}>\n          {/* {renderAlert()} */}\n        </Col>\n        <Col xs={2}>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, saveWellInfoToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { postSurveysToDynamoDb, saveSurveysToReduxStore, savePlansToReduxStore, postPlansToJSONDb})(Surveys)\n\n\n"]},"metadata":{},"sourceType":"module"}