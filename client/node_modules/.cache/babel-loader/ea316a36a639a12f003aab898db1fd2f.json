{"ast":null,"code":"import { get } from \"lodash\";\nimport wells from \"../APIs/wells\";\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\";\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, GET_WELL_PLANS_FROM_JSONDB_RECEIVED, GET_WELL_PLANS_FROM_JSONDB_FAILED } from \"./types\";\nexport default (selectedWell => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      let result = null;\n      const wellList = getState().getWellsFromJSONDbReducer.response;\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWellWell = selectedWellConvertedToArray[3];\n\n      for (let well in wellList) {\n        if (wellList[well].operator === selectedWellOperator && wellList[well].well === selectedWellWell) {\n          console.log(wellList[well].grid);\n          result = [...wellList[well].grid];\n          return result;\n        }\n      }\n\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n}); // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n// if (getState.getWellsFromJSONDbReducer.response[well].operator )\n// }","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellPlansFromJSONDb.js"],"names":["get","wells","getWellsFromJSONDb","GET_WELL_PLANS_FROM_JSONDB_REQUESTED","GET_WELL_PLANS_FROM_JSONDB_RECEIVED","GET_WELL_PLANS_FROM_JSONDB_FAILED","selectedWell","dispatch","getState","type","result","wellList","getWellsFromJSONDbReducer","response","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWellWell","well","operator","console","log","grid","payload","error"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,oCAAT,EACEC,mCADF,EAEEC,iCAFF,QAE0C,SAF1C;AAIA,gBAAgBC,YAAD,IAAkB;AAC/B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAGnCD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,UAAIO,MAAM,GAAG,IAAb;AACA,YAAMC,QAAQ,GAAGH,QAAQ,GAAGI,yBAAX,CAAqCC,QAAtD;AACA,YAAMC,4BAA4B,GAAGR,YAAY,CAACS,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,gBAAgB,GAAGN,4BAA4B,CAAC,CAAD,CAArD;;AACA,WAAK,IAAIO,IAAT,IAAiBV,QAAjB,EAA2B;AACzB,YAAIA,QAAQ,CAACU,IAAD,CAAR,CAAeC,QAAf,KAA4BH,oBAA5B,IAAoDR,QAAQ,CAACU,IAAD,CAAR,CAAeA,IAAf,KAAwBD,gBAAhF,EAAkG;AAChGG,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACU,IAAD,CAAR,CAAeI,IAA3B;AACAf,UAAAA,MAAM,GAAG,CAAC,GAAGC,QAAQ,CAACU,IAAD,CAAR,CAAeI,IAAnB,CAAT;AACA,iBAAOf,MAAP;AACD;AACF;;AACDH,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEL,mCADC;AAEPsB,QAAAA,OAAO,EAAEhB;AAFF,OAAD,CAAR;AAID,KAjBD,CAiBE,OAAOiB,KAAP,EAAc;AAEdpB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEJ,iCADC;AAEPqB,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GA9BD;AA+BD,CAhCD,E,CAmCI;AACI;AACJ","sourcesContent":["import { get } from \"lodash\"\nimport wells from \"../APIs/wells\"\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\"\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n  GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n  GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"./types\"\n\nexport default (selectedWell) => {\n  return async (dispatch, getState) => {\n\n    \n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n    })\n    try {\n      let result = null\n      const wellList = getState().getWellsFromJSONDbReducer.response\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n      const selectedWellOperator = selectedWellConvertedToArray[0]\n      const selectedWellWell = selectedWellConvertedToArray[3]\n      for (let well in wellList) {\n        if (wellList[well].operator === selectedWellOperator && wellList[well].well === selectedWellWell) {\n          console.log(wellList[well].grid)\n          result = [...wellList[well].grid]\n          return result\n        }\n      }\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      }) \n    } catch (error) {\n      \n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n} \n\n\n    // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n        // if (getState.getWellsFromJSONDbReducer.response[well].operator )\n    // }\n\n"]},"metadata":{},"sourceType":"module"}