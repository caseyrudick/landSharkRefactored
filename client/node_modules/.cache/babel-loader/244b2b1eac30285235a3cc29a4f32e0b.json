{"ast":null,"code":"import React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport saveWellPlansToJSONDb from \"../ActionCreators/saveWellPlansToJSONDb\";\n\nconst LeaseLines = () => {\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n  const initialGrid = [[{\n    value: \"\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Northing\",\n    readOnly: true\n  }, {\n    value: \"Easting\",\n    readOnly: true\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [grid, setGrid] = setState(initialGrid);\n\n  const renderWellHeader = () => {};\n\n  return \"Lease Lines\";\n};\n\n_c = LeaseLines;\n\nconst mapStateToProps = () => {\n  return null;\n};\n\nexport default connect(mapStateToProps)(LeaseLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaseLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/LeaseLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveWellPlansToJSONDb","LeaseLines","initialGrid","value","readOnly","width","grid","setGrid","setState","renderWellHeader","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveWellPlansToJSONDb from \"../ActionCreators/saveWellPlansToJSONDb\"\n\nconst LeaseLines = () => {\n\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialGrid = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true}, {value:\"Easting\", readOnly: true}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [grid, setGrid] = setState(initialGrid)\n\n  const renderWellHeader = () => {\n\n  }\n\n  return (\n    \"Lease Lines\"\n  )\n}\n\nconst mapStateToProps = () => {\n  return null\n}\n\nexport default connect(mapStateToProps)(LeaseLines)"]},"metadata":{},"sourceType":"module"}