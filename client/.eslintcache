[{"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PVA.js":"1","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postWellInfoToJSONDb.js":"2","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/index.js":"3","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveWellInfoToReduxStoreReducer.js":"4","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/savePlansToReduxStoreReducer.js":"5","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsFromJSONDbReducer.js":"6","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveActiveWellToReduxStoreReducer.js":"7","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellPlansFromJSONDbReducer.js":"8","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveWellInfoToReduxStore.js":"9","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postPlansToJSONDb.js":"10","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/types.js":"11","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/EW.js":"12","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/TVD.js":"13","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/RF.js":"14","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js":"15","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getLeaseLinesFromJSONDbReducer.js":"16","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js":"17","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/App.js":"18","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js":"19","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postWellInfoToJSONDbReducer.js":"20","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellPlansFromJSONDb.js":"21","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveLeaseLinesToReduxStore.js":"22","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/NS.js":"23","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/DLS.js":"24","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/DLC.js":"25","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsFromJSONDb.js":"26","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsWithLeaseLinesFromJSONDbReducer.js":"27","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/index.js":"28","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postLeaseLinesToJSONDbReducer.js":"29","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsWithLeaseLinesFromJSONDb.js":"30","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Surveys.js":"31","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postPlansToJSONDbReducer.js":"32","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveLeaseLinesToReduxStoreReducer.js":"33","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/SECT.js":"34","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getLeaseLinesFromJSONDb.js":"35","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveSurveysToReduxStoreReducer.js":"36","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postSurveysToJSONDbReducer.js":"37","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postSurveysToJSONDb.js":"38","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsWithSurveysFromJSONDbReducer.js":"39","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsWithSurveysFromJSONDb.js":"40","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingSurveys.js":"41","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getSurveysFromJSONDbReducer.js":"42","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getSurveysFromJSONDb.js":"43","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js":"44","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPolyLines.js":"45","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingLeaseLines.js":"46","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postHardLinesToJSONDbReducer.js":"47","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsWithHardLinesFromJSONDbReducer.js":"48","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PolyLines.js":"49","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/LeaseLines.js":"50","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getHardLinesFromJSONDb.js":"51","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingHardLines.js":"52","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/HardLines.js":"53","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsWithHardLinesFromJSONDb.js":"54","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveHardLinesToReduxStoreReducer.js":"55","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveSurveysToReduxStore.js":"56","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postLeaseLinesToJSONDb.js":"57","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/APIs/wells.js":"58","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveHardLinesToReduxStore.js":"59","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveActiveWellToReduxStore.js":"60","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/savePlansToReduxStore.js":"61","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postHardLinesToJSONDb.js":"62","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getHardLinesFromJSONDbReducer.js":"63","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/SignIn.js":"64","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/SignInHome.js":"65","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/UserPool.js":"66","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/SignUp.js":"67","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/UserVerification/userNeedsToCreateAccount.js":"68","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/userNeedsToCreateAccountReducer.js":"69","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/History.js":"70"},{"size":5197,"mtime":1608305877761,"results":"71","hashOfConfig":"72"},{"size":831,"mtime":1608086866799,"results":"73","hashOfConfig":"72"},{"size":2536,"mtime":1609991700219,"results":"74","hashOfConfig":"72"},{"size":705,"mtime":1607563251547,"results":"75","hashOfConfig":"72"},{"size":623,"mtime":1607523677659,"results":"76","hashOfConfig":"72"},{"size":626,"mtime":1607538953582,"results":"77","hashOfConfig":"72"},{"size":664,"mtime":1607633245513,"results":"78","hashOfConfig":"72"},{"size":637,"mtime":1607636656362,"results":"79","hashOfConfig":"72"},{"size":622,"mtime":1607563740710,"results":"80","hashOfConfig":"72"},{"size":838,"mtime":1607703856457,"results":"81","hashOfConfig":"72"},{"size":5858,"mtime":1609991783273,"results":"82","hashOfConfig":"72"},{"size":905,"mtime":1608144934403,"results":"83","hashOfConfig":"72"},{"size":827,"mtime":1608138150131,"results":"84","hashOfConfig":"72"},{"size":196,"mtime":1608143803818,"results":"85","hashOfConfig":"72"},{"size":5815,"mtime":1608262317225,"results":"86","hashOfConfig":"72"},{"size":638,"mtime":1608090093045,"results":"87","hashOfConfig":"72"},{"size":6450,"mtime":1609989575793,"results":"88","hashOfConfig":"72"},{"size":708,"mtime":1610045955978,"results":"89","hashOfConfig":"72"},{"size":8948,"mtime":1607698076754,"results":"90","hashOfConfig":"72"},{"size":615,"mtime":1607486694229,"results":"91","hashOfConfig":"72"},{"size":1350,"mtime":1607882728534,"results":"92","hashOfConfig":"72"},{"size":549,"mtime":1607702894653,"results":"93","hashOfConfig":"72"},{"size":867,"mtime":1608144866509,"results":"94","hashOfConfig":"72"},{"size":478,"mtime":1607525889497,"results":"95","hashOfConfig":"72"},{"size":462,"mtime":1608143792958,"results":"96","hashOfConfig":"72"},{"size":555,"mtime":1608132032248,"results":"97","hashOfConfig":"72"},{"size":1144,"mtime":1608216198423,"results":"98","hashOfConfig":"72"},{"size":867,"mtime":1610045436125,"results":"99","hashOfConfig":"72"},{"size":632,"mtime":1607877919616,"results":"100","hashOfConfig":"72"},{"size":1354,"mtime":1608216060566,"results":"101","hashOfConfig":"72"},{"size":9228,"mtime":1608219411373,"results":"102","hashOfConfig":"72"},{"size":584,"mtime":1607528546735,"results":"103","hashOfConfig":"72"},{"size":694,"mtime":1607659948536,"results":"104","hashOfConfig":"72"},{"size":1222,"mtime":1607526475495,"results":"105","hashOfConfig":"72"},{"size":1119,"mtime":1608260264135,"results":"106","hashOfConfig":"72"},{"size":640,"mtime":1608216797800,"results":"107","hashOfConfig":"72"},{"size":611,"mtime":1608218987483,"results":"108","hashOfConfig":"72"},{"size":593,"mtime":1608219456070,"results":"109","hashOfConfig":"72"},{"size":682,"mtime":1608220509005,"results":"110","hashOfConfig":"72"},{"size":653,"mtime":1608222078292,"results":"111","hashOfConfig":"72"},{"size":2226,"mtime":1608223787867,"results":"112","hashOfConfig":"72"},{"size":619,"mtime":1608221538512,"results":"113","hashOfConfig":"72"},{"size":1038,"mtime":1608223853004,"results":"114","hashOfConfig":"72"},{"size":5295,"mtime":1608236762260,"results":"115","hashOfConfig":"72"},{"size":1267,"mtime":1608241471750,"results":"116","hashOfConfig":"72"},{"size":1689,"mtime":1608242709255,"results":"117","hashOfConfig":"72"},{"size":666,"mtime":1608239736034,"results":"118","hashOfConfig":"72"},{"size":663,"mtime":1608240154986,"results":"119","hashOfConfig":"72"},{"size":6530,"mtime":1608242687828,"results":"120","hashOfConfig":"72"},{"size":4312,"mtime":1608242076616,"results":"121","hashOfConfig":"72"},{"size":1028,"mtime":1608260229827,"results":"122","hashOfConfig":"72"},{"size":1673,"mtime":1608241692134,"results":"123","hashOfConfig":"72"},{"size":4275,"mtime":1608264477989,"results":"124","hashOfConfig":"72"},{"size":634,"mtime":1608243294731,"results":"125","hashOfConfig":"72"},{"size":689,"mtime":1608239459262,"results":"126","hashOfConfig":"72"},{"size":560,"mtime":1608216616484,"results":"127","hashOfConfig":"72"},{"size":652,"mtime":1607878537714,"results":"128","hashOfConfig":"72"},{"size":94,"mtime":1606780246113,"results":"129","hashOfConfig":"72"},{"size":543,"mtime":1608239273804,"results":"130","hashOfConfig":"72"},{"size":578,"mtime":1607633701228,"results":"131","hashOfConfig":"72"},{"size":523,"mtime":1607616565129,"results":"132","hashOfConfig":"72"},{"size":645,"mtime":1608239628710,"results":"133","hashOfConfig":"72"},{"size":632,"mtime":1608240474635,"results":"134","hashOfConfig":"72"},{"size":3200,"mtime":1610046321695,"results":"135","hashOfConfig":"72"},{"size":855,"mtime":1610045453145,"results":"136","hashOfConfig":"72"},{"size":414,"mtime":1609967332382,"results":"137","hashOfConfig":"72"},{"size":3107,"mtime":1609991921242,"results":"138","hashOfConfig":"72"},{"size":414,"mtime":1609991775897,"results":"139","hashOfConfig":"72"},{"size":527,"mtime":1609991622795,"results":"140","hashOfConfig":"72"},{"size":87,"mtime":1610045440531,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"145"},"5r6a9f",{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"145"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"156"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"149"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"145"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"156"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"149"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"149"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"149"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"145"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"145"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"156"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"149"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"163"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"163"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"145"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"149"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"163"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"145"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"145"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"149"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"210"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"156"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"145"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"163"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"210"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"156"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"145"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"224"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"149"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"156"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"163"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"149"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"156"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"210"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"156"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"145"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"145"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"299"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"163"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"145"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"145"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"163"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"214"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"156"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"320"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"149"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"145"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"149"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"224"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"156"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"338","messages":"339","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"149"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"149"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PVA.js",["352"],"import React from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\"\nimport _ from \"lodash\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n\n\nconst PVA = ({saveSurveysToReduxStoreReducer, saveHardLinesToReduxStoreReducer, savePlansToReduxStoreReducer, saveLeaseLinesToReduxStoreReducer, activeWell}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        // console.log(\"easting\" + result)\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1)\n        // console.log(\"easting\" + result)\n        return result\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][1].value).slice(1)\n        // console.log(\"northing:\" + result)\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][5].value).slice(1)\n        // console.log(\"northing\" + result)\n        return result\n      }\n    }\n  }\n\n  const createTVDCoordiantes = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][4].value * -1 ).slice(1)\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][7].value).slice(1)\n    }\n  }\n  \n\nconsole.log(saveLeaseLinesToReduxStoreReducer.response.grid)\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createTVDCoordiantes(savePlansToReduxStoreReducer.response),\n          y: createSectCoordinates(savePlansToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createTVDCoordiantes(saveSurveysToReduxStoreReducer.response),\n          y: createSectCoordinates(saveSurveysToReduxStoreReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return (\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n            y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(saveSurveysToReduxStoreReducer.response),\n            y: createNorthingCoordinates(saveSurveysToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Lease Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n    )\n  }\n\n  return (\n    <Container>\n      {renderSectionView()}\n      {renderPlanView()}\n    </Container>\n  )\n\n}\n\nconst mapStateToProps = ({saveHardLinesToReduxStoreReducer, saveSurveysToReduxStoreReducer, savePlansToReduxStoreReducer, saveLeaseLinesToReduxStoreReducer, activeWell}) => {\n  return {\n    savePlansToReduxStoreReducer, \n    saveLeaseLinesToReduxStoreReducer, \n    activeWell,\n    saveHardLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, saveLeaseLinesToReduxStore, saveWellInfoToReduxStore })(PVA)",["353","354"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postWellInfoToJSONDb.js",["355","356"],"import wells from \"../APIs/wells\"\n\nimport { POST_WELLINFO_TO_JSONDB_REQUESTED,\n  POST_WELLINFO_TO_JSONDB_RECEIVED,\n  POST_WELLINFO_TO_JSONDB_FAILED } from './types';\n  \n  export default (wellInfo) => {\n\n    return async (dispatch, getState) => {\n      // let wellList = getState().getWellsFromJSONDbReducer.response\n      // console.log('should get wellList next')\n      // console.log(wellList)\n      const response = await wells.post(\"wells\", wellInfo)\n      dispatch({\n        type: POST_WELLINFO_TO_JSONDB_REQUESTED,\n      });\n      try {\n        dispatch({\n          type: POST_WELLINFO_TO_JSONDB_RECEIVED,\n          payload: wellInfo,\n        });\n      } catch (error) {\n        console.log(error)\n        dispatch({\n          type: POST_WELLINFO_TO_JSONDB_FAILED,\n          payload: error,\n        });\n      }\n    };\n  };\n  ",["357","358"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/index.js",[],["359","360"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveWellInfoToReduxStoreReducer.js",["361"],"import { SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\n  const INITIAL_STATE = {\n    response: {}, \n    status: \"\"\n  };\n\n  export default (state = INITIAL_STATE, { type, payload }) => {\n    \n    switch (type) {\n      case SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED:\n        return { ...state, status: 'waiting' };\n      case SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED:\n        return { ...state, response: payload, status: 'received' };\n      case SAVE_WELL_INFO_TO_REDUX_STORE_FAILED:\n        return { ...state, response: payload, status: 'failed' };\n      default:\n        return state;\n    }\n  };\n  ",["362","363"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/savePlansToReduxStoreReducer.js",["364"],"import { SAVE_PLANS_TO_REDUX_STORE_REQUESTED,\n  SAVE_PLANS_TO_REDUX_STORE_RECEIVED,\n  SAVE_PLANS_TO_REDUX_STORE_FAILED\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state=INITIAL_STATE, {type, payload}) =>{\n  switch (type) {\n    case SAVE_PLANS_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_PLANS_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_PLANS_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsFromJSONDbReducer.js",["365"],"import { GET_WELLS_FROM_JSON_REQUESTED,\n  GET_WELLS_FROM_JSON_RECEIVED,\n  GET_WELLS_FROM_JSON_FAILED } from \"../ActionCreators/types\"\n\n  const INITIAL_STATE = {\n    response: {},\n    status: \"\"\n  }\n\n  export default (state = INITIAL_STATE, {type, payload}) => {\n    switch (type) {\n      case GET_WELLS_FROM_JSON_REQUESTED:\n        return {...state, status: \"waiting\"}\n      case GET_WELLS_FROM_JSON_RECEIVED:\n        return {...state, response: payload, status: \"received\"}    \n      case GET_WELLS_FROM_JSON_FAILED:\n        return {...state, response: payload, status: \"failed\"}\n      default:\n        return state\n    }\n  }",["366","367"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveActiveWellToReduxStoreReducer.js",["368"],"import { SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED\n } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellPlansFromJSONDbReducer.js",["369"],"import { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n  GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n  GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"../ActionCreators/types\"\n\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  \n  switch (type) {\n    case GET_WELL_PLANS_FROM_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_WELL_PLANS_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_WELL_PLANS_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveWellInfoToReduxStore.js",["370"],"import { SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED,\n  SAVE_WELL_INFO_TO_REDUX_STORE_FAILED } from './types';\n  \n  export default (wellInfo) => {\n    return async (dispatch, getState) => {\n      dispatch({\n        type: SAVE_WELL_INFO_TO_REDUX_STORE_REQUESTED,\n      });\n      try {\n        dispatch({\n          type: SAVE_WELL_INFO_TO_REDUX_STORE_RECEIVED,\n          payload: wellInfo,\n        });\n      } catch (error) {\n        console.log(error)\n        dispatch({\n          type: SAVE_WELL_INFO_TO_REDUX_STORE_FAILED,\n          payload: error,\n        });\n      }\n    };\n  };\n  ","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postPlansToJSONDb.js",["371"],"import wells from \"../APIs/wells\"\nimport { \n  POST_PLANS_TO_JSON_REQUESTED,\n  POST_PLANS_TO_JSON_RECEIVED,\n  POST_PLANS_TO_JSON_FAILED \n} from \"./types\"\nimport moment from \"moment\"\n\nexport default (operator, rig ,well, county, uSstate, grid, vsDirection) => {\n  return async (dispatch, getState) => {\n\n    dispatch({\n      type: POST_PLANS_TO_JSON_REQUESTED\n    })\n    try {\n      const wellData = {\n        operator,\n        rig,\n        well,\n        county,\n        uSstate,\n        vsDirection,\n        grid, \n        date: moment().format()\n      }\n      const response = await wells.post(`wells`, wellData)\n      dispatch({\n        type: POST_PLANS_TO_JSON_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n\n      dispatch({\n        type: POST_PLANS_TO_JSON_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/types.js",[],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/EW.js",["372"],"import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior) => {\n  const converter = (Math.PI)/180;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`EW calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`EW calculatedRF ${calculatedRF}`)\n\n  const calculatedEastingCurrent = (calculatedEastingPrior + calculatedRF *(Math.sin(inclinationPrior*converter)* Math.sin(azimuthPrior * converter) + Math.sin(inclinationCurrent * converter)*Math.sin(azimuthCurrent*converter)));\n  console.log(`Easting: ${calculatedEastingCurrent}`)\n  return (\n    parseFloat(calculatedEastingCurrent.toFixed(2))\n    // calculatedEastingCurrent\n  )\n};\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/TVD.js",["373"],"import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior) => {\n  const converter = (Math.PI)/180\n  console.log(`converter: ${converter}`)\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`calculatedDLC: ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`calculatedRF: ${calculatedRF}`)\n\n  const calculatedTVDCurrent = calculatedTVDPrior + calculatedRF * (Math.cos(inclinationPrior*converter) + Math.cos(inclinationCurrent*converter));\n  console.log(`calculatedTVDCurrent: ${calculatedTVDCurrent}`)\n\n  return (\n    parseFloat(calculatedTVDCurrent.toFixed(2))\n  )\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/RF.js",["374"],"export default (measuredDepthPrior, measuredDepthCurrent, calculatedDLC) => {\n  return (\n    Math.tan(calculatedDLC/2)\n    *\n    ((measuredDepthCurrent - measuredDepthPrior) / calculatedDLC)\n  )\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js",["375","376","377","378","379","380","381","382","383"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({savePlansToReduxStoreReducer, getHardLinesFromJSONDbReducer, saveSurveysToReduxStoreReducer, getSurveysFromJSONDbReducer, getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1)\n        return result\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n          return data.map((row, index) => data[index][1].value).slice(1)\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n          return data.map((row, index) => data[index][5].value).slice(1)\n      }\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n        return data.map((row, index) => {\n          return parseInt(data[index][4].value) * -1\n            }).slice(1)\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => {\n        return parseInt(data[index][7].value)\n          }).slice(1)\n    }\n  }\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createSectCoordinates(getWellPlansFromJSONDbReducer.response),\n          y: createTVDCoordinates(getWellPlansFromJSONDbReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createSectCoordinates(getSurveysFromJSONDbReducer.response),\n          y: createTVDCoordinates(getSurveysFromJSONDbReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n\n  const renderPlanView = () => {\n    return (\n      // <Container>\n      //   <Col xs={2}>\n      //     <Form className=\"mt-7\">\n      //       <Form.Group controlId=\"formBasicEmail\">\n      //         <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n      //       </Form.Group>\n      //     </Form>\n      //   </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n            y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(getSurveysFromJSONDbReducer.response),\n            y: createNorthingCoordinates(getSurveysFromJSONDbReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response, true),\n            y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(getHardLinesFromJSONDbReducer.response, true),\n            y: createNorthingCoordinates(getHardLinesFromJSONDbReducer.response, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Hard Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n      // </Container>\n    )\n  }\n\n  \n\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.operator} - {activeWell.rig} - {activeWell.well}</h3>\n        {renderSectionView()}\n        {renderPlanView()} \n      </Container>\n    )\n      \n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    \n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({savePlansToReduxStoreReducer, getHardLinesFromJSONDbReducer, saveSurveysToReduxStoreReducer,getSurveysFromJSONDbReducer, getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer, \n    activeWell: activeWell.response, \n    getLeaseLinesFromJSONDbReducer,\n    getSurveysFromJSONDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromJSONDbReducer,\n    savePlansToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getLeaseLinesFromJSONDbReducer.js",["384"],"import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_LEASE_LINES_FROM_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_LEASE_LINES_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_LEASE_LINES_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js",["385","386"],"// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n// import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\"\nimport getLeaseLinesFromJSONDb from \"../ActionCreators/getLeaseLinesFromJSONDb\"\nimport getWellsWithLeaseLinesFromJSONDb from \"../ActionCreators/getWellsWithLeaseLinesFromJSONDb\"\nimport getSurveysFromJSONDb from \"../ActionCreators/getSurveysFromJSONDb\"\nimport getWellsWithSurveysFromJSONDb from \"../ActionCreators/getWellsWithSurveysFromJSONDb\"\nimport getWellsWithHardLinesFromJSONDb from \"../ActionCreators/getWellsWithHardLinesFromJSONDb\"\nimport getHardLinesFromJSONDb from \"../ActionCreators/getHardLinesFromJSONDb\"\n\n\nconst Home = ({ getHardLinesFromJSONDb, getWellsWithHardLinesFromJSONDb ,getWellsWithSurveysFromJSONDb, getSurveysFromJSONDb, getWellsWithLeaseLinesFromJSONDb ,getWellPlansFromJSONDb, saveActiveWellToReduxStore, postWellInfoToJSONDb, saveWellInfoToReduxStore, saveWellInfoToReduxStoreReducer, getWellsFromJSONDb, getWellsFromJSONDbReducer, getLeaseLinesFromJSONDb}) => {\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n\n  useEffect(() => {\n    getWellsFromJSONDb()\n    getWellsWithLeaseLinesFromJSONDb()\n    getWellsWithSurveysFromJSONDb()\n    getWellsWithHardLinesFromJSONDb()\n  }, []);\n\n\n  const renderWellNames = () => {\n    if (getWellsFromJSONDbReducer.status === \"received\") {\n      let wells = getWellsFromJSONDbReducer.response\n      return (\n        <Dropdown.Menu>\n          {wells.map(well => {\n            return (\n              <Dropdown.Item href=\"\" key={`${well.operator}${well.well}`} onClick={()=> {\n                setActiveWell(`${well.operator} - ${well.rig} - ${well.well}`)\n                saveActiveWellToReduxStore(well)\n              } }>\n                {well.operator} - {well.rig} - {well.well}\n              </Dropdown.Item>\n            )\n          })}\n        </Dropdown.Menu>\n      )\n    }\n    else {\n      return \"Data loading\"\n    }\n  }\n\n  const createNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false } onClick={()=>handleNewWellSubmit()}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      uSstate,\n      northing,\n      easting\n    }\n    // postWellInfoToJSONDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n    getWellsFromJSONDb()\n    saveActiveWellToReduxStore(wellInfo)\n  }\n\n  const handleFetchData = () => {\n    getWellPlansFromJSONDb(activeWell)\n    getSurveysFromJSONDb(activeWell)\n    // setTimeout(getWellPlansFromJSONDb, 500, activeWell);\n    setTimeout(getLeaseLinesFromJSONDb, 1000, activeWell);\n    // setTimeout(getSurveysFromJSONDb, 1500, activeWell)\n    getHardLinesFromJSONDb(activeWell)\n  //   // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   // setTimeout(getOffsets(selectedWell), 2500);\n  }\n\n\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select Existing Well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            {activeWell ? activeWell : `Select Well:`}\n          </Dropdown.Toggle>\n          {renderWellNames()}\n        </Dropdown>\n        <Button className=\"mt-4\" variant=\"success\" disabled={ activeWell === \"None\" ? true : false } onClick={handleFetchData}>Fetch well data</Button>\n      </Col>\n    )\n  }\n\n\n\n  \n  return (\n      <Container>\n        <Row>\n          {createNewWell()}\n          {selectExistingWell()}\n        </Row>\n      </Container>\n    )\n//  }\n}\n\nconst mapStateToProps = ({ getHardLinesFromJSONDb, saveActiveWellToReduxStoreReducer ,saveWellInfoToReduxStoreReducer, postWellInfoToJSONDbReducer, getWellsFromJSONDbReducer }) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    getWellsFromJSONDbReducer,\n  };\n};\n\nexport default connect(mapStateToProps, {getHardLinesFromJSONDb, getWellsWithHardLinesFromJSONDb, getWellsWithSurveysFromJSONDb, getSurveysFromJSONDb, getWellsWithLeaseLinesFromJSONDb ,saveActiveWellToReduxStore, getWellPlansFromJSONDb, saveWellInfoToReduxStore, postWellInfoToJSONDb, getWellsFromJSONDb, getLeaseLinesFromJSONDb })(Home);\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/App.js",["387","388","389","390","391","392"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js",["393","394","395","396","397"],"import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\n\n\n\nconst Plans = ({savePlansToReduxStore, saveWellInfoToReduxStoreReducer,savePlansToReduxStoreReducer, postPlansToJSONDb}) => {\n  \n  const [editGrid, setEditGrid] = useState(true)\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVSDirection] = useState(0)\n  \n  const initialGrid = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n\n  const [grid, setGrid] = useState(initialGrid);\n\n  useEffect(()=>{\n    if (input) {\n      //performcalcs doesn't happen bc we're copying from plans. Currently not needed\n    }\n  },[input])\n\n  useEffect(()=> {\n    handleAddRows(1)\n  }, [])\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n\n        grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n        grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n        grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n        grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n        grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n        setGrid(grid)\n        setInput(false)\n\n      }\n    })\n  }\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      gridNew[row][col] = {...grid[row][col], value };\n    });\n    setGrid(gridNew)\n    setInput(true)\n  };\n\n  const handleVSDirection = (val) => {\n    setVSDirection(val)\n    setInput(true)\n  }\n\n  const handleSubmit = () => {\n    const {well, operator, rig, county, uSstate, northing, easting} = saveWellInfoToReduxStoreReducer.response\n    postPlansToJSONDb(operator, rig ,well, county, uSstate, grid, vsDirection, northing, easting)\n    savePlansToReduxStore(grid)\n\n  }\n\n  const handleRemoveRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createRows = (numberOfRowsToAdd) => {\n    let createdRows = []\n    for (let i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push(\n        [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n      )\n    }\n    return createdRows\n  };\n\n  const handleAddRows = (rows) => {\n    const newGrid = [...grid, ...createRows(rows)]\n    setGrid(newGrid)\n  }\n\n  const renderSetRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n          <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n            Add 25 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 10 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 5 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n            Add a row\n          </Button>\n          <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n            Remove a row\n          </Button>\n        </Col>\n        <Col xs={2}>\n          \n        </Col>\n      </Row>\n    )\n  }\n\n  const renderSubmitButton = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"info\" onClick={()=>handleSubmit()}>\n            Submit Data\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {renderWellData()}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n        </Col>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" placeholder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderSetRowsButtons()}\n      {renderSubmitButton()}\n      <Row>\n        <Col xs={10}>\n          {/* {renderAlert()} */}\n        </Col>\n        <Col xs={2}>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, postPlansToJSONDb})(Plans)\n\n\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postWellInfoToJSONDbReducer.js",["398"],"import { POST_WELLINFO_TO_JSONDB_REQUESTED,\n  POST_WELLINFO_TO_JSONDB_RECEIVED,\n  POST_WELLINFO_TO_JSONDB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_WELLINFO_TO_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_WELLINFO_TO_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_WELLINFO_TO_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellPlansFromJSONDb.js",["399","400","401","402","403","404"],"import { get } from \"lodash\"\nimport wells from \"../APIs/wells\"\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\"\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n  GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n  GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"./types\"\n\nexport default (selectedWell) => {\n  return async (dispatch, getState) => {\n    \n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n    })\n    try {\n      let result = null;\n      const wellList = getState().getWellsFromJSONDbReducer.response\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n      const selectedWellOperator = selectedWellConvertedToArray[0]\n      const selectedWell_Well = selectedWellConvertedToArray[2]\n      for (let well in wellList) {\n        if (wellList[well].operator == selectedWellOperator && wellList[well].well == selectedWell_Well) {\n          result = [...wellList[well].grid]\n        }\n      }\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      }) \n    } catch (error) {\n      \n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n} \n\n\n    // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n        // if (getState.getWellsFromJSONDbReducer.response[well].operator )\n    // }\n\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveLeaseLinesToReduxStore.js",["405"],"import { SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED } from \"./types\"\n\nexport default (leaseLines) => {\n  return async dispatch => {\n    dispatch({\n      type: SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED\n    })\n    try {\n      dispatch({\n        type: SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED,\n        payload: leaseLines\n      })\n    } catch(error) {\n      dispatch({\n        type: SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n",["406","407"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/NS.js",["408"],"import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior) => {\n  const converter = (Math.PI)/180;\n  const converter2 = 0.00000001;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`NS calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`NS calculatedRF ${calculatedRF}`)\n\n  const calculatedNorthingCurrent = (calculatedNorthingPrior+converter2) + calculatedRF * (Math.sin(inclinationPrior*converter)*Math.cos(azimuthPrior*converter)+ Math.sin(inclinationCurrent * converter) * Math.cos(azimuthCurrent*converter));\n\n  return (\n    parseFloat(calculatedNorthingCurrent.toFixed(2))\n\n  )\n} ",["409","410"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/DLS.js",["411"],"import DLC from \"./DLC\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior = 1, inclinationPrior = 2, azimuthPrior = 3 ) => {\n  const converter = (Math.PI)/180;\n\n  // calculate DLC\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n\n  const calculatedDLS = ((calculatedDLC/converter)*100/(measuredDepthCurrent-measuredDepthPrior))\n\n  return (\n    parseFloat(calculatedDLS.toFixed(2))\n  )\n\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/DLC.js",["412"],"export default (inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent) => {\n  const converter = Math.PI/180;\n  const converter2 = 0.00000001;\n\n  return (\n    Math.acos(\n      (\n        Math.cos(inclinationPrior*converter)*Math.cos(inclinationCurrent*converter)\n      )\n      +\n      (\n        Math.sin(inclinationPrior*converter)*Math.sin(inclinationCurrent*converter)*Math.cos((azimuthCurrent-azimuthPrior)*converter-converter2)\n      )\n    )\n  )\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsFromJSONDb.js",["413"],"import wells from \"../APIs/wells\"\n\nimport { GET_WELLS_FROM_JSON_REQUESTED,\n  GET_WELLS_FROM_JSON_RECEIVED,\n  GET_WELLS_FROM_JSON_FAILED } from \"./types\"\n\n\nexport default () => {\n  return async dispatch => {\n    dispatch({\n      type: GET_WELLS_FROM_JSON_REQUESTED\n    })\n    try {\n      const response = await wells.get(\"/wells\")\n      dispatch({\n        type: GET_WELLS_FROM_JSON_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_WELLS_FROM_JSON_FAILED,\n        payload: error\n      })\n    }\n  }\n}",["414","415"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsWithLeaseLinesFromJSONDbReducer.js",["416"],"import { GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED,\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\n// export default (state = INITIAL_STATE, {type, payload}) => {\n//   switch (type) {\n//     case GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED:\n//       return {...state, status:\"waiting\"}\n//     case GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED:\n//       return {...state, response: payload, status: \"received\"}\n//     case GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED:\n//       return {...state, response: payload, status: \"failed\"}\n//     default:\n//       return state;\n//   }\n// }\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED:\n      return {...state, status:\"waiting\"}\n    case GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/index.js",["417","418","419"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postLeaseLinesToJSONDbReducer.js",["420"],"import   {POST_LEASE_LINES_TO_JSONDB_REQUESTED,\nPOST_LEASE_LINES_TO_JSONDB_RECEIVED, \nPOST_LEASE_LINES_TO_JSONDB_FAILED} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {}, \n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_LEASE_LINES_TO_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_LEASE_LINES_TO_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_LEASE_LINES_TO_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n} ","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsWithLeaseLinesFromJSONDb.js",["421"],"import { \n  GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED\n} from \"./types\"\n\nimport wells from \"../APIs/wells\"\n\n\nexport default () => {\n  return async dispatch => {\n    dispatch({\n      type: GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED\n    })\n    try {\n      const response = await wells.get(\"/LeaseLines\")\n      dispatch({\n        type: GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n\n// import { \n//   GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED,\n//   GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED,\n//   GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED\n// } from \"./types\"\n\n// import wells from \"../APIs/wells\"\n\n\n// export default () => {\n//   return async dispatch => {\n//     dispatch({\n//       type: GET_LEASE_LINES_LIST_FROM_JSONDB_REQUESTED\n//     })\n//     try {\n//       const response = await wells.get(\"/LeaseLines\")\n//       dispatch({\n//         type: GET_LEASE_LINES_LIST_FROM_JSONDB_RECEIVED,\n//         payload: response\n//       })\n//     } catch (error) {\n//       dispatch({\n//         type: GET_LEASE_LINES_LIST_FROM_JSONDB_FAILED,\n//         payload: error\n//       })\n//     }\n//   }\n// }","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Surveys.js",["422","423","424","425","426"],"import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n//other libs\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n// actionCreators\n\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\n//helper functions\nimport calculateTVD from \"../HelperFunctions/Calculations/TVD\"\nimport calculateNS from \"../HelperFunctions/Calculations/NS\"\nimport calculateEW from \"../HelperFunctions/Calculations/EW\"\nimport calculateSECT from \"../HelperFunctions/Calculations/SECT\"\nimport calculateDLS from \"../HelperFunctions/Calculations/DLS\"\nimport postPlansToJSONDb from \"../ActionCreators/postPlansToJSONDb\";\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\nimport postSurveysToJSONDb from \"../ActionCreators/postSurveysToJSONDb\"\n\nconst Surveys = ({ postSurveysToJSONDb, activeWell, saveSurveysToReduxStore ,savePlansToReduxStore, saveWellInfoToReduxStoreReducer,savePlansToReduxStoreReducer, postPlansToJSONDb}) => {\n  \n  const [editGrid, setEditGrid] = useState(true)\n  const [input, setInput] = useState(false)\n  const [vsDirection, setVSDirection] = useState(0)\n  \n  const initialGrid = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}, {value:\"VS\", readOnly: true, width: '7rem'},{value:\"DLS\", readOnly: true, width: '7rem'}],\n    \n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    \n    // [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    // [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    // [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n    // [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n  ];\n\n  const [grid, setGrid] = useState(initialGrid);\n\n  useEffect(()=>{\n    if (input) {\n      performCalculations()\n    }\n  },[input])\n\n  useEffect(()=> {\n    handleAddRows(1)\n  }, [])\n\n  const performCalculations = () => {\n    grid.map((row, index) => {\n      if (index === 0 || index === 1) {\n        // nothing because we don't want to run calcs on the header array\n      } else {\n        // for every array within grid array, want to iterate over and change the values of TVD, NS, EW, SECT, & DLS\n        // note val after idx is column \n        // TVD order of args : (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior)\n        // NS order of args: (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n        const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n        const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n        const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n        const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n        const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n\n        grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n        console.log(calculatedTVD)\n        grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n        grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n        grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n        grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n        setGrid(grid)\n        setInput(false)\n\n      }\n    })\n  }\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // add the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      gridNew[row][col] = {...grid[row][col], value };\n    });\n    setGrid(gridNew)\n    setInput(true)\n  };\n\n  const handleVSDirection = (val) => {\n    setVSDirection(val)\n    setInput(true)\n  }\n\n  const handleSubmit = () => {\n    const { well, operator, rig, county, uSstate, northing, easting } = activeWell.response\n    const wellInfo = {operator, well, rig, county, uSstate, northing, easting, grid}\n    saveSurveysToReduxStore(grid)\n    postSurveysToJSONDb(wellInfo)\n\n  }\n\n  const handleRemoveRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createRows = (numberOfRowsToAdd) => {\n    let createdRows = []\n    for (let i = 0; i < numberOfRowsToAdd; i++) {\n      createdRows.push(\n        [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n      )\n    }\n    return createdRows\n  };\n\n  const handleAddRows = (rows) => {\n    const newGrid = [...grid, ...createRows(rows)]\n    setGrid(newGrid)\n  }\n\n  const renderSetRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n          <Button variant=\"success\" value={25} onClick={(event)=> handleAddRows(event.target.value)}>\n            Add 25 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 10 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n            Add 5 rows\n          </Button>\n          <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n            Add a row\n          </Button>\n          <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n            Remove a row\n          </Button>\n        </Col>\n        <Col xs={2}>\n          \n        </Col>\n      </Row>\n    )\n  }\n\n  const renderSubmitButton = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"info\" onClick={()=>handleSubmit()}>\n            Submit Data\n          </Button>\n        </Col>\n        <Col xs={2}>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {renderWellData()}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n        </Col>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" placeholder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderSetRowsButtons()}\n      {renderSubmitButton()}\n      <Row>\n        <Col xs={10}>\n          {/* {renderAlert()} */}\n        </Col>\n        <Col xs={2}>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, saveWellInfoToReduxStoreReducer}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { postSurveysToJSONDb, saveSurveysToReduxStore, savePlansToReduxStore, postPlansToJSONDb})(Surveys)\n\n\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postPlansToJSONDbReducer.js",["427"],"import { POST_PLANS_TO_JSON_REQUESTED,\n  POST_PLANS_TO_JSON_RECEIVED,\n  POST_PLANS_TO_JSON_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_PLANS_TO_JSON_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_PLANS_TO_JSON_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_PLANS_TO_JSON_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveLeaseLinesToReduxStoreReducer.js",["428","429"],"import { initial } from \"lodash\"\nimport { SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {}, \n  status: \"\"\n}\n\nexport default (state=INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case SAVE_LEASE_LINES_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_LEASE_LINES_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_LEASE_LINES_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/SECT.js",["430"],"import EW from './EW';\nimport NS from './NS';\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior = 1, inclinationPrior = 2, azimuthPrior = 3, calculatedNorthingPrior = 0.02, calculatedEastingPrior = 0, index, vsDirection = 0) => {\n  const converter = (Math.PI)/180;\n  const converter2 = 0.00000001;\n\n  const calculatedEastingCurrent = EW(measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior)\n\n  const calculatedNorthingCurrent = NS(measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior)\n\n  const closure = Math.atan2(calculatedEastingCurrent, calculatedNorthingCurrent + converter2) / converter\n\n  const determineClosure = () => {\n    if (closure < 0) {\n      return Math.cos(((360 + closure) - vsDirection) * converter)\n    } else {\n      return Math.cos((closure - vsDirection) * converter)\n    }\n  }\n\n  const HD = Math.sqrt(Math.pow(calculatedNorthingCurrent, 2) + Math.pow(calculatedEastingCurrent, 2))\n\n  const calculatedSect = HD * determineClosure()\n\n\n  return (\n    parseFloat(calculatedSect.toFixed(2))\n  )\n};\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getLeaseLinesFromJSONDb.js",["431"],"import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\n\n  export default (selectedWell) => {\n    return async (dispatch, getState) => {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.response\n        // console.log(getState().getWellsWithLeaseLinesFromJSONDbReducer.response)\n        let result = wells.filter(well => {\n          return well.operator === selectedWellOperator && well.well === selectedWell_Well\n        })\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n          payload: result[0].grid\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveSurveysToReduxStoreReducer.js",["432"],"import { SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED, \n  SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED,\n  SAVE_SURVEYS_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case SAVE_SURVEYS_TO_REDUX_STORE_FAILED:\n      return {...state, response: payload, status: \"waiting\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postSurveysToJSONDbReducer.js",["433"],"import { POST_SURVEYS_TO_JSONDB_REQUESTED, \n  POST_SURVEYS_TO_JSONDB_RECEIVED, \n  POST_SURVEYS_TO_JSONDB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  reponse: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case POST_SURVEYS_TO_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case POST_SURVEYS_TO_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case POST_SURVEYS_TO_JSONDB_FAILED: \n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n} ","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postSurveysToJSONDb.js",["434"],"import { POST_SURVEYS_TO_JSONDB_REQUESTED, \n  POST_SURVEYS_TO_JSONDB_RECEIVED, \n  POST_SURVEYS_TO_JSONDB_FAILED } from \"./types\"\n\nimport wells from \"../APIs/wells\"\n\nexport default (wellInfo) => {\n  return async dispatch => {\n    dispatch({\n      type: POST_SURVEYS_TO_JSONDB_REQUESTED\n    })\n    try {\n      let response = await wells.post(\"Surveys\", wellInfo)\n      dispatch({\n        type: POST_SURVEYS_TO_JSONDB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: POST_SURVEYS_TO_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  } \n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsWithSurveysFromJSONDbReducer.js",["435"],"import {\n  GET_WELLS_WITH_SURVEYS_FROM_JSONDB_REQUESTED,\n  GET_WELLS_WITH_SURVEYS_FROM_JSONDB_RECEIVED,\n  GET_WELLS_WITH_SURVEYS_FROM_JSONDB_FAILED\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_WELLS_WITH_SURVEYS_FROM_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_WELLS_WITH_SURVEYS_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_WELLS_WITH_SURVEYS_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsWithSurveysFromJSONDb.js",["436"],"import {\n  GET_WELLS_WITH_SURVEYS_FROM_JSONDB_REQUESTED,\n  GET_WELLS_WITH_SURVEYS_FROM_JSONDB_RECEIVED,\n  GET_WELLS_WITH_SURVEYS_FROM_JSONDB_FAILED\n} from \"./types\"\nimport wells from \"../APIs/wells\"\n\nexport default () => {\n  return async dispatch => {\n    dispatch({\n      type: GET_WELLS_WITH_SURVEYS_FROM_JSONDB_REQUESTED\n    })\n    try {\n      const response = await wells.get(\"Surveys\")\n      dispatch({\n        type: GET_WELLS_WITH_SURVEYS_FROM_JSONDB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_WELLS_WITH_SURVEYS_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n      ","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingSurveys.js",["437","438","439","440","441","442","443","444"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getSurveysFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\n\nconst ExistingSurveys = ({activeWell, getSurveysFromJSONDbReducer, getSurveysFromJSONDb}) => {\n  const [surveys, setSurveys] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(() => {\n    if (getSurveysFromJSONDbReducer.status === \"received\") {\n      console.log(getSurveysFromJSONDbReducer.response)\n      const plansFromReducerCopy = [...getSurveysFromJSONDbReducer.response]\n      setSurveys(plansFromReducerCopy)\n    }\n  },[getSurveysFromJSONDbReducer.status])\n\n  let gridFromSurveys = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n\n\n  const renderMain = () => {\n    const { operator, rig, well } = activeWell.response\n    return (\n      <React.Fragment>\n        <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n        <ReactDataSheet\n          data={surveys}\n          valueRenderer={cell => cell.value}\n          width\n        />\n      </React.Fragment>\n    )\n  }\n\n  if (getSurveysFromJSONDbReducer.status === \"received\" && getSurveysFromJSONDbReducer.response) {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n}\n\nconst mapStateToProps = ({activeWell, getSurveysFromJSONDbReducer}) => {\n  return {\n    activeWell, \n    getSurveysFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getSurveysFromJSONDb})(ExistingSurveys)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getSurveysFromJSONDbReducer.js",["445"],"import { \n  GET_SURVEYS_FROM_JSONDB_REQUESTED,\n  GET_SURVEYS_FROM_JSONDB_RECEIVED,\n  GET_SURVEYS_FROM_JSONDB_FAILED,\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  state: \"\"\n}\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case GET_SURVEYS_FROM_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_SURVEYS_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_SURVEYS_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getSurveysFromJSONDb.js",["446"],"import { \n  GET_SURVEYS_FROM_JSONDB_REQUESTED,\n  GET_SURVEYS_FROM_JSONDB_RECEIVED,\n  GET_SURVEYS_FROM_JSONDB_FAILED,\n} from \"./types\"\n\n\nexport default (selectedWell) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_SURVEYS_FROM_JSONDB_REQUESTED\n    })\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n      const selectedWellOperator = selectedWellConvertedToArray[0]\n      const selectedWell_Well = selectedWellConvertedToArray[2]\n      let wells = getState().getWellsWithSurveysFromJSONDbReducer.response\n      console.log(getState().getWellsWithSurveysFromJSONDbReducer.response)\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well\n      })\n      dispatch({\n        type: GET_SURVEYS_FROM_JSONDB_RECEIVED,\n        payload: result[0].grid\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_SURVEYS_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js",["447","448","449","450","451","452","453","454","455"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingPlans = ({getWellPlansFromJSONDbReducer, activeWell}) => {\n  const [plans, setPlans] = useState([])\n  const [grid, setGrid] = useState([])\n  \n  useEffect(()=> {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n      setPlans(planFromReducerCopy)\n    }\n  },[getWellPlansFromJSONDbReducer.status])\n    \n  \n\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const plansCopy = [...plans]\n  // console.log(plansCopy)\n  let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n  // plansFromGrid = plansCopy.map(row => {\n  //   row.map(cell => {\n\n  //   })\n  // })\n\n  //   plansCopy.forEach((row, index) => {\n//     console.log(row)\n//     // const convertedRow = [\n//     //   {readOnly: true, value: row[0]}, \n//     //   {readOnly: true, value: row[1]},\n//     //   {readOnly: true, value: row[2]},\n//     //   {readOnly: true, value: row[3]},\n//     //   {readOnly: true, value: row[4]},\n//     //   {readOnly: true, value: row[5]},\n//     //   {readOnly: true, value: row[6]},\n//     //   {readOnly: true, value: row[7]},\n//     //   {readOnly: true, value: row[8]},\n//     // ]\n//     // gridFromPlans.push(convertedRow)\n//   })\n// setGrid(gridFromPlans)\n\n  // const createGridFromPlans = () => {\n  //   let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n  //   const plansCopy = [...plans]  \n  //   // const plansCopy = [...plans]\n  //   plansCopy.forEach((row, index) => { \n  //     const convertedRow = [\n  //       {readOnly: true, value: row[0]}, \n  //       {readOnly: true, value: row[1]},\n  //       {readOnly: true, value: row[2]},\n  //       {readOnly: true, value: row[3]},\n  //       {readOnly: true, value: row[4]},\n  //       {readOnly: true, value: row[5]},\n  //       {readOnly: true, value: row[6]},\n  //       {readOnly: true, value: row[7]},\n  //       {readOnly: true, value: row[8]},\n  //     ]\n  //     gridFromPlans.push(convertedRow)\n  //   })\n  //   console.log(gridFromPlans)\n  //   setGrid(gridFromPlans)\n  // }\n\n\n  // createGridFromPlans()\n\n\n  const renderMain = () => {\n    if (getWellPlansFromJSONDbReducer.status === \"received\") {\n      const { operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n          <ReactDataSheet data={activeWell.response.grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n  \n\n\n\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, activeWell, getWellsFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingPlans)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPolyLines.js",["456","457","458","459","460"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport ExistingLeaseLines from \"./ExistingLeaseLines\"\nimport ExistingHardLines from \"./ExistingHardLines\"\n\nconst ExistingPolyLines = ({getLeaseLinesFromJSONDbReducer, activeWell}) => {\n  const renderWellData = () => {\n      const {operator, rig, well } = activeWell.response\n      return (\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n      )\n    }\n  \n\n  return (\n    <Container>\n      {renderWellData()}\n      <Row className=\"mt-4\">\n        <Col>\n          <h4>Lease Lines</h4>\n          <ExistingLeaseLines/>\n        </Col>\n        <Col>\n        <h4>Hard Lines</h4>\n          <ExistingHardLines/>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, getLeaseLinesFromJSONDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromJSONDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingPolyLines)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingLeaseLines.js",["461","462","463","464","465","466","467","468","469","470","471","472"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport { get } from \"lodash\"\n\nconst ExistingLeaseLines = ({getLeaseLinesFromJSONDbReducer, activeWell}) => {\n  const [leaseLines, setLeaseLines] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(()=>{\n    if (getLeaseLinesFromJSONDbReducer.status === \"received\") {\n      let leaseLinesFromReducerCopy = [...getLeaseLinesFromJSONDbReducer.response]\n      setLeaseLines(leaseLinesFromReducerCopy)\n    }\n  },[getLeaseLinesFromJSONDbReducer.status])\n\n  const renderMain = () => {\n    if (getLeaseLinesFromJSONDbReducer.status === \"received\") {\n      const {operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          {/* <h3 className=\"my-4\">{operator} - {rig} - {well}</h3> */}\n          <ReactDataSheet data = {getLeaseLinesFromJSONDbReducer.response} valueRenderer = {cell => cell.value} width></ReactDataSheet>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n        return \"error\"\n    }\n}\n\nconst mapStateToProps = ({activeWell, getLeaseLinesFromJSONDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromJSONDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingLeaseLines)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/postHardLinesToJSONDbReducer.js",["473"],"import   {POST_HARD_LINES_TO_JSONDB_REQUESTED,\n  POST_HARD_LINES_TO_JSONDB_RECEIVED, \n  POST_HARD_LINES_TO_JSONDB_FAILED} from \"../ActionCreators/types\"\n  \n  const INITIAL_STATE = {\n    response: {}, \n    status: \"\"\n  }\n  \n  export default (state = INITIAL_STATE, {type, payload}) => {\n    switch (type) {\n      case POST_HARD_LINES_TO_JSONDB_REQUESTED:\n        return {...state, status: \"waiting\"}\n      case POST_HARD_LINES_TO_JSONDB_RECEIVED:\n        return {...state, response: payload, status: \"received\"}\n      case POST_HARD_LINES_TO_JSONDB_FAILED:\n        return {...state, response: payload, status: \"failed\"}\n      default:\n        return state;\n    }\n  } ","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getWellsWithHardLinesFromJSONDbReducer.js",["474"],"import { GET_HARD_LINES_LIST_FROM_JSONDB_REQUESTED,\n  GET_HARD_LINES_LIST_FROM_JSONDB_RECEIVED,\n  GET_HARD_LINES_LIST_FROM_JSONDB_FAILED,\n} from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_HARD_LINES_LIST_FROM_JSONDB_REQUESTED:\n      return {...state, status:\"waiting\"}\n    case GET_HARD_LINES_LIST_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_HARD_LINES_LIST_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state;\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PolyLines.js",["475","476","477","478","479"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport ExistingLeaseLines from \"./ExistingLeaseLines\"\nimport ExistingHardLines from \"./ExistingHardLines\"\nimport LeaseLines from \"./LeaseLines\"\nimport HardLines from \"./HardLines\"\n\nconst PolyLines = ({activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer,}) => {\n  const renderWellData = () => {\n      const {operator, rig, well } = activeWell.response\n      return (\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n      )\n    }\n  \n  const renderLeaseLines = () => {\n    if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getLeaseLinesFromJSONDbReducer.response) {\n      return <ExistingLeaseLines/>\n    } else {\n      return <LeaseLines/>\n    }\n  }\n\n  const renderHardLines = () => {\n    if (getHardLinesFromJSONDbReducer.status === \"received\" && getHardLinesFromJSONDbReducer.response) {\n      return <ExistingHardLines/>\n    } else {\n      return <HardLines/>\n    }\n  }\n\n  return (\n    <Container>\n      {renderWellData()}\n      <Row className=\"mt-4\">\n        <Col>\n          <h4>Lease Lines</h4>\n          {renderLeaseLines()}\n        </Col>\n        <Col>\n        <h4>Hard Lines</h4>\n          {renderHardLines()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer}) => {\n return {\n  getLeaseLinesFromJSONDbReducer,\n  getHardLinesFromJSONDbReducer,\n  activeWell, \n }\n}\n\nexport default connect(mapStateToProps)(PolyLines)\n\n\n\n\n// import React, { useState, useEffect } from \"react\"\n// //bootstrap\n// import Container from \"react-bootstrap/esm/Container\";\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css';\n// import { connect } from \"react-redux\"\n// import ReactDataSheet from 'react-datasheet';\n\n// // actionCreators\n// import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\n// const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n//   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n//   // set up initial grid\n//   // create local state to setGrid\n//   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n//   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n//   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n//   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n//   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n//   const initialGrid = [\n//     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n//     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n//   ]\n//   const [grid, setGrid] = useState(initialGrid)\n\n//   const renderWellHeader = () => {\n//     if (activeWell.status === \"received\") {\n//       // const {operator, rig, well} = activeWell.response\n//       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//     } else {\n//       return \"No Well Data\"\n//     }\n//   }\n\n//   const onCellsChanged = changes => {\n//     const gridNew = grid.map(row => [...row])\n//     changes.forEach(({cell, row, col, value}) => {\n//       gridNew[row][col] = {...grid[row][col], value}\n//     });\n//     setGrid(gridNew);\n    \n//   }\n\n//   const handleSubmit = () => {\n//     const wellInfoAndLeaseLines = {\n//       operator,\n//       rig, \n//       well, \n//       county,\n//       usState, \n//       northing,\n//       easting,\n//       grid\n//     }\n//     // const activeWell\n//     // saveLeaseLinesToJSON \n//     checkTest()\n//     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n//     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n//   }\n\n//   const checkTest = () => {\n//     console.log(\"whyyy\")\n//   }\n\n//   const renderRowsButtons = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"my-4\">\n//           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n//             Submit\n//           </Button>\n//           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n//             Add a Row\n//           </Button>\n//           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n//             Remove a Row\n//           </Button>\n\n//         </Col>\n//       </Row>\n//     )\n//   }\n\n//   const addRow = () => {\n//     const gridLength = grid.length\n//     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n//     const newGrid = [...grid, newRow]\n//     setGrid(newGrid)\n//   }\n\n//   const removeRow = () => {\n//     const newGrid = [...grid]\n//     newGrid.pop()\n//     setGrid(newGrid)\n//   }\n  \n\n//   return (\n//     <Container>\n//       <Row>\n//         <Col xs={10}>\n//           {renderWellHeader()}\n//           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n//           {renderRowsButtons()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n//   return {\n//     activeWell,\n//     postLeaseLinesToJSONDbReducer,\n//   }\n// }\n\n// export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/LeaseLines.js",["480","481","482"],"import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\nconst LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialGrid = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [grid, setGrid] = useState(initialGrid)\n\n  const renderWellHeader = () => {\n    if (activeWell.status === \"received\") {\n      // const {operator, rig, well} = activeWell.response\n      return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n    } else {\n      return \"No Well Data\"\n    }\n  }\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...grid[row][col], value}\n    });\n    setGrid(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      grid\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    checkTest()\n    postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = grid.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...grid, newRow]\n    setGrid(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...grid]\n    newGrid.pop()\n    setGrid(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getHardLinesFromJSONDb.js",["483"],"import { GET_HARD_LINES_FROM_JSONDB_REQUESTED,\n  GET_HARD_LINES_FROM_JSONDB_RECEIVED,\n  GET_HARD_LINES_FROM_JSONDB_FAILED } from \"./types\"\n\n  export default (selectedWell) => {\n    return async (dispatch, getState) => {\n      dispatch({\n        type: GET_HARD_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        let wells = getState().getWellsWithHardLinesFromJSONDbReducer.response\n        let result = wells.filter(well => {\n          return well.operator === selectedWellOperator && well.well === selectedWell_Well\n        })\n        dispatch({\n          type: GET_HARD_LINES_FROM_JSONDB_RECEIVED,\n          payload: result[0].grid\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_HARD_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }\n",["484","485"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingHardLines.js",["486","487","488","489","490","491","492","493","494","495","496","497"],"import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport { get } from \"lodash\"\n\nconst ExistingHardLines = ({getHardLinesFromJSONDbReducer, activeWell}) => {\n  const [hardLines, setHardLines] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(()=>{\n    if (getHardLinesFromJSONDbReducer.status === \"received\") {\n      let hardLinesFromReducerCopy = [...getHardLinesFromJSONDbReducer.response]\n      setHardLines(hardLinesFromReducerCopy)\n    }\n  },[getHardLinesFromJSONDbReducer.status])\n\n  const renderMain = () => {\n    if (getHardLinesFromJSONDbReducer.status === \"received\") {\n      const {operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          {/* <h3 className=\"my-4\">{operator} - {rig} - {well}</h3> */}\n          <ReactDataSheet data = {getHardLinesFromJSONDbReducer.response} valueRenderer = {cell => cell.value} width></ReactDataSheet>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getHardLinesFromJSONDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    )\n  } else {\n        return \"error\"\n    }\n}\n\nconst mapStateToProps = ({activeWell, getHardLinesFromJSONDbReducer}) => {\n return {\n  activeWell, \n  getHardLinesFromJSONDbReducer\n }\n}\n\nexport default connect(mapStateToProps)(ExistingHardLines)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/HardLines.js",["498","499","500","501"],"import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveHardLinesToReduxStore from \"../ActionCreators/saveHardLinesToReduxStore\"\nimport postHardLinesToJSONDb from \"../ActionCreators/postHardLinesToJSONDb\"\n\n\nconst HardLines = ({activeWell, saveHardLinesToReduxStore, postHardLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postHardLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialGrid = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [grid, setGrid] = useState(initialGrid)\n\n  const renderWellHeader = () => {\n    if (activeWell.status === \"received\") {\n      // const {operator, rig, well} = activeWell.response\n      return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n    } else {\n      return \"No Well Data\"\n    }\n  }\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...grid[row][col], value}\n    });\n    setGrid(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      grid\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    postHardLinesToJSONDb(wellInfoAndLeaseLines)\n    saveHardLinesToReduxStore(wellInfoAndLeaseLines)\n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = grid.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...grid, newRow]\n    setGrid(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...grid]\n    newGrid.pop()\n    setGrid(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postHardLinesToJSONDbReducer}) => {\n  return {\n    activeWell,\n    postHardLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveHardLinesToReduxStore, postHardLinesToJSONDb})(HardLines)","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellsWithHardLinesFromJSONDb.js",["502"],"import { \n  GET_HARD_LINES_LIST_FROM_JSONDB_REQUESTED,\n  GET_HARD_LINES_LIST_FROM_JSONDB_RECEIVED,\n  GET_HARD_LINES_LIST_FROM_JSONDB_FAILED\n} from \"./types\"\n\nimport wells from \"../APIs/wells\"\n\n\nexport default () => {\n  return async dispatch => {\n    dispatch({\n      type: GET_HARD_LINES_LIST_FROM_JSONDB_REQUESTED\n    })\n    try {\n      const response = await wells.get(\"/HardLines\")\n      dispatch({\n        type: GET_HARD_LINES_LIST_FROM_JSONDB_RECEIVED,\n        payload: response.data\n      })\n    } catch (error) {\n      dispatch({\n        type: GET_HARD_LINES_LIST_FROM_JSONDB_FAILED,\n        payload: error\n      })\n    }\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/saveHardLinesToReduxStoreReducer.js",["503"],"import { SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_FAILED } from \"../ActionCreators/types\"\n\n  const INITIAL_STATE = {\n    response: {}, \n    status: \"\"\n  }\n  \n  export default (state=INITIAL_STATE, {type, payload}) => {\n    switch (type) {\n      case SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED:\n        return {...state, status: \"waiting\"}\n      case SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED:\n        return {...state, response: payload, status: \"received\"}\n      case SAVE_HARD_LINES_TO_REDUX_STORE_FAILED:\n        return {...state, response: payload, status: \"failed\"}\n      default:\n        return state\n    }\n  }","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveSurveysToReduxStore.js",["504"],"import { SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED, \n  SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED,\n  SAVE_SURVEYS_TO_REDUX_STORE_FAILED } from \"./types\"\n\n\n  export default (wellData) => {\n    return async dispatch => {\n      dispatch ({\n        type: SAVE_SURVEYS_TO_REDUX_STORE_REQUESTED\n      })\n      try {\n        dispatch({\n          type: SAVE_SURVEYS_TO_REDUX_STORE_RECEIVED,\n          payload: wellData\n        })\n      } catch (error) {\n        dispatch({\n          type: SAVE_SURVEYS_TO_REDUX_STORE_FAILED,\n          payload: error\n        })\n      }\n    }\n  }","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postLeaseLinesToJSONDb.js",["505"],"import { POST_LEASE_LINES_TO_JSONDB_REQUESTED,\n  POST_LEASE_LINES_TO_JSONDB_RECEIVED,\n  POST_LEASE_LINES_TO_JSONDB_FAILED } from \"./types\"\nimport wells from \"../APIs/wells\"\n\n\n  export default (wellinfo) => {\n    return async dispatch => {\n      dispatch({\n        type: POST_LEASE_LINES_TO_JSONDB_REQUESTED\n      })\n      try {\n        const response = await wells.post(\"LeaseLines\", wellinfo)\n        dispatch({\n          type: POST_LEASE_LINES_TO_JSONDB_RECEIVED,\n          payload: response\n        })\n      } catch (error) {\n        dispatch({\n          type: POST_LEASE_LINES_TO_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/APIs/wells.js",[],["506","507"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveHardLinesToReduxStore.js",["508"],"import { SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED,\n  SAVE_HARD_LINES_TO_REDUX_STORE_FAILED } from \"./types\"\n\nexport default (leaseLines) => {\n  return async dispatch => {\n    dispatch({\n      type: SAVE_HARD_LINES_TO_REDUX_STORE_REQUESTED\n    })\n    try {\n      dispatch({\n        type: SAVE_HARD_LINES_TO_REDUX_STORE_RECEIVED,\n        payload: leaseLines\n      })\n    } catch(error) {\n      dispatch({\n        type: SAVE_HARD_LINES_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}\n","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/saveActiveWellToReduxStore.js",["509"],"import { SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED,\n  SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED\n } from \"./types\"\n\nexport default (selectedWell) => {\n  return (dispatch) => {\n    dispatch ({\n      type: SAVE_ACTIVE_WELL_TO_REDUX_STORE_REQUESTED\n    });\n    try {\n      dispatch({\n        type: SAVE_ACTIVE_WELL_TO_REDUX_STORE_RECEIVED,\n        payload: selectedWell\n      });\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: SAVE_ACTIVE_WELL_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/savePlansToReduxStore.js",["510"],"import { SAVE_PLANS_TO_REDUX_STORE_REQUESTED,\n  SAVE_PLANS_TO_REDUX_STORE_RECEIVED,\n  SAVE_PLANS_TO_REDUX_STORE_FAILED\n} from \"./types\"\n\nexport default (plans) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: SAVE_PLANS_TO_REDUX_STORE_REQUESTED\n    });\n    \n    try {\n      dispatch({\n        type: SAVE_PLANS_TO_REDUX_STORE_RECEIVED,\n        payload: plans,\n      });\n    } catch (error) {\n      dispatch({\n        type: SAVE_PLANS_TO_REDUX_STORE_FAILED,\n        payload: error\n      })\n    }\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/postHardLinesToJSONDb.js",["511"],"import { POST_HARD_LINES_TO_JSONDB_REQUESTED,\n  POST_HARD_LINES_TO_JSONDB_RECEIVED,\n  POST_HARD_LINES_TO_JSONDB_FAILED } from \"./types\"\nimport wells from \"../APIs/wells\"\n\n\n  export default (wellinfo) => {\n    return async dispatch => {\n      dispatch({\n        type: POST_HARD_LINES_TO_JSONDB_REQUESTED\n      })\n      try {\n        const response = await wells.post(\"HardLines\", wellinfo)\n        dispatch({\n          type: POST_HARD_LINES_TO_JSONDB_RECEIVED,\n          payload: response\n        })\n      } catch (error) {\n        dispatch({\n          type: POST_HARD_LINES_TO_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/getHardLinesFromJSONDbReducer.js",["512"],"import { GET_HARD_LINES_FROM_JSONDB_REQUESTED,\n  GET_HARD_LINES_FROM_JSONDB_RECEIVED,\n  GET_HARD_LINES_FROM_JSONDB_FAILED } from \"../ActionCreators/types\"\n\nconst INITIAL_STATE = {\n  response: {},\n  status: \"\"\n}\n\nexport default (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case GET_HARD_LINES_FROM_JSONDB_REQUESTED:\n      return {...state, status: \"waiting\"}\n    case GET_HARD_LINES_FROM_JSONDB_RECEIVED:\n      return {...state, response: payload, status: \"received\"}\n    case GET_HARD_LINES_FROM_JSONDB_FAILED:\n      return {...state, response: payload, status: \"failed\"}\n    default:\n      return state\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/SignIn.js",["513"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/SignInHome.js",["514","515","516"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/UserPool.js",["517","518"],"import {\n\tCognitoUserPool,\n\tCognitoUserAttribute,\n\tCognitoUser,\n} from 'amazon-cognito-identity-js';\n\nconst poolData = {\n  UserPoolId: \"us-east-2_75YqLvMCl\",\n  ClientId: \"2j6ne1d5384a382eh4755719be\"\n}\n\nexport default new CognitoUserPool(poolData);\n\n\n// const POOL_DATA = {\n//   UserPoolId: \"us-east-2_yvwiM5ORU\",\n//   ClientId: \"4958acsp36ccmg13tfg44b0jkc\"\n// };\n// const userPool = new CognitoUserPool(POOL_DATA);","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/UserVerification/SignUp.js",["519","520"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/UserVerification/userNeedsToCreateAccount.js",["521"],"import { SIGN_UP_REQUESTED,\n  SIGN_UP_RECEIVED,\n  SIGN_UP_FAILED\n} from \"../types\"\n\nexport default (bool) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: SIGN_UP_REQUESTED\n    });\n    \n    try {\n      dispatch({\n        type: SIGN_UP_RECEIVED,\n        payload: bool,\n      });\n    } catch (error) {\n      dispatch({\n        type: SIGN_UP_FAILED,\n        payload: error\n      })\n    }\n  }\n}","/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Reducers/userNeedsToCreateAccountReducer.js",["522"],"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/History.js",[],{"ruleId":"523","severity":1,"message":"524","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":9},{"ruleId":"527","replacedBy":"528"},{"ruleId":"529","replacedBy":"530"},{"ruleId":"531","severity":1,"message":"532","line":7,"column":3,"nodeType":"533","endLine":30,"endColumn":5},{"ruleId":"523","severity":1,"message":"534","line":13,"column":13,"nodeType":"525","messageId":"526","endLine":13,"endColumn":21},{"ruleId":"527","replacedBy":"535"},{"ruleId":"529","replacedBy":"536"},{"ruleId":"527","replacedBy":"537"},{"ruleId":"529","replacedBy":"538"},{"ruleId":"531","severity":1,"message":"532","line":10,"column":3,"nodeType":"533","endLine":22,"endColumn":5},{"ruleId":"527","replacedBy":"539"},{"ruleId":"529","replacedBy":"540"},{"ruleId":"531","severity":1,"message":"532","line":11,"column":1,"nodeType":"533","endLine":22,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":10,"column":3,"nodeType":"533","endLine":21,"endColumn":4},{"ruleId":"527","replacedBy":"541"},{"ruleId":"529","replacedBy":"542"},{"ruleId":"531","severity":1,"message":"532","line":11,"column":1,"nodeType":"533","endLine":22,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":11,"column":1,"nodeType":"533","endLine":23,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":5,"column":3,"nodeType":"533","endLine":23,"endColumn":5},{"ruleId":"531","severity":1,"message":"532","line":9,"column":1,"nodeType":"533","endLine":39,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":4,"column":1,"nodeType":"533","endLine":19,"endColumn":3},{"ruleId":"531","severity":1,"message":"532","line":4,"column":1,"nodeType":"533","endLine":20,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":1,"column":1,"nodeType":"533","endLine":7,"endColumn":2},{"ruleId":"523","severity":1,"message":"543","line":1,"column":17,"nodeType":"525","messageId":"526","endLine":1,"endColumn":26},{"ruleId":"523","severity":1,"message":"544","line":1,"column":28,"nodeType":"525","messageId":"526","endLine":1,"endColumn":36},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"546","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":11},{"ruleId":"523","severity":1,"message":"547","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":11},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"549","line":11,"column":8,"nodeType":"525","messageId":"526","endLine":11,"endColumn":22},{"ruleId":"523","severity":1,"message":"550","line":13,"column":10,"nodeType":"525","messageId":"526","endLine":13,"endColumn":18},{"ruleId":"523","severity":1,"message":"551","line":14,"column":8,"nodeType":"525","messageId":"526","endLine":14,"endColumn":31},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":21,"endColumn":2},{"ruleId":"523","severity":1,"message":"524","line":12,"column":8,"nodeType":"525","messageId":"526","endLine":12,"endColumn":9},{"ruleId":"552","severity":1,"message":"553","line":47,"column":6,"nodeType":"554","endLine":47,"endColumn":8,"suggestions":"555"},{"ruleId":"523","severity":1,"message":"556","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"557","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":11},{"ruleId":"523","severity":1,"message":"558","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":17},{"ruleId":"523","severity":1,"message":"559","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":17},{"ruleId":"523","severity":1,"message":"547","line":9,"column":8,"nodeType":"525","messageId":"526","endLine":9,"endColumn":11},{"ruleId":"523","severity":1,"message":"560","line":11,"column":10,"nodeType":"525","messageId":"526","endLine":11,"endColumn":17},{"ruleId":"523","severity":1,"message":"561","line":27,"column":10,"nodeType":"525","messageId":"526","endLine":27,"endColumn":18},{"ruleId":"523","severity":1,"message":"562","line":27,"column":20,"nodeType":"525","messageId":"526","endLine":27,"endColumn":31},{"ruleId":"552","severity":1,"message":"563","line":52,"column":6,"nodeType":"554","endLine":52,"endColumn":8,"suggestions":"564"},{"ruleId":"523","severity":1,"message":"565","line":54,"column":9,"nodeType":"525","messageId":"526","endLine":54,"endColumn":28},{"ruleId":"566","severity":1,"message":"567","line":55,"column":27,"nodeType":"568","messageId":"569","endLine":55,"endColumn":29},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":21,"endColumn":2},{"ruleId":"523","severity":1,"message":"570","line":1,"column":10,"nodeType":"525","messageId":"526","endLine":1,"endColumn":13},{"ruleId":"523","severity":1,"message":"571","line":2,"column":8,"nodeType":"525","messageId":"526","endLine":2,"endColumn":13},{"ruleId":"523","severity":1,"message":"572","line":3,"column":8,"nodeType":"525","messageId":"526","endLine":3,"endColumn":26},{"ruleId":"531","severity":1,"message":"532","line":8,"column":1,"nodeType":"533","endLine":37,"endColumn":2},{"ruleId":"573","severity":1,"message":"574","line":21,"column":37,"nodeType":"575","messageId":"576","endLine":21,"endColumn":39},{"ruleId":"573","severity":1,"message":"574","line":21,"column":84,"nodeType":"575","messageId":"576","endLine":21,"endColumn":86},{"ruleId":"531","severity":1,"message":"532","line":5,"column":1,"nodeType":"533","endLine":22,"endColumn":2},{"ruleId":"527","replacedBy":"577"},{"ruleId":"529","replacedBy":"578"},{"ruleId":"531","severity":1,"message":"532","line":4,"column":1,"nodeType":"533","endLine":20,"endColumn":2},{"ruleId":"527","replacedBy":"579"},{"ruleId":"529","replacedBy":"580"},{"ruleId":"531","severity":1,"message":"532","line":3,"column":1,"nodeType":"533","endLine":15,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":1,"column":1,"nodeType":"533","endLine":16,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":8,"column":1,"nodeType":"533","endLine":26,"endColumn":2},{"ruleId":"527","replacedBy":"581"},{"ruleId":"529","replacedBy":"582"},{"ruleId":"531","severity":1,"message":"532","line":23,"column":1,"nodeType":"533","endLine":34,"endColumn":2},{"ruleId":"523","severity":1,"message":"559","line":9,"column":8,"nodeType":"525","messageId":"526","endLine":9,"endColumn":17},{"ruleId":"523","severity":1,"message":"547","line":10,"column":8,"nodeType":"525","messageId":"526","endLine":10,"endColumn":11},{"ruleId":"523","severity":1,"message":"546","line":11,"column":8,"nodeType":"525","messageId":"526","endLine":11,"endColumn":11},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":21,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":28,"endColumn":2},{"ruleId":"523","severity":1,"message":"561","line":27,"column":10,"nodeType":"525","messageId":"526","endLine":27,"endColumn":18},{"ruleId":"523","severity":1,"message":"562","line":27,"column":20,"nodeType":"525","messageId":"526","endLine":27,"endColumn":31},{"ruleId":"552","severity":1,"message":"583","line":48,"column":5,"nodeType":"554","endLine":48,"endColumn":12,"suggestions":"584"},{"ruleId":"552","severity":1,"message":"563","line":52,"column":6,"nodeType":"554","endLine":52,"endColumn":8,"suggestions":"585"},{"ruleId":"566","severity":1,"message":"567","line":55,"column":27,"nodeType":"568","messageId":"569","endLine":55,"endColumn":29},{"ruleId":"531","severity":1,"message":"532","line":9,"column":1,"nodeType":"533","endLine":20,"endColumn":2},{"ruleId":"523","severity":1,"message":"586","line":1,"column":10,"nodeType":"525","messageId":"526","endLine":1,"endColumn":17},{"ruleId":"531","severity":1,"message":"532","line":11,"column":1,"nodeType":"533","endLine":22,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":4,"column":1,"nodeType":"533","endLine":30,"endColumn":3},{"ruleId":"531","severity":1,"message":"532","line":5,"column":3,"nodeType":"533","endLine":30,"endColumn":4},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":21,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":21,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":7,"column":1,"nodeType":"533","endLine":25,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":12,"column":1,"nodeType":"533","endLine":23,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":8,"column":1,"nodeType":"533","endLine":26,"endColumn":2},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"546","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":11},{"ruleId":"523","severity":1,"message":"547","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":11},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"587","line":17,"column":10,"nodeType":"525","messageId":"526","endLine":17,"endColumn":14},{"ruleId":"523","severity":1,"message":"588","line":17,"column":16,"nodeType":"525","messageId":"526","endLine":17,"endColumn":23},{"ruleId":"552","severity":1,"message":"589","line":25,"column":5,"nodeType":"554","endLine":25,"endColumn":41,"suggestions":"590"},{"ruleId":"523","severity":1,"message":"591","line":27,"column":7,"nodeType":"525","messageId":"526","endLine":27,"endColumn":22},{"ruleId":"531","severity":1,"message":"532","line":12,"column":1,"nodeType":"533","endLine":23,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":8,"column":1,"nodeType":"533","endLine":33,"endColumn":2},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"546","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":11},{"ruleId":"523","severity":1,"message":"547","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":11},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"587","line":16,"column":10,"nodeType":"525","messageId":"526","endLine":16,"endColumn":14},{"ruleId":"523","severity":1,"message":"588","line":16,"column":16,"nodeType":"525","messageId":"526","endLine":16,"endColumn":23},{"ruleId":"552","severity":1,"message":"592","line":23,"column":5,"nodeType":"554","endLine":23,"endColumn":43,"suggestions":"593"},{"ruleId":"523","severity":1,"message":"594","line":40,"column":9,"nodeType":"525","messageId":"526","endLine":40,"endColumn":18},{"ruleId":"523","severity":1,"message":"595","line":42,"column":7,"nodeType":"525","messageId":"526","endLine":42,"endColumn":20},{"ruleId":"523","severity":1,"message":"543","line":1,"column":17,"nodeType":"525","messageId":"526","endLine":1,"endColumn":26},{"ruleId":"523","severity":1,"message":"544","line":1,"column":28,"nodeType":"525","messageId":"526","endLine":1,"endColumn":36},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"549","line":11,"column":8,"nodeType":"525","messageId":"526","endLine":11,"endColumn":22},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"546","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":11},{"ruleId":"523","severity":1,"message":"547","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":11},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"570","line":12,"column":10,"nodeType":"525","messageId":"526","endLine":12,"endColumn":13},{"ruleId":"523","severity":1,"message":"596","line":15,"column":10,"nodeType":"525","messageId":"526","endLine":15,"endColumn":20},{"ruleId":"523","severity":1,"message":"587","line":16,"column":10,"nodeType":"525","messageId":"526","endLine":16,"endColumn":14},{"ruleId":"523","severity":1,"message":"588","line":16,"column":16,"nodeType":"525","messageId":"526","endLine":16,"endColumn":23},{"ruleId":"552","severity":1,"message":"597","line":23,"column":5,"nodeType":"554","endLine":23,"endColumn":44,"suggestions":"598"},{"ruleId":"523","severity":1,"message":"599","line":27,"column":14,"nodeType":"525","messageId":"526","endLine":27,"endColumn":22},{"ruleId":"523","severity":1,"message":"600","line":27,"column":24,"nodeType":"525","messageId":"526","endLine":27,"endColumn":27},{"ruleId":"523","severity":1,"message":"601","line":27,"column":29,"nodeType":"525","messageId":"526","endLine":27,"endColumn":33},{"ruleId":"531","severity":1,"message":"532","line":10,"column":3,"nodeType":"533","endLine":21,"endColumn":4},{"ruleId":"531","severity":1,"message":"532","line":11,"column":1,"nodeType":"533","endLine":22,"endColumn":2},{"ruleId":"523","severity":1,"message":"543","line":1,"column":17,"nodeType":"525","messageId":"526","endLine":1,"endColumn":26},{"ruleId":"523","severity":1,"message":"544","line":1,"column":28,"nodeType":"525","messageId":"526","endLine":1,"endColumn":36},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"549","line":11,"column":8,"nodeType":"525","messageId":"526","endLine":11,"endColumn":22},{"ruleId":"523","severity":1,"message":"543","line":1,"column":27,"nodeType":"525","messageId":"526","endLine":1,"endColumn":36},{"ruleId":"523","severity":1,"message":"545","line":4,"column":8,"nodeType":"525","messageId":"526","endLine":4,"endColumn":12},{"ruleId":"523","severity":1,"message":"602","line":42,"column":9,"nodeType":"525","messageId":"526","endLine":42,"endColumn":25},{"ruleId":"531","severity":1,"message":"532","line":5,"column":3,"nodeType":"533","endLine":29,"endColumn":4},{"ruleId":"527","replacedBy":"603"},{"ruleId":"529","replacedBy":"604"},{"ruleId":"523","severity":1,"message":"545","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":12},{"ruleId":"523","severity":1,"message":"546","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":11},{"ruleId":"523","severity":1,"message":"547","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":11},{"ruleId":"523","severity":1,"message":"548","line":8,"column":8,"nodeType":"525","messageId":"526","endLine":8,"endColumn":14},{"ruleId":"523","severity":1,"message":"570","line":12,"column":10,"nodeType":"525","messageId":"526","endLine":12,"endColumn":13},{"ruleId":"523","severity":1,"message":"605","line":15,"column":10,"nodeType":"525","messageId":"526","endLine":15,"endColumn":19},{"ruleId":"523","severity":1,"message":"587","line":16,"column":10,"nodeType":"525","messageId":"526","endLine":16,"endColumn":14},{"ruleId":"523","severity":1,"message":"588","line":16,"column":16,"nodeType":"525","messageId":"526","endLine":16,"endColumn":23},{"ruleId":"552","severity":1,"message":"606","line":23,"column":5,"nodeType":"554","endLine":23,"endColumn":43,"suggestions":"607"},{"ruleId":"523","severity":1,"message":"599","line":27,"column":14,"nodeType":"525","messageId":"526","endLine":27,"endColumn":22},{"ruleId":"523","severity":1,"message":"600","line":27,"column":24,"nodeType":"525","messageId":"526","endLine":27,"endColumn":27},{"ruleId":"523","severity":1,"message":"601","line":27,"column":29,"nodeType":"525","messageId":"526","endLine":27,"endColumn":33},{"ruleId":"523","severity":1,"message":"543","line":1,"column":27,"nodeType":"525","messageId":"526","endLine":1,"endColumn":36},{"ruleId":"523","severity":1,"message":"545","line":4,"column":8,"nodeType":"525","messageId":"526","endLine":4,"endColumn":12},{"ruleId":"523","severity":1,"message":"602","line":42,"column":9,"nodeType":"525","messageId":"526","endLine":42,"endColumn":25},{"ruleId":"523","severity":1,"message":"608","line":77,"column":9,"nodeType":"525","messageId":"526","endLine":77,"endColumn":18},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":28,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":10,"column":3,"nodeType":"533","endLine":21,"endColumn":4},{"ruleId":"531","severity":1,"message":"532","line":6,"column":3,"nodeType":"533","endLine":23,"endColumn":4},{"ruleId":"531","severity":1,"message":"532","line":7,"column":3,"nodeType":"533","endLine":25,"endColumn":4},{"ruleId":"527","replacedBy":"609"},{"ruleId":"529","replacedBy":"610"},{"ruleId":"531","severity":1,"message":"532","line":5,"column":1,"nodeType":"533","endLine":22,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":6,"column":1,"nodeType":"533","endLine":24,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":6,"column":1,"nodeType":"533","endLine":24,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":7,"column":3,"nodeType":"533","endLine":25,"endColumn":4},{"ruleId":"531","severity":1,"message":"532","line":10,"column":1,"nodeType":"533","endLine":21,"endColumn":2},{"ruleId":"523","severity":1,"message":"611","line":7,"column":8,"nodeType":"525","messageId":"526","endLine":7,"endColumn":11},{"ruleId":"523","severity":1,"message":"544","line":1,"column":16,"nodeType":"525","messageId":"526","endLine":1,"endColumn":24},{"ruleId":"523","severity":1,"message":"559","line":2,"column":8,"nodeType":"525","messageId":"526","endLine":2,"endColumn":17},{"ruleId":"523","severity":1,"message":"612","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":32},{"ruleId":"523","severity":1,"message":"613","line":3,"column":2,"nodeType":"525","messageId":"526","endLine":3,"endColumn":22},{"ruleId":"523","severity":1,"message":"614","line":4,"column":2,"nodeType":"525","messageId":"526","endLine":4,"endColumn":13},{"ruleId":"523","severity":1,"message":"615","line":9,"column":10,"nodeType":"525","messageId":"526","endLine":9,"endColumn":31},{"ruleId":"523","severity":1,"message":"616","line":66,"column":9,"nodeType":"525","messageId":"526","endLine":66,"endColumn":27},{"ruleId":"531","severity":1,"message":"532","line":6,"column":1,"nodeType":"533","endLine":24,"endColumn":2},{"ruleId":"531","severity":1,"message":"532","line":13,"column":1,"nodeType":"533","endLine":25,"endColumn":2},"no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","no-native-reassign",["617"],"no-negated-in-lhs",["618"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'response' is assigned a value but never used.",["617"],["618"],["617"],["618"],["617"],["618"],["617"],["618"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'ReactDataSheet' is defined but never used.","'isNumber' is defined but never used.","'saveSurveysToReduxStore' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getWellsFromJSONDb', 'getWellsWithHardLinesFromJSONDb', 'getWellsWithLeaseLinesFromJSONDb', and 'getWellsWithSurveysFromJSONDb'. Either include them or remove the dependency array. If 'getWellsFromJSONDb' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["619"],"'Tabs' is defined but never used.","'Tab' is defined but never used.","'Jumbotron' is defined but never used.","'Container' is defined but never used.","'connect' is defined but never used.","'editGrid' is assigned a value but never used.","'setEditGrid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleAddRows'. Either include it or remove the dependency array.",["620"],"'performCalculations' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'get' is defined but never used.","'wells' is defined but never used.","'getWellsFromJSONDb' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["617"],["618"],["617"],["618"],["617"],["618"],"React Hook useEffect has a missing dependency: 'performCalculations'. Either include it or remove the dependency array.",["621"],["622"],"'initial' is defined but never used.","'grid' is assigned a value but never used.","'setGrid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSurveysFromJSONDbReducer.response'. Either include it or remove the dependency array.",["623"],"'gridFromSurveys' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getWellPlansFromJSONDbReducer.response'. Either include it or remove the dependency array.",["624"],"'plansCopy' is assigned a value but never used.","'gridFromPlans' is assigned a value but never used.","'leaseLines' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getLeaseLinesFromJSONDbReducer.response'. Either include it or remove the dependency array.",["625"],"'operator' is assigned a value but never used.","'rig' is assigned a value but never used.","'well' is assigned a value but never used.","'renderWellHeader' is assigned a value but never used.",["617"],["618"],"'hardLines' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getHardLinesFromJSONDbReducer.response'. Either include it or remove the dependency array.",["626"],"'checkTest' is assigned a value but never used.",["617"],["618"],"'Nav' is defined but never used.","'userNeedsToCreateAccount' is defined but never used.","'CognitoUserAttribute' is defined but never used.","'CognitoUser' is defined but never used.","'AuthenticationDetails' is defined but never used.","'renderCodeResponse' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"629","fix":"633"},{"desc":"634","fix":"635"},{"desc":"636","fix":"637"},{"desc":"638","fix":"639"},{"desc":"640","fix":"641"},"Update the dependencies array to be: [getWellsFromJSONDb, getWellsWithHardLinesFromJSONDb, getWellsWithLeaseLinesFromJSONDb, getWellsWithSurveysFromJSONDb]",{"range":"642","text":"643"},"Update the dependencies array to be: [handleAddRows]",{"range":"644","text":"645"},"Update the dependencies array to be: [input, performCalculations]",{"range":"646","text":"647"},{"range":"648","text":"645"},"Update the dependencies array to be: [getSurveysFromJSONDbReducer.response, getSurveysFromJSONDbReducer.status]",{"range":"649","text":"650"},"Update the dependencies array to be: [getWellPlansFromJSONDbReducer.response, getWellPlansFromJSONDbReducer.status]",{"range":"651","text":"652"},"Update the dependencies array to be: [getLeaseLinesFromJSONDbReducer.response, getLeaseLinesFromJSONDbReducer.status]",{"range":"653","text":"654"},"Update the dependencies array to be: [getHardLinesFromJSONDbReducer.response, getHardLinesFromJSONDbReducer.status]",{"range":"655","text":"656"},[2449,2451],"[getWellsFromJSONDb, getWellsWithHardLinesFromJSONDb, getWellsWithLeaseLinesFromJSONDb, getWellsWithSurveysFromJSONDb]",[2703,2705],"[handleAddRows]",[2813,2820],"[input, performCalculations]",[2868,2870],[920,956],"[getSurveysFromJSONDbReducer.response, getSurveysFromJSONDbReducer.status]",[838,876],"[getWellPlansFromJSONDbReducer.response, getWellPlansFromJSONDbReducer.status]",[821,860],"[getLeaseLinesFromJSONDbReducer.response, getLeaseLinesFromJSONDbReducer.status]",[812,850],"[getHardLinesFromJSONDbReducer.response, getHardLinesFromJSONDbReducer.status]"]