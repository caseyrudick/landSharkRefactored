{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingWellPlans = ({\n  getWellPlansFromJSONDbReducer\n}) => {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  const [grid, setGrid] = useState([]); // useEffect(()=> {\n  //   if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n  //     convertSurveyNumberStringsToNumbers();\n  //   }\n  // },[getWellPlansFromDynamoDbReducer.status])\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  const convertSurveyNumberStringsToNumbers = () => {// let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n    // console.log(getWellPlansFromJSONDbReducer.response)\n  };\n\n  convertSurveyNumberStringsToNumbers();\n  return \"existing plans\"; // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n  //     <ReactDataSheet\n  //       data={grid}\n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n  //     </Col>\n  //   </Container>\n  // )\n};\n\n_s(ExistingWellPlans, \"Qej1zxRGIb8kHIhvS5SQrshsYLk=\");\n\n_c = ExistingWellPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromJSONDbReducer,\n  saveActiveWellToReduxStoreReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb\n})(ExistingWellPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingWellPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getWellPlansFromJSONDb","ExistingWellPlans","getWellPlansFromJSONDbReducer","plans","setPlans","grid","setGrid","convertSurveyNumberStringsToNumbers","mapStateToProps","saveActiveWellToReduxStoreReducer","getWellsFromJSONDbReducer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,sBAAP,MAAmC,0CAAnC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAqC;AAAA;;AAC7D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC,CAF6D,CAI7D;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,QAAMe,mCAAmC,GAAG,MAAM,CAChD;AACA;AACD,GAHD;;AAIAA,EAAAA,mCAAmC;AACnC,SAEE,gBAFF,CApB6D,CAwB7D;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,CA1CD;;GAAMN,iB;;KAAAA,iB;;AA4CN,MAAMO,eAAe,GAAG,CAAC;AAACN,EAAAA,6BAAD;AAAgCO,EAAAA,iCAAhC;AAAmEC,EAAAA;AAAnE,CAAD,KAAmG;AACzH,SAAO;AACLR,IAAAA;AADK,GAAP;AAGD,CAJD;;AAMA,eAAeT,OAAO,CAACe,eAAD,EAAkB;AAACR,EAAAA;AAAD,CAAlB,CAAP,CAAmDC,iBAAnD,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingWellPlans = ({getWellPlansFromJSONDbReducer}) => {\n  const [plans, setPlans] = useState([])\n  const [grid, setGrid] = useState([])\n\n  // useEffect(()=> {\n  //   if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n  //     convertSurveyNumberStringsToNumbers();\n  //   }\n    \n  // },[getWellPlansFromDynamoDbReducer.status])\n\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  const convertSurveyNumberStringsToNumbers = () => {\n    // let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n    // console.log(getWellPlansFromJSONDbReducer.response)\n  }\n  convertSurveyNumberStringsToNumbers()\n  return (\n    \n    \"existing plans\"\n  )\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}\n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, saveActiveWellToReduxStoreReducer, getWellsFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingWellPlans)"]},"metadata":{},"sourceType":"module"}