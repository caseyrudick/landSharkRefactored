{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport Plot from \"react-plotly.js\";\nimport { isNumber } from \"lodash\";\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\";\n\nconst ExistingPVA = ({\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromJSONDbReducer,\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getLeaseLinesFromJSONDbReducer\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1);\n        return result;\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1);\n        return result;\n      }\n    }\n  };\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][1].value).slice(1);\n        return result;\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][5].value).slice(1);\n        return result;\n      }\n    }\n  }; // const createEastingCoordinates = (data, polyLine = false) => {\n  //   data = [...data]\n  //   let dataLength = data.length\n  //   console.log(dataLength)\n  //   console.log(data)\n  //   if (polyLine) {\n  //     if (data.length === 0) {\n  //       return []\n  //     } else {\n  //       return data.map((row, index) => data[index][2].value).slice(1)\n  //     }\n  //   } else {\n  //       if (data.length === 0) {\n  //         return []\n  //       } else {\n  //         return data.map((row, index) => data[index][6].value).slice(1)\n  //       }\n  //     }\n  //   } \n  // const createNorthingCoordinates = (polyLine = false, data) => {\n  //   if (polyLine) {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.map((row, index) => data[index][1].value).slice(1)\n  // }\n  // } else {\n  //     if (Object.keys(data).length === 0) {\n  //       return []\n  //     } else {\n  //       return data.map((row, index) => data[index][5].value).slice(1)\n  //     }\n  //   }\n  // } \n  // const renderPlanView = () => {\n  //   <Plot\n  //     data = {[\n  //       {\n  //         x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"blue\"},\n  //         name: \"Plan\"\n  //       },\n  //       {\n  //         x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"black\"},\n  //         name: \"Lease Lines\"\n  //       }\n  //     ]}\n  //     layout = { {width: 1000, height: 800, title: \"Section View\"} }\n  //   />\n  // }\n\n\n  const renderPlanView = () => {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"mt-7\",\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicEmail\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              className: \"mt-3\",\n              type: \"float\",\n              placeholder: \"Enter VS Here\",\n              onChange: event => handleVSDirection(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n          y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"blue\"\n          },\n          name: \"Plan\"\n        }, {\n          x: createEastingCoordinates(getSurveysFromJSONDbReducer.response),\n          y: createNorthingCoordinates(getSurveysFromJSONDbReducer.response),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          },\n          name: \"Surveys\"\n        }, {\n          x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response, true),\n          y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response, true),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"black\"\n          },\n          name: \"Lease Lines\"\n        }],\n        layout: {\n          width: 1000,\n          height: 800,\n          title: 'Section View'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [activeWell.operator, \" - \", activeWell.rig, \" - \", activeWell.well]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), renderPlanView()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this); // <Container>\n    //   {renderPlanView()} \n    // </Container>\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_c = ExistingPVA;\n\nconst mapStateToProps = ({\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromJSONDbReducer,\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getLeaseLinesFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell: activeWell.response,\n    getLeaseLinesFromJSONDbReducer,\n    getSurveysFromJSONDbReducer,\n    saveSurveysToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","isNumber","saveSurveysToReduxStore","ExistingPVA","saveSurveysToReduxStoreReducer","getSurveysFromJSONDbReducer","getWellPlansFromJSONDbReducer","activeWell","getLeaseLinesFromJSONDbReducer","createEastingCoordinates","data","polyLine","Object","keys","length","console","log","result","map","row","index","value","slice","createNorthingCoordinates","renderPlanView","event","handleVSDirection","target","x","response","y","type","mode","marker","color","name","width","height","title","status","operator","rig","well","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,uBAAP,MAAoC,2CAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,8BAAD;AAAiCC,EAAAA,2BAAjC;AAA8DC,EAAAA,6BAA9D;AAA6FC,EAAAA,UAA7F;AAAyGC,EAAAA;AAAzG,CAAD,KAA8I;AAEhK,QAAMC,wBAAwB,GAAG,CAACC,IAAD,EAAOC,QAAQ,GAAG,KAAlB,KAA4B;AAC3D,QAAIA,QAAJ,EAAc;AACZ,UAAIC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,KAA6B,CAAjC,EAAoC;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAO,EAAP;AACD,OAHD,MAGO;AACL,YAAIC,MAAM,GAAGP,IAAI,CAACQ,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgBV,IAAI,CAACU,KAAD,CAAJ,CAAY,CAAZ,EAAeC,KAAxC,EAA+CC,KAA/C,CAAqD,CAArD,CAAb;AAEA,eAAOL,MAAP;AACD;AACF,KATD,MASO;AACL,UAAIL,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,KAA6B,CAAjC,EAAoC;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAO,EAAP;AACD,OAHD,MAGO;AACL,YAAIC,MAAM,GAAGP,IAAI,CAACQ,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgBV,IAAI,CAACU,KAAD,CAAJ,CAAY,CAAZ,EAAeC,KAAxC,EAA+CC,KAA/C,CAAqD,CAArD,CAAb;AACA,eAAOL,MAAP;AACD;AACF;AACF,GAnBD;;AAqBA,QAAMM,yBAAyB,GAAG,CAACb,IAAD,EAAOC,QAAQ,GAAG,KAAlB,KAA4B;AAC5D,QAAIA,QAAJ,EAAc;AACZ,UAAIC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,eAAO,EAAP;AACD,OAFD,MAEO;AACL,YAAIG,MAAM,GAAGP,IAAI,CAACQ,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgBV,IAAI,CAACU,KAAD,CAAJ,CAAY,CAAZ,EAAeC,KAAxC,EAA+CC,KAA/C,CAAqD,CAArD,CAAb;AACA,eAAOL,MAAP;AACD;AACF,KAPD,MAOO;AACL,UAAIL,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,KAA6B,CAAjC,EAAoC;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAO,EAAP;AACD,OAHD,MAGO;AACL,YAAIC,MAAM,GAAGP,IAAI,CAACQ,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgBV,IAAI,CAACU,KAAD,CAAJ,CAAY,CAAZ,EAAeC,KAAxC,EAA+CC,KAA/C,CAAqD,CAArD,CAAb;AACA,eAAOL,MAAP;AACD;AACF;AACF,GAjBD,CAvBgK,CAyChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACF;AACA;AACA;AACA;AACM;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAMO,cAAc,GAAG,MAAM;AAC3B,wBACE,QAAC,SAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAA,iCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,gBAAtB;AAAA,mCACE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,SAAS,EAAC,MAAxB;AAA+B,cAAA,IAAI,EAAC,OAApC;AAA4C,cAAA,WAAW,EAAC,eAAxD;AAAwE,cAAA,QAAQ,EAAEC,KAAK,IAAIC,iBAAiB,CAACD,KAAK,CAACE,MAAN,CAAaN,KAAd;AAA5G;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eASA,QAAC,IAAD;AACE,QAAA,IAAI,EAAE,CACJ;AACEO,UAAAA,CAAC,EAAEnB,wBAAwB,CAACH,6BAA6B,CAACuB,QAA/B,CAD7B;AAEEC,UAAAA,CAAC,EAAEP,yBAAyB,CAACjB,6BAA6B,CAACuB,QAA/B,CAF9B;AAGEE,UAAAA,IAAI,EAAE,SAHR;AAIEC,UAAAA,IAAI,EAAE,eAJR;AAKEC,UAAAA,MAAM,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WALV;AAMEC,UAAAA,IAAI,EAAE;AANR,SADI,EASJ;AACEP,UAAAA,CAAC,EAAEnB,wBAAwB,CAACJ,2BAA2B,CAACwB,QAA7B,CAD7B;AAEEC,UAAAA,CAAC,EAAEP,yBAAyB,CAAClB,2BAA2B,CAACwB,QAA7B,CAF9B;AAGEE,UAAAA,IAAI,EAAE,SAHR;AAIEC,UAAAA,IAAI,EAAE,eAJR;AAKEC,UAAAA,MAAM,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WALV;AAMEC,UAAAA,IAAI,EAAE;AANR,SATI,EAiBJ;AACEP,UAAAA,CAAC,EAAEnB,wBAAwB,CAACD,8BAA8B,CAACqB,QAAhC,EAA0C,IAA1C,CAD7B;AAEEC,UAAAA,CAAC,EAAEP,yBAAyB,CAACf,8BAA8B,CAACqB,QAAhC,EAA0C,IAA1C,CAF9B;AAGEE,UAAAA,IAAI,EAAE,SAHR;AAIEC,UAAAA,IAAI,EAAE,eAJR;AAKEC,UAAAA,MAAM,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WALV;AAMEC,UAAAA,IAAI,EAAE;AANR,SAjBI,CADR;AA2BE,QAAA,MAAM,EAAK;AAACC,UAAAA,KAAK,EAAE,IAAR;AAAcC,UAAAA,MAAM,EAAE,GAAtB;AAA2BC,UAAAA,KAAK,EAAE;AAAlC;AA3Bb;AAAA;AAAA;AAAA;AAAA,cATA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAyCD,GA1CD;;AA+CA,MAAI9B,8BAA8B,CAAC+B,MAA/B,KAA0C,UAA1C,IAAwDjC,6BAA6B,CAACiC,MAA9B,KAAyC,UAArG,EAAiH;AAC/G,wBACE,QAAC,SAAD;AAAA,8BACE;AAAA,mBAAKhC,UAAU,CAACiC,QAAhB,SAA6BjC,UAAU,CAACkC,GAAxC,SAAgDlC,UAAU,CAACmC,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGlB,cAAc,EAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAD+G,CAQ7G;AACA;AACA;AAEH,GAZD,MAYO;AACL,WACE,cADF;AAGD;AAGF,CAzKD;;KAAMrB,W;;AA2KN,MAAMwC,eAAe,GAAG,CAAC;AAACvC,EAAAA,8BAAD;AAAgCC,EAAAA,2BAAhC;AAA6DC,EAAAA,6BAA7D;AAA4FC,EAAAA,UAA5F;AAAwGC,EAAAA;AAAxG,CAAD,KAA6I;AACnK,SAAO;AACLF,IAAAA,6BADK;AAELC,IAAAA,UAAU,EAAEA,UAAU,CAACsB,QAFlB;AAGLrB,IAAAA,8BAHK;AAILH,IAAAA,2BAJK;AAKLD,IAAAA;AALK,GAAP;AAOD,CARD;;AAUA,eAAeX,OAAO,CAACkD,eAAD,EAAkB,EAAlB,CAAP,CAA8BxC,WAA9B,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({saveSurveysToReduxStoreReducer, getSurveysFromJSONDbReducer, getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1)\n        return result\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][1].value).slice(1)\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][5].value).slice(1)\n        return result\n      }\n    }\n  }\n  // const createEastingCoordinates = (data, polyLine = false) => {\n  //   data = [...data]\n  //   let dataLength = data.length\n  //   console.log(dataLength)\n  //   console.log(data)\n  //   if (polyLine) {\n  //     if (data.length === 0) {\n  //       return []\n  //     } else {\n  //       return data.map((row, index) => data[index][2].value).slice(1)\n  //     }\n  //   } else {\n  //       if (data.length === 0) {\n  //         return []\n  //       } else {\n  //         return data.map((row, index) => data[index][6].value).slice(1)\n  //       }\n  //     }\n  //   } \n\n    // const createNorthingCoordinates = (polyLine = false, data) => {\n    //   if (polyLine) {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.map((row, index) => data[index][1].value).slice(1)\n        // }\n      // } else {\n      //     if (Object.keys(data).length === 0) {\n      //       return []\n      //     } else {\n      //       return data.map((row, index) => data[index][5].value).slice(1)\n      //     }\n      //   }\n      // } \n\n\n  // const renderPlanView = () => {\n  //   <Plot\n  //     data = {[\n  //       {\n  //         x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"blue\"},\n  //         name: \"Plan\"\n  //       },\n  //       {\n  //         x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"black\"},\n  //         name: \"Lease Lines\"\n  //       }\n  //     ]}\n  //     layout = { {width: 1000, height: 800, title: \"Section View\"} }\n  //   />\n  // }\n\n\n  const renderPlanView = () => {\n    return (\n      <Container>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" placeholder=\"Enter VS Here\" onChange={event => handleVSDirection(event.target.value)}/>\n            </Form.Group>\n          </Form>\n        </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n            y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(getSurveysFromJSONDbReducer.response),\n            y: createNorthingCoordinates(getSurveysFromJSONDbReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response, true),\n            y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          }\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Section View'} }\n        />\n      </Container>\n    )\n  }\n\n  \n\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.operator} - {activeWell.rig} - {activeWell.well}</h3>\n        {renderPlanView()} \n      </Container>\n    )\n      \n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    \n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({saveSurveysToReduxStoreReducer,getSurveysFromJSONDbReducer, getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer, \n    activeWell: activeWell.response, \n    getLeaseLinesFromJSONDbReducer,\n    getSurveysFromJSONDbReducer,\n    saveSurveysToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}