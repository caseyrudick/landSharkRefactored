{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nmodule.exports = function handleLabelDefaults(coerce, layout, lineColor, opts) {\n  if (!opts) opts = {};\n  var showLabels = coerce('contours.showlabels');\n\n  if (showLabels) {\n    var globalFont = layout.font;\n    Lib.coerceFont(coerce, 'contours.labelfont', {\n      family: globalFont.family,\n      size: globalFont.size,\n      color: lineColor\n    });\n    coerce('contours.labelformat');\n  }\n\n  if (opts.hasHover !== false) coerce('zhoverformat');\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/contour/label_defaults.js"],"names":["Lib","require","module","exports","handleLabelDefaults","coerce","layout","lineColor","opts","showLabels","globalFont","font","coerceFont","family","size","color","hasHover"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,SAA7C,EAAwDC,IAAxD,EAA8D;AAC3E,MAAG,CAACA,IAAJ,EAAUA,IAAI,GAAG,EAAP;AACV,MAAIC,UAAU,GAAGJ,MAAM,CAAC,qBAAD,CAAvB;;AACA,MAAGI,UAAH,EAAe;AACX,QAAIC,UAAU,GAAGJ,MAAM,CAACK,IAAxB;AACAX,IAAAA,GAAG,CAACY,UAAJ,CAAeP,MAAf,EAAuB,oBAAvB,EAA6C;AACzCQ,MAAAA,MAAM,EAAEH,UAAU,CAACG,MADsB;AAEzCC,MAAAA,IAAI,EAAEJ,UAAU,CAACI,IAFwB;AAGzCC,MAAAA,KAAK,EAAER;AAHkC,KAA7C;AAKAF,IAAAA,MAAM,CAAC,sBAAD,CAAN;AACH;;AAED,MAAGG,IAAI,CAACQ,QAAL,KAAkB,KAArB,EAA4BX,MAAM,CAAC,cAAD,CAAN;AAC/B,CAdD","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\n\nmodule.exports = function handleLabelDefaults(coerce, layout, lineColor, opts) {\n    if(!opts) opts = {};\n    var showLabels = coerce('contours.showlabels');\n    if(showLabels) {\n        var globalFont = layout.font;\n        Lib.coerceFont(coerce, 'contours.labelfont', {\n            family: globalFont.family,\n            size: globalFont.size,\n            color: lineColor\n        });\n        coerce('contours.labelformat');\n    }\n\n    if(opts.hasHover !== false) coerce('zhoverformat');\n};\n"]},"metadata":{},"sourceType":"script"}