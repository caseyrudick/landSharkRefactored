{"ast":null,"code":"'use strict';\n\nvar svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\n\nfunction isSVG(buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': svgReg,\n  'width': /\\swidth=(['\"])([^%]+?)\\1/,\n  'height': /\\sheight=(['\"])([^%]+?)\\1/,\n  'viewbox': /\\sviewBox=(['\"])(.+?)\\1/\n};\nvar units = {\n  'cm': 96 / 2.54,\n  'mm': 96 / 2.54 / 10,\n  'm': 96 / 2.54 * 100,\n  'pt': 96 / 72,\n  'pc': 96 / 72 / 12,\n  'em': 16,\n  'ex': 8\n};\n\nfunction parseLength(len) {\n  var m = /([0-9.]+)([a-z]*)/.exec(len);\n\n  if (!m) {\n    return undefined;\n  }\n\n  return Math.round(parseFloat(m[1]) * (units[m[2]] || 1));\n}\n\nfunction parseViewbox(viewbox) {\n  var bounds = viewbox.split(' ');\n  return {\n    'width': parseLength(bounds[2]),\n    'height': parseLength(bounds[3])\n  };\n}\n\nfunction parseAttributes(root) {\n  var width = root.match(extractorRegExps.width);\n  var height = root.match(extractorRegExps.height);\n  var viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    'width': width && parseLength(width[2]),\n    'height': height && parseLength(height[2]),\n    'viewbox': viewbox && parseViewbox(viewbox[2])\n  };\n}\n\nfunction calculateByDimensions(attrs) {\n  return {\n    'width': attrs.width,\n    'height': attrs.height\n  };\n}\n\nfunction calculateByViewbox(attrs) {\n  var ratio = attrs.viewbox.width / attrs.viewbox.height;\n\n  if (attrs.width) {\n    return {\n      'width': attrs.width,\n      'height': Math.floor(attrs.width / ratio)\n    };\n  }\n\n  if (attrs.height) {\n    return {\n      'width': Math.floor(attrs.height * ratio),\n      'height': attrs.height\n    };\n  }\n\n  return {\n    'width': attrs.viewbox.width,\n    'height': attrs.viewbox.height\n  };\n}\n\nfunction calculate(buffer) {\n  var root = buffer.toString('utf8').match(extractorRegExps.root);\n\n  if (root) {\n    var attrs = parseAttributes(root[0]);\n\n    if (attrs.width && attrs.height) {\n      return calculateByDimensions(attrs);\n    }\n\n    if (attrs.viewbox) {\n      return calculateByViewbox(attrs);\n    }\n  }\n\n  throw new TypeError('invalid svg');\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/image-size/lib/types/svg.js"],"names":["svgReg","isSVG","buffer","test","extractorRegExps","units","parseLength","len","m","exec","undefined","Math","round","parseFloat","parseViewbox","viewbox","bounds","split","parseAttributes","root","width","match","height","calculateByDimensions","attrs","calculateByViewbox","ratio","floor","calculate","toString","TypeError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nfunction isSVG (buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': svgReg,\n  'width': /\\swidth=(['\"])([^%]+?)\\1/,\n  'height': /\\sheight=(['\"])([^%]+?)\\1/,\n  'viewbox': /\\sviewBox=(['\"])(.+?)\\1/\n};\n\nvar units = {\n  'cm': 96/2.54,\n  'mm': 96/2.54/10,\n  'm':  96/2.54*100,\n  'pt': 96/72,\n  'pc': 96/72/12,\n  'em': 16,\n  'ex': 8,\n};\n\nfunction parseLength (len) {\n  var m = /([0-9.]+)([a-z]*)/.exec(len);\n  if (!m) {\n    return undefined;\n  }\n  return Math.round(parseFloat(m[1]) * (units[m[2]] || 1));\n}\n\nfunction parseViewbox (viewbox) {\n  var bounds = viewbox.split(' ');\n  return {\n    'width': parseLength(bounds[2]),\n    'height': parseLength(bounds[3])\n  };\n}\n\nfunction parseAttributes (root) {\n  var width = root.match(extractorRegExps.width);\n  var height = root.match(extractorRegExps.height);\n  var viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    'width': width && parseLength(width[2]),\n    'height': height && parseLength(height[2]),\n    'viewbox': viewbox && parseViewbox(viewbox[2])\n  };\n}\n\nfunction calculateByDimensions (attrs) {\n  return {\n    'width': attrs.width,\n    'height': attrs.height\n  };\n}\n\nfunction calculateByViewbox (attrs) {\n  var ratio = attrs.viewbox.width / attrs.viewbox.height;\n  if (attrs.width) {\n    return {\n      'width': attrs.width,\n      'height': Math.floor(attrs.width / ratio)\n    };\n  }\n  if (attrs.height) {\n    return {\n      'width': Math.floor(attrs.height * ratio),\n      'height': attrs.height\n    };\n  }\n  return {\n    'width': attrs.viewbox.width,\n    'height': attrs.viewbox.height\n  };\n}\n\nfunction calculate (buffer) {\n  var root = buffer.toString('utf8').match(extractorRegExps.root);\n  if (root) {\n    var attrs = parseAttributes(root[0]);\n    if (attrs.width && attrs.height) {\n      return calculateByDimensions(attrs);\n    }\n    if (attrs.viewbox) {\n      return calculateByViewbox(attrs);\n    }\n  }\n  throw new TypeError('invalid svg');\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};\n"]},"metadata":{},"sourceType":"script"}