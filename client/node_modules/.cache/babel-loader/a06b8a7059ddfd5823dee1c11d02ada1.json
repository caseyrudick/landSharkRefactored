{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\n// react\nimport React, { useState, useEffect } from 'react'; // react-bootstrap\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown'; // other libs/imports\n\nimport { connect } from 'react-redux';\nimport _ from 'lodash'; // images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\n\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\nimport getWellPlansFromDynamoDb from '../ActionCreators/getWellPlansFromDynamoDb';\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\";\nimport getLeaseLinesFromJSONDb from \"../ActionCreators/getLeaseLinesFromJSONDb\";\nimport getWellsWithLeaseLinesFromJSONDb from \"../ActionCreators/getWellsWithLeaseLinesFromJSONDb\";\nimport getSurveysFromJSONDb from \"../ActionCreators/getSurveysFromJSONDb\";\nimport getWellsWithSurveysFromJSONDb from \"../ActionCreators/getWellsWithSurveysFromJSONDb\";\nimport getWellsWithHardLinesFromJSONDb from \"../ActionCreators/getWellsWithHardLinesFromJSONDb\";\nimport getHardLinesFromJSONDb from \"../ActionCreators/getHardLinesFromJSONDb\";\nimport postWellInfoToDynamoDb from \"../ActionCreators/postWellInfoToDynamoDb\";\nimport getWellsFromDynamoDb from \"../ActionCreators/getWellsFromDynamoDb\";\n\nconst Home = ({\n  getWellPlansFromDynamoDb,\n  getWellsFromDynamoDbReducer,\n  getWellsFromDynamoDb,\n  postWellInfoToDynamoDb,\n  getHardLinesFromJSONDb,\n  getWellsWithHardLinesFromJSONDb,\n  getWellsWithSurveysFromJSONDb,\n  getSurveysFromJSONDb,\n  getWellsWithLeaseLinesFromJSONDb,\n  getWellPlansFromJSONDb,\n  saveActiveWellToReduxStore,\n  postWellInfoToJSONDb,\n  saveWellInfoToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  getLeaseLinesFromJSONDb\n}) => {\n  _s();\n\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [usState, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n  useEffect(() => {\n    getWellsWithLeaseLinesFromJSONDb();\n    getWellsWithSurveysFromJSONDb();\n    getWellsWithHardLinesFromJSONDb();\n    getWellsFromDynamoDb();\n  }, []);\n\n  const renderWellNames = () => {\n    if (getWellsFromDynamoDbReducer.status === \"received\") {\n      let wells = getWellsFromDynamoDbReducer.response.Items;\n      return /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n        children: wells.map(well => {\n          return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            href: \"\",\n            onClick: () => {\n              setActiveWell(`${well.Operator.S} - ${well.Rig.S} - ${well.Well_Name.S}`);\n              saveActiveWellToReduxStore(well);\n              console.log();\n            },\n            children: [well.Operator.S, \" - \", well.Rig.S, \" - \", well.Well_Name.S]\n          }, `${well.Operator.S}${well.Well_Name.S}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    } else {\n      return \"Data loading\";\n    }\n  };\n\n  const createNewWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Add new well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Operator\",\n        onChange: event => setOperator(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Rig\",\n        onChange: event => setRig(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Well\",\n        onChange: event => setWell(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"County\",\n        onChange: event => setCounty(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"State\",\n        onChange: event => setUSstate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Northing\",\n        onChange: event => setNorthing(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Easting\",\n        onChange: event => setEasting(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"info\",\n        disabled: operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || usState === \"\" ? true : false,\n        onClick: () => handleNewWellSubmit(),\n        children: \"Submit and begin adding well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting\n    }; // postWellInfoToJSONDb(wellInfo)\n\n    postWellInfoToDynamoDb(wellInfo);\n    saveWellInfoToReduxStore(wellInfo);\n    saveActiveWellToReduxStore(wellInfo);\n  };\n\n  const handleFetchData = () => {\n    getWellPlansFromDynamoDb(activeWell); //getSurveysFromJSONDb(activeWell)\n    // setTimeout(getWellPlansFromJSONDb, 500, activeWell);\n    //setTimeout(getLeaseLinesFromJSONDb, 1000, activeWell);\n    // setTimeout(getSurveysFromJSONDb, 1500, activeWell)\n    //getHardLinesFromJSONDb(activeWell)\n    //   // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n    //   // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n    //   // setTimeout(getOffsets(selectedWell), 2500);\n  };\n\n  const selectExistingWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select Existing Well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: activeWell ? activeWell : `Select Well:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), renderWellNames()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"success\",\n        disabled: activeWell === \"None\" ? true : false,\n        onClick: handleFetchData,\n        children: \"Fetch well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [createNewWell(), selectExistingWell()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 7\n  }, this); //  }\n};\n\n_s(Home, \"JnUfelRL+BN95keNFNznCi904IM=\");\n\n_c = Home;\n\nconst mapStateToProps = ({\n  getWellsFromDynamoDbReducer,\n  postWellInfoToDynamoDbReducer,\n  getHardLinesFromJSONDb,\n  saveActiveWellToReduxStoreReducer,\n  saveWellInfoToReduxStoreReducer,\n  postWellInfoToJSONDbReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    postWellInfoToDynamoDbReducer,\n    getWellsFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromDynamoDb,\n  getWellsFromDynamoDb,\n  postWellInfoToDynamoDb,\n  getHardLinesFromJSONDb,\n  getWellsWithHardLinesFromJSONDb,\n  getWellsWithSurveysFromJSONDb,\n  getSurveysFromJSONDb,\n  getWellsWithLeaseLinesFromJSONDb,\n  saveActiveWellToReduxStore,\n  getWellPlansFromJSONDb,\n  saveWellInfoToReduxStore,\n  postWellInfoToJSONDb,\n  getLeaseLinesFromJSONDb\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/Home.js"],"names":["React","useState","useEffect","Container","Row","Col","Button","Form","Dropdown","connect","_","saveWellInfoToReduxStore","getWellPlansFromDynamoDb","postWellInfoToJSONDb","getWellPlansFromJSONDb","saveActiveWellToReduxStore","getLeaseLinesFromJSONDb","getWellsWithLeaseLinesFromJSONDb","getSurveysFromJSONDb","getWellsWithSurveysFromJSONDb","getWellsWithHardLinesFromJSONDb","getHardLinesFromJSONDb","postWellInfoToDynamoDb","getWellsFromDynamoDb","Home","getWellsFromDynamoDbReducer","saveWellInfoToReduxStoreReducer","activeWell","setActiveWell","operator","setOperator","rig","setRig","well","setWell","county","setCounty","usState","setUSstate","northing","setNorthing","easting","setEasting","renderWellNames","status","wells","response","Items","map","Operator","S","Rig","Well_Name","console","log","createNewWell","event","target","value","handleNewWellSubmit","wellInfo","handleFetchData","selectExistingWell","mapStateToProps","postWellInfoToDynamoDbReducer","saveActiveWellToReduxStoreReducer","postWellInfoToJSONDbReducer","getWellsFromJSONDbReducer"],"mappings":"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","sourcesContent":["// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\nimport getWellPlansFromDynamoDb from '../ActionCreators/getWellPlansFromDynamoDb';\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\nimport saveActiveWellToReduxStore from \"../ActionCreators/saveActiveWellToReduxStore\"\nimport getLeaseLinesFromJSONDb from \"../ActionCreators/getLeaseLinesFromJSONDb\"\nimport getWellsWithLeaseLinesFromJSONDb from \"../ActionCreators/getWellsWithLeaseLinesFromJSONDb\"\nimport getSurveysFromJSONDb from \"../ActionCreators/getSurveysFromJSONDb\"\nimport getWellsWithSurveysFromJSONDb from \"../ActionCreators/getWellsWithSurveysFromJSONDb\"\nimport getWellsWithHardLinesFromJSONDb from \"../ActionCreators/getWellsWithHardLinesFromJSONDb\"\nimport getHardLinesFromJSONDb from \"../ActionCreators/getHardLinesFromJSONDb\"\nimport postWellInfoToDynamoDb from \"../ActionCreators/postWellInfoToDynamoDb\"\nimport getWellsFromDynamoDb from \"../ActionCreators/getWellsFromDynamoDb\"\n\n\nconst Home = ({ getWellPlansFromDynamoDb, getWellsFromDynamoDbReducer, getWellsFromDynamoDb, postWellInfoToDynamoDb, getHardLinesFromJSONDb, getWellsWithHardLinesFromJSONDb ,getWellsWithSurveysFromJSONDb, getSurveysFromJSONDb, getWellsWithLeaseLinesFromJSONDb ,getWellPlansFromJSONDb, saveActiveWellToReduxStore, postWellInfoToJSONDb, saveWellInfoToReduxStore, saveWellInfoToReduxStoreReducer, getLeaseLinesFromJSONDb}) => {\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [usState, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n\n  useEffect(() => {\n    getWellsWithLeaseLinesFromJSONDb()\n    getWellsWithSurveysFromJSONDb()\n    getWellsWithHardLinesFromJSONDb()\n    getWellsFromDynamoDb()\n  }, []);\n\n\n  const renderWellNames = () => {\n    if (getWellsFromDynamoDbReducer.status === \"received\") {\n      let wells = getWellsFromDynamoDbReducer.response.Items\n      return (\n        <Dropdown.Menu>\n          {wells.map(well => {\n            return (\n              <Dropdown.Item \n                href=\"\" \n                key={`${well.Operator.S}${well.Well_Name.S}`} \n                onClick={()=> {\n                  setActiveWell(`${well.Operator.S} - ${well.Rig.S} - ${well.Well_Name.S}`)\n                  saveActiveWellToReduxStore(well)\n                  console.log()\n              } }>\n                {well.Operator.S} - {well.Rig.S} - {well.Well_Name.S}\n              </Dropdown.Item>\n            )\n          })}\n        </Dropdown.Menu>\n      )\n    }\n    else {\n      return \"Data loading\"\n    }\n  }\n\n  const createNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || usState === \"\" ? true : false } onClick={()=>handleNewWellSubmit()}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting\n    }\n    // postWellInfoToJSONDb(wellInfo)\n    postWellInfoToDynamoDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n    saveActiveWellToReduxStore(wellInfo)\n  }\n\n  const handleFetchData = () => {\n    getWellPlansFromDynamoDb(activeWell)\n    //getSurveysFromJSONDb(activeWell)\n    // setTimeout(getWellPlansFromJSONDb, 500, activeWell);\n    //setTimeout(getLeaseLinesFromJSONDb, 1000, activeWell);\n    // setTimeout(getSurveysFromJSONDb, 1500, activeWell)\n    //getHardLinesFromJSONDb(activeWell)\n  //   // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n  //   // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n  //   // setTimeout(getOffsets(selectedWell), 2500);\n  }\n\n\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select Existing Well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            {activeWell ? activeWell : `Select Well:`}\n          </Dropdown.Toggle>\n          {renderWellNames()}\n        </Dropdown>\n        <Button className=\"mt-4\" variant=\"success\" disabled={ activeWell === \"None\" ? true : false } onClick={handleFetchData}>Fetch well data</Button>\n      </Col>\n    )\n  }\n\n\n  return (\n      <Container>\n        <Row>\n          {createNewWell()}\n          {selectExistingWell()}\n        </Row>\n      </Container>\n    )\n//  }\n}\n\nconst mapStateToProps = ({ getWellsFromDynamoDbReducer, postWellInfoToDynamoDbReducer, getHardLinesFromJSONDb, saveActiveWellToReduxStoreReducer ,saveWellInfoToReduxStoreReducer, postWellInfoToJSONDbReducer, getWellsFromJSONDbReducer }) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    postWellInfoToDynamoDbReducer,\n    getWellsFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {getWellPlansFromDynamoDb, getWellsFromDynamoDb, postWellInfoToDynamoDb, getHardLinesFromJSONDb, getWellsWithHardLinesFromJSONDb, getWellsWithSurveysFromJSONDb, getSurveysFromJSONDb, getWellsWithLeaseLinesFromJSONDb ,saveActiveWellToReduxStore, getWellPlansFromJSONDb, saveWellInfoToReduxStore, postWellInfoToJSONDb, getLeaseLinesFromJSONDb })(Home);\n"]},"metadata":{},"sourceType":"module"}