{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PolyLines.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport ExistingLeaseLines from \"./ExistingLeaseLines\";\nimport ExistingHardLines from \"./ExistingHardLines\";\nimport LeaseLines from \"./LeaseLines\";\nimport HardLines from \"./HardLines\";\n\nconst PolyLines = ({\n  activeWell\n}) => {\n  const renderWellData = () => {\n    const {\n      operator,\n      rig,\n      well\n    } = activeWell.response;\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"my-4\",\n      children: [operator, \" - \", rig, \" - \", well]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [renderWellData(), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Lease Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LeaseLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Hard Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(HardLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PolyLines;\n\nconst mapStateToProps = ({\n  activeWell\n}) => {\n  return {\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps)(PolyLines); // import React, { useState, useEffect } from \"react\"\n// //bootstrap\n// import Container from \"react-bootstrap/esm/Container\";\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n// import 'react-datasheet/lib/react-datasheet.css';\n// import { connect } from \"react-redux\"\n// import ReactDataSheet from 'react-datasheet';\n// // actionCreators\n// import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n// const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n//   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n//   // set up initial grid\n//   // create local state to setGrid\n//   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n//   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n//   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n//   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n//   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n//   const initialGrid = [\n//     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n//     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n//   ]\n//   const [grid, setGrid] = useState(initialGrid)\n//   const renderWellHeader = () => {\n//     if (activeWell.status === \"received\") {\n//       // const {operator, rig, well} = activeWell.response\n//       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//     } else {\n//       return \"No Well Data\"\n//     }\n//   }\n//   const onCellsChanged = changes => {\n//     const gridNew = grid.map(row => [...row])\n//     changes.forEach(({cell, row, col, value}) => {\n//       gridNew[row][col] = {...grid[row][col], value}\n//     });\n//     setGrid(gridNew);\n//   }\n//   const handleSubmit = () => {\n//     const wellInfoAndLeaseLines = {\n//       operator,\n//       rig, \n//       well, \n//       county,\n//       usState, \n//       northing,\n//       easting,\n//       grid\n//     }\n//     // const activeWell\n//     // saveLeaseLinesToJSON \n//     checkTest()\n//     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n//     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n//   }\n//   const checkTest = () => {\n//     console.log(\"whyyy\")\n//   }\n//   const renderRowsButtons = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"my-4\">\n//           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n//             Submit\n//           </Button>\n//           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n//             Add a Row\n//           </Button>\n//           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n//             Remove a Row\n//           </Button>\n//         </Col>\n//       </Row>\n//     )\n//   }\n//   const addRow = () => {\n//     const gridLength = grid.length\n//     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n//     const newGrid = [...grid, newRow]\n//     setGrid(newGrid)\n//   }\n//   const removeRow = () => {\n//     const newGrid = [...grid]\n//     newGrid.pop()\n//     setGrid(newGrid)\n//   }\n//   return (\n//     <Container>\n//       <Row>\n//         <Col xs={10}>\n//           {renderWellHeader()}\n//           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n//           {renderRowsButtons()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n// const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n//   return {\n//     activeWell,\n//     postLeaseLinesToJSONDbReducer,\n//   }\n// }\n// export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)\n\nvar _c;\n\n$RefreshReg$(_c, \"PolyLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/PolyLines.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","ExistingLeaseLines","ExistingHardLines","LeaseLines","HardLines","PolyLines","activeWell","renderWellData","operator","rig","well","response","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAkB;AAClC,QAAMC,cAAc,GAAG,MAAM;AACzB,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA,GAAX;AAAgBC,MAAAA;AAAhB,QAAyBJ,UAAU,CAACK,QAA1C;AACA,wBACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA,iBAAsBH,QAAtB,SAAmCC,GAAnC,SAA2CC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGD,GALH;;AAQA,sBACE,QAAC,SAAD;AAAA,eACGH,cAAc,EADjB,eAEE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE,QAAC,GAAD;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,GAAD;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAxBD;;KAAMF,S;;AA0BN,MAAMO,eAAe,GAAG,CAAC;AAACN,EAAAA;AAAD,CAAD,KAAkB;AACzC,SAAO;AACNA,IAAAA;AADM,GAAP;AAGA,CAJD;;AAMA,eAAeZ,OAAO,CAACkB,eAAD,CAAP,CAAyBP,SAAzB,CAAfsourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport ExistingLeaseLines from \"./ExistingLeaseLines\"\nimport ExistingHardLines from \"./ExistingHardLines\"\nimport LeaseLines from \"./LeaseLines\"\nimport HardLines from \"./HardLines\"\n\nconst PolyLines = ({activeWell}) => {\n  const renderWellData = () => {\n      const {operator, rig, well } = activeWell.response\n      return (\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n      )\n    }\n  \n\n  return (\n    <Container>\n      {renderWellData()}\n      <Row className=\"mt-4\">\n        <Col>\n          <h4>Lease Lines</h4>\n          <LeaseLines/>\n        </Col>\n        <Col>\n        <h4>Hard Lines</h4>\n          <HardLines/>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell}) => {\n return {\n  activeWell, \n }\n}\n\nexport default connect(mapStateToProps)(PolyLines)\n\n\n\n\n// import React, { useState, useEffect } from \"react\"\n// //bootstrap\n// import Container from \"react-bootstrap/esm/Container\";\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css';\n// import { connect } from \"react-redux\"\n// import ReactDataSheet from 'react-datasheet';\n\n// // actionCreators\n// import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\n// const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n//   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n//   // set up initial grid\n//   // create local state to setGrid\n//   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n//   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n//   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n//   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n//   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n//   const initialGrid = [\n//     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n//     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n//     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n//   ]\n//   const [grid, setGrid] = useState(initialGrid)\n\n//   const renderWellHeader = () => {\n//     if (activeWell.status === \"received\") {\n//       // const {operator, rig, well} = activeWell.response\n//       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//     } else {\n//       return \"No Well Data\"\n//     }\n//   }\n\n//   const onCellsChanged = changes => {\n//     const gridNew = grid.map(row => [...row])\n//     changes.forEach(({cell, row, col, value}) => {\n//       gridNew[row][col] = {...grid[row][col], value}\n//     });\n//     setGrid(gridNew);\n    \n//   }\n\n//   const handleSubmit = () => {\n//     const wellInfoAndLeaseLines = {\n//       operator,\n//       rig, \n//       well, \n//       county,\n//       usState, \n//       northing,\n//       easting,\n//       grid\n//     }\n//     // const activeWell\n//     // saveLeaseLinesToJSON \n//     checkTest()\n//     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n//     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n//   }\n\n//   const checkTest = () => {\n//     console.log(\"whyyy\")\n//   }\n\n//   const renderRowsButtons = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"my-4\">\n//           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n//             Submit\n//           </Button>\n//           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n//             Add a Row\n//           </Button>\n//           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n//             Remove a Row\n//           </Button>\n\n//         </Col>\n//       </Row>\n//     )\n//   }\n\n//   const addRow = () => {\n//     const gridLength = grid.length\n//     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n//     const newGrid = [...grid, newRow]\n//     setGrid(newGrid)\n//   }\n\n//   const removeRow = () => {\n//     const newGrid = [...grid]\n//     newGrid.pop()\n//     setGrid(newGrid)\n//   }\n  \n\n//   return (\n//     <Container>\n//       <Row>\n//         <Col xs={10}>\n//           {renderWellHeader()}\n//           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n//           {renderRowsButtons()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n//   return {\n//     activeWell,\n//     postLeaseLinesToJSONDbReducer,\n//   }\n// }\n\n// export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)"]},"metadata":{},"sourceType":"module"}