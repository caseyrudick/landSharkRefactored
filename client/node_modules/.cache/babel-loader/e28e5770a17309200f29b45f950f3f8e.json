{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Fx = require('../../components/fx');\n\nvar Registry = require('../../registry');\n\nvar Color = require('../../components/color');\n\nvar fillText = require('../../lib').fillText;\n\nvar getLineWidth = require('./helpers').getLineWidth;\n\nvar hoverLabelText = require('../../plots/cartesian/axes').hoverLabelText;\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nfunction hoverPoints(pointData, xval, yval, hovermode) {\n  var barPointData = hoverOnBars(pointData, xval, yval, hovermode);\n\n  if (barPointData) {\n    var cd = barPointData.cd;\n    var trace = cd[0].trace;\n    var di = cd[barPointData.index];\n    barPointData.color = getTraceColor(trace, di);\n    Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, barPointData);\n    return [barPointData];\n  }\n}\n\nfunction hoverOnBars(pointData, xval, yval, hovermode) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var t = cd[0].t;\n  var isClosest = hovermode === 'closest';\n  var isWaterfall = trace.type === 'waterfall';\n  var maxHoverDistance = pointData.maxHoverDistance;\n  var posVal, sizeVal, posLetter, sizeLetter, dx, dy, pRangeCalc;\n\n  function thisBarMinPos(di) {\n    return di[posLetter] - di.w / 2;\n  }\n\n  function thisBarMaxPos(di) {\n    return di[posLetter] + di.w / 2;\n  }\n\n  var minPos = isClosest ? thisBarMinPos : function (di) {\n    /*\n     * In compare mode, accept a bar if you're on it *or* its group.\n     * Nearly always it's the group that matters, but in case the bar\n     * was explicitly set wider than its group we'd better accept the\n     * whole bar.\n     *\n     * use `bardelta` instead of `bargroupwidth` so we accept hover\n     * in the gap. That way hover doesn't flash on and off as you\n     * mouse over the plot in compare modes.\n     * In 'closest' mode though the flashing seems inevitable,\n     * without far more complex logic\n     */\n    return Math.min(thisBarMinPos(di), di.p - t.bardelta / 2);\n  };\n  var maxPos = isClosest ? thisBarMaxPos : function (di) {\n    return Math.max(thisBarMaxPos(di), di.p + t.bardelta / 2);\n  };\n\n  function _positionFn(_minPos, _maxPos) {\n    // add a little to the pseudo-distance for wider bars, so that like scatter,\n    // if you are over two overlapping bars, the narrower one wins.\n    return Fx.inbox(_minPos - posVal, _maxPos - posVal, maxHoverDistance + Math.min(1, Math.abs(_maxPos - _minPos) / pRangeCalc) - 1);\n  }\n\n  function positionFn(di) {\n    return _positionFn(minPos(di), maxPos(di));\n  }\n\n  function thisBarPositionFn(di) {\n    return _positionFn(thisBarMinPos(di), thisBarMaxPos(di));\n  }\n\n  function sizeFn(di) {\n    var v = sizeVal;\n    var b = di.b;\n    var s = di[sizeLetter];\n\n    if (isWaterfall) {\n      var rawS = Math.abs(di.rawS) || 0;\n\n      if (v > 0) {\n        s += rawS;\n      } else if (v < 0) {\n        s -= rawS;\n      }\n    } // add a gradient so hovering near the end of a\n    // bar makes it a little closer match\n\n\n    return Fx.inbox(b - v, s - v, maxHoverDistance + (s - v) / (s - b) - 1);\n  }\n\n  if (trace.orientation === 'h') {\n    posVal = yval;\n    sizeVal = xval;\n    posLetter = 'y';\n    sizeLetter = 'x';\n    dx = sizeFn;\n    dy = positionFn;\n  } else {\n    posVal = xval;\n    sizeVal = yval;\n    posLetter = 'x';\n    sizeLetter = 'y';\n    dy = sizeFn;\n    dx = positionFn;\n  }\n\n  var pa = pointData[posLetter + 'a'];\n  var sa = pointData[sizeLetter + 'a'];\n  pRangeCalc = Math.abs(pa.r2c(pa.range[1]) - pa.r2c(pa.range[0]));\n\n  function dxy(di) {\n    return (dx(di) + dy(di)) / 2;\n  }\n\n  var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n  Fx.getClosest(cd, distfn, pointData); // skip the rest (for this trace) if we didn't find a close point\n\n  if (pointData.index === false) return; // skip points inside axis rangebreaks\n\n  if (cd[pointData.index].p === BADNUM) return; // if we get here and we're not in 'closest' mode, push min/max pos back\n  // onto the group - even though that means occasionally the mouse will be\n  // over the hover label.\n\n  if (!isClosest) {\n    minPos = function (di) {\n      return Math.min(thisBarMinPos(di), di.p - t.bargroupwidth / 2);\n    };\n\n    maxPos = function (di) {\n      return Math.max(thisBarMaxPos(di), di.p + t.bargroupwidth / 2);\n    };\n  } // the closest data point\n\n\n  var index = pointData.index;\n  var di = cd[index];\n  var size = trace.base ? di.b + di.s : di.s;\n  pointData[sizeLetter + '0'] = pointData[sizeLetter + '1'] = sa.c2p(di[sizeLetter], true);\n  pointData[sizeLetter + 'LabelVal'] = size;\n  var extent = t.extents[t.extents.round(di.p)];\n  pointData[posLetter + '0'] = pa.c2p(isClosest ? minPos(di) : extent[0], true);\n  pointData[posLetter + '1'] = pa.c2p(isClosest ? maxPos(di) : extent[1], true);\n  var hasPeriod = di.orig_p !== undefined;\n  pointData[posLetter + 'LabelVal'] = hasPeriod ? di.orig_p : di.p;\n  pointData.labelLabel = hoverLabelText(pa, pointData[posLetter + 'LabelVal']);\n  pointData.valueLabel = hoverLabelText(sa, pointData[sizeLetter + 'LabelVal']);\n  pointData.baseLabel = hoverLabelText(sa, di.b); // spikelines always want \"closest\" distance regardless of hovermode\n\n  pointData.spikeDistance = (sizeFn(di) + thisBarPositionFn(di)) / 2 - maxHoverDistance; // they also want to point to the data value, regardless of where the label goes\n  // in case of bars shifted within groups\n\n  pointData[posLetter + 'Spike'] = pa.c2p(di.p, true);\n  fillText(di, trace, pointData);\n  pointData.hovertemplate = trace.hovertemplate;\n  return pointData;\n}\n\nfunction getTraceColor(trace, di) {\n  var mc = di.mcc || trace.marker.color;\n  var mlc = di.mlcc || trace.marker.line.color;\n  var mlw = getLineWidth(trace, di);\n  if (Color.opacity(mc)) return mc;else if (Color.opacity(mlc) && mlw) return mlc;\n}\n\nmodule.exports = {\n  hoverPoints: hoverPoints,\n  hoverOnBars: hoverOnBars,\n  getTraceColor: getTraceColor\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/bar/hover.js"],"names":["Fx","require","Registry","Color","fillText","getLineWidth","hoverLabelText","BADNUM","hoverPoints","pointData","xval","yval","hovermode","barPointData","hoverOnBars","cd","trace","di","index","color","getTraceColor","getComponentMethod","t","isClosest","isWaterfall","type","maxHoverDistance","posVal","sizeVal","posLetter","sizeLetter","dx","dy","pRangeCalc","thisBarMinPos","w","thisBarMaxPos","minPos","Math","min","p","bardelta","maxPos","max","_positionFn","_minPos","_maxPos","inbox","abs","positionFn","thisBarPositionFn","sizeFn","v","b","s","rawS","orientation","pa","sa","r2c","range","dxy","distfn","getDistanceFunction","getClosest","bargroupwidth","size","base","c2p","extent","extents","round","hasPeriod","orig_p","undefined","labelLabel","valueLabel","baseLabel","spikeDistance","hovertemplate","mc","mcc","marker","mlc","mlcc","line","mlw","opacity","module","exports"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Fx = require('../../components/fx');\nvar Registry = require('../../registry');\nvar Color = require('../../components/color');\n\nvar fillText = require('../../lib').fillText;\nvar getLineWidth = require('./helpers').getLineWidth;\nvar hoverLabelText = require('../../plots/cartesian/axes').hoverLabelText;\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nfunction hoverPoints(pointData, xval, yval, hovermode) {\n    var barPointData = hoverOnBars(pointData, xval, yval, hovermode);\n\n    if(barPointData) {\n        var cd = barPointData.cd;\n        var trace = cd[0].trace;\n        var di = cd[barPointData.index];\n\n        barPointData.color = getTraceColor(trace, di);\n        Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, barPointData);\n\n        return [barPointData];\n    }\n}\n\nfunction hoverOnBars(pointData, xval, yval, hovermode) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var t = cd[0].t;\n    var isClosest = (hovermode === 'closest');\n    var isWaterfall = (trace.type === 'waterfall');\n    var maxHoverDistance = pointData.maxHoverDistance;\n\n    var posVal, sizeVal, posLetter, sizeLetter, dx, dy, pRangeCalc;\n\n    function thisBarMinPos(di) { return di[posLetter] - di.w / 2; }\n    function thisBarMaxPos(di) { return di[posLetter] + di.w / 2; }\n\n    var minPos = isClosest ?\n        thisBarMinPos :\n        function(di) {\n            /*\n             * In compare mode, accept a bar if you're on it *or* its group.\n             * Nearly always it's the group that matters, but in case the bar\n             * was explicitly set wider than its group we'd better accept the\n             * whole bar.\n             *\n             * use `bardelta` instead of `bargroupwidth` so we accept hover\n             * in the gap. That way hover doesn't flash on and off as you\n             * mouse over the plot in compare modes.\n             * In 'closest' mode though the flashing seems inevitable,\n             * without far more complex logic\n             */\n            return Math.min(thisBarMinPos(di), di.p - t.bardelta / 2);\n        };\n\n    var maxPos = isClosest ?\n        thisBarMaxPos :\n        function(di) {\n            return Math.max(thisBarMaxPos(di), di.p + t.bardelta / 2);\n        };\n\n    function _positionFn(_minPos, _maxPos) {\n        // add a little to the pseudo-distance for wider bars, so that like scatter,\n        // if you are over two overlapping bars, the narrower one wins.\n        return Fx.inbox(_minPos - posVal, _maxPos - posVal,\n            maxHoverDistance + Math.min(1, Math.abs(_maxPos - _minPos) / pRangeCalc) - 1);\n    }\n\n    function positionFn(di) {\n        return _positionFn(minPos(di), maxPos(di));\n    }\n\n    function thisBarPositionFn(di) {\n        return _positionFn(thisBarMinPos(di), thisBarMaxPos(di));\n    }\n\n    function sizeFn(di) {\n        var v = sizeVal;\n        var b = di.b;\n        var s = di[sizeLetter];\n\n        if(isWaterfall) {\n            var rawS = Math.abs(di.rawS) || 0;\n            if(v > 0) {\n                s += rawS;\n            } else if(v < 0) {\n                s -= rawS;\n            }\n        }\n\n        // add a gradient so hovering near the end of a\n        // bar makes it a little closer match\n        return Fx.inbox(b - v, s - v, maxHoverDistance + (s - v) / (s - b) - 1);\n    }\n\n    if(trace.orientation === 'h') {\n        posVal = yval;\n        sizeVal = xval;\n        posLetter = 'y';\n        sizeLetter = 'x';\n        dx = sizeFn;\n        dy = positionFn;\n    } else {\n        posVal = xval;\n        sizeVal = yval;\n        posLetter = 'x';\n        sizeLetter = 'y';\n        dy = sizeFn;\n        dx = positionFn;\n    }\n\n    var pa = pointData[posLetter + 'a'];\n    var sa = pointData[sizeLetter + 'a'];\n\n    pRangeCalc = Math.abs(pa.r2c(pa.range[1]) - pa.r2c(pa.range[0]));\n\n    function dxy(di) { return (dx(di) + dy(di)) / 2; }\n    var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n    Fx.getClosest(cd, distfn, pointData);\n\n    // skip the rest (for this trace) if we didn't find a close point\n    if(pointData.index === false) return;\n\n    // skip points inside axis rangebreaks\n    if(cd[pointData.index].p === BADNUM) return;\n\n    // if we get here and we're not in 'closest' mode, push min/max pos back\n    // onto the group - even though that means occasionally the mouse will be\n    // over the hover label.\n    if(!isClosest) {\n        minPos = function(di) {\n            return Math.min(thisBarMinPos(di), di.p - t.bargroupwidth / 2);\n        };\n        maxPos = function(di) {\n            return Math.max(thisBarMaxPos(di), di.p + t.bargroupwidth / 2);\n        };\n    }\n\n    // the closest data point\n    var index = pointData.index;\n    var di = cd[index];\n\n    var size = (trace.base) ? di.b + di.s : di.s;\n    pointData[sizeLetter + '0'] = pointData[sizeLetter + '1'] = sa.c2p(di[sizeLetter], true);\n    pointData[sizeLetter + 'LabelVal'] = size;\n\n    var extent = t.extents[t.extents.round(di.p)];\n    pointData[posLetter + '0'] = pa.c2p(isClosest ? minPos(di) : extent[0], true);\n    pointData[posLetter + '1'] = pa.c2p(isClosest ? maxPos(di) : extent[1], true);\n\n    var hasPeriod = di.orig_p !== undefined;\n    pointData[posLetter + 'LabelVal'] = hasPeriod ? di.orig_p : di.p;\n\n    pointData.labelLabel = hoverLabelText(pa, pointData[posLetter + 'LabelVal']);\n    pointData.valueLabel = hoverLabelText(sa, pointData[sizeLetter + 'LabelVal']);\n    pointData.baseLabel = hoverLabelText(sa, di.b);\n\n    // spikelines always want \"closest\" distance regardless of hovermode\n    pointData.spikeDistance = (sizeFn(di) + thisBarPositionFn(di)) / 2 - maxHoverDistance;\n    // they also want to point to the data value, regardless of where the label goes\n    // in case of bars shifted within groups\n    pointData[posLetter + 'Spike'] = pa.c2p(di.p, true);\n\n    fillText(di, trace, pointData);\n    pointData.hovertemplate = trace.hovertemplate;\n\n    return pointData;\n}\n\nfunction getTraceColor(trace, di) {\n    var mc = di.mcc || trace.marker.color;\n    var mlc = di.mlcc || trace.marker.line.color;\n    var mlw = getLineWidth(trace, di);\n\n    if(Color.opacity(mc)) return mc;\n    else if(Color.opacity(mlc) && mlw) return mlc;\n}\n\nmodule.exports = {\n    hoverPoints: hoverPoints,\n    hoverOnBars: hoverOnBars,\n    getTraceColor: getTraceColor\n};\n"]},"metadata":{},"sourceType":"script"}