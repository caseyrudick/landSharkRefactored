{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../lib');\n\nvar Drawing = require('../components/drawing');\n\nvar Color = require('../components/color');\n\nvar xmlnsNamespaces = require('../constants/xmlns_namespaces');\n\nvar DOUBLEQUOTE_REGEX = /\"/g;\nvar DUMMY_SUB = 'TOBESTRIPPED';\nvar DUMMY_REGEX = new RegExp('(\"' + DUMMY_SUB + ')|(' + DUMMY_SUB + '\")', 'g');\n\nfunction htmlEntityDecode(s) {\n  var hiddenDiv = d3.select('body').append('div').style({\n    display: 'none'\n  }).html('');\n  var replaced = s.replace(/(&[^;]*;)/gi, function (d) {\n    if (d === '&lt;') {\n      return '&#60;';\n    } // special handling for brackets\n\n\n    if (d === '&rt;') {\n      return '&#62;';\n    }\n\n    if (d.indexOf('<') !== -1 || d.indexOf('>') !== -1) {\n      return '';\n    }\n\n    return hiddenDiv.html(d).text(); // everything else, let the browser decode it to unicode\n  });\n  hiddenDiv.remove();\n  return replaced;\n}\n\nfunction xmlEntityEncode(str) {\n  return str.replace(/&(?!\\w+;|\\#[0-9]+;| \\#x[0-9A-F]+;)/g, '&amp;');\n}\n\nmodule.exports = function toSVG(gd, format, scale) {\n  var fullLayout = gd._fullLayout;\n  var svg = fullLayout._paper;\n  var toppaper = fullLayout._toppaper;\n  var width = fullLayout.width;\n  var height = fullLayout.height;\n  var i; // make background color a rect in the svg, then revert after scraping\n  // all other alterations have been dealt with by properly preparing the svg\n  // in the first place... like setting cursors with css classes so we don't\n  // have to remove them, and providing the right namespaces in the svg to\n  // begin with\n\n  svg.insert('rect', ':first-child').call(Drawing.setRect, 0, 0, width, height).call(Color.fill, fullLayout.paper_bgcolor); // subplot-specific to-SVG methods\n  // which notably add the contents of the gl-container\n  // into the main svg node\n\n  var basePlotModules = fullLayout._basePlotModules || [];\n\n  for (i = 0; i < basePlotModules.length; i++) {\n    var _module = basePlotModules[i];\n    if (_module.toSVG) _module.toSVG(gd);\n  } // add top items above them assumes everything in toppaper is either\n  // a group or a defs, and if it's empty (like hoverlayer) we can ignore it.\n\n\n  if (toppaper) {\n    var nodes = toppaper.node().childNodes; // make copy of nodes as childNodes prop gets mutated in loop below\n\n    var topGroups = Array.prototype.slice.call(nodes);\n\n    for (i = 0; i < topGroups.length; i++) {\n      var topGroup = topGroups[i];\n      if (topGroup.childNodes.length) svg.node().appendChild(topGroup);\n    }\n  } // remove draglayer for Adobe Illustrator compatibility\n\n\n  if (fullLayout._draggers) {\n    fullLayout._draggers.remove();\n  } // in case the svg element had an explicit background color, remove this\n  // we want the rect to get the color so it's the right size; svg bg will\n  // fill whatever container it's displayed in regardless of plot size.\n\n\n  svg.node().style.background = '';\n  svg.selectAll('text').attr({\n    'data-unformatted': null,\n    'data-math': null\n  }).each(function () {\n    var txt = d3.select(this); // hidden text is pre-formatting mathjax, the browser ignores it\n    // but in a static plot it's useless and it can confuse batik\n    // we've tried to standardize on display:none but make sure we still\n    // catch visibility:hidden if it ever arises\n\n    if (this.style.visibility === 'hidden' || this.style.display === 'none') {\n      txt.remove();\n      return;\n    } else {\n      // clear other visibility/display values to default\n      // to not potentially confuse non-browser SVG implementations\n      txt.style({\n        visibility: null,\n        display: null\n      });\n    } // Font family styles break things because of quotation marks,\n    // so we must remove them *after* the SVG DOM has been serialized\n    // to a string (browsers convert singles back)\n\n\n    var ff = this.style.fontFamily;\n\n    if (ff && ff.indexOf('\"') !== -1) {\n      txt.style('font-family', ff.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));\n    }\n  });\n\n  if (fullLayout._gradientUrlQueryParts) {\n    var queryParts = [];\n\n    for (var k in fullLayout._gradientUrlQueryParts) queryParts.push(k);\n\n    if (queryParts.length) {\n      svg.selectAll(queryParts.join(',')).each(function () {\n        var pt = d3.select(this); // similar to font family styles above,\n        // we must remove \" after the SVG DOM has been serialized\n\n        var fill = this.style.fill;\n\n        if (fill && fill.indexOf('url(') !== -1) {\n          pt.style('fill', fill.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));\n        }\n\n        var stroke = this.style.stroke;\n\n        if (stroke && stroke.indexOf('url(') !== -1) {\n          pt.style('stroke', stroke.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));\n        }\n      });\n    }\n  }\n\n  if (format === 'pdf' || format === 'eps') {\n    // these formats make the extra line MathJax adds around symbols look super thick in some cases\n    // it looks better if this is removed entirely.\n    svg.selectAll('#MathJax_SVG_glyphs path').attr('stroke-width', 0);\n  } // fix for IE namespacing quirk?\n  // http://stackoverflow.com/questions/19610089/unwanted-namespaces-on-svg-markup-when-using-xmlserializer-in-javascript-with-ie\n\n\n  svg.node().setAttributeNS(xmlnsNamespaces.xmlns, 'xmlns', xmlnsNamespaces.svg);\n  svg.node().setAttributeNS(xmlnsNamespaces.xmlns, 'xmlns:xlink', xmlnsNamespaces.xlink);\n\n  if (format === 'svg' && scale) {\n    svg.attr('width', scale * width);\n    svg.attr('height', scale * height);\n    svg.attr('viewBox', '0 0 ' + width + ' ' + height);\n  }\n\n  var s = new window.XMLSerializer().serializeToString(svg.node());\n  s = htmlEntityDecode(s);\n  s = xmlEntityEncode(s); // Fix quotations around font strings and gradient URLs\n\n  s = s.replace(DUMMY_REGEX, '\\''); // IE is very strict, so we will need to clean\n  //  svg with the following regex\n  //  yes this is messy, but do not know a better way\n  // Even with this IE will not work due to tainted canvas\n  //  see https://github.com/kangax/fabric.js/issues/1957\n  //      http://stackoverflow.com/questions/18112047/canvas-todataurl-working-in-all-browsers-except-ie10\n  // Leave here just in case the CORS/tainted IE issue gets resolved\n\n  if (Lib.isIE()) {\n    // replace double quote with single quote\n    s = s.replace(/\"/gi, '\\''); // url in svg are single quoted\n    //   since we changed double to single\n    //   we'll need to change these to double-quoted\n\n    s = s.replace(/(\\('#)([^']*)('\\))/gi, '(\\\"#$2\\\")'); // font names with spaces will be escaped single-quoted\n    //   we'll need to change these to double-quoted\n\n    s = s.replace(/(\\\\')/gi, '\\\"');\n  }\n\n  return s;\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/snapshot/tosvg.js"],"names":["d3","require","Lib","Drawing","Color","xmlnsNamespaces","DOUBLEQUOTE_REGEX","DUMMY_SUB","DUMMY_REGEX","RegExp","htmlEntityDecode","s","hiddenDiv","select","append","style","display","html","replaced","replace","d","indexOf","text","remove","xmlEntityEncode","str","module","exports","toSVG","gd","format","scale","fullLayout","_fullLayout","svg","_paper","toppaper","_toppaper","width","height","i","insert","call","setRect","fill","paper_bgcolor","basePlotModules","_basePlotModules","length","_module","nodes","node","childNodes","topGroups","Array","prototype","slice","topGroup","appendChild","_draggers","background","selectAll","attr","each","txt","visibility","ff","fontFamily","_gradientUrlQueryParts","queryParts","k","push","join","pt","stroke","setAttributeNS","xmlns","xlink","window","XMLSerializer","serializeToString","isIE"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../lib');\nvar Drawing = require('../components/drawing');\nvar Color = require('../components/color');\n\nvar xmlnsNamespaces = require('../constants/xmlns_namespaces');\nvar DOUBLEQUOTE_REGEX = /\"/g;\nvar DUMMY_SUB = 'TOBESTRIPPED';\nvar DUMMY_REGEX = new RegExp('(\"' + DUMMY_SUB + ')|(' + DUMMY_SUB + '\")', 'g');\n\nfunction htmlEntityDecode(s) {\n    var hiddenDiv = d3.select('body').append('div').style({display: 'none'}).html('');\n    var replaced = s.replace(/(&[^;]*;)/gi, function(d) {\n        if(d === '&lt;') { return '&#60;'; } // special handling for brackets\n        if(d === '&rt;') { return '&#62;'; }\n        if(d.indexOf('<') !== -1 || d.indexOf('>') !== -1) { return ''; }\n        return hiddenDiv.html(d).text(); // everything else, let the browser decode it to unicode\n    });\n    hiddenDiv.remove();\n    return replaced;\n}\n\nfunction xmlEntityEncode(str) {\n    return str.replace(/&(?!\\w+;|\\#[0-9]+;| \\#x[0-9A-F]+;)/g, '&amp;');\n}\n\nmodule.exports = function toSVG(gd, format, scale) {\n    var fullLayout = gd._fullLayout;\n    var svg = fullLayout._paper;\n    var toppaper = fullLayout._toppaper;\n    var width = fullLayout.width;\n    var height = fullLayout.height;\n    var i;\n\n    // make background color a rect in the svg, then revert after scraping\n    // all other alterations have been dealt with by properly preparing the svg\n    // in the first place... like setting cursors with css classes so we don't\n    // have to remove them, and providing the right namespaces in the svg to\n    // begin with\n    svg.insert('rect', ':first-child')\n        .call(Drawing.setRect, 0, 0, width, height)\n        .call(Color.fill, fullLayout.paper_bgcolor);\n\n    // subplot-specific to-SVG methods\n    // which notably add the contents of the gl-container\n    // into the main svg node\n    var basePlotModules = fullLayout._basePlotModules || [];\n    for(i = 0; i < basePlotModules.length; i++) {\n        var _module = basePlotModules[i];\n\n        if(_module.toSVG) _module.toSVG(gd);\n    }\n\n    // add top items above them assumes everything in toppaper is either\n    // a group or a defs, and if it's empty (like hoverlayer) we can ignore it.\n    if(toppaper) {\n        var nodes = toppaper.node().childNodes;\n\n        // make copy of nodes as childNodes prop gets mutated in loop below\n        var topGroups = Array.prototype.slice.call(nodes);\n\n        for(i = 0; i < topGroups.length; i++) {\n            var topGroup = topGroups[i];\n\n            if(topGroup.childNodes.length) svg.node().appendChild(topGroup);\n        }\n    }\n\n    // remove draglayer for Adobe Illustrator compatibility\n    if(fullLayout._draggers) {\n        fullLayout._draggers.remove();\n    }\n\n    // in case the svg element had an explicit background color, remove this\n    // we want the rect to get the color so it's the right size; svg bg will\n    // fill whatever container it's displayed in regardless of plot size.\n    svg.node().style.background = '';\n\n    svg.selectAll('text')\n        .attr({'data-unformatted': null, 'data-math': null})\n        .each(function() {\n            var txt = d3.select(this);\n\n            // hidden text is pre-formatting mathjax, the browser ignores it\n            // but in a static plot it's useless and it can confuse batik\n            // we've tried to standardize on display:none but make sure we still\n            // catch visibility:hidden if it ever arises\n            if(this.style.visibility === 'hidden' || this.style.display === 'none') {\n                txt.remove();\n                return;\n            } else {\n                // clear other visibility/display values to default\n                // to not potentially confuse non-browser SVG implementations\n                txt.style({visibility: null, display: null});\n            }\n\n            // Font family styles break things because of quotation marks,\n            // so we must remove them *after* the SVG DOM has been serialized\n            // to a string (browsers convert singles back)\n            var ff = this.style.fontFamily;\n            if(ff && ff.indexOf('\"') !== -1) {\n                txt.style('font-family', ff.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));\n            }\n        });\n\n\n    if(fullLayout._gradientUrlQueryParts) {\n        var queryParts = [];\n        for(var k in fullLayout._gradientUrlQueryParts) queryParts.push(k);\n\n        if(queryParts.length) {\n            svg.selectAll(queryParts.join(',')).each(function() {\n                var pt = d3.select(this);\n\n                // similar to font family styles above,\n                // we must remove \" after the SVG DOM has been serialized\n                var fill = this.style.fill;\n                if(fill && fill.indexOf('url(') !== -1) {\n                    pt.style('fill', fill.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));\n                }\n\n                var stroke = this.style.stroke;\n                if(stroke && stroke.indexOf('url(') !== -1) {\n                    pt.style('stroke', stroke.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));\n                }\n            });\n        }\n    }\n\n    if(format === 'pdf' || format === 'eps') {\n        // these formats make the extra line MathJax adds around symbols look super thick in some cases\n        // it looks better if this is removed entirely.\n        svg.selectAll('#MathJax_SVG_glyphs path')\n            .attr('stroke-width', 0);\n    }\n\n    // fix for IE namespacing quirk?\n    // http://stackoverflow.com/questions/19610089/unwanted-namespaces-on-svg-markup-when-using-xmlserializer-in-javascript-with-ie\n    svg.node().setAttributeNS(xmlnsNamespaces.xmlns, 'xmlns', xmlnsNamespaces.svg);\n    svg.node().setAttributeNS(xmlnsNamespaces.xmlns, 'xmlns:xlink', xmlnsNamespaces.xlink);\n\n    if(format === 'svg' && scale) {\n        svg.attr('width', scale * width);\n        svg.attr('height', scale * height);\n        svg.attr('viewBox', '0 0 ' + width + ' ' + height);\n    }\n\n    var s = new window.XMLSerializer().serializeToString(svg.node());\n    s = htmlEntityDecode(s);\n    s = xmlEntityEncode(s);\n\n    // Fix quotations around font strings and gradient URLs\n    s = s.replace(DUMMY_REGEX, '\\'');\n\n    // IE is very strict, so we will need to clean\n    //  svg with the following regex\n    //  yes this is messy, but do not know a better way\n    // Even with this IE will not work due to tainted canvas\n    //  see https://github.com/kangax/fabric.js/issues/1957\n    //      http://stackoverflow.com/questions/18112047/canvas-todataurl-working-in-all-browsers-except-ie10\n    // Leave here just in case the CORS/tainted IE issue gets resolved\n    if(Lib.isIE()) {\n        // replace double quote with single quote\n        s = s.replace(/\"/gi, '\\'');\n        // url in svg are single quoted\n        //   since we changed double to single\n        //   we'll need to change these to double-quoted\n        s = s.replace(/(\\('#)([^']*)('\\))/gi, '(\\\"#$2\\\")');\n        // font names with spaces will be escaped single-quoted\n        //   we'll need to change these to double-quoted\n        s = s.replace(/(\\\\')/gi, '\\\"');\n    }\n\n    return s;\n};\n"]},"metadata":{},"sourceType":"script"}