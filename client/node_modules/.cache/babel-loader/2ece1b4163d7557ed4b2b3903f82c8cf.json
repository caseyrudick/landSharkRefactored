{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n/**\n * sanitized modulus function that always returns in the range [0, d)\n * rather than (-d, 0] if v is negative\n */\n\nfunction mod(v, d) {\n  var out = v % d;\n  return out < 0 ? out + d : out;\n}\n/**\n * sanitized modulus function that always returns in the range [-d/2, d/2]\n * rather than (-d, 0] if v is negative\n */\n\n\nfunction modHalf(v, d) {\n  return Math.abs(v) > d / 2 ? v - Math.round(v / d) * d : v;\n}\n\nmodule.exports = {\n  mod: mod,\n  modHalf: modHalf\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/lib/mod.js"],"names":["mod","v","d","out","modHalf","Math","abs","round","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA,SAASA,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACf,MAAIC,GAAG,GAAGF,CAAC,GAAGC,CAAd;AACA,SAAOC,GAAG,GAAG,CAAN,GAAUA,GAAG,GAAGD,CAAhB,GAAoBC,GAA3B;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBH,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,SAAOG,IAAI,CAACC,GAAL,CAASL,CAAT,IAAeC,CAAC,GAAG,CAAnB,GACHD,CAAC,GAAGI,IAAI,CAACE,KAAL,CAAWN,CAAC,GAAGC,CAAf,IAAoBA,CADrB,GAEHD,CAFJ;AAGH;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACbT,EAAAA,GAAG,EAAEA,GADQ;AAEbI,EAAAA,OAAO,EAAEA;AAFI,CAAjB","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n/**\n * sanitized modulus function that always returns in the range [0, d)\n * rather than (-d, 0] if v is negative\n */\nfunction mod(v, d) {\n    var out = v % d;\n    return out < 0 ? out + d : out;\n}\n\n/**\n * sanitized modulus function that always returns in the range [-d/2, d/2]\n * rather than (-d, 0] if v is negative\n */\nfunction modHalf(v, d) {\n    return Math.abs(v) > (d / 2) ?\n        v - Math.round(v / d) * d :\n        v;\n}\n\nmodule.exports = {\n    mod: mod,\n    modHalf: modHalf\n};\n"]},"metadata":{},"sourceType":"script"}