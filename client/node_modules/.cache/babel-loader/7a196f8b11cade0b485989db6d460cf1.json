{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar Plots = require('../../plots/plots');\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\n\nvar Icons = require('../../fonts/ploticon');\n\nvar eraseActiveShape = require('../shapes/draw').eraseActiveShape;\n\nvar Lib = require('../../lib');\n\nvar _ = Lib._;\nvar modeBarButtons = module.exports = {};\n/**\n * ModeBar buttons configuration\n *\n * @param {string} name\n *      name / id of the buttons (for tracking)\n * @param {string} title\n *      text that appears while hovering over the button,\n *      enter null, false or '' for no hover text\n * @param {string} icon\n *      svg icon object associated with the button\n *      can be linked to Plotly.Icons to use the default plotly icons\n * @param {string} [gravity]\n *      icon positioning\n * @param {function} click\n *      click handler associated with the button, a function of\n *      'gd' (the main graph object) and\n *      'ev' (the event object)\n * @param {string} [attr]\n *      attribute associated with button,\n *      use this with 'val' to keep track of the state\n * @param {*} [val]\n *      initial 'attr' value, can be a function of gd\n * @param {boolean} [toggle]\n *      is the button a toggle button?\n */\n\nmodeBarButtons.toImage = {\n  name: 'toImage',\n  title: function (gd) {\n    var opts = gd._context.toImageButtonOptions || {};\n    var format = opts.format || 'png';\n    return format === 'png' ? _(gd, 'Download plot as a png') : // legacy text\n    _(gd, 'Download plot'); // generic non-PNG text\n  },\n  icon: Icons.camera,\n  click: function (gd) {\n    var toImageButtonOptions = gd._context.toImageButtonOptions;\n    var opts = {\n      format: toImageButtonOptions.format || 'png'\n    };\n    Lib.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');\n\n    if (opts.format !== 'svg' && Lib.isIE()) {\n      Lib.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');\n      opts.format = 'svg';\n    }\n\n    ['filename', 'width', 'height', 'scale'].forEach(function (key) {\n      if (key in toImageButtonOptions) {\n        opts[key] = toImageButtonOptions[key];\n      }\n    });\n    Registry.call('downloadImage', gd, opts).then(function (filename) {\n      Lib.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');\n    }).catch(function () {\n      Lib.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');\n    });\n  }\n};\nmodeBarButtons.sendDataToCloud = {\n  name: 'sendDataToCloud',\n  title: function (gd) {\n    return _(gd, 'Edit in Chart Studio');\n  },\n  icon: Icons.disk,\n  click: function (gd) {\n    Plots.sendDataToCloud(gd);\n  }\n};\nmodeBarButtons.editInChartStudio = {\n  name: 'editInChartStudio',\n  title: function (gd) {\n    return _(gd, 'Edit in Chart Studio');\n  },\n  icon: Icons.pencil,\n  click: function (gd) {\n    Plots.sendDataToCloud(gd);\n  }\n};\nmodeBarButtons.zoom2d = {\n  name: 'zoom2d',\n  title: function (gd) {\n    return _(gd, 'Zoom');\n  },\n  attr: 'dragmode',\n  val: 'zoom',\n  icon: Icons.zoombox,\n  click: handleCartesian\n};\nmodeBarButtons.pan2d = {\n  name: 'pan2d',\n  title: function (gd) {\n    return _(gd, 'Pan');\n  },\n  attr: 'dragmode',\n  val: 'pan',\n  icon: Icons.pan,\n  click: handleCartesian\n};\nmodeBarButtons.select2d = {\n  name: 'select2d',\n  title: function (gd) {\n    return _(gd, 'Box Select');\n  },\n  attr: 'dragmode',\n  val: 'select',\n  icon: Icons.selectbox,\n  click: handleCartesian\n};\nmodeBarButtons.lasso2d = {\n  name: 'lasso2d',\n  title: function (gd) {\n    return _(gd, 'Lasso Select');\n  },\n  attr: 'dragmode',\n  val: 'lasso',\n  icon: Icons.lasso,\n  click: handleCartesian\n};\nmodeBarButtons.drawclosedpath = {\n  name: 'drawclosedpath',\n  title: function (gd) {\n    return _(gd, 'Draw closed freeform');\n  },\n  attr: 'dragmode',\n  val: 'drawclosedpath',\n  icon: Icons.drawclosedpath,\n  click: handleCartesian\n};\nmodeBarButtons.drawopenpath = {\n  name: 'drawopenpath',\n  title: function (gd) {\n    return _(gd, 'Draw open freeform');\n  },\n  attr: 'dragmode',\n  val: 'drawopenpath',\n  icon: Icons.drawopenpath,\n  click: handleCartesian\n};\nmodeBarButtons.drawline = {\n  name: 'drawline',\n  title: function (gd) {\n    return _(gd, 'Draw line');\n  },\n  attr: 'dragmode',\n  val: 'drawline',\n  icon: Icons.drawline,\n  click: handleCartesian\n};\nmodeBarButtons.drawrect = {\n  name: 'drawrect',\n  title: function (gd) {\n    return _(gd, 'Draw rectangle');\n  },\n  attr: 'dragmode',\n  val: 'drawrect',\n  icon: Icons.drawrect,\n  click: handleCartesian\n};\nmodeBarButtons.drawcircle = {\n  name: 'drawcircle',\n  title: function (gd) {\n    return _(gd, 'Draw circle');\n  },\n  attr: 'dragmode',\n  val: 'drawcircle',\n  icon: Icons.drawcircle,\n  click: handleCartesian\n};\nmodeBarButtons.eraseshape = {\n  name: 'eraseshape',\n  title: function (gd) {\n    return _(gd, 'Erase active shape');\n  },\n  icon: Icons.eraseshape,\n  click: eraseActiveShape\n};\nmodeBarButtons.zoomIn2d = {\n  name: 'zoomIn2d',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleCartesian\n};\nmodeBarButtons.zoomOut2d = {\n  name: 'zoomOut2d',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleCartesian\n};\nmodeBarButtons.autoScale2d = {\n  name: 'autoScale2d',\n  title: function (gd) {\n    return _(gd, 'Autoscale');\n  },\n  attr: 'zoom',\n  val: 'auto',\n  icon: Icons.autoscale,\n  click: handleCartesian\n};\nmodeBarButtons.resetScale2d = {\n  name: 'resetScale2d',\n  title: function (gd) {\n    return _(gd, 'Reset axes');\n  },\n  attr: 'zoom',\n  val: 'reset',\n  icon: Icons.home,\n  click: handleCartesian\n};\nmodeBarButtons.hoverClosestCartesian = {\n  name: 'hoverClosestCartesian',\n  title: function (gd) {\n    return _(gd, 'Show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: 'closest',\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: handleCartesian\n};\nmodeBarButtons.hoverCompareCartesian = {\n  name: 'hoverCompareCartesian',\n  title: function (gd) {\n    return _(gd, 'Compare data on hover');\n  },\n  attr: 'hovermode',\n  val: function (gd) {\n    return gd._fullLayout._isHoriz ? 'y' : 'x';\n  },\n  icon: Icons.tooltip_compare,\n  gravity: 'ne',\n  click: handleCartesian\n};\n\nfunction handleCartesian(gd, ev) {\n  var button = ev.currentTarget;\n  var astr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var fullLayout = gd._fullLayout;\n  var aobj = {};\n  var axList = axisIds.list(gd, null, true);\n  var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n  var ax, i;\n\n  if (astr === 'zoom') {\n    var mag = val === 'in' ? 0.5 : 2;\n    var r0 = (1 + mag) / 2;\n    var r1 = (1 - mag) / 2;\n    var axName;\n\n    for (i = 0; i < axList.length; i++) {\n      ax = axList[i];\n\n      if (!ax.fixedrange) {\n        axName = ax._name;\n\n        if (val === 'auto') {\n          aobj[axName + '.autorange'] = true;\n        } else if (val === 'reset') {\n          if (ax._rangeInitial === undefined) {\n            aobj[axName + '.autorange'] = true;\n          } else {\n            var rangeInitial = ax._rangeInitial.slice();\n\n            aobj[axName + '.range[0]'] = rangeInitial[0];\n            aobj[axName + '.range[1]'] = rangeInitial[1];\n          } // N.B. \"reset\" also resets showspikes\n\n\n          if (ax._showSpikeInitial !== undefined) {\n            aobj[axName + '.showspikes'] = ax._showSpikeInitial;\n\n            if (allSpikesEnabled === 'on' && !ax._showSpikeInitial) {\n              allSpikesEnabled = 'off';\n            }\n          }\n        } else {\n          var rangeNow = [ax.r2l(ax.range[0]), ax.r2l(ax.range[1])];\n          var rangeNew = [r0 * rangeNow[0] + r1 * rangeNow[1], r0 * rangeNow[1] + r1 * rangeNow[0]];\n          aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);\n          aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);\n        }\n      }\n    }\n  } else {\n    // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'\n    if (astr === 'hovermode' && (val === 'x' || val === 'y')) {\n      val = fullLayout._isHoriz ? 'y' : 'x';\n      button.setAttribute('data-val', val);\n    }\n\n    aobj[astr] = val;\n  }\n\n  fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n  Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.zoom3d = {\n  name: 'zoom3d',\n  title: function (gd) {\n    return _(gd, 'Zoom');\n  },\n  attr: 'scene.dragmode',\n  val: 'zoom',\n  icon: Icons.zoombox,\n  click: handleDrag3d\n};\nmodeBarButtons.pan3d = {\n  name: 'pan3d',\n  title: function (gd) {\n    return _(gd, 'Pan');\n  },\n  attr: 'scene.dragmode',\n  val: 'pan',\n  icon: Icons.pan,\n  click: handleDrag3d\n};\nmodeBarButtons.orbitRotation = {\n  name: 'orbitRotation',\n  title: function (gd) {\n    return _(gd, 'Orbital rotation');\n  },\n  attr: 'scene.dragmode',\n  val: 'orbit',\n  icon: Icons['3d_rotate'],\n  click: handleDrag3d\n};\nmodeBarButtons.tableRotation = {\n  name: 'tableRotation',\n  title: function (gd) {\n    return _(gd, 'Turntable rotation');\n  },\n  attr: 'scene.dragmode',\n  val: 'turntable',\n  icon: Icons['z-axis'],\n  click: handleDrag3d\n};\n\nfunction handleDrag3d(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var sceneIds = gd._fullLayout._subplots.gl3d || [];\n  var layoutUpdate = {};\n  var parts = attr.split('.');\n\n  for (var i = 0; i < sceneIds.length; i++) {\n    layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;\n  } // for multi-type subplots\n\n\n  var val2d = val === 'pan' ? val : 'zoom';\n  layoutUpdate.dragmode = val2d;\n  Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.resetCameraDefault3d = {\n  name: 'resetCameraDefault3d',\n  title: function (gd) {\n    return _(gd, 'Reset camera to default');\n  },\n  attr: 'resetDefault',\n  icon: Icons.home,\n  click: handleCamera3d\n};\nmodeBarButtons.resetCameraLastSave3d = {\n  name: 'resetCameraLastSave3d',\n  title: function (gd) {\n    return _(gd, 'Reset camera to last save');\n  },\n  attr: 'resetLastSave',\n  icon: Icons.movie,\n  click: handleCamera3d\n};\n\nfunction handleCamera3d(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var resetLastSave = attr === 'resetLastSave';\n  var resetDefault = attr === 'resetDefault';\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d || [];\n  var aobj = {};\n\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneId = sceneIds[i];\n    var camera = sceneId + '.camera';\n    var aspectratio = sceneId + '.aspectratio';\n    var aspectmode = sceneId + '.aspectmode';\n    var scene = fullLayout[sceneId]._scene;\n    var didUpdate;\n\n    if (resetLastSave) {\n      aobj[camera + '.up'] = scene.viewInitial.up;\n      aobj[camera + '.eye'] = scene.viewInitial.eye;\n      aobj[camera + '.center'] = scene.viewInitial.center;\n      didUpdate = true;\n    } else if (resetDefault) {\n      aobj[camera + '.up'] = null;\n      aobj[camera + '.eye'] = null;\n      aobj[camera + '.center'] = null;\n      didUpdate = true;\n    }\n\n    if (didUpdate) {\n      aobj[aspectratio + '.x'] = scene.viewInitial.aspectratio.x;\n      aobj[aspectratio + '.y'] = scene.viewInitial.aspectratio.y;\n      aobj[aspectratio + '.z'] = scene.viewInitial.aspectratio.z;\n      aobj[aspectmode] = scene.viewInitial.aspectmode;\n    }\n  }\n\n  Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.hoverClosest3d = {\n  name: 'hoverClosest3d',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: handleHover3d\n};\n\nfunction getNextHover3d(gd, ev) {\n  var button = ev.currentTarget;\n  var val = button._previousVal;\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d || [];\n  var axes = ['xaxis', 'yaxis', 'zaxis']; // initialize 'current spike' object to be stored in the DOM\n\n  var currentSpikes = {};\n  var layoutUpdate = {};\n\n  if (val) {\n    layoutUpdate = val;\n    button._previousVal = null;\n  } else {\n    for (var i = 0; i < sceneIds.length; i++) {\n      var sceneId = sceneIds[i];\n      var sceneLayout = fullLayout[sceneId];\n      var hovermodeAStr = sceneId + '.hovermode';\n      currentSpikes[hovermodeAStr] = sceneLayout.hovermode;\n      layoutUpdate[hovermodeAStr] = false; // copy all the current spike attrs\n\n      for (var j = 0; j < 3; j++) {\n        var axis = axes[j];\n        var spikeAStr = sceneId + '.' + axis + '.showspikes';\n        layoutUpdate[spikeAStr] = false;\n        currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;\n      }\n    }\n\n    button._previousVal = currentSpikes;\n  }\n\n  return layoutUpdate;\n}\n\nfunction handleHover3d(gd, ev) {\n  var layoutUpdate = getNextHover3d(gd, ev);\n  Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.zoomInGeo = {\n  name: 'zoomInGeo',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleGeo\n};\nmodeBarButtons.zoomOutGeo = {\n  name: 'zoomOutGeo',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleGeo\n};\nmodeBarButtons.resetGeo = {\n  name: 'resetGeo',\n  title: function (gd) {\n    return _(gd, 'Reset');\n  },\n  attr: 'reset',\n  val: null,\n  icon: Icons.autoscale,\n  click: handleGeo\n};\nmodeBarButtons.hoverClosestGeo = {\n  name: 'hoverClosestGeo',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\n\nfunction handleGeo(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var fullLayout = gd._fullLayout;\n  var geoIds = fullLayout._subplots.geo || [];\n\n  for (var i = 0; i < geoIds.length; i++) {\n    var id = geoIds[i];\n    var geoLayout = fullLayout[id];\n\n    if (attr === 'zoom') {\n      var scale = geoLayout.projection.scale;\n      var newScale = val === 'in' ? 2 * scale : 0.5 * scale;\n      Registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);\n    }\n  }\n\n  if (attr === 'reset') {\n    resetView(gd, 'geo');\n  }\n}\n\nmodeBarButtons.hoverClosestGl2d = {\n  name: 'hoverClosestGl2d',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nmodeBarButtons.hoverClosestPie = {\n  name: 'hoverClosestPie',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: 'closest',\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\n\nfunction getNextHover(gd) {\n  var fullLayout = gd._fullLayout;\n  if (fullLayout.hovermode) return false;\n\n  if (fullLayout._has('cartesian')) {\n    return fullLayout._isHoriz ? 'y' : 'x';\n  }\n\n  return 'closest';\n}\n\nfunction toggleHover(gd) {\n  var newHover = getNextHover(gd);\n  Registry.call('_guiRelayout', gd, 'hovermode', newHover);\n}\n\nmodeBarButtons.resetViewSankey = {\n  name: 'resetSankeyGroup',\n  title: function (gd) {\n    return _(gd, 'Reset view');\n  },\n  icon: Icons.home,\n  click: function (gd) {\n    var aObj = {\n      'node.groups': [],\n      'node.x': [],\n      'node.y': []\n    };\n\n    for (var i = 0; i < gd._fullData.length; i++) {\n      var viewInitial = gd._fullData[i]._viewInitial;\n      aObj['node.groups'].push(viewInitial.node.groups.slice());\n      aObj['node.x'].push(viewInitial.node.x.slice());\n      aObj['node.y'].push(viewInitial.node.y.slice());\n    }\n\n    Registry.call('restyle', gd, aObj);\n  }\n}; // buttons when more then one plot types are present\n\nmodeBarButtons.toggleHover = {\n  name: 'toggleHover',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: function (gd, ev) {\n    var layoutUpdate = getNextHover3d(gd, ev);\n    layoutUpdate.hovermode = getNextHover(gd);\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n  }\n};\nmodeBarButtons.resetViews = {\n  name: 'resetViews',\n  title: function (gd) {\n    return _(gd, 'Reset views');\n  },\n  icon: Icons.home,\n  click: function (gd, ev) {\n    var button = ev.currentTarget;\n    button.setAttribute('data-attr', 'zoom');\n    button.setAttribute('data-val', 'reset');\n    handleCartesian(gd, ev);\n    button.setAttribute('data-attr', 'resetLastSave');\n    handleCamera3d(gd, ev);\n    resetView(gd, 'geo');\n    resetView(gd, 'mapbox');\n  }\n};\nmodeBarButtons.toggleSpikelines = {\n  name: 'toggleSpikelines',\n  title: function (gd) {\n    return _(gd, 'Toggle Spike Lines');\n  },\n  icon: Icons.spikeline,\n  attr: '_cartesianSpikesEnabled',\n  val: 'on',\n  click: function (gd) {\n    var fullLayout = gd._fullLayout;\n    var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n    fullLayout._cartesianSpikesEnabled = allSpikesEnabled === 'on' ? 'off' : 'on';\n    Registry.call('_guiRelayout', gd, setSpikelineVisibility(gd));\n  }\n};\n\nfunction setSpikelineVisibility(gd) {\n  var fullLayout = gd._fullLayout;\n  var areSpikesOn = fullLayout._cartesianSpikesEnabled === 'on';\n  var axList = axisIds.list(gd, null, true);\n  var aobj = {};\n\n  for (var i = 0; i < axList.length; i++) {\n    var ax = axList[i];\n    aobj[ax._name + '.showspikes'] = areSpikesOn ? true : ax._showSpikeInitial;\n  }\n\n  return aobj;\n}\n\nmodeBarButtons.resetViewMapbox = {\n  name: 'resetViewMapbox',\n  title: function (gd) {\n    return _(gd, 'Reset view');\n  },\n  attr: 'reset',\n  icon: Icons.home,\n  click: function (gd) {\n    resetView(gd, 'mapbox');\n  }\n};\nmodeBarButtons.zoomInMapbox = {\n  name: 'zoomInMapbox',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleMapboxZoom\n};\nmodeBarButtons.zoomOutMapbox = {\n  name: 'zoomOutMapbox',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleMapboxZoom\n};\n\nfunction handleMapboxZoom(gd, ev) {\n  var button = ev.currentTarget;\n  var val = button.getAttribute('data-val');\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.mapbox || [];\n  var scalar = 1.05;\n  var aObj = {};\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var id = subplotIds[i];\n    var current = fullLayout[id].zoom;\n    var next = val === 'in' ? scalar * current : current / scalar;\n    aObj[id + '.zoom'] = next;\n  }\n\n  Registry.call('_guiRelayout', gd, aObj);\n}\n\nfunction resetView(gd, subplotType) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[subplotType] || [];\n  var aObj = {};\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var id = subplotIds[i];\n    var subplotObj = fullLayout[id]._subplot;\n    var viewInitial = subplotObj.viewInitial;\n    var viewKeys = Object.keys(viewInitial);\n\n    for (var j = 0; j < viewKeys.length; j++) {\n      var key = viewKeys[j];\n      aObj[id + '.' + key] = viewInitial[key];\n    }\n  }\n\n  Registry.call('_guiRelayout', gd, aObj);\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/components/modebar/buttons.js"],"names":["Registry","require","Plots","axisIds","Icons","eraseActiveShape","Lib","_","modeBarButtons","module","exports","toImage","name","title","gd","opts","_context","toImageButtonOptions","format","icon","camera","click","notifier","isIE","forEach","key","call","then","filename","catch","sendDataToCloud","disk","editInChartStudio","pencil","zoom2d","attr","val","zoombox","handleCartesian","pan2d","pan","select2d","selectbox","lasso2d","lasso","drawclosedpath","drawopenpath","drawline","drawrect","drawcircle","eraseshape","zoomIn2d","zoom_plus","zoomOut2d","zoom_minus","autoScale2d","autoscale","resetScale2d","home","hoverClosestCartesian","tooltip_basic","gravity","hoverCompareCartesian","_fullLayout","_isHoriz","tooltip_compare","ev","button","currentTarget","astr","getAttribute","fullLayout","aobj","axList","list","allSpikesEnabled","_cartesianSpikesEnabled","ax","i","mag","r0","r1","axName","length","fixedrange","_name","_rangeInitial","undefined","rangeInitial","slice","_showSpikeInitial","rangeNow","r2l","range","rangeNew","l2r","setAttribute","zoom3d","handleDrag3d","pan3d","orbitRotation","tableRotation","sceneIds","_subplots","gl3d","layoutUpdate","parts","split","val2d","dragmode","resetCameraDefault3d","handleCamera3d","resetCameraLastSave3d","movie","resetLastSave","resetDefault","sceneId","aspectratio","aspectmode","scene","_scene","didUpdate","viewInitial","up","eye","center","x","y","z","hoverClosest3d","toggle","handleHover3d","getNextHover3d","_previousVal","axes","currentSpikes","sceneLayout","hovermodeAStr","hovermode","j","axis","spikeAStr","showspikes","zoomInGeo","handleGeo","zoomOutGeo","resetGeo","hoverClosestGeo","toggleHover","geoIds","geo","id","geoLayout","scale","projection","newScale","resetView","hoverClosestGl2d","hoverClosestPie","getNextHover","_has","newHover","resetViewSankey","aObj","_fullData","_viewInitial","push","node","groups","resetViews","toggleSpikelines","spikeline","setSpikelineVisibility","areSpikesOn","resetViewMapbox","zoomInMapbox","handleMapboxZoom","zoomOutMapbox","subplotIds","mapbox","scalar","current","zoom","next","subplotType","subplotObj","_subplot","viewKeys","Object","keys"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Plots = require('../../plots/plots');\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Icons = require('../../fonts/ploticon');\nvar eraseActiveShape = require('../shapes/draw').eraseActiveShape;\nvar Lib = require('../../lib');\nvar _ = Lib._;\n\nvar modeBarButtons = module.exports = {};\n\n/**\n * ModeBar buttons configuration\n *\n * @param {string} name\n *      name / id of the buttons (for tracking)\n * @param {string} title\n *      text that appears while hovering over the button,\n *      enter null, false or '' for no hover text\n * @param {string} icon\n *      svg icon object associated with the button\n *      can be linked to Plotly.Icons to use the default plotly icons\n * @param {string} [gravity]\n *      icon positioning\n * @param {function} click\n *      click handler associated with the button, a function of\n *      'gd' (the main graph object) and\n *      'ev' (the event object)\n * @param {string} [attr]\n *      attribute associated with button,\n *      use this with 'val' to keep track of the state\n * @param {*} [val]\n *      initial 'attr' value, can be a function of gd\n * @param {boolean} [toggle]\n *      is the button a toggle button?\n */\nmodeBarButtons.toImage = {\n    name: 'toImage',\n    title: function(gd) {\n        var opts = gd._context.toImageButtonOptions || {};\n        var format = opts.format || 'png';\n        return format === 'png' ?\n            _(gd, 'Download plot as a png') : // legacy text\n            _(gd, 'Download plot'); // generic non-PNG text\n    },\n    icon: Icons.camera,\n    click: function(gd) {\n        var toImageButtonOptions = gd._context.toImageButtonOptions;\n        var opts = {format: toImageButtonOptions.format || 'png'};\n\n        Lib.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');\n\n        if(opts.format !== 'svg' && Lib.isIE()) {\n            Lib.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');\n            opts.format = 'svg';\n        }\n\n        ['filename', 'width', 'height', 'scale'].forEach(function(key) {\n            if(key in toImageButtonOptions) {\n                opts[key] = toImageButtonOptions[key];\n            }\n        });\n\n        Registry.call('downloadImage', gd, opts)\n          .then(function(filename) {\n              Lib.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');\n          })\n          .catch(function() {\n              Lib.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');\n          });\n    }\n};\n\nmodeBarButtons.sendDataToCloud = {\n    name: 'sendDataToCloud',\n    title: function(gd) { return _(gd, 'Edit in Chart Studio'); },\n    icon: Icons.disk,\n    click: function(gd) {\n        Plots.sendDataToCloud(gd);\n    }\n};\n\nmodeBarButtons.editInChartStudio = {\n    name: 'editInChartStudio',\n    title: function(gd) { return _(gd, 'Edit in Chart Studio'); },\n    icon: Icons.pencil,\n    click: function(gd) {\n        Plots.sendDataToCloud(gd);\n    }\n};\n\nmodeBarButtons.zoom2d = {\n    name: 'zoom2d',\n    title: function(gd) { return _(gd, 'Zoom'); },\n    attr: 'dragmode',\n    val: 'zoom',\n    icon: Icons.zoombox,\n    click: handleCartesian\n};\n\nmodeBarButtons.pan2d = {\n    name: 'pan2d',\n    title: function(gd) { return _(gd, 'Pan'); },\n    attr: 'dragmode',\n    val: 'pan',\n    icon: Icons.pan,\n    click: handleCartesian\n};\n\nmodeBarButtons.select2d = {\n    name: 'select2d',\n    title: function(gd) { return _(gd, 'Box Select'); },\n    attr: 'dragmode',\n    val: 'select',\n    icon: Icons.selectbox,\n    click: handleCartesian\n};\n\nmodeBarButtons.lasso2d = {\n    name: 'lasso2d',\n    title: function(gd) { return _(gd, 'Lasso Select'); },\n    attr: 'dragmode',\n    val: 'lasso',\n    icon: Icons.lasso,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawclosedpath = {\n    name: 'drawclosedpath',\n    title: function(gd) { return _(gd, 'Draw closed freeform'); },\n    attr: 'dragmode',\n    val: 'drawclosedpath',\n    icon: Icons.drawclosedpath,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawopenpath = {\n    name: 'drawopenpath',\n    title: function(gd) { return _(gd, 'Draw open freeform'); },\n    attr: 'dragmode',\n    val: 'drawopenpath',\n    icon: Icons.drawopenpath,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawline = {\n    name: 'drawline',\n    title: function(gd) { return _(gd, 'Draw line'); },\n    attr: 'dragmode',\n    val: 'drawline',\n    icon: Icons.drawline,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawrect = {\n    name: 'drawrect',\n    title: function(gd) { return _(gd, 'Draw rectangle'); },\n    attr: 'dragmode',\n    val: 'drawrect',\n    icon: Icons.drawrect,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawcircle = {\n    name: 'drawcircle',\n    title: function(gd) { return _(gd, 'Draw circle'); },\n    attr: 'dragmode',\n    val: 'drawcircle',\n    icon: Icons.drawcircle,\n    click: handleCartesian\n};\n\nmodeBarButtons.eraseshape = {\n    name: 'eraseshape',\n    title: function(gd) { return _(gd, 'Erase active shape'); },\n    icon: Icons.eraseshape,\n    click: eraseActiveShape\n};\n\nmodeBarButtons.zoomIn2d = {\n    name: 'zoomIn2d',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleCartesian\n};\n\nmodeBarButtons.zoomOut2d = {\n    name: 'zoomOut2d',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleCartesian\n};\n\nmodeBarButtons.autoScale2d = {\n    name: 'autoScale2d',\n    title: function(gd) { return _(gd, 'Autoscale'); },\n    attr: 'zoom',\n    val: 'auto',\n    icon: Icons.autoscale,\n    click: handleCartesian\n};\n\nmodeBarButtons.resetScale2d = {\n    name: 'resetScale2d',\n    title: function(gd) { return _(gd, 'Reset axes'); },\n    attr: 'zoom',\n    val: 'reset',\n    icon: Icons.home,\n    click: handleCartesian\n};\n\nmodeBarButtons.hoverClosestCartesian = {\n    name: 'hoverClosestCartesian',\n    title: function(gd) { return _(gd, 'Show closest data on hover'); },\n    attr: 'hovermode',\n    val: 'closest',\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: handleCartesian\n};\n\nmodeBarButtons.hoverCompareCartesian = {\n    name: 'hoverCompareCartesian',\n    title: function(gd) { return _(gd, 'Compare data on hover'); },\n    attr: 'hovermode',\n    val: function(gd) {\n        return gd._fullLayout._isHoriz ? 'y' : 'x';\n    },\n    icon: Icons.tooltip_compare,\n    gravity: 'ne',\n    click: handleCartesian\n};\n\nfunction handleCartesian(gd, ev) {\n    var button = ev.currentTarget;\n    var astr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var fullLayout = gd._fullLayout;\n    var aobj = {};\n    var axList = axisIds.list(gd, null, true);\n    var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n\n    var ax, i;\n\n    if(astr === 'zoom') {\n        var mag = (val === 'in') ? 0.5 : 2;\n        var r0 = (1 + mag) / 2;\n        var r1 = (1 - mag) / 2;\n        var axName;\n\n        for(i = 0; i < axList.length; i++) {\n            ax = axList[i];\n\n            if(!ax.fixedrange) {\n                axName = ax._name;\n                if(val === 'auto') {\n                    aobj[axName + '.autorange'] = true;\n                } else if(val === 'reset') {\n                    if(ax._rangeInitial === undefined) {\n                        aobj[axName + '.autorange'] = true;\n                    } else {\n                        var rangeInitial = ax._rangeInitial.slice();\n                        aobj[axName + '.range[0]'] = rangeInitial[0];\n                        aobj[axName + '.range[1]'] = rangeInitial[1];\n                    }\n\n                    // N.B. \"reset\" also resets showspikes\n                    if(ax._showSpikeInitial !== undefined) {\n                        aobj[axName + '.showspikes'] = ax._showSpikeInitial;\n                        if(allSpikesEnabled === 'on' && !ax._showSpikeInitial) {\n                            allSpikesEnabled = 'off';\n                        }\n                    }\n                } else {\n                    var rangeNow = [\n                        ax.r2l(ax.range[0]),\n                        ax.r2l(ax.range[1]),\n                    ];\n\n                    var rangeNew = [\n                        r0 * rangeNow[0] + r1 * rangeNow[1],\n                        r0 * rangeNow[1] + r1 * rangeNow[0]\n                    ];\n\n                    aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);\n                    aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);\n                }\n            }\n        }\n    } else {\n        // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'\n        if(astr === 'hovermode' && (val === 'x' || val === 'y')) {\n            val = fullLayout._isHoriz ? 'y' : 'x';\n            button.setAttribute('data-val', val);\n        }\n\n        aobj[astr] = val;\n    }\n\n    fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n\n    Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.zoom3d = {\n    name: 'zoom3d',\n    title: function(gd) { return _(gd, 'Zoom'); },\n    attr: 'scene.dragmode',\n    val: 'zoom',\n    icon: Icons.zoombox,\n    click: handleDrag3d\n};\n\nmodeBarButtons.pan3d = {\n    name: 'pan3d',\n    title: function(gd) { return _(gd, 'Pan'); },\n    attr: 'scene.dragmode',\n    val: 'pan',\n    icon: Icons.pan,\n    click: handleDrag3d\n};\n\nmodeBarButtons.orbitRotation = {\n    name: 'orbitRotation',\n    title: function(gd) { return _(gd, 'Orbital rotation'); },\n    attr: 'scene.dragmode',\n    val: 'orbit',\n    icon: Icons['3d_rotate'],\n    click: handleDrag3d\n};\n\nmodeBarButtons.tableRotation = {\n    name: 'tableRotation',\n    title: function(gd) { return _(gd, 'Turntable rotation'); },\n    attr: 'scene.dragmode',\n    val: 'turntable',\n    icon: Icons['z-axis'],\n    click: handleDrag3d\n};\n\nfunction handleDrag3d(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var sceneIds = gd._fullLayout._subplots.gl3d || [];\n    var layoutUpdate = {};\n\n    var parts = attr.split('.');\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;\n    }\n\n    // for multi-type subplots\n    var val2d = (val === 'pan') ? val : 'zoom';\n    layoutUpdate.dragmode = val2d;\n\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.resetCameraDefault3d = {\n    name: 'resetCameraDefault3d',\n    title: function(gd) { return _(gd, 'Reset camera to default'); },\n    attr: 'resetDefault',\n    icon: Icons.home,\n    click: handleCamera3d\n};\n\nmodeBarButtons.resetCameraLastSave3d = {\n    name: 'resetCameraLastSave3d',\n    title: function(gd) { return _(gd, 'Reset camera to last save'); },\n    attr: 'resetLastSave',\n    icon: Icons.movie,\n    click: handleCamera3d\n};\n\nfunction handleCamera3d(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var resetLastSave = attr === 'resetLastSave';\n    var resetDefault = attr === 'resetDefault';\n\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d || [];\n    var aobj = {};\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        var sceneId = sceneIds[i];\n        var camera = sceneId + '.camera';\n        var aspectratio = sceneId + '.aspectratio';\n        var aspectmode = sceneId + '.aspectmode';\n        var scene = fullLayout[sceneId]._scene;\n        var didUpdate;\n\n        if(resetLastSave) {\n            aobj[camera + '.up'] = scene.viewInitial.up;\n            aobj[camera + '.eye'] = scene.viewInitial.eye;\n            aobj[camera + '.center'] = scene.viewInitial.center;\n            didUpdate = true;\n        } else if(resetDefault) {\n            aobj[camera + '.up'] = null;\n            aobj[camera + '.eye'] = null;\n            aobj[camera + '.center'] = null;\n            didUpdate = true;\n        }\n\n        if(didUpdate) {\n            aobj[aspectratio + '.x'] = scene.viewInitial.aspectratio.x;\n            aobj[aspectratio + '.y'] = scene.viewInitial.aspectratio.y;\n            aobj[aspectratio + '.z'] = scene.viewInitial.aspectratio.z;\n            aobj[aspectmode] = scene.viewInitial.aspectmode;\n        }\n    }\n\n    Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.hoverClosest3d = {\n    name: 'hoverClosest3d',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: handleHover3d\n};\n\nfunction getNextHover3d(gd, ev) {\n    var button = ev.currentTarget;\n    var val = button._previousVal;\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d || [];\n\n    var axes = ['xaxis', 'yaxis', 'zaxis'];\n\n    // initialize 'current spike' object to be stored in the DOM\n    var currentSpikes = {};\n    var layoutUpdate = {};\n\n    if(val) {\n        layoutUpdate = val;\n        button._previousVal = null;\n    } else {\n        for(var i = 0; i < sceneIds.length; i++) {\n            var sceneId = sceneIds[i];\n            var sceneLayout = fullLayout[sceneId];\n\n            var hovermodeAStr = sceneId + '.hovermode';\n            currentSpikes[hovermodeAStr] = sceneLayout.hovermode;\n            layoutUpdate[hovermodeAStr] = false;\n\n            // copy all the current spike attrs\n            for(var j = 0; j < 3; j++) {\n                var axis = axes[j];\n                var spikeAStr = sceneId + '.' + axis + '.showspikes';\n                layoutUpdate[spikeAStr] = false;\n                currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;\n            }\n        }\n\n        button._previousVal = currentSpikes;\n    }\n    return layoutUpdate;\n}\n\nfunction handleHover3d(gd, ev) {\n    var layoutUpdate = getNextHover3d(gd, ev);\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.zoomInGeo = {\n    name: 'zoomInGeo',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleGeo\n};\n\nmodeBarButtons.zoomOutGeo = {\n    name: 'zoomOutGeo',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleGeo\n};\n\nmodeBarButtons.resetGeo = {\n    name: 'resetGeo',\n    title: function(gd) { return _(gd, 'Reset'); },\n    attr: 'reset',\n    val: null,\n    icon: Icons.autoscale,\n    click: handleGeo\n};\n\nmodeBarButtons.hoverClosestGeo = {\n    name: 'hoverClosestGeo',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nfunction handleGeo(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var fullLayout = gd._fullLayout;\n    var geoIds = fullLayout._subplots.geo || [];\n\n    for(var i = 0; i < geoIds.length; i++) {\n        var id = geoIds[i];\n        var geoLayout = fullLayout[id];\n\n        if(attr === 'zoom') {\n            var scale = geoLayout.projection.scale;\n            var newScale = (val === 'in') ? 2 * scale : 0.5 * scale;\n\n            Registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);\n        }\n    }\n\n    if(attr === 'reset') {\n        resetView(gd, 'geo');\n    }\n}\n\nmodeBarButtons.hoverClosestGl2d = {\n    name: 'hoverClosestGl2d',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nmodeBarButtons.hoverClosestPie = {\n    name: 'hoverClosestPie',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: 'closest',\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nfunction getNextHover(gd) {\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout.hovermode) return false;\n\n    if(fullLayout._has('cartesian')) {\n        return fullLayout._isHoriz ? 'y' : 'x';\n    }\n    return 'closest';\n}\n\nfunction toggleHover(gd) {\n    var newHover = getNextHover(gd);\n    Registry.call('_guiRelayout', gd, 'hovermode', newHover);\n}\n\nmodeBarButtons.resetViewSankey = {\n    name: 'resetSankeyGroup',\n    title: function(gd) { return _(gd, 'Reset view'); },\n    icon: Icons.home,\n    click: function(gd) {\n        var aObj = {\n            'node.groups': [],\n            'node.x': [],\n            'node.y': []\n        };\n        for(var i = 0; i < gd._fullData.length; i++) {\n            var viewInitial = gd._fullData[i]._viewInitial;\n            aObj['node.groups'].push(viewInitial.node.groups.slice());\n            aObj['node.x'].push(viewInitial.node.x.slice());\n            aObj['node.y'].push(viewInitial.node.y.slice());\n        }\n        Registry.call('restyle', gd, aObj);\n    }\n};\n\n// buttons when more then one plot types are present\n\nmodeBarButtons.toggleHover = {\n    name: 'toggleHover',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: function(gd, ev) {\n        var layoutUpdate = getNextHover3d(gd, ev);\n        layoutUpdate.hovermode = getNextHover(gd);\n\n        Registry.call('_guiRelayout', gd, layoutUpdate);\n    }\n};\n\nmodeBarButtons.resetViews = {\n    name: 'resetViews',\n    title: function(gd) { return _(gd, 'Reset views'); },\n    icon: Icons.home,\n    click: function(gd, ev) {\n        var button = ev.currentTarget;\n\n        button.setAttribute('data-attr', 'zoom');\n        button.setAttribute('data-val', 'reset');\n        handleCartesian(gd, ev);\n\n        button.setAttribute('data-attr', 'resetLastSave');\n        handleCamera3d(gd, ev);\n\n        resetView(gd, 'geo');\n        resetView(gd, 'mapbox');\n    }\n};\n\nmodeBarButtons.toggleSpikelines = {\n    name: 'toggleSpikelines',\n    title: function(gd) { return _(gd, 'Toggle Spike Lines'); },\n    icon: Icons.spikeline,\n    attr: '_cartesianSpikesEnabled',\n    val: 'on',\n    click: function(gd) {\n        var fullLayout = gd._fullLayout;\n        var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n\n        fullLayout._cartesianSpikesEnabled = allSpikesEnabled === 'on' ? 'off' : 'on';\n        Registry.call('_guiRelayout', gd, setSpikelineVisibility(gd));\n    }\n};\n\nfunction setSpikelineVisibility(gd) {\n    var fullLayout = gd._fullLayout;\n    var areSpikesOn = fullLayout._cartesianSpikesEnabled === 'on';\n    var axList = axisIds.list(gd, null, true);\n    var aobj = {};\n\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n        aobj[ax._name + '.showspikes'] = areSpikesOn ? true : ax._showSpikeInitial;\n    }\n\n    return aobj;\n}\n\nmodeBarButtons.resetViewMapbox = {\n    name: 'resetViewMapbox',\n    title: function(gd) { return _(gd, 'Reset view'); },\n    attr: 'reset',\n    icon: Icons.home,\n    click: function(gd) {\n        resetView(gd, 'mapbox');\n    }\n};\n\nmodeBarButtons.zoomInMapbox = {\n    name: 'zoomInMapbox',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleMapboxZoom\n};\n\nmodeBarButtons.zoomOutMapbox = {\n    name: 'zoomOutMapbox',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleMapboxZoom\n};\n\nfunction handleMapboxZoom(gd, ev) {\n    var button = ev.currentTarget;\n    var val = button.getAttribute('data-val');\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots.mapbox || [];\n    var scalar = 1.05;\n    var aObj = {};\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var id = subplotIds[i];\n        var current = fullLayout[id].zoom;\n        var next = (val === 'in') ? scalar * current : current / scalar;\n        aObj[id + '.zoom'] = next;\n    }\n\n    Registry.call('_guiRelayout', gd, aObj);\n}\n\nfunction resetView(gd, subplotType) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[subplotType] || [];\n    var aObj = {};\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var id = subplotIds[i];\n        var subplotObj = fullLayout[id]._subplot;\n        var viewInitial = subplotObj.viewInitial;\n        var viewKeys = Object.keys(viewInitial);\n\n        for(var j = 0; j < viewKeys.length; j++) {\n            var key = viewKeys[j];\n            aObj[id + '.' + key] = viewInitial[key];\n        }\n    }\n\n    Registry.call('_guiRelayout', gd, aObj);\n}\n"]},"metadata":{},"sourceType":"script"}