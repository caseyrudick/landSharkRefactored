{"ast":null,"code":"import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED, GET_LEASE_LINES_FROM_JSONDB_RECEIVED, GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\";\nimport wells from \"../APIs/wells\";\nexport default ((selectedWell, getState) => {\n  console.log(selectedWell);\n  return async dispatch => {\n    dispatch({\n      type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWell_Well = selectedWellConvertedToArray[2];\n      let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.data;\n      console.log(wells);\n      let result = wells.filter(well => {\n        return well.operator === selectedWellOperator && well.well === selectedWell_Well;\n      });\n      console.log(result.grid);\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n        payload: result.grid\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n}); // import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n//   GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n//   GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\n// import wells from \"../APIs/wells\"\n//   export default (selectedWell, getState) => {\n//     console.log(selectedWell)\n//     return async dispatch => {\n//       dispatch({\n//         type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n//       })\n//       try {\n//         let result = null;\n//         const response = await wells.get(\"LeaseLines\")\n//         const listOfWells = response.data\n//         console.log(listOfWells)\n//         const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n//         const selectedWellOperator = selectedWellConvertedToArray[0]\n//         const selectedWell_Well = selectedWellConvertedToArray[2]\n//         for (let well in listOfWells) {\n//           if (listOfWells[well].operator === selectedWellOperator && listOfWells[well].well === selectedWell_Well) {\n//             result = [...listOfWells[well].grid]\n//           }\n//         }\n//         console.log(result)\n//         dispatch({\n//           type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n//           payload: result\n//         })\n//       } catch (error) {\n//         dispatch({\n//           type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n//           payload: error\n//         })\n//       }\n//     }\n//   }","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getLeaseLinesFromJSONDb.js"],"names":["GET_LEASE_LINES_FROM_JSONDB_REQUESTED","GET_LEASE_LINES_FROM_JSONDB_RECEIVED","GET_LEASE_LINES_FROM_JSONDB_FAILED","wells","selectedWell","getState","console","log","dispatch","type","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWell_Well","getWellsWithLeaseLinesFromJSONDbReducer","data","result","filter","well","operator","grid","payload","error"],"mappings":"AAAA,SAASA,qCAAT,EACEC,oCADF,EAEEC,kCAFF,QAE4C,SAF5C;AAGA,OAAOC,KAAP,MAAkB,eAAlB;AACE,gBAAe,CAACC,YAAD,EAAeC,QAAf,KAA4B;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,SAAO,MAAMI,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,YAAMU,4BAA4B,GAAGN,YAAY,CAACO,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,iBAAiB,GAAGN,4BAA4B,CAAC,CAAD,CAAtD;AACA,UAAIP,KAAK,GAAGE,QAAQ,GAAGY,uCAAX,CAAmDC,IAA/D;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,UAAIgB,MAAM,GAAGhB,KAAK,CAACiB,MAAN,CAAaC,IAAI,IAAI;AAChC,eAAOA,IAAI,CAACC,QAAL,KAAkBP,oBAAlB,IAA0CM,IAAI,CAACA,IAAL,KAAcL,iBAA/D;AACD,OAFY,CAAb;AAGAV,MAAAA,OAAO,CAACC,GAAR,CAAYY,MAAM,CAACI,IAAnB;AACAf,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,oCADC;AAEPuB,QAAAA,OAAO,EAAEL,MAAM,CAACI;AAFT,OAAD,CAAR;AAID,KAdD,CAcE,OAAOE,KAAP,EAAc;AACdjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,kCADC;AAEPsB,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GAxBD;AAyBD,CA3BD,E,CA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\nimport wells from \"../APIs/wells\"\n  export default (selectedWell, getState) => {\n    console.log(selectedWell)\n    return async dispatch => {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        let wells = getState().getWellsWithLeaseLinesFromJSONDbReducer.data\n        console.log(wells)\n        let result = wells.filter(well => {\n          return well.operator === selectedWellOperator && well.well === selectedWell_Well\n        })\n        console.log(result.grid)\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n          payload: result.grid\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }\n\n  // import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  //   GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  //   GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\"\n  // import wells from \"../APIs/wells\"\n  //   export default (selectedWell, getState) => {\n  //     console.log(selectedWell)\n  //     return async dispatch => {\n  //       dispatch({\n  //         type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n  //       })\n  //       try {\n  //         let result = null;\n  //         const response = await wells.get(\"LeaseLines\")\n  //         const listOfWells = response.data\n  //         console.log(listOfWells)\n  //         const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n  //         const selectedWellOperator = selectedWellConvertedToArray[0]\n  //         const selectedWell_Well = selectedWellConvertedToArray[2]\n  //         for (let well in listOfWells) {\n  //           if (listOfWells[well].operator === selectedWellOperator && listOfWells[well].well === selectedWell_Well) {\n  //             result = [...listOfWells[well].grid]\n  //           }\n  //         }\n  //         console.log(result)\n  //         dispatch({\n  //           type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  //           payload: result\n  //         })\n  //       } catch (error) {\n  //         dispatch({\n  //           type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n  //           payload: error\n  //         })\n  //       }\n  //     }\n  //   }\n  "]},"metadata":{},"sourceType":"module"}