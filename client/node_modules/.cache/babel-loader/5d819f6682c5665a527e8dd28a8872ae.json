{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n/* eslint-disable new-cap */\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../../../lib');\n\nvar Color = require('../../../components/color');\n\nvar micropolar = require('./micropolar');\n\nvar UndoManager = require('./undo_manager');\n\nvar extendDeepAll = Lib.extendDeepAll;\nvar manager = module.exports = {};\n\nmanager.framework = function (_gd) {\n  var config, previousConfigClone, plot, convertedInput, container;\n  var undoManager = new UndoManager();\n\n  function exports(_inputConfig, _container) {\n    if (_container) container = _container;\n    d3.select(d3.select(container).node().parentNode).selectAll('.svg-container>*:not(.chart-root)').remove();\n    config = !config ? _inputConfig : extendDeepAll(config, _inputConfig);\n    if (!plot) plot = micropolar.Axis();\n    convertedInput = micropolar.adapter.plotly().convert(config);\n    plot.config(convertedInput).render(container);\n    _gd.data = config.data;\n    _gd.layout = config.layout;\n    manager.fillLayout(_gd);\n    return config;\n  }\n\n  exports.isPolar = true;\n\n  exports.svg = function () {\n    return plot.svg();\n  };\n\n  exports.getConfig = function () {\n    return config;\n  };\n\n  exports.getLiveConfig = function () {\n    return micropolar.adapter.plotly().convert(plot.getLiveConfig(), true);\n  };\n\n  exports.getLiveScales = function () {\n    return {\n      t: plot.angularScale(),\n      r: plot.radialScale()\n    };\n  };\n\n  exports.setUndoPoint = function () {\n    var that = this;\n    var configClone = micropolar.util.cloneJson(config);\n\n    (function (_configClone, _previousConfigClone) {\n      undoManager.add({\n        undo: function () {\n          if (_previousConfigClone) that(_previousConfigClone);\n        },\n        redo: function () {\n          that(_configClone);\n        }\n      });\n    })(configClone, previousConfigClone);\n\n    previousConfigClone = micropolar.util.cloneJson(configClone);\n  };\n\n  exports.undo = function () {\n    undoManager.undo();\n  };\n\n  exports.redo = function () {\n    undoManager.redo();\n  };\n\n  return exports;\n};\n\nmanager.fillLayout = function (_gd) {\n  var container = d3.select(_gd).selectAll('.plot-container');\n  var paperDiv = container.selectAll('.svg-container');\n\n  var paper = _gd.framework && _gd.framework.svg && _gd.framework.svg();\n\n  var dflts = {\n    width: 800,\n    height: 600,\n    paper_bgcolor: Color.background,\n    _container: container,\n    _paperdiv: paperDiv,\n    _paper: paper\n  };\n  _gd._fullLayout = extendDeepAll(dflts, _gd.layout);\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plots/polar/legacy/micropolar_manager.js"],"names":["d3","require","Lib","Color","micropolar","UndoManager","extendDeepAll","manager","module","exports","framework","_gd","config","previousConfigClone","plot","convertedInput","container","undoManager","_inputConfig","_container","select","node","parentNode","selectAll","remove","Axis","adapter","plotly","convert","render","data","layout","fillLayout","isPolar","svg","getConfig","getLiveConfig","getLiveScales","t","angularScale","r","radialScale","setUndoPoint","that","configClone","util","cloneJson","_configClone","_previousConfigClone","add","undo","redo","paperDiv","paper","dflts","width","height","paper_bgcolor","background","_paperdiv","_paper","_fullLayout"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n/* eslint-disable new-cap */\n\n'use strict';\n\nvar d3 = require('d3');\nvar Lib = require('../../../lib');\nvar Color = require('../../../components/color');\n\nvar micropolar = require('./micropolar');\nvar UndoManager = require('./undo_manager');\nvar extendDeepAll = Lib.extendDeepAll;\n\nvar manager = module.exports = {};\n\nmanager.framework = function(_gd) {\n    var config, previousConfigClone, plot, convertedInput, container;\n    var undoManager = new UndoManager();\n\n    function exports(_inputConfig, _container) {\n        if(_container) container = _container;\n        d3.select(d3.select(container).node().parentNode).selectAll('.svg-container>*:not(.chart-root)').remove();\n\n        config = (!config) ?\n            _inputConfig :\n            extendDeepAll(config, _inputConfig);\n\n        if(!plot) plot = micropolar.Axis();\n        convertedInput = micropolar.adapter.plotly().convert(config);\n        plot.config(convertedInput).render(container);\n        _gd.data = config.data;\n        _gd.layout = config.layout;\n        manager.fillLayout(_gd);\n        return config;\n    }\n    exports.isPolar = true;\n    exports.svg = function() { return plot.svg(); };\n    exports.getConfig = function() { return config; };\n    exports.getLiveConfig = function() {\n        return micropolar.adapter.plotly().convert(plot.getLiveConfig(), true);\n    };\n    exports.getLiveScales = function() { return {t: plot.angularScale(), r: plot.radialScale()}; };\n    exports.setUndoPoint = function() {\n        var that = this;\n        var configClone = micropolar.util.cloneJson(config);\n        (function(_configClone, _previousConfigClone) {\n            undoManager.add({\n                undo: function() {\n                    if(_previousConfigClone) that(_previousConfigClone);\n                },\n                redo: function() {\n                    that(_configClone);\n                }\n            });\n        })(configClone, previousConfigClone);\n        previousConfigClone = micropolar.util.cloneJson(configClone);\n    };\n    exports.undo = function() { undoManager.undo(); };\n    exports.redo = function() { undoManager.redo(); };\n    return exports;\n};\n\nmanager.fillLayout = function(_gd) {\n    var container = d3.select(_gd).selectAll('.plot-container');\n    var paperDiv = container.selectAll('.svg-container');\n    var paper = _gd.framework && _gd.framework.svg && _gd.framework.svg();\n    var dflts = {\n        width: 800,\n        height: 600,\n        paper_bgcolor: Color.background,\n        _container: container,\n        _paperdiv: paperDiv,\n        _paper: paper\n    };\n\n    _gd._fullLayout = extendDeepAll(dflts, _gd.layout);\n};\n"]},"metadata":{},"sourceType":"script"}