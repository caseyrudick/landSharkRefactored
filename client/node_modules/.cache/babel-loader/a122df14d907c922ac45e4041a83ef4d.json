{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\n\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'table',\n    trace: true\n  }),\n  columnwidth: {\n    valType: 'number',\n    arrayOk: true,\n    dflt: null,\n    role: 'style',\n    description: ['The width of columns expressed as a ratio. Columns fill the available width', 'in proportion of their specified column widths.'].join(' ')\n  },\n  columnorder: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Specifies the rendered order of the data columns; for example, a value `2` at position `0`', 'means that column index `0` in the data will be rendered as the', 'third column, as columns have an index base of zero.'].join(' ')\n  },\n  header: {\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Sets the cell value formatting rule using d3 formatting mini-language', 'which is similar to those of Python. See', FORMAT_LINK].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 28,\n      role: 'style',\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        role: 'style'\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey',\n        role: 'style'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'white',\n        role: 'style',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  },\n  cells: {\n    values: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      role: 'info',\n      dflt: [],\n      description: ['Sets the cell value formatting rule using d3 formatting mini-language', 'which is similar to those of Python. See', FORMAT_LINK].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      role: 'style',\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 20,\n      role: 'style',\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        role: 'style'\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey',\n        role: 'style'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        role: 'style',\n        dflt: 'white',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/table/attributes.js"],"names":["annAttrs","require","extendFlat","overrideAll","fontAttrs","domainAttrs","attributes","FORMAT_LINK","attrs","module","exports","domain","name","trace","columnwidth","valType","arrayOk","dflt","role","description","join","columnorder","header","values","format","prefix","suffix","height","align","line","width","color","fill","font","cells","transforms","undefined"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\n\nvar attrs = module.exports = overrideAll({\n    domain: domainAttrs({name: 'table', trace: true}),\n\n    columnwidth: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: null,\n        role: 'style',\n        description: [\n            'The width of columns expressed as a ratio. Columns fill the available width',\n            'in proportion of their specified column widths.'\n        ].join(' ')\n    },\n\n    columnorder: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Specifies the rendered order of the data columns; for example, a value `2` at position `0`',\n            'means that column index `0` in the data will be rendered as the',\n            'third column, as columns have an index base of zero.'\n        ].join(' ')\n    },\n\n    header: {\n\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Sets the cell value formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                FORMAT_LINK\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 28,\n            role: 'style',\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n                role: 'style'\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n                role: 'style'\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'white',\n                role: 'style',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors or a 2D array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    },\n\n    cells: {\n\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Sets the cell value formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                FORMAT_LINK\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 20,\n            role: 'style',\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n                role: 'style'\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n                role: 'style'\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                role: 'style',\n                dflt: 'white',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors or a 2D array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;\n"]},"metadata":{},"sourceType":"script"}