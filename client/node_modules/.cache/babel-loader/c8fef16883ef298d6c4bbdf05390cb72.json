{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingSurveys.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getSurveysFromDynamoDb from \"../ActionCreators/getWellPlansFromDynamoDb\";\n\nconst ExistingSurveys = ({\n  activeWell,\n  getSurveysFromDynamoDbReducer,\n  getSurveysFromDynamoDb\n}) => {\n  _s();\n\n  const [surveys, setSurveys] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getSurveysFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  }, [getSurveysFromDynamoDbReducer.status]);\n  useEffect(() => {\n    createReactDataSheetGridFromPlans();\n  }, [surveys]);\n\n  const createCopies = () => {\n    setPlans([...getWellPlansFromDynamoDbReducer.response.Items]); // createReactDataSheetGridFromPlans();\n  };\n\n  const createReactDataSheetGridFromSurveys = () => {\n    let dataSheetHeader = [[{\n      value: '',\n      readOnly: true,\n      width: '3rem'\n    }, {\n      value: 'Measured Depth',\n      readOnly: true,\n      width: '10rem'\n    }, {\n      value: 'Inclination',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'Azimuth',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'TVD',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'NS',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'EW',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'SECT',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'DLS',\n      readOnly: true,\n      width: '7rem'\n    }]];\n    let surveysCopy = [...surveys];\n    surveysCopy.forEach((surveyLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {\n        value: idx + 1,\n        width: \"4rem\",\n        readOnly: true\n      };\n      newRow[1] = {\n        value: parseInt(surveyLineItem.MD),\n        width: \"10rem\"\n      };\n      newRow[2] = {\n        value: parseInt(surveyLineItem.INC),\n        width: \"7rem\"\n      };\n      newRow[3] = {\n        value: parseInt(surveyLineItem.AZM),\n        width: \"7rem\"\n      };\n      newRow[4] = {\n        value: parseInt(surveyLineItem.TVD),\n        width: \"7rem\"\n      };\n      newRow[5] = {\n        value: parseInt(surveyLineItem.Northing),\n        width: \"7rem\"\n      };\n      newRow[6] = {\n        value: parseInt(surveyLineItem.Easting),\n        width: \"7rem\"\n      };\n      newRow[7] = {\n        value: parseInt(surveyLineItem.VS),\n        width: \"7rem\"\n      };\n      newRow[8] = {\n        value: parseInt(surveyLineItem.DLS),\n        width: \"7rem\"\n      };\n      dataSheetHeader.push(newRow);\n    });\n    setGrid(dataSheetHeader); // console.log(grid);\n    // setGrid(result)\n  };\n\n  let gridFromSurveys = [[{\n    value: '',\n    readOnly: true,\n    width: '3rem'\n  }, {\n    value: 'Measured Depth',\n    readOnly: true,\n    width: '10rem'\n  }, {\n    value: 'Inclination',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'Azimuth',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'TVD',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'NS',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'EW',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'SECT',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'DLS',\n    readOnly: true,\n    width: '7rem'\n  }]];\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const {\n        Operator,\n        Rig,\n        Well_Name\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-4\",\n          children: [Operator.S, \" - \", Rig.S, \" - \", Well_Name.S]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  }\n}; //   const renderMain = () => {\n//     const { operator, rig, well } = activeWell.response\n//     return (\n//       <React.Fragment>\n//         <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//         <ReactDataSheet\n//           data={surveys}\n//           valueRenderer={cell => cell.value}\n//           width\n//         />\n//       </React.Fragment>\n//     )\n//   }\n//   if (getSurveysFromDynamoDbReducer.status === \"received\" && getSurveysFromDynamoDbReducer.response) {\n//     return (\n//       <Container>\n//         {renderMain()}\n//       </Container>\n//     )\n//   } else {\n//     return (\n//       \"Data Loading\"\n//     )\n//   }\n// }\n\n\n_s(ExistingSurveys, \"UBy2WYvO9ACbrtU+ELEqGV+fRmM=\");\n\n_c = ExistingSurveys;\n\nconst mapStateToProps = ({\n  activeWell,\n  getSurveysFromDynamoDbReducer\n}) => {\n  return {\n    activeWell,\n    getSurveysFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSurveysFromDynamoDb\n})(ExistingSurveys);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingSurveys\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingSurveys.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getSurveysFromDynamoDb","ExistingSurveys","activeWell","getSurveysFromDynamoDbReducer","surveys","setSurveys","grid","setGrid","status","createCopies","createReactDataSheetGridFromPlans","setPlans","getWellPlansFromDynamoDbReducer","response","Items","createReactDataSheetGridFromSurveys","dataSheetHeader","value","readOnly","width","surveysCopy","forEach","surveyLineItem","idx","newRow","parseInt","MD","INC","AZM","TVD","Northing","Easting","VS","DLS","push","gridFromSurveys","renderMain","Operator","Rig","Well_Name","S","cell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getSurveysFromDynamoDb from \"../ActionCreators/getWellPlansFromDynamoDb\"\n\n\nconst ExistingSurveys = ({activeWell, getSurveysFromDynamoDbReducer, getSurveysFromDynamoDb}) => {\n  const [surveys, setSurveys] = useState([])\n  const [grid, setGrid] = useState([])\n\n  useEffect(() => {\n    if (getSurveysFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  },[getSurveysFromDynamoDbReducer.status])\n\n  useEffect(() => {\n    createReactDataSheetGridFromPlans();\n  }, [surveys])\n\n  const createCopies = () => {\n    setPlans([...getWellPlansFromDynamoDbReducer.response.Items])\n    // createReactDataSheetGridFromPlans();\n  }\n\n  const createReactDataSheetGridFromSurveys = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    let surveysCopy = [...surveys];\n    surveysCopy.forEach((surveyLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx+1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(surveyLineItem.MD), width: \"10rem\"}\n      newRow[2] = {value: parseInt(surveyLineItem.INC), width: \"7rem\"}\n      newRow[3] = {value: parseInt(surveyLineItem.AZM), width: \"7rem\"}\n      newRow[4] = {value: parseInt(surveyLineItem.TVD), width: \"7rem\"}\n      newRow[5] = {value: parseInt(surveyLineItem.Northing), width: \"7rem\"}\n      newRow[6] = {value: parseInt(surveyLineItem.Easting), width: \"7rem\"}\n      newRow[7] = {value: parseInt(surveyLineItem.VS), width: \"7rem\"}\n      newRow[8] = {value: parseInt(surveyLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    setGrid(dataSheetHeader);\n    // console.log(grid);\n    // setGrid(result)\n  }\n\n  let gridFromSurveys = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const { Operator, Rig, Well_Name} = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n\n}\n//   const renderMain = () => {\n//     const { operator, rig, well } = activeWell.response\n//     return (\n//       <React.Fragment>\n//         <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//         <ReactDataSheet\n//           data={surveys}\n//           valueRenderer={cell => cell.value}\n//           width\n//         />\n//       </React.Fragment>\n//     )\n//   }\n\n//   if (getSurveysFromDynamoDbReducer.status === \"received\" && getSurveysFromDynamoDbReducer.response) {\n//     return (\n//       <Container>\n//         {renderMain()}\n//       </Container>\n//     )\n//   } else {\n//     return (\n//       \"Data Loading\"\n//     )\n//   }\n// }\n\nconst mapStateToProps = ({activeWell, getSurveysFromDynamoDbReducer}) => {\n  return {\n    activeWell, \n    getSurveysFromDynamoDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getSurveysFromDynamoDb})(ExistingSurveys)"]},"metadata":{},"sourceType":"module"}