{"ast":null,"code":"import wells from \"../APIs/wells\";\nimport { POST_WELLINFO_TO_JSONDB_REQUESTED, POST_WELLINFO_TO_JSONDB_RECEIVED, POST_WELLINFO_TO_JSONDB_FAILED } from './types';\nexport default (wellInfo => {\n  return async (dispatch, getState) => {\n    // let wellList = getState().getWellsFromJSONDbReducer.response\n    // console.log('should get wellList next')\n    // console.log(wellList)\n    const response = await wells.post(\"wells\", wellInfo);\n    dispatch({\n      type: POST_WELLINFO_TO_JSONDB_REQUESTED\n    });\n\n    try {\n      dispatch({\n        type: POST_WELLINFO_TO_JSONDB_RECEIVED,\n        payload: wellInfo\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: POST_WELLINFO_TO_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/ActionCreators/postWellInfoToJSONDb.js"],"names":["wells","POST_WELLINFO_TO_JSONDB_REQUESTED","POST_WELLINFO_TO_JSONDB_RECEIVED","POST_WELLINFO_TO_JSONDB_FAILED","wellInfo","dispatch","getState","response","post","type","payload","error","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AAEA,SAASC,iCAAT,EACEC,gCADF,EAEEC,8BAFF,QAEwC,SAFxC;AAIE,gBAAgBC,QAAD,IAAc;AAE3B,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC;AACA;AACA;AACA,UAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAW,OAAX,EAAoBJ,QAApB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;;AAGA,QAAI;AACFI,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEP,gCADC;AAEPQ,QAAAA,OAAO,EAAEN;AAFF,OAAD,CAAR;AAID,KALD,CAKE,OAAOO,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEN,8BADC;AAEPO,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GApBD;AAqBD,CAvBD","sourcesContent":["import wells from \"../APIs/wells\"\n\nimport { POST_WELLINFO_TO_JSONDB_REQUESTED,\n  POST_WELLINFO_TO_JSONDB_RECEIVED,\n  POST_WELLINFO_TO_JSONDB_FAILED } from './types';\n  \n  export default (wellInfo) => {\n\n    return async (dispatch, getState) => {\n      // let wellList = getState().getWellsFromJSONDbReducer.response\n      // console.log('should get wellList next')\n      // console.log(wellList)\n      const response = await wells.post(\"wells\", wellInfo)\n      dispatch({\n        type: POST_WELLINFO_TO_JSONDB_REQUESTED,\n      });\n      try {\n        dispatch({\n          type: POST_WELLINFO_TO_JSONDB_RECEIVED,\n          payload: wellInfo,\n        });\n      } catch (error) {\n        console.log(error)\n        dispatch({\n          type: POST_WELLINFO_TO_JSONDB_FAILED,\n          payload: error,\n        });\n      }\n    };\n  };\n  "]},"metadata":{},"sourceType":"module"}