{"ast":null,"code":"// import { get } from \"lodash\"\n// import wells from \"../APIs/wells\"\n// // import getWellsFromJSONDb from \"./getWellsFromJSONDb\"\n// import { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n//   GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n//   GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"./types\"\n// export default (selectedWell) => {\n//   return async (dispatch, getState) => {\n//     dispatch({\n//       type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n//     })\n//     try {\n//       let result = null;\n//       const wellList = getState().getWellsFromJSONDbReducer.response\n//       const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n//       const selectedWellOperator = selectedWellConvertedToArray[0]\n//       const selectedWell_Well = selectedWellConvertedToArray[2]\n//       for (let well in wellList) {\n//         if (wellList[well].operator == selectedWellOperator && wellList[well].well == selectedWell_Well) {\n//           result = [...wellList[well].grid]\n//         }\n//       }\n//       dispatch({\n//         type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n//         payload: result\n//       }) \n//     } catch (error) {\n//       dispatch({\n//         type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n//         payload: error\n//       })\n//     }\n//   }\n// } \n//     // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n//         // if (getState.getWellsFromJSONDbReducer.response[well].operator )\n//     // }","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/ActionCreators/getWellPlansFromJSONDb.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA","sourcesContent":["// import { get } from \"lodash\"\n// import wells from \"../APIs/wells\"\n// // import getWellsFromJSONDb from \"./getWellsFromJSONDb\"\n// import { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n//   GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n//   GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"./types\"\n\n// export default (selectedWell) => {\n//   return async (dispatch, getState) => {\n    \n//     dispatch({\n//       type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n//     })\n//     try {\n//       let result = null;\n//       const wellList = getState().getWellsFromJSONDbReducer.response\n//       const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n//       const selectedWellOperator = selectedWellConvertedToArray[0]\n//       const selectedWell_Well = selectedWellConvertedToArray[2]\n//       for (let well in wellList) {\n//         if (wellList[well].operator == selectedWellOperator && wellList[well].well == selectedWell_Well) {\n//           result = [...wellList[well].grid]\n//         }\n//       }\n//       dispatch({\n//         type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n//         payload: result\n//       }) \n//     } catch (error) {\n      \n//       dispatch({\n//         type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n//         payload: error\n//       })\n//     }\n//   }\n// } \n\n\n//     // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n//         // if (getState.getWellsFromJSONDbReducer.response[well].operator )\n//     // }\n\n"]},"metadata":{},"sourceType":"module"}