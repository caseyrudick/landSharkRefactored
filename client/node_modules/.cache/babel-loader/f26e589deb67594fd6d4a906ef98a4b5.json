{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar meshAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nfunction makeSliceAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: false,\n      description: ['Determines whether or not slice planes about the', axLetter, 'dimension are drawn.'].join(' ')\n    },\n    locations: {\n      valType: 'data_array',\n      dflt: [],\n      role: 'info',\n      description: ['Specifies the location(s) of slices on the axis.', 'When not specified slices would be created for', 'all points of the axis', axLetter, 'except start and end.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      role: 'style',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `slices`. The default fill value of the', '`slices` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    }\n  };\n}\n\nfunction makeCapAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: true,\n      description: ['Sets the fill ratio of the `slices`. The default fill value of the', axLetter, '`slices` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      role: 'style',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `caps`. The default fill value of the', '`caps` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    }\n  };\n}\n\nvar attrs = module.exports = overrideAll(extendFlat({\n  x: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Sets the X coordinates of the vertices on X axis.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Sets the Y coordinates of the vertices on Y axis.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Sets the Z coordinates of the vertices on Z axis.'].join(' ')\n  },\n  value: {\n    valType: 'data_array',\n    role: 'info',\n    description: ['Sets the 4th dimension (value) of the vertices.'].join(' ')\n  },\n  isomin: {\n    valType: 'number',\n    role: 'info',\n    description: ['Sets the minimum boundary for iso-surface plot.'].join(' ')\n  },\n  isomax: {\n    valType: 'number',\n    role: 'info',\n    description: ['Sets the maximum boundary for iso-surface plot.'].join(' ')\n  },\n  surface: {\n    show: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: true,\n      description: ['Hides/displays surfaces between minimum and maximum iso-values.'].join(' ')\n    },\n    count: {\n      valType: 'integer',\n      role: 'info',\n      dflt: 2,\n      min: 1,\n      description: ['Sets the number of iso-surfaces between minimum and maximum iso-values.', 'By default this value is 2 meaning that only minimum and maximum surfaces', 'would be drawn.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      role: 'style',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the iso-surface. The default fill value of the', 'surface is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    },\n    pattern: {\n      valType: 'flaglist',\n      flags: ['A', 'B', 'C', 'D', 'E'],\n      extras: ['all', 'odd', 'even'],\n      dflt: 'all',\n      role: 'style',\n      description: ['Sets the surface pattern of the iso-surface 3-D sections. The default pattern of', 'the surface is `all` meaning that the rest of surface elements would be shaded.', 'The check options (either 1 or 2) could be used to draw half of the squares', 'on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E`', 'may also be used to reduce the number of triangles on the iso-surfaces and', 'creating other patterns of interest.'].join(' ')\n    }\n  },\n  spaceframe: {\n    show: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: false,\n      description: ['Displays/hides tetrahedron shapes between minimum and', 'maximum iso-values. Often useful when either caps or', 'surfaces are disabled or filled with values less than 1.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      role: 'style',\n      min: 0,\n      max: 1,\n      dflt: 0.15,\n      description: ['Sets the fill ratio of the `spaceframe` elements. The default fill value', 'is 0.15 meaning that only 15% of the area of every faces of tetras would be', 'shaded. Applying a greater `fill` ratio would allow the creation of stronger', 'elements or could be sued to have entirely closed areas (in case of using 1).'].join(' ')\n    }\n  },\n  slices: {\n    x: makeSliceAttr('x'),\n    y: makeSliceAttr('y'),\n    z: makeSliceAttr('z')\n  },\n  caps: {\n    x: makeCapAttr('x'),\n    y: makeCapAttr('y'),\n    z: makeCapAttr('z')\n  },\n  text: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    arrayOk: true,\n    description: ['Sets the text elements associated with the vertices.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    arrayOk: true,\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs(),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n}, colorScaleAttrs('', {\n  colorAttr: '`value`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  opacity: meshAttrs.opacity,\n  lightposition: meshAttrs.lightposition,\n  lighting: meshAttrs.lighting,\n  flatshading: meshAttrs.flatshading,\n  contour: meshAttrs.contour,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\n}), 'calc', 'nested'); // required defaults to speed up surface normal calculations\n\nattrs.flatshading.dflt = true;\nattrs.lighting.facenormalsepsilon.dflt = 0;\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/isosurface/attributes.js"],"names":["colorScaleAttrs","require","hovertemplateAttrs","meshAttrs","baseAttrs","extendFlat","overrideAll","makeSliceAttr","axLetter","show","valType","role","dflt","description","join","locations","fill","min","max","makeCapAttr","attrs","module","exports","x","y","z","value","isomin","isomax","surface","count","pattern","flags","extras","spaceframe","slices","caps","text","arrayOk","hovertext","hovertemplate","showlegend","colorAttr","showScaleDflt","editTypeOverride","opacity","lightposition","lighting","flatshading","contour","hoverinfo","facenormalsepsilon","editType","transforms","undefined"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar meshAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nfunction makeSliceAttr(axLetter) {\n    return {\n        show: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: false,\n            description: [\n                'Determines whether or not slice planes about the', axLetter,\n                'dimension are drawn.'\n            ].join(' ')\n        },\n        locations: {\n            valType: 'data_array',\n            dflt: [],\n            role: 'info',\n            description: [\n                'Specifies the location(s) of slices on the axis.',\n                'When not specified slices would be created for',\n                'all points of the axis', axLetter, 'except start and end.'\n            ].join(' ')\n        },\n        fill: {\n            valType: 'number',\n            role: 'style',\n            min: 0,\n            max: 1,\n            dflt: 1,\n            description: [\n                'Sets the fill ratio of the `slices`. The default fill value of the',\n                '`slices` is 1 meaning that they are entirely shaded. On the other hand',\n                'Applying a `fill` ratio less than one would allow the creation of',\n                'openings parallel to the edges.'\n            ].join(' ')\n        }\n    };\n}\n\nfunction makeCapAttr(axLetter) {\n    return {\n        show: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: true,\n            description: [\n                'Sets the fill ratio of the `slices`. The default fill value of the', axLetter,\n                '`slices` is 1 meaning that they are entirely shaded. On the other hand',\n                'Applying a `fill` ratio less than one would allow the creation of',\n                'openings parallel to the edges.'\n            ].join(' ')\n        },\n        fill: {\n            valType: 'number',\n            role: 'style',\n            min: 0,\n            max: 1,\n            dflt: 1,\n            description: [\n                'Sets the fill ratio of the `caps`. The default fill value of the',\n                '`caps` is 1 meaning that they are entirely shaded. On the other hand',\n                'Applying a `fill` ratio less than one would allow the creation of',\n                'openings parallel to the edges.'\n            ].join(' ')\n        }\n    };\n}\n\nvar attrs = module.exports = overrideAll(extendFlat({\n    x: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Sets the X coordinates of the vertices on X axis.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Sets the Y coordinates of the vertices on Y axis.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Sets the Z coordinates of the vertices on Z axis.'\n        ].join(' ')\n    },\n    value: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Sets the 4th dimension (value) of the vertices.'\n        ].join(' ')\n    },\n    isomin: {\n        valType: 'number',\n        role: 'info',\n        description: [\n            'Sets the minimum boundary for iso-surface plot.'\n        ].join(' ')\n    },\n    isomax: {\n        valType: 'number',\n        role: 'info',\n        description: [\n            'Sets the maximum boundary for iso-surface plot.'\n        ].join(' ')\n    },\n\n    surface: {\n        show: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: true,\n            description: [\n                'Hides/displays surfaces between minimum and maximum iso-values.'\n            ].join(' ')\n        },\n        count: {\n            valType: 'integer',\n            role: 'info',\n            dflt: 2,\n            min: 1,\n            description: [\n                'Sets the number of iso-surfaces between minimum and maximum iso-values.',\n                'By default this value is 2 meaning that only minimum and maximum surfaces',\n                'would be drawn.'\n            ].join(' ')\n        },\n        fill: {\n            valType: 'number',\n            role: 'style',\n            min: 0,\n            max: 1,\n            dflt: 1,\n            description: [\n                'Sets the fill ratio of the iso-surface. The default fill value of the',\n                'surface is 1 meaning that they are entirely shaded. On the other hand',\n                'Applying a `fill` ratio less than one would allow the creation of',\n                'openings parallel to the edges.'\n            ].join(' ')\n        },\n        pattern: {\n            valType: 'flaglist',\n            flags: ['A', 'B', 'C', 'D', 'E'],\n            extras: ['all', 'odd', 'even'],\n            dflt: 'all',\n            role: 'style',\n            description: [\n                'Sets the surface pattern of the iso-surface 3-D sections. The default pattern of',\n                'the surface is `all` meaning that the rest of surface elements would be shaded.',\n                'The check options (either 1 or 2) could be used to draw half of the squares',\n                'on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E`',\n                'may also be used to reduce the number of triangles on the iso-surfaces and',\n                'creating other patterns of interest.'\n            ].join(' ')\n        }\n    },\n\n    spaceframe: {\n        show: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: false,\n            description: [\n                'Displays/hides tetrahedron shapes between minimum and',\n                'maximum iso-values. Often useful when either caps or',\n                'surfaces are disabled or filled with values less than 1.'\n            ].join(' ')\n        },\n        fill: {\n            valType: 'number',\n            role: 'style',\n            min: 0,\n            max: 1,\n            dflt: 0.15,\n            description: [\n                'Sets the fill ratio of the `spaceframe` elements. The default fill value',\n                'is 0.15 meaning that only 15% of the area of every faces of tetras would be',\n                'shaded. Applying a greater `fill` ratio would allow the creation of stronger',\n                'elements or could be sued to have entirely closed areas (in case of using 1).'\n            ].join(' ')\n        }\n    },\n\n    slices: {\n        x: makeSliceAttr('x'),\n        y: makeSliceAttr('y'),\n        z: makeSliceAttr('z')\n    },\n\n    caps: {\n        x: makeCapAttr('x'),\n        y: makeCapAttr('y'),\n        z: makeCapAttr('z')\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        description: [\n            'Sets the text elements associated with the vertices.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        description: 'Same as `text`.'\n    },\n    hovertemplate: hovertemplateAttrs(),\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n},\n\ncolorScaleAttrs('', {\n    colorAttr: '`value`',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n    opacity: meshAttrs.opacity,\n    lightposition: meshAttrs.lightposition,\n    lighting: meshAttrs.lighting,\n    flatshading: meshAttrs.flatshading,\n    contour: meshAttrs.contour,\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\n}), 'calc', 'nested');\n\n// required defaults to speed up surface normal calculations\nattrs.flatshading.dflt = true; attrs.lighting.facenormalsepsilon.dflt = 0;\n\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;\n"]},"metadata":{},"sourceType":"script"}