{"ast":null,"code":"import DLC from\"./DLC\";import RF from\"./RF\";export default(function(measuredDepthCurrent,inclinationCurrent,azimuthCurrent,measuredDepthPrior,inclinationPrior,azimuthPrior,calculatedNorthingPrior){var converter=Math.PI/180;var converter2=0.00000001;var calculatedDLC=DLC(inclinationPrior,inclinationCurrent,azimuthPrior,azimuthCurrent);console.log(\"NS calculatedDLC \".concat(calculatedDLC));var calculatedRF=RF(measuredDepthPrior,measuredDepthCurrent,calculatedDLC);console.log(\"NS calculatedRF \".concat(calculatedRF));var calculatedNorthingCurrent=calculatedNorthingPrior+converter2+calculatedRF*(Math.sin(inclinationPrior*converter)*Math.cos(azimuthPrior*converter)+Math.sin(inclinationCurrent*converter)*Math.cos(azimuthCurrent*converter));return parseFloat(calculatedNorthingCurrent.toFixed(2));});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/HelperFunctions/Calculations/NS.js"],"names":["DLC","RF","measuredDepthCurrent","inclinationCurrent","azimuthCurrent","measuredDepthPrior","inclinationPrior","azimuthPrior","calculatedNorthingPrior","converter","Math","PI","converter2","calculatedDLC","console","log","calculatedRF","calculatedNorthingCurrent","sin","cos","parseFloat","toFixed"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,EAAP,KAAe,MAAf,CAEA,eAAe,SAACC,oBAAD,CAAuBC,kBAAvB,CAA2CC,cAA3C,CAA2DC,kBAA3D,CAA+EC,gBAA/E,CAAiGC,YAAjG,CAA+GC,uBAA/G,CAA2I,CACxJ,GAAMC,CAAAA,SAAS,CAAIC,IAAI,CAACC,EAAN,CAAU,GAA5B,CACA,GAAMC,CAAAA,UAAU,CAAG,UAAnB,CAEA,GAAMC,CAAAA,aAAa,CAAGb,GAAG,CAACM,gBAAD,CAAmBH,kBAAnB,CAAuCI,YAAvC,CAAqDH,cAArD,CAAzB,CACAU,OAAO,CAACC,GAAR,4BAAgCF,aAAhC,GAEA,GAAMG,CAAAA,YAAY,CAAGf,EAAE,CAACI,kBAAD,CAAqBH,oBAArB,CAA2CW,aAA3C,CAAvB,CACAC,OAAO,CAACC,GAAR,2BAA+BC,YAA/B,GAEA,GAAMC,CAAAA,yBAAyB,CAAIT,uBAAuB,CAACI,UAAzB,CAAuCI,YAAY,EAAIN,IAAI,CAACQ,GAAL,CAASZ,gBAAgB,CAACG,SAA1B,EAAqCC,IAAI,CAACS,GAAL,CAASZ,YAAY,CAACE,SAAtB,CAArC,CAAuEC,IAAI,CAACQ,GAAL,CAASf,kBAAkB,CAAGM,SAA9B,EAA2CC,IAAI,CAACS,GAAL,CAASf,cAAc,CAACK,SAAxB,CAAtH,CAArF,CAEA,MACEW,CAAAA,UAAU,CAACH,yBAAyB,CAACI,OAA1B,CAAkC,CAAlC,CAAD,CADZ,CAID,CAhBD","sourcesContent":["import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior) => {\n  const converter = (Math.PI)/180;\n  const converter2 = 0.00000001;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`NS calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`NS calculatedRF ${calculatedRF}`)\n\n  const calculatedNorthingCurrent = (calculatedNorthingPrior+converter2) + calculatedRF * (Math.sin(inclinationPrior*converter)*Math.cos(azimuthPrior*converter)+ Math.sin(inclinationCurrent * converter) * Math.cos(azimuthCurrent*converter));\n\n  return (\n    parseFloat(calculatedNorthingCurrent.toFixed(2))\n\n  )\n} "]},"metadata":{},"sourceType":"module"}