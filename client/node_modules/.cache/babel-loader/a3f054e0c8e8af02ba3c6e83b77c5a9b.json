{"ast":null,"code":"import DLC from \"./DLC\";\nimport RF from \"./RF\";\nexport default ((measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior) => {\n  const converter = Math.PI / 180;\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent);\n  console.log(`EW calculatedDLC ${calculatedDLC}`);\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC);\n  console.log(`EW calculatedRF ${calculatedRF}`);\n  const calculatedEastingCurrent = calculatedEastingPrior + calculatedRF * (Math.sin(inclinationPrior * converter) * Math.sin(azimuthPrior * converter) + Math.sin(inclinationCurrent * converter) * Math.sin(azimuthCurrent * converter));\n  console.log(`Easting: ${calculatedEastingCurrent}`);\n  return parseFloat(calculatedEastingCurrent.toFixed(2)) // calculatedEastingCurrent\n  ;\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/HelperFunctions/Calculations/EW.js"],"names":["DLC","RF","measuredDepthCurrent","inclinationCurrent","azimuthCurrent","measuredDepthPrior","inclinationPrior","azimuthPrior","calculatedEastingPrior","converter","Math","PI","calculatedDLC","console","log","calculatedRF","calculatedEastingCurrent","sin","parseFloat","toFixed"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,EAAP,MAAe,MAAf;AAEA,gBAAe,CAACC,oBAAD,EAAuBC,kBAAvB,EAA2CC,cAA3C,EAA2DC,kBAA3D,EAA+EC,gBAA/E,EAAiGC,YAAjG,EAA+GC,sBAA/G,KAA0I;AACvJ,QAAMC,SAAS,GAAIC,IAAI,CAACC,EAAN,GAAU,GAA5B;AAEA,QAAMC,aAAa,GAAGZ,GAAG,CAACM,gBAAD,EAAmBH,kBAAnB,EAAuCI,YAAvC,EAAqDH,cAArD,CAAzB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBF,aAAc,EAA9C;AAEA,QAAMG,YAAY,GAAGd,EAAE,CAACI,kBAAD,EAAqBH,oBAArB,EAA2CU,aAA3C,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBC,YAAa,EAA5C;AAEA,QAAMC,wBAAwB,GAAIR,sBAAsB,GAAGO,YAAY,IAAGL,IAAI,CAACO,GAAL,CAASX,gBAAgB,GAACG,SAA1B,IAAsCC,IAAI,CAACO,GAAL,CAASV,YAAY,GAAGE,SAAxB,CAAtC,GAA2EC,IAAI,CAACO,GAAL,CAASd,kBAAkB,GAAGM,SAA9B,IAAyCC,IAAI,CAACO,GAAL,CAASb,cAAc,GAACK,SAAxB,CAAvH,CAAvE;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAa,YAAWE,wBAAyB,EAAjD;AACA,SACEE,UAAU,CAACF,wBAAwB,CAACG,OAAzB,CAAiC,CAAjC,CAAD,CADZ,CAEE;AAFF;AAID,CAfD","sourcesContent":["import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedEastingPrior) => {\n  const converter = (Math.PI)/180;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`EW calculatedDLC ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`EW calculatedRF ${calculatedRF}`)\n\n  const calculatedEastingCurrent = (calculatedEastingPrior + calculatedRF *(Math.sin(inclinationPrior*converter)* Math.sin(azimuthPrior * converter) + Math.sin(inclinationCurrent * converter)*Math.sin(azimuthCurrent*converter)));\n  console.log(`Easting: ${calculatedEastingCurrent}`)\n  return (\n    parseFloat(calculatedEastingCurrent.toFixed(2))\n    // calculatedEastingCurrent\n  )\n};\n"]},"metadata":{},"sourceType":"module"}