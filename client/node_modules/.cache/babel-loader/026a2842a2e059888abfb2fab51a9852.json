{"ast":null,"code":"// import React, { useState, useEffect } from \"react\"\n// //bootstrap\n// import Container from \"react-bootstrap/esm/Container\";\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n// import 'react-datasheet/lib/react-datasheet.css';\n// import { connect } from \"react-redux\"\n// import ReactDataSheet from 'react-datasheet';\n// import saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\n// import postPlansToJSONdb from \"../ActionCreators/saveWellPlansToJSON\"\n// import wellsReducer from \"../Reducers/wellsReducer\";\n// const Plans = ({ savePlansToReduxStore, saveWellInfoToReduxStoreReducer, postPlansToJSONDb }) => {\n//   // useState Hooks\n//   const [input, setInput] = useState(false)\n//   const [vsDirection, setVsDirection] = useState(0)\n//   const [grid, setGrid] = useState(\n//     [\n//       [{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}],\n//       [{readOnly: true, value: 1}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}],\n//       // This bit is different from `Surveys`\n//       [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//       [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//       [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//       [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//     ]\n//   );\n//   // useEffect Hooks\n//   useEffect(() => {\n//     if (input) {\n//       // performCalculations();\n//     }\n//   }, [input]);\n//   useEffect(() => {\n//     handleAddRows(95)\n//   }, []);\n//   const performCalculations = () => {\n//     grid.map((row, index) => {\n//       if (index === 0 || index === 1) {\n//         // we do not want to run calculations on the header row array, nor the first array as it will always be MD: 0, INC: 0 and AZ: 0 and will have no data prior to itself\n//       } else {\n//         // for every array within the `grid` array we want to iterate over and change the values of the TVD, NS, EW, SECT and DLS\n//         const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n//         const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n//         const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n//         const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n//         const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n//         grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n//         grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n//         grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n//         grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n//         grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n//         setGrid(grid)\n//         setInput(false)\n//       }\n//     })\n//   }\n//   const onCellsChanged = (changes) => {\n//     const gridNew = grid.map(row => [...row])\n//     changes.forEach(({cell, row, col, value}) => {\n//       // `cell` provides an object with key value pair of 'value' and whatever the cell's value was prior to being edited\n//       gridNew[row][col] = {...gridNew[row][col], value}\n//     })\n//     setGrid(gridNew)\n//     setInput(true)\n//   }\n//   const handleVsDirection = (value) => {\n//     setVsDirection(value)\n//     setInput(true)\n//   }\n//   const handleSubmit = () => {\n//     const { well, operator, rig, county, uSstate } = saveWellInfoToReduxStoreReducer.response\n//     postPlansToDynamoDb(grid, vsDirection, well, operator, rig, county, uSstate)\n//     savePlansToReduxStore(grid)\n//   }\n//   const handleRemoveRow = () => {\n//     const newGrid = [...grid]\n//     newGrid.pop()\n//     setGrid(newGrid)\n//   }\n//   const createRows = (numberOfRowsToAdd) => {\n//     let i;\n//     let createdRows = []\n//     for (i = 0; i < numberOfRowsToAdd; i++) {\n//       createdRows.push(\n//         // This bit is different from `Surveys`\n//         [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n//       )\n//     }\n//     return createdRows;\n//   }\n//   const handleAddRows = (rows) => {\n//     const newGrid = [...grid, ...createRows(rows)]\n//     setGrid(newGrid)\n//   }\n//   const renderAlert = () => {\n//   }\n//   const renderSetRowsButtons = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n//           <Button variant=\"success\" value={25} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add 25 rows\n//           </Button>\n//           <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add 10 rows\n//           </Button>\n//           <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add 5 rows\n//           </Button>\n//           <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add a row\n//           </Button>\n//           <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n//             Remove a row\n//           </Button>\n//         </Col>\n//         <Col xs={2}>\n//         </Col>\n//       </Row>\n//     )\n//   }\n//   const renderSubmitButton = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"my-4\">\n//           <Button variant=\"info\" onClick={handleSubmit}>\n//             Submit data\n//           </Button>\n//         </Col>\n//         <Col xs={2}>\n//         </Col>\n//       </Row>\n//     )\n//   }\n//   const renderWellData = () => {\n//     console.log(saveWellInfoToReduxStoreReducer)\n//     if (saveWellInfoToReduxStoreReducer.status === 'received') {\n//       const { well, rig, operator } = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//     } else {\n//       return 'No well data'\n//     }\n//   }\n//   return (\n//     <Container>\n//       <Row>\n//         <Col xs={10}>\n//           {renderWellData()}\n//           <ReactDataSheet data={grid} valueRenderer={(cell) => cell.value} onCellsChanged={onCellsChanged} width />\n//         </Col>\n//         <Col xs={2}>\n//           <Form className=\"mt-7\">\n//             <Form.Group controlId=\"formBasicEmail\">\n//               <Form.Control type=\"float\" placeholder=\"Enter VS here\" onChange={event => handleVsDirection(event.target.value)}/>\n//             </Form.Group>\n//           </Form>\n//         </Col>\n//       </Row>\n//       {renderSetRowsButtons()}\n//       {renderSubmitButton()}\n//       <Row>\n//         <Col xs={10}>\n//           {renderAlert()}\n//         </Col>\n//         <Col xs={2}>\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n// const mapStateToProps = ({ saveWellInfoToReduxStoreReducer }) => {\n//   return {\n//     saveWellInfoToReduxStoreReducer,\n//   };\n// };\n// export default connect(mapStateToProps, { savePlansToReduxStore, postPlansToJSONDb })(Plans);","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\"\n// //bootstrap\n// import Container from \"react-bootstrap/esm/Container\";\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css';\n// import { connect } from \"react-redux\"\n// import ReactDataSheet from 'react-datasheet';\n// import saveNewPlanToReduxStore from \"../ActionCreators/saveNewPlanToReduxStore\"\n// import postPlansToJSONdb from \"../ActionCreators/saveWellPlansToJSON\"\n// import wellsReducer from \"../Reducers/wellsReducer\";\n\n\n\n\n// const Plans = ({ savePlansToReduxStore, saveWellInfoToReduxStoreReducer, postPlansToJSONDb }) => {\n\n//   // useState Hooks\n//   const [input, setInput] = useState(false)\n//   const [vsDirection, setVsDirection] = useState(0)\n//   const [grid, setGrid] = useState(\n//     [\n//       [{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}],\n\n//       [{readOnly: true, value: 1}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}, {readOnly: true, value: 0}],\n\n//       // This bit is different from `Surveys`\n//       [{readOnly: true, value: 2}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//       [{readOnly: true, value: 3}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//       [{readOnly: true, value: 4}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//       [{readOnly: true, value: 5}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}],\n//     ]\n//   );\n\n//   // useEffect Hooks\n//   useEffect(() => {\n//     if (input) {\n//       // performCalculations();\n//     }\n//   }, [input]);\n  \n//   useEffect(() => {\n//     handleAddRows(95)\n//   }, []);\n\n//   const performCalculations = () => {\n//     grid.map((row, index) => {\n//       if (index === 0 || index === 1) {\n//         // we do not want to run calculations on the header row array, nor the first array as it will always be MD: 0, INC: 0 and AZ: 0 and will have no data prior to itself\n//       } else {\n//         // for every array within the `grid` array we want to iterate over and change the values of the TVD, NS, EW, SECT and DLS\n//         const calculatedTVD = calculateTVD(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][4].value)\n//         const calculatedNS = calculateNS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value)\n//         const calculatedEW = calculateEW(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][6].value)\n//         const calculatedSECT = calculateSECT(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value, grid[index - 1][5].value, grid[index - 1][6].value, index, vsDirection)\n//         const calculatedDLS = calculateDLS(grid[index][1].value, grid[index][2].value, grid[index][3].value, grid[index - 1][1].value, grid[index - 1][2].value, grid[index - 1][3].value)\n\n//         grid[index][4] = {...grid[index][4], readOnly: true, value: calculatedTVD}\n//         grid[index][5] = {...grid[index][5], readOnly: true, value: calculatedNS}\n//         grid[index][6] = {...grid[index][6], readOnly: true, value: calculatedEW}\n//         grid[index][7] = {...grid[index][7], readOnly: true, value: calculatedSECT}\n//         grid[index][8] = {...grid[index][8], readOnly: true, value: calculatedDLS}\n\n//         setGrid(grid)\n//         setInput(false)\n//       }\n//     })\n//   }\n\n//   const onCellsChanged = (changes) => {\n//     const gridNew = grid.map(row => [...row])\n//     changes.forEach(({cell, row, col, value}) => {\n//       // `cell` provides an object with key value pair of 'value' and whatever the cell's value was prior to being edited\n//       gridNew[row][col] = {...gridNew[row][col], value}\n//     })\n//     setGrid(gridNew)\n//     setInput(true)\n//   }\n\n//   const handleVsDirection = (value) => {\n//     setVsDirection(value)\n//     setInput(true)\n//   }\n\n//   const handleSubmit = () => {\n//     const { well, operator, rig, county, uSstate } = saveWellInfoToReduxStoreReducer.response\n//     postPlansToDynamoDb(grid, vsDirection, well, operator, rig, county, uSstate)\n//     savePlansToReduxStore(grid)\n//   }\n\n//   const handleRemoveRow = () => {\n//     const newGrid = [...grid]\n//     newGrid.pop()\n//     setGrid(newGrid)\n//   }\n\n//   const createRows = (numberOfRowsToAdd) => {\n//     let i;\n//     let createdRows = []\n//     for (i = 0; i < numberOfRowsToAdd; i++) {\n//       createdRows.push(\n//         // This bit is different from `Surveys`\n//         [{readOnly: true, value: grid.length + i}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n//       )\n//     }\n//     return createdRows;\n//   }\n\n//   const handleAddRows = (rows) => {\n//     const newGrid = [...grid, ...createRows(rows)]\n//     setGrid(newGrid)\n//   }\n\n//   const renderAlert = () => {\n\n//   }\n\n//   const renderSetRowsButtons = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"d-flex justify-content-start mt-4\">\n//           <Button variant=\"success\" value={25} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add 25 rows\n//           </Button>\n//           <Button variant=\"success\" className=\"ml-4\" value={10} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add 10 rows\n//           </Button>\n//           <Button variant=\"success\" className=\"ml-4\" value={5} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add 5 rows\n//           </Button>\n//           <Button variant=\"success\" className=\"ml-4\" value={1} onClick={(event) => handleAddRows(event.target.value)}>\n//             Add a row\n//           </Button>\n//           <Button variant=\"danger\" className=\"ml-4\" onClick={handleRemoveRow}>\n//             Remove a row\n//           </Button>\n//         </Col>\n//         <Col xs={2}>\n\n//         </Col>\n//       </Row>\n//     )\n//   }\n\n//   const renderSubmitButton = () => {\n//     return (\n//       <Row>\n//         <Col xs={10} className=\"my-4\">\n//           <Button variant=\"info\" onClick={handleSubmit}>\n//             Submit data\n//           </Button>\n//         </Col>\n//         <Col xs={2}>\n\n//         </Col>\n//       </Row>\n//     )\n//   }\n\n//   const renderWellData = () => {\n//     console.log(saveWellInfoToReduxStoreReducer)\n//     if (saveWellInfoToReduxStoreReducer.status === 'received') {\n//       const { well, rig, operator } = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n//     } else {\n//       return 'No well data'\n//     }\n//   }\n\n//   return (\n//     <Container>\n//       <Row>\n//         <Col xs={10}>\n//           {renderWellData()}\n//           <ReactDataSheet data={grid} valueRenderer={(cell) => cell.value} onCellsChanged={onCellsChanged} width />\n//         </Col>\n//         <Col xs={2}>\n//           <Form className=\"mt-7\">\n//             <Form.Group controlId=\"formBasicEmail\">\n//               <Form.Control type=\"float\" placeholder=\"Enter VS here\" onChange={event => handleVsDirection(event.target.value)}/>\n//             </Form.Group>\n//           </Form>\n//         </Col>\n//       </Row>\n//       {renderSetRowsButtons()}\n//       {renderSubmitButton()}\n//       <Row>\n//         <Col xs={10}>\n//           {renderAlert()}\n//         </Col>\n//         <Col xs={2}>\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({ saveWellInfoToReduxStoreReducer }) => {\n//   return {\n//     saveWellInfoToReduxStoreReducer,\n//   };\n// };\n\n// export default connect(mapStateToProps, { savePlansToReduxStore, postPlansToJSONDb })(Plans);"]},"metadata":{},"sourceType":"module"}