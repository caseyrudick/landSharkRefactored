{"ast":null,"code":"import DLC from \"./DLC\";\nimport RF from \"./RF\";\nexport default ((measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior) => {\n  const converter = Math.PI / 180;\n  console.log(`converter: ${converter}`);\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent);\n  console.log(`calculatedDLC: ${calculatedDLC}`);\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC);\n  console.log(`calculatedRF: ${calculatedRF}`);\n  const calculatedTVDCurrent = calculatedTVDPrior + calculatedRF * (Math.cos(inclinationPrior * converter) + Math.cos(inclinationCurrent * converter));\n  console.log(`calculatedTVDCurrent: ${calculatedTVDCurrent}`);\n  return parseFloat(calculatedTVDCurrent.toFixed(2));\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/HelperFunctions/Calculations/TVD.js"],"names":["DLC","RF","measuredDepthCurrent","inclinationCurrent","azimuthCurrent","measuredDepthPrior","inclinationPrior","azimuthPrior","calculatedTVDPrior","converter","Math","PI","console","log","calculatedDLC","calculatedRF","calculatedTVDCurrent","cos","parseFloat","toFixed"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,EAAP,MAAe,MAAf;AAEA,gBAAe,CAACC,oBAAD,EAAuBC,kBAAvB,EAA2CC,cAA3C,EAA2DC,kBAA3D,EAA+EC,gBAA/E,EAAiGC,YAAjG,EAA+GC,kBAA/G,KAAsI;AACnJ,QAAMC,SAAS,GAAIC,IAAI,CAACC,EAAN,GAAU,GAA5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaJ,SAAU,EAApC;AAEA,QAAMK,aAAa,GAAGd,GAAG,CAACM,gBAAD,EAAmBH,kBAAnB,EAAuCI,YAAvC,EAAqDH,cAArD,CAAzB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBC,aAAc,EAA5C;AAEA,QAAMC,YAAY,GAAGd,EAAE,CAACI,kBAAD,EAAqBH,oBAArB,EAA2CY,aAA3C,CAAvB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBE,YAAa,EAA1C;AAEA,QAAMC,oBAAoB,GAAGR,kBAAkB,GAAGO,YAAY,IAAIL,IAAI,CAACO,GAAL,CAASX,gBAAgB,GAACG,SAA1B,IAAuCC,IAAI,CAACO,GAAL,CAASd,kBAAkB,GAACM,SAA5B,CAA3C,CAA9D;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBG,oBAAqB,EAA1D;AAEA,SACEE,UAAU,CAACF,oBAAoB,CAACG,OAArB,CAA6B,CAA7B,CAAD,CADZ;AAGD,CAhBD","sourcesContent":["import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior) => {\n  const converter = (Math.PI)/180\n  console.log(`converter: ${converter}`)\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n  console.log(`calculatedDLC: ${calculatedDLC}`)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n  console.log(`calculatedRF: ${calculatedRF}`)\n\n  const calculatedTVDCurrent = calculatedTVDPrior + calculatedRF * (Math.cos(inclinationPrior*converter) + Math.cos(inclinationCurrent*converter));\n  console.log(`calculatedTVDCurrent: ${calculatedTVDCurrent}`)\n\n  return (\n    parseFloat(calculatedTVDCurrent.toFixed(2))\n  )\n}"]},"metadata":{},"sourceType":"module"}