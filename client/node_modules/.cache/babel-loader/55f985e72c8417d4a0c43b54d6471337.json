{"ast":null,"code":"import DLC from \"./DLC\";\nimport RF from \"./RF\";\nexport default ((measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior) => {\n  const converter = Math.PI / 180;\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent);\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC);\n  const calculatedTVDCurrent = calculatedTVDPrior + calculatedRF * (Math.cos(inclinationPrior * converter) + Math.cos(inclinationCurrent * converter));\n  console.log(calculatedTVDCurrent);\n  return parseFloat(calculatedTVDCurrent.toFixed(2));\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/TVD.js"],"names":["DLC","RF","measuredDepthCurrent","inclinationCurrent","azimuthCurrent","measuredDepthPrior","inclinationPrior","azimuthPrior","calculatedTVDPrior","converter","Math","PI","calculatedDLC","calculatedRF","calculatedTVDCurrent","cos","console","log","parseFloat","toFixed"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,EAAP,MAAe,MAAf;AAEA,gBAAe,CAACC,oBAAD,EAAuBC,kBAAvB,EAA2CC,cAA3C,EAA2DC,kBAA3D,EAA+EC,gBAA/E,EAAiGC,YAAjG,EAA+GC,kBAA/G,KAAsI;AACnJ,QAAMC,SAAS,GAAIC,IAAI,CAACC,EAAN,GAAU,GAA5B;AAEA,QAAMC,aAAa,GAAGZ,GAAG,CAACM,gBAAD,EAAmBH,kBAAnB,EAAuCI,YAAvC,EAAqDH,cAArD,CAAzB;AAEA,QAAMS,YAAY,GAAGZ,EAAE,CAACI,kBAAD,EAAqBH,oBAArB,EAA2CU,aAA3C,CAAvB;AAEA,QAAME,oBAAoB,GAAGN,kBAAkB,GAAGK,YAAY,IAAIH,IAAI,CAACK,GAAL,CAAST,gBAAgB,GAACG,SAA1B,IAAuCC,IAAI,CAACK,GAAL,CAASZ,kBAAkB,GAACM,SAA5B,CAA3C,CAA9D;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ;AACA,SACEI,UAAU,CAACJ,oBAAoB,CAACK,OAArB,CAA6B,CAA7B,CAAD,CADZ;AAGD,CAZD","sourcesContent":["import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedTVDPrior) => {\n  const converter = (Math.PI)/180\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n\n  const calculatedTVDCurrent = calculatedTVDPrior + calculatedRF * (Math.cos(inclinationPrior*converter) + Math.cos(inclinationCurrent*converter));\n  console.log(calculatedTVDCurrent)\n  return (\n    parseFloat(calculatedTVDCurrent.toFixed(2))\n  )\n}"]},"metadata":{},"sourceType":"module"}