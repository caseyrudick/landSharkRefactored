{"ast":null,"code":"import { GET_LEASE_LINES_FROM_JSONDB_REQUESTED, GET_LEASE_LINES_FROM_JSONDB_RECEIVED, GET_LEASE_LINES_FROM_JSONDB_FAILED } from \"./types\";\nimport wells from \"../APIs/wells\";\nexport default ((selectedWell, getState) => {\n  console.log(selectedWell);\n  return async dispatch => {\n    dispatch({\n      type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n    });\n\n    try {\n      let result = null;\n      const response = await wells.get(\"LeaseLines\");\n      const listOfWells = response.data;\n      console.log(listOfWells.data);\n      const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim());\n      const selectedWellOperator = selectedWellConvertedToArray[0];\n      const selectedWell_Well = selectedWellConvertedToArray[2];\n\n      for (let well in listOfWells) {\n        if (listOfWells[well].operator === selectedWellOperator && listOfWells[well].well === selectedWell_Well) {\n          result = [...listOfWells[well].grid];\n        }\n      }\n\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n        payload: result\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n        payload: error\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getLeaseLinesFromJSONDb.js"],"names":["GET_LEASE_LINES_FROM_JSONDB_REQUESTED","GET_LEASE_LINES_FROM_JSONDB_RECEIVED","GET_LEASE_LINES_FROM_JSONDB_FAILED","wells","selectedWell","getState","console","log","dispatch","type","result","response","get","listOfWells","data","selectedWellConvertedToArray","split","map","word","trim","selectedWellOperator","selectedWell_Well","well","operator","grid","payload","error"],"mappings":"AAAA,SAAQA,qCAAR,EACEC,oCADF,EAEEC,kCAFF,QAE2C,SAF3C;AAGA,OAAOC,KAAP,MAAkB,eAAlB;AACE,gBAAe,CAACC,YAAD,EAAeC,QAAf,KAA4B;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,SAAO,MAAMI,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,UAAIU,MAAM,GAAG,IAAb;AACA,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,YAAV,CAAvB;AACA,YAAMC,WAAW,GAAGF,QAAQ,CAACG,IAA7B;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYM,WAAW,CAACC,IAAxB;AACA,YAAMC,4BAA4B,GAAGX,YAAY,CAACY,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAArC;AACA,YAAMC,oBAAoB,GAAGL,4BAA4B,CAAC,CAAD,CAAzD;AACA,YAAMM,iBAAiB,GAAGN,4BAA4B,CAAC,CAAD,CAAtD;;AACA,WAAK,IAAIO,IAAT,IAAiBT,WAAjB,EAA8B;AAC5B,YAAIA,WAAW,CAACS,IAAD,CAAX,CAAkBC,QAAlB,KAA+BH,oBAA/B,IAAuDP,WAAW,CAACS,IAAD,CAAX,CAAkBA,IAAlB,KAA2BD,iBAAtF,EAAyG;AACvGX,UAAAA,MAAM,GAAG,CAAC,GAAGG,WAAW,CAACS,IAAD,CAAX,CAAkBE,IAAtB,CAAT;AACD;AACF;;AACDhB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,oCADC;AAEPwB,QAAAA,OAAO,EAAEf;AAFF,OAAD,CAAR;AAID,KAjBD,CAiBE,OAAOgB,KAAP,EAAc;AACdlB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,kCADC;AAEPuB,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID;AACF,GA3BD;AA4BD,CA9BD","sourcesContent":["import {GET_LEASE_LINES_FROM_JSONDB_REQUESTED,\n  GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n  GET_LEASE_LINES_FROM_JSONDB_FAILED} from \"./types\"\nimport wells from \"../APIs/wells\"\n  export default (selectedWell, getState) => {\n    console.log(selectedWell)\n    return async dispatch => {\n      dispatch({\n        type: GET_LEASE_LINES_FROM_JSONDB_REQUESTED\n      })\n      try {\n        let result = null;\n        const response = await wells.get(\"LeaseLines\")\n        const listOfWells = response.data\n        console.log(listOfWells.data)\n        const selectedWellConvertedToArray = selectedWell.split(\"-\").map(word => word.trim())\n        const selectedWellOperator = selectedWellConvertedToArray[0]\n        const selectedWell_Well = selectedWellConvertedToArray[2]\n        for (let well in listOfWells) {\n          if (listOfWells[well].operator === selectedWellOperator && listOfWells[well].well === selectedWell_Well) {\n            result = [...listOfWells[well].grid]\n          }\n        }\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_RECEIVED,\n          payload: result\n        })\n      } catch (error) {\n        dispatch({\n          type: GET_LEASE_LINES_FROM_JSONDB_FAILED,\n          payload: error\n        })\n      }\n    }\n  }"]},"metadata":{},"sourceType":"module"}