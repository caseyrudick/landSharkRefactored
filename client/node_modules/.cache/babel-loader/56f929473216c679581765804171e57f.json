{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport Plot from \"plotly.js\";\nimport { isNumber } from \"lodash\";\n\nconst ExistingPVA = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getLeaseLinesFromJSONDbReducer\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    data = [...data];\n    let dataLength = data.length;\n    console.log(dataLength);\n    console.log(data);\n\n    if (polyLine) {\n      if (data.length === 0) {\n        return [];\n      } else {\n        return data.map((row, index) => data[index][2].value).slice(1);\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        return [];\n      } else {\n        return data.map((row, index) => data[index][6].value).slice(1);\n      }\n    }\n  }; // const createNorthingCoordinates = (polyLine = false, data) => {\n  //   if (polyLine) {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.map((row, index) => data[index][1].value).slice(1)\n  // }\n  // } else {\n  //     if (Object.keys(data).length === 0) {\n  //       return []\n  //     } else {\n  //       return data.map((row, index) => data[index][5].value).slice(1)\n  //     }\n  //   }\n  // } \n  // const renderPlanView = () => {\n  //   <Plot\n  //     data = {[\n  //       {\n  //         x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"blue\"},\n  //         name: \"Plan\"\n  //       },\n  //       {\n  //         x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"black\"},\n  //         name: \"Lease Lines\"\n  //       }\n  //     ]}\n  //     layout = { {width: 1000, height: 800, title: \"Section View\"} }\n  //   />\n  // }\n\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    console.log(\"Here's the getLeaseLinesFromJSONDbReducer.status\");\n    console.log(getLeaseLinesFromJSONDbReducer.response);\n    console.log(getLeaseLinesFromJSONDbReducer.response.length);\n    const data = [...getLeaseLinesFromJSONDbReducer.response];\n    let result = data.map((row, index) => data[index][2].value).slice(1);\n    console.log(result);\n    return \"Why is it spontaneously failing\" // <Container>\n    //   {renderPlanView()} \n    // </Container>\n    ;\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_c = ExistingPVA;\n\nconst mapStateToProps = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getLeaseLinesFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell,\n    getLeaseLinesFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","isNumber","ExistingPVA","getWellPlansFromJSONDbReducer","activeWell","getLeaseLinesFromJSONDbReducer","createEastingCoordinates","data","polyLine","dataLength","length","console","log","map","row","index","value","slice","Object","keys","status","response","result","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"plotly.js\"\nimport { isNumber } from \"lodash\"\n\nconst ExistingPVA = ({getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n\n  \n  const createEastingCoordinates = (data, polyLine = false) => {\n    data = [...data]\n    let dataLength = data.length\n    console.log(dataLength)\n    console.log(data)\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((row, index) => data[index][2].value).slice(1)\n      }\n    } else {\n        if (Object.keys(data).length === 0) {\n          return []\n        } else {\n          return data.map((row, index) => data[index][6].value).slice(1)\n        }\n      }\n    } \n    \n    // const createNorthingCoordinates = (polyLine = false, data) => {\n    //   if (polyLine) {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.map((row, index) => data[index][1].value).slice(1)\n        // }\n      // } else {\n      //     if (Object.keys(data).length === 0) {\n      //       return []\n      //     } else {\n      //       return data.map((row, index) => data[index][5].value).slice(1)\n      //     }\n      //   }\n      // } \n\n\n  // const renderPlanView = () => {\n  //   <Plot\n  //     data = {[\n  //       {\n  //         x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"blue\"},\n  //         name: \"Plan\"\n  //       },\n  //       {\n  //         x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"black\"},\n  //         name: \"Lease Lines\"\n  //       }\n  //     ]}\n  //     layout = { {width: 1000, height: 800, title: \"Section View\"} }\n  //   />\n  // }\n\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    console.log(\"Here's the getLeaseLinesFromJSONDbReducer.status\")\n    console.log(getLeaseLinesFromJSONDbReducer.response)\n    console.log(getLeaseLinesFromJSONDbReducer.response.length)\n    const data = [...getLeaseLinesFromJSONDbReducer.response]\n    let result = data.map((row, index) => data[index][2].value).slice(1)\n\n    console.log(result)\n    return (\n      \"Why is it spontaneously failing\"\n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    )\n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}