{"ast":null,"code":"'use strict';\n\nmodule.exports = getPolygonizer;\n\nvar pool = require('typedarray-pool');\n\nvar createMSTable = require('marching-simplex-table');\n\nvar CACHE = {};\n\nfunction createCellPolygonizer(d) {\n  var maxCellSize = 0;\n  var tables = new Array(d + 1);\n  tables[0] = [[]];\n\n  for (var i = 1; i <= d; ++i) {\n    var tab = tables[i] = createMSTable(i);\n\n    for (var j = 0; j < tab.length; ++j) {\n      maxCellSize = Math.max(maxCellSize, tab[i].length);\n    }\n  }\n\n  var code = ['function B(C,E,i,j){', 'var a=Math.min(i,j)|0,b=Math.max(i,j)|0,l=C[2*a],h=C[2*a+1];', 'while(l<h){', 'var m=(l+h)>>1,v=E[2*m+1];', 'if(v===b){return m}', 'if(b<v){h=m}else{l=m+1}', '}', 'return l;', '};', 'function getContour', d, 'd(F,E,C,S){', 'var n=F.length,R=[];', 'for(var i=0;i<n;++i){var c=F[i],l=c.length;'];\n\n  function generateCase(facets) {\n    if (facets.length <= 0) {\n      return;\n    }\n\n    code.push('R.push(');\n\n    for (var i = 0; i < facets.length; ++i) {\n      var facet = facets[i];\n\n      if (i > 0) {\n        code.push(',');\n      }\n\n      code.push('[');\n\n      for (var j = 0; j < facet.length; ++j) {\n        var f = facet[j];\n\n        if (j > 0) {\n          code.push(',');\n        }\n\n        code.push('B(C,E,c[', f[0], '],c[', f[1], '])');\n      }\n\n      code.push(']');\n    }\n\n    code.push(');');\n  }\n\n  for (var i = d + 1; i > 1; --i) {\n    if (i < d + 1) {\n      code.push('else ');\n    }\n\n    code.push('if(l===', i, '){'); //Generate mask\n\n    var maskStr = [];\n\n    for (var j = 0; j < i; ++j) {\n      maskStr.push('(S[c[' + j + ']]<<' + j + ')');\n    } //Perform table look up\n\n\n    code.push('var M=', maskStr.join('+'), ';if(M===0||M===', (1 << i) - 1, '){continue}switch(M){');\n    var tab = tables[i - 1];\n\n    for (var j = 0; j < tab.length; ++j) {\n      code.push('case ', j, ':');\n      generateCase(tab[j]);\n      code.push('break;');\n    }\n\n    code.push('}}');\n  }\n\n  code.push('}return R;};return getContour', d, 'd');\n  var proc = new Function('pool', code.join(''));\n  return proc(pool);\n}\n\nfunction getPolygonizer(d) {\n  var alg = CACHE[d];\n\n  if (!alg) {\n    alg = CACHE[d] = createCellPolygonizer(d);\n  }\n\n  return alg;\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/simplicial-complex-contour/lib/codegen.js"],"names":["module","exports","getPolygonizer","pool","require","createMSTable","CACHE","createCellPolygonizer","d","maxCellSize","tables","Array","i","tab","j","length","Math","max","code","generateCase","facets","push","facet","f","maskStr","join","proc","Function","alg"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = getPolygonizer\n\nvar pool = require('typedarray-pool')\nvar createMSTable = require('marching-simplex-table')\n\nvar CACHE = {}\n\nfunction createCellPolygonizer(d) {\n  var maxCellSize = 0\n  var tables = new Array(d+1)\n  tables[0] = [ [] ]\n  for(var i=1; i<=d; ++i) {\n    var tab = tables[i] = createMSTable(i)\n    for(var j=0; j<tab.length; ++j) {\n      maxCellSize = Math.max(maxCellSize, tab[i].length)\n    }\n  }\n\n  var code  = [\n  'function B(C,E,i,j){',\n    'var a=Math.min(i,j)|0,b=Math.max(i,j)|0,l=C[2*a],h=C[2*a+1];',\n    'while(l<h){',\n      'var m=(l+h)>>1,v=E[2*m+1];',\n      'if(v===b){return m}',\n      'if(b<v){h=m}else{l=m+1}',\n    '}',\n    'return l;',\n  '};',\n  'function getContour', d, 'd(F,E,C,S){',\n    'var n=F.length,R=[];',\n    'for(var i=0;i<n;++i){var c=F[i],l=c.length;'\n  ]\n\n  function generateCase(facets) {\n    if(facets.length <= 0) {\n      return\n    }\n    code.push('R.push(')\n    for(var i=0; i<facets.length; ++i) {\n      var facet = facets[i]\n      if(i > 0) {\n        code.push(',')\n      }\n      code.push('[')\n      for(var j=0; j<facet.length; ++j) {\n        var f = facet[j]\n        if(j > 0) {\n          code.push(',')\n        }\n        code.push('B(C,E,c[', f[0], '],c[', f[1], '])')\n      }\n      code.push(']')\n    }\n    code.push(');')\n  }\n\n  for(var i=d+1; i>1; --i) {\n    if(i < d+1) {\n      code.push('else ')\n    }\n    code.push('if(l===', i, '){')\n\n    //Generate mask\n    var maskStr = []\n    for(var j=0; j<i; ++j) {\n      maskStr.push('(S[c['+j+']]<<'+j+')')\n    }\n\n    //Perform table look up\n    code.push('var M=', maskStr.join('+'), \n      ';if(M===0||M===', (1<<i)-1, \n        '){continue}switch(M){')\n\n    var tab = tables[i-1]\n    for(var j=0; j<tab.length; ++j) {\n      code.push('case ', j, ':')\n      generateCase(tab[j])\n      code.push('break;')\n    }\n    code.push('}}')\n  }\n  code.push('}return R;};return getContour', d, 'd')\n\n  var proc = new Function('pool', code.join(''))\n  return proc(pool)\n}\n\nfunction getPolygonizer(d) {\n  var alg = CACHE[d]\n  if(!alg) {\n    alg = CACHE[d] = createCellPolygonizer(d) \n  }\n  return alg\n}"]},"metadata":{},"sourceType":"script"}