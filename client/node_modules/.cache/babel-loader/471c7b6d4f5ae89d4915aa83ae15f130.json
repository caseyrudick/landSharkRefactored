{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingPlans = ({\n  getWellPlansFromDynamoDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromDynamoDbReducer.response.Items];\n      setPlans(planFromReducerCopy);\n    }\n  }, [\n    /*getWellPlansFromDynamoDbReducer.status*/\n  ]); // const createReactDataSheetGridFromPlans = () => {\n\n  let dataSheetHeader = [[{\n    value: '',\n    readOnly: true,\n    width: '3rem'\n  }, {\n    value: 'Measured Depth',\n    readOnly: true,\n    width: '10rem'\n  }, {\n    value: 'Inclination',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'Azimuth',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'TVD',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'NS',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'EW',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'SECT',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'DLS',\n    readOnly: true,\n    width: '7rem'\n  }]];\n  plans.map((planLineItem, idx) => {\n    let newRow = [];\n    newRow[0] = {\n      value: parseInt(planLineItem.MD),\n      width: \"3rem\"\n    };\n    newRow[1] = {\n      value: parseInt(planLineItem.INC),\n      width: \"10rem\"\n    };\n    newRow[2] = {\n      value: parseInt(planLineItem.AZM),\n      width: \"7rem\"\n    };\n    newRow[3] = {\n      value: parseInt(planLineItem.TVD),\n      width: \"7rem\"\n    };\n    newRow[4] = {\n      value: parseInt(planLineItem.Northing),\n      width: \"7rem\"\n    };\n    newRow[5] = {\n      value: parseInt(planLineItem.Easting),\n      width: \"7rem\"\n    };\n    newRow[6] = {\n      value: parseInt(planLineItem.VS),\n      width: \"7rem\"\n    };\n    newRow[7] = {\n      value: parseInt(planLineItem.DLS),\n      width: \"7rem\"\n    };\n    dataSheetHeader.push(newRow);\n  });\n  let result = [...dataSheetHeader];\n  setGrid(result); // setGrid(result)\n  // }\n  // createReactDataSheetGridFromPlans()\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const {\n        operator,\n        rig,\n        well\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-4\",\n          children: [operator, \" - \", rig, \" - \", well]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: result,\n          valueRenderer: cell => cell.value,\n          width: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  } // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n  //     </Col>\n  //   </Container>\n  // )\n\n};\n\n_s(ExistingPlans, \"Hid+llYDPO6oRzFGkaZa0XxLAGE=\");\n\n_c = ExistingPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromDynamoDbReducer,\n  activeWell\n}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb\n})(ExistingPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getWellPlansFromJSONDb","ExistingPlans","getWellPlansFromDynamoDbReducer","activeWell","plans","setPlans","grid","setGrid","status","planFromReducerCopy","response","Items","dataSheetHeader","value","readOnly","width","map","planLineItem","idx","newRow","parseInt","MD","INC","AZM","TVD","Northing","Easting","VS","DLS","push","result","renderMain","operator","rig","well","cell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingPlans = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  const [plans, setPlans] = useState([])\n  const [grid, setGrid] = useState([])\n  \n  useEffect(()=> {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromDynamoDbReducer.response.Items]\n      setPlans(planFromReducerCopy)\n    }\n  },[/*getWellPlansFromDynamoDbReducer.status*/])\n  \n  \n  // const createReactDataSheetGridFromPlans = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    plans.map((planLineItem, idx) => {\n      let newRow = []\n      newRow[0] = {value: parseInt(planLineItem.MD), width: \"3rem\"}\n      newRow[1] = {value: parseInt(planLineItem.INC), width: \"10rem\"}\n      newRow[2] = {value: parseInt(planLineItem.AZM), width: \"7rem\"}\n      newRow[3] = {value: parseInt(planLineItem.TVD), width: \"7rem\"}\n      newRow[4] = {value: parseInt(planLineItem.Northing), width: \"7rem\"}\n      newRow[5] = {value: parseInt(planLineItem.Easting), width: \"7rem\"}\n      newRow[6] = {value: parseInt(planLineItem.VS), width: \"7rem\"}\n      newRow[7] = {value: parseInt(planLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    let result = [...dataSheetHeader]\n    setGrid(result)\n    // setGrid(result)\n  // }\n\n  // createReactDataSheetGridFromPlans()\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const { operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n          <ReactDataSheet data={result} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n  \n\n\n\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingPlans)"]},"metadata":{},"sourceType":"module"}