{"ast":null,"code":"import DLC from \"./DLC\";\nimport RF from \"./RF\";\nexport default ((measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior) => {\n  const converter = Math.PI / 180;\n  const converter2 = 0.00000001;\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent);\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC);\n  const calculatedNorthingCurrent = calculatedNorthingPrior + converter2 + calculatedRF * (Math.sin(inclinationPrior * converter) * Math.cos(azimuthPrior * converter) + Math.sin(inclinationCurrent * converter) * Math.cos(azimuthCurrent * converter));\n  return parseFloat(calculatedNorthingCurrent.toFixed(2));\n});","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/HelperFunctions/Calculations/NS.js"],"names":["DLC","RF","measuredDepthCurrent","inclinationCurrent","azimuthCurrent","measuredDepthPrior","inclinationPrior","azimuthPrior","calculatedNorthingPrior","converter","Math","PI","converter2","calculatedDLC","calculatedRF","calculatedNorthingCurrent","sin","cos","parseFloat","toFixed"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,EAAP,MAAe,MAAf;AAEA,gBAAe,CAACC,oBAAD,EAAuBC,kBAAvB,EAA2CC,cAA3C,EAA2DC,kBAA3D,EAA+EC,gBAA/E,EAAiGC,YAAjG,EAA+GC,uBAA/G,KAA2I;AACxJ,QAAMC,SAAS,GAAIC,IAAI,CAACC,EAAN,GAAU,GAA5B;AACA,QAAMC,UAAU,GAAG,UAAnB;AAEA,QAAMC,aAAa,GAAGb,GAAG,CAACM,gBAAD,EAAmBH,kBAAnB,EAAuCI,YAAvC,EAAqDH,cAArD,CAAzB;AAEA,QAAMU,YAAY,GAAGb,EAAE,CAACI,kBAAD,EAAqBH,oBAArB,EAA2CW,aAA3C,CAAvB;AAEA,QAAME,yBAAyB,GAAIP,uBAAuB,GAACI,UAAzB,GAAuCE,YAAY,IAAIJ,IAAI,CAACM,GAAL,CAASV,gBAAgB,GAACG,SAA1B,IAAqCC,IAAI,CAACO,GAAL,CAASV,YAAY,GAACE,SAAtB,CAArC,GAAuEC,IAAI,CAACM,GAAL,CAASb,kBAAkB,GAAGM,SAA9B,IAA2CC,IAAI,CAACO,GAAL,CAASb,cAAc,GAACK,SAAxB,CAAtH,CAArF;AAEA,SACES,UAAU,CAACH,yBAAyB,CAACI,OAA1B,CAAkC,CAAlC,CAAD,CADZ;AAID,CAdD","sourcesContent":["import DLC from \"./DLC\"\nimport RF from \"./RF\"\n\nexport default (measuredDepthCurrent, inclinationCurrent, azimuthCurrent, measuredDepthPrior, inclinationPrior, azimuthPrior, calculatedNorthingPrior) => {\n  const converter = (Math.PI)/180;\n  const converter2 = 0.00000001;\n\n  const calculatedDLC = DLC(inclinationPrior, inclinationCurrent, azimuthPrior, azimuthCurrent)\n\n  const calculatedRF = RF(measuredDepthPrior, measuredDepthCurrent, calculatedDLC)\n\n  const calculatedNorthingCurrent = (calculatedNorthingPrior+converter2) + calculatedRF * (Math.sin(inclinationPrior*converter)*Math.cos(azimuthPrior*converter)+ Math.sin(inclinationCurrent * converter) * Math.cos(azimuthCurrent*converter));\n\n  return (\n    parseFloat(calculatedNorthingCurrent.toFixed(2))\n\n  )\n} "]},"metadata":{},"sourceType":"module"}