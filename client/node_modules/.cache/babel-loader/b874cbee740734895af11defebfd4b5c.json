{"ast":null,"code":"import { get } from \"lodash\";\nimport wells from \"../APIs/wells\";\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\";\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, GET_WELL_PLANS_FROM_JSONDB_RECEIVED, GET_WELL_PLANS_FROM_JSONDB_FAILED } from \"./types\";\nexport default (selectedWell => {\n  console.log(selectedWell);\n  dispatch({\n    type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n  });\n\n  try {\n    let result = null;\n    return async (dispatch, getState) => {\n      const wellList = getState().getWellsFromJSONDbReducer.response;\n\n      for (let well in wellList) {\n        if (wellList[well].operator === selectedWell.operator && wellList[well].well === selectedWell.well) {\n          result = [...wellList[well].grid];\n        }\n      }\n\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      });\n    };\n  } catch (error) {\n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n      payload: error\n    });\n  }\n}); // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n// if (getState.getWellsFromJSONDbReducer.response[well].operator )\n// }","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/ActionCreators/getWellPlansFromJSONDb.js"],"names":["get","wells","getWellsFromJSONDb","GET_WELL_PLANS_FROM_JSONDB_REQUESTED","GET_WELL_PLANS_FROM_JSONDB_RECEIVED","GET_WELL_PLANS_FROM_JSONDB_FAILED","selectedWell","console","log","dispatch","type","result","getState","wellList","getWellsFromJSONDbReducer","response","well","operator","grid","payload","error"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,oCAAT,EACEC,mCADF,EAEEC,iCAFF,QAE0C,SAF1C;AAIA,gBAAgBC,YAAD,IAAkB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAG,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEP;AADC,GAAD,CAAR;;AAGA,MAAI;AACF,QAAIQ,MAAM,GAAG,IAAb;AACA,WAAO,OAAOF,QAAP,EAAiBG,QAAjB,KAA8B;AACnC,YAAMC,QAAQ,GAAGD,QAAQ,GAAGE,yBAAX,CAAqCC,QAAtD;;AACA,WAAK,IAAIC,IAAT,IAAiBH,QAAjB,EAA2B;AACzB,YAAIA,QAAQ,CAACG,IAAD,CAAR,CAAeC,QAAf,KAA4BX,YAAY,CAACW,QAAzC,IAAqDJ,QAAQ,CAACG,IAAD,CAAR,CAAeA,IAAf,KAAwBV,YAAY,CAACU,IAA9F,EAAoG;AAClGL,UAAAA,MAAM,GAAG,CAAC,GAAGE,QAAQ,CAACG,IAAD,CAAR,CAAeE,IAAnB,CAAT;AACD;AACF;;AACDT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN,mCADC;AAEPe,QAAAA,OAAO,EAAER;AAFF,OAAD,CAAR;AAID,KAXD;AAYD,GAdD,CAcE,OAAMS,KAAN,EAAa;AACbX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,iCADC;AAEPc,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAID;AACF,CAzBD,E,CA4BI;AACI;AACJ","sourcesContent":["import { get } from \"lodash\"\nimport wells from \"../APIs/wells\"\nimport getWellsFromJSONDb from \"./getWellsFromJSONDb\"\nimport { GET_WELL_PLANS_FROM_JSONDB_REQUESTED, \n  GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n  GET_WELL_PLANS_FROM_JSONDB_FAILED} from \"./types\"\n\nexport default (selectedWell) => {\n  console.log(selectedWell)\n  dispatch({\n    type: GET_WELL_PLANS_FROM_JSONDB_REQUESTED\n  })\n  try {\n    let result = null\n    return async (dispatch, getState) => {\n      const wellList = getState().getWellsFromJSONDbReducer.response\n      for (let well in wellList) {\n        if (wellList[well].operator === selectedWell.operator && wellList[well].well === selectedWell.well) {\n          result = [...wellList[well].grid]\n        }\n      }\n      dispatch({\n        type: GET_WELL_PLANS_FROM_JSONDB_RECEIVED,\n        payload: result\n      }) \n    }\n  } catch(error) {\n    dispatch({\n      type: GET_WELL_PLANS_FROM_JSONDB_FAILED,\n      payload: error\n    })\n  }\n} \n\n\n    // have a well, for (well in getState.getWellsFromJSONDbReducer.response) {\n        // if (getState.getWellsFromJSONDbReducer.response[well].operator )\n    // }\n\n"]},"metadata":{},"sourceType":"module"}