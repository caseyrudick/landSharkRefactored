{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/LeaseLines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\";\nimport postLeaseLinesToDynamoDb from \"../ActionCreators/postLeaseLinesToDynamoDb\";\n\nconst LeaseLines = ({\n  postLeaseLinesToDynamoDb,\n  activeWell,\n  saveLeaseLinesToReduxStore,\n  postLeaseLinesToJSONDb\n}) => {\n  _s();\n\n  const {\n    operator,\n    rig,\n    well,\n    county,\n    usState,\n    northing,\n    easting\n  } = activeWell.response; // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialLeaseLines = [[{\n    value: \"\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: \"7rem\"\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 2,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 3,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 4,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 5,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 6,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 7,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 8,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 9,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [leaseLines, setLeaseLines] = useState(initialLeaseLines); // const renderWellHeader = () => {\n  //   if (activeWell.status === \"received\") {\n  //     // const {operator, rig, well} = activeWell.response\n  //     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No Well Data\"\n  //   }\n  // }\n\n  const onCellsChanged = changes => {\n    const gridNew = leaseLines.map(row => [...row]);\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...leaseLines[row][col],\n        value\n      };\n    });\n    setLeaseLines(gridNew);\n  };\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting,\n      leaseLines\n    };\n    postLeaseLinesToJSONDb(wellInfoAndLeaseLines);\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines);\n  };\n\n  const renderRowsButtons = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"my-4\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: addRow,\n          children: \"Add a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: removeRow,\n          children: \"Remove a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n\n  const addRow = () => {\n    const gridLength = leaseLines.length;\n    const newRow = [{\n      value: gridLength,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    const newGrid = [...leaseLines, newRow];\n    setLeaseLines(newGrid);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...leaseLines];\n    newGrid.pop();\n    setLeaseLines(newGrid);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: [/*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: leaseLines,\n          valueRenderer: cell => cell.value,\n          onCellsChanged: onCellsChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), renderRowsButtons()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LeaseLines, \"jP9Ms82IpOBvPpY7MDE3fBDC/rg=\");\n\n_c = LeaseLines;\n\nconst mapStateToProps = ({\n  activeWell,\n  postLeaseLinesToJSONDbReducer\n}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveLeaseLinesToReduxStore,\n  postLeaseLinesToDynamoDb\n})(LeaseLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaseLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/LeaseLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveLeaseLinesToReduxStore","postLeaseLinesToDynamoDb","LeaseLines","activeWell","postLeaseLinesToJSONDb","operator","rig","well","county","usState","northing","easting","response","initialLeaseLines","value","readOnly","width","leaseLines","setLeaseLines","onCellsChanged","changes","gridNew","map","row","forEach","cell","col","handleSubmit","wellInfoAndLeaseLines","renderRowsButtons","addRow","removeRow","gridLength","length","newRow","newGrid","pop","mapStateToProps","postLeaseLinesToJSONDbReducer"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,iBAA3B,C,CAEA;;AACA,OAAOC,0BAAP,MAAuC,8CAAvC;AACA,OAAOC,wBAAP,MAAqC,4CAArC;;AAGA,MAAMC,UAAU,GAAG,CAAC;AAACD,EAAAA,wBAAD;AAA2BE,EAAAA,UAA3B;AAAuCH,EAAAA,0BAAvC;AAAmEI,EAAAA;AAAnE,CAAD,KAAgG;AAAA;;AACjH,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,GAAX;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,MAAtB;AAA8BC,IAAAA,OAA9B;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,MAA4DR,UAAU,CAACS,QAA7E,CADiH,CAEjH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,iBAAiB,GAAG,CACxB,CAAC;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,IAAtB;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GAAD,EAA6C;AAACF,IAAAA,KAAK,EAAE,UAAR;AAAoBC,IAAAA,QAAQ,EAAE,IAA9B;AAAoCC,IAAAA,KAAK,EAAE;AAA3C,GAA7C,EAAiG;AAACF,IAAAA,KAAK,EAAC,SAAP;AAAkBC,IAAAA,QAAQ,EAAE,IAA5B;AAAkCC,IAAAA,KAAK,EAAE;AAAzC,GAAjG,CADwB,EAExB,CAAC;AAACF,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CAFwB,EAGxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CAHwB,EAIxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CAJwB,EAKxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CALwB,EAMxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CANwB,EAOxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CAPwB,EAQxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CARwB,EASxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CATwB,EAUxB,CAAC;AAACA,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,QAAQ,EAAE;AAArB,GAAD,EAA6B;AAACD,IAAAA,KAAK,EAAE;AAAR,GAA7B,EAAyC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAAzC,CAVwB,CAA1B;AAYA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAACsB,iBAAD,CAA5C,CAtBiH,CAwBjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMM,cAAc,GAAGC,OAAO,IAAI;AAChC,UAAMC,OAAO,GAAGJ,UAAU,CAACK,GAAX,CAAeC,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAAtB,CAAhB;AACAH,IAAAA,OAAO,CAACI,OAAR,CAAgB,CAAC;AAACC,MAAAA,IAAD;AAAOF,MAAAA,GAAP;AAAYG,MAAAA,GAAZ;AAAiBZ,MAAAA;AAAjB,KAAD,KAA6B;AAC3CO,MAAAA,OAAO,CAACE,GAAD,CAAP,CAAaG,GAAb,IAAoB,EAAC,GAAGT,UAAU,CAACM,GAAD,CAAV,CAAgBG,GAAhB,CAAJ;AAA0BZ,QAAAA;AAA1B,OAApB;AACD,KAFD;AAGAI,IAAAA,aAAa,CAACG,OAAD,CAAb;AAED,GAPD;;AASA,QAAMM,YAAY,GAAG,MAAM;AACzB,UAAMC,qBAAqB,GAAG;AAC5BvB,MAAAA,QAD4B;AAE5BC,MAAAA,GAF4B;AAG5BC,MAAAA,IAH4B;AAI5BC,MAAAA,MAJ4B;AAK5BC,MAAAA,OAL4B;AAM5BC,MAAAA,QAN4B;AAO5BC,MAAAA,OAP4B;AAQ5BM,MAAAA;AAR4B,KAA9B;AAWAb,IAAAA,sBAAsB,CAACwB,qBAAD,CAAtB;AACA5B,IAAAA,0BAA0B,CAAC4B,qBAAD,CAA1B;AAGD,GAhBD;;AAkBA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,wBACE,QAAC,GAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,SAAS,EAAC,MAAvB;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,OAAO,EAAEF,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,OAAO,EAAEG,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAA2C,UAAA,OAAO,EAAEC,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD,GAjBD;;AAmBA,QAAMD,MAAM,GAAG,MAAM;AACnB,UAAME,UAAU,GAAGf,UAAU,CAACgB,MAA9B;AACA,UAAMC,MAAM,GAAG,CAAC;AAACpB,MAAAA,KAAK,EAAEkB,UAAR;AAAoBjB,MAAAA,QAAQ,EAAE;AAA9B,KAAD,EAAsC;AAACD,MAAAA,KAAK,EAAE;AAAR,KAAtC,EAAkD;AAACA,MAAAA,KAAK,EAAE;AAAR,KAAlD,CAAf;AACA,UAAMqB,OAAO,GAAG,CAAC,GAAGlB,UAAJ,EAAgBiB,MAAhB,CAAhB;AACAhB,IAAAA,aAAa,CAACiB,OAAD,CAAb;AACD,GALD;;AAOA,QAAMJ,SAAS,GAAG,MAAM;AACtB,UAAMI,OAAO,GAAG,CAAC,GAAGlB,UAAJ,CAAhB;AACAkB,IAAAA,OAAO,CAACC,GAAR;AACAlB,IAAAA,aAAa,CAACiB,OAAD,CAAb;AACD,GAJD;;AAOA,sBACE,QAAC,SAAD;AAAA,2BACE,QAAC,GAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA,gCAEE,QAAC,cAAD;AAAgB,UAAA,IAAI,EAAElB,UAAtB;AAAkC,UAAA,aAAa,EAAGQ,IAAD,IAASA,IAAI,CAACX,KAA/D;AAAsE,UAAA,cAAc,EAAEK;AAAtF;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGGU,iBAAiB,EAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxGD;;GAAM3B,U;;KAAAA,U;;AA0GN,MAAMmC,eAAe,GAAG,CAAC;AAAClC,EAAAA,UAAD;AAAamC,EAAAA;AAAb,CAAD,KAAiD;AACvE,SAAO;AACLnC,IAAAA,UADK;AAELmC,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,eAAexC,OAAO,CAACuC,eAAD,EAAkB;AAACrC,EAAAA,0BAAD;AAA6BC,EAAAA;AAA7B,CAAlB,CAAP,CAAiFC,UAAjF,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport postLeaseLinesToDynamoDb from \"../ActionCreators/postLeaseLinesToDynamoDb\"\n\n\nconst LeaseLines = ({postLeaseLinesToDynamoDb, activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialLeaseLines = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [leaseLines, setLeaseLines] = useState(initialLeaseLines)\n\n  // const renderWellHeader = () => {\n  //   if (activeWell.status === \"received\") {\n  //     // const {operator, rig, well} = activeWell.response\n  //     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No Well Data\"\n  //   }\n  // }\n\n  const onCellsChanged = changes => {\n    const gridNew = leaseLines.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...leaseLines[row][col], value}\n    });\n    setLeaseLines(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      leaseLines\n    }\n\n    postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = leaseLines.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...leaseLines, newRow]\n    setLeaseLines(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...leaseLines]\n    newGrid.pop()\n    setLeaseLines(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={leaseLines} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToDynamoDb})(LeaseLines)"]},"metadata":{},"sourceType":"module"}