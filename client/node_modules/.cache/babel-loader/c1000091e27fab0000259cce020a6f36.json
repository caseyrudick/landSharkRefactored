{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar glslify = require('glslify');\n\nvar vertexShaderSource = glslify('./shaders/vertex.glsl');\nvar fragmentShaderSource = glslify('./shaders/fragment.glsl');\n\nvar maxDim = require('./constants').maxDimensionCount;\n\nvar Lib = require('../../lib'); // don't change; otherwise near/far plane lines are lost\n\n\nvar depthLimitEpsilon = 1e-6; // precision of multiselect is the full range divided into this many parts\n\nvar maskHeight = 2048;\nvar dummyPixel = new Uint8Array(4);\nvar dataPixel = new Uint8Array(4);\nvar paletteTextureConfig = {\n  shape: [256, 1],\n  format: 'rgba',\n  type: 'uint8',\n  mag: 'nearest',\n  min: 'nearest'\n};\n\nfunction ensureDraw(regl) {\n  regl.read({\n    x: 0,\n    y: 0,\n    width: 1,\n    height: 1,\n    data: dummyPixel\n  });\n}\n\nfunction clear(regl, x, y, width, height) {\n  var gl = regl._gl;\n  gl.enable(gl.SCISSOR_TEST);\n  gl.scissor(x, y, width, height);\n  regl.clear({\n    color: [0, 0, 0, 0],\n    depth: 1\n  }); // clearing is done in scissored panel only\n}\n\nfunction renderBlock(regl, glAes, renderState, blockLineCount, sampleCount, item) {\n  var rafKey = item.key;\n\n  function render(blockNumber) {\n    var count = Math.min(blockLineCount, sampleCount - blockNumber * blockLineCount);\n\n    if (blockNumber === 0) {\n      // stop drawing possibly stale glyphs before clearing\n      window.cancelAnimationFrame(renderState.currentRafs[rafKey]);\n      delete renderState.currentRafs[rafKey];\n      clear(regl, item.scissorX, item.scissorY, item.scissorWidth, item.viewBoxSize[1]);\n    }\n\n    if (renderState.clearOnly) {\n      return;\n    }\n\n    item.count = 2 * count;\n    item.offset = 2 * blockNumber * blockLineCount;\n    glAes(item);\n\n    if (blockNumber * blockLineCount + count < sampleCount) {\n      renderState.currentRafs[rafKey] = window.requestAnimationFrame(function () {\n        render(blockNumber + 1);\n      });\n    }\n\n    renderState.drawCompleted = false;\n  }\n\n  if (!renderState.drawCompleted) {\n    ensureDraw(regl);\n    renderState.drawCompleted = true;\n  } // start with rendering item 0; recursion handles the rest\n\n\n  render(0);\n}\n\nfunction adjustDepth(d) {\n  // WebGL matrix operations use floats with limited precision, potentially causing a number near a border of [0, 1]\n  // to end up slightly outside the border. With an epsilon, we reduce the chance that a line gets clipped by the\n  // near or the far plane.\n  return Math.max(depthLimitEpsilon, Math.min(1 - depthLimitEpsilon, d));\n}\n\nfunction palette(unitToColor, opacity) {\n  var result = new Array(256);\n\n  for (var i = 0; i < 256; i++) {\n    result[i] = unitToColor(i / 255).concat(opacity);\n  }\n\n  return result;\n} // Maps the sample index [0...sampleCount - 1] to a range of [0, 1] as the shader expects colors in the [0, 1] range.\n// but first it shifts the sample index by 0, 8 or 16 bits depending on rgbIndex [0..2]\n// with the end result that each line will be of a unique color, making it possible for the pick handler\n// to uniquely identify which line is hovered over (bijective mapping).\n// The inverse, i.e. readPixel is invoked from 'parcoords.js'\n\n\nfunction calcPickColor(i, rgbIndex) {\n  return (i >>> 8 * rgbIndex) % 256 / 255;\n}\n\nfunction makePoints(sampleCount, dims, color) {\n  var points = new Array(sampleCount * (maxDim + 4));\n  var n = 0;\n\n  for (var i = 0; i < sampleCount; i++) {\n    for (var k = 0; k < maxDim; k++) {\n      points[n++] = k < dims.length ? dims[k].paddedUnitValues[i] : 0.5;\n    }\n\n    points[n++] = calcPickColor(i, 2);\n    points[n++] = calcPickColor(i, 1);\n    points[n++] = calcPickColor(i, 0);\n    points[n++] = adjustDepth(color[i]);\n  }\n\n  return points;\n}\n\nfunction makeVecAttr(vecIndex, sampleCount, points) {\n  var pointPairs = new Array(sampleCount * 8);\n  var n = 0;\n\n  for (var i = 0; i < sampleCount; i++) {\n    for (var j = 0; j < 2; j++) {\n      for (var k = 0; k < 4; k++) {\n        var q = vecIndex * 4 + k;\n        var v = points[i * 64 + q];\n\n        if (q === 63 && j === 0) {\n          v *= -1;\n        }\n\n        pointPairs[n++] = v;\n      }\n    }\n  }\n\n  return pointPairs;\n}\n\nfunction pad2(num) {\n  var s = '0' + num;\n  return s.substr(s.length - 2);\n}\n\nfunction getAttrName(i) {\n  return i < maxDim ? 'p' + pad2(i + 1) + '_' + pad2(i + 4) : 'colors';\n}\n\nfunction setAttributes(attributes, sampleCount, points) {\n  for (var i = 0; i <= maxDim; i += 4) {\n    attributes[getAttrName(i)](makeVecAttr(i / 4, sampleCount, points));\n  }\n}\n\nfunction emptyAttributes(regl) {\n  var attributes = {};\n\n  for (var i = 0; i <= maxDim; i += 4) {\n    attributes[getAttrName(i)] = regl.buffer({\n      usage: 'dynamic',\n      type: 'float',\n      data: new Uint8Array(0)\n    });\n  }\n\n  return attributes;\n}\n\nfunction makeItem(model, leftmost, rightmost, itemNumber, i0, i1, x, y, panelSizeX, panelSizeY, crossfilterDimensionIndex, drwLayer, constraints) {\n  var dims = [[], []];\n\n  for (var k = 0; k < 64; k++) {\n    dims[0][k] = k === i0 ? 1 : 0;\n    dims[1][k] = k === i1 ? 1 : 0;\n  }\n\n  var overdrag = model.lines.canvasOverdrag;\n  var domain = model.domain;\n  var canvasWidth = model.canvasWidth;\n  var canvasHeight = model.canvasHeight;\n  var deselectedLinesColor = model.deselectedLines.color;\n  var itemModel = Lib.extendFlat({\n    key: crossfilterDimensionIndex,\n    resolution: [canvasWidth, canvasHeight],\n    viewBoxPos: [x + overdrag, y],\n    viewBoxSize: [panelSizeX, panelSizeY],\n    i0: i0,\n    i1: i1,\n    dim0A: dims[0].slice(0, 16),\n    dim0B: dims[0].slice(16, 32),\n    dim0C: dims[0].slice(32, 48),\n    dim0D: dims[0].slice(48, 64),\n    dim1A: dims[1].slice(0, 16),\n    dim1B: dims[1].slice(16, 32),\n    dim1C: dims[1].slice(32, 48),\n    dim1D: dims[1].slice(48, 64),\n    drwLayer: drwLayer,\n    contextColor: [deselectedLinesColor[0] / 255, deselectedLinesColor[1] / 255, deselectedLinesColor[2] / 255, deselectedLinesColor[3] < 1 ? deselectedLinesColor[3] : Math.max(1 / 255, Math.pow(1 / model.lines.color.length, 1 / 3))],\n    scissorX: (itemNumber === leftmost ? 0 : x + overdrag) + (model.pad.l - overdrag) + model.layoutWidth * domain.x[0],\n    scissorWidth: (itemNumber === rightmost ? canvasWidth - x + overdrag : panelSizeX + 0.5) + (itemNumber === leftmost ? x + overdrag : 0),\n    scissorY: y + model.pad.b + model.layoutHeight * domain.y[0],\n    scissorHeight: panelSizeY,\n    viewportX: model.pad.l - overdrag + model.layoutWidth * domain.x[0],\n    viewportY: model.pad.b + model.layoutHeight * domain.y[0],\n    viewportWidth: canvasWidth,\n    viewportHeight: canvasHeight\n  }, constraints);\n  return itemModel;\n}\n\nfunction expandedPixelRange(bounds) {\n  var dh = maskHeight - 1;\n  var a = Math.max(0, Math.floor(bounds[0] * dh), 0);\n  var b = Math.min(dh, Math.ceil(bounds[1] * dh), dh);\n  return [Math.min(a, b), Math.max(a, b)];\n}\n\nmodule.exports = function (canvasGL, d) {\n  // context & pick describe which canvas we're talking about - won't change with new data\n  var isContext = d.context;\n  var isPick = d.pick;\n  var regl = d.regl;\n  var renderState = {\n    currentRafs: {},\n    drawCompleted: true,\n    clearOnly: false\n  }; // state to be set by update and used later\n\n  var model;\n  var vm;\n  var initialDims;\n  var sampleCount;\n  var attributes = emptyAttributes(regl);\n  var maskTexture;\n  var paletteTexture = regl.texture(paletteTextureConfig);\n  var prevAxisOrder = [];\n  update(d);\n  var glAes = regl({\n    profile: false,\n    blend: {\n      enable: isContext,\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 1,\n        dstAlpha: 1 // 'one minus src alpha'\n\n      },\n      equation: {\n        rgb: 'add',\n        alpha: 'add'\n      },\n      color: [0, 0, 0, 0]\n    },\n    depth: {\n      enable: !isContext,\n      mask: true,\n      func: 'less',\n      range: [0, 1]\n    },\n    // for polygons\n    cull: {\n      enable: true,\n      face: 'back'\n    },\n    scissor: {\n      enable: true,\n      box: {\n        x: regl.prop('scissorX'),\n        y: regl.prop('scissorY'),\n        width: regl.prop('scissorWidth'),\n        height: regl.prop('scissorHeight')\n      }\n    },\n    viewport: {\n      x: regl.prop('viewportX'),\n      y: regl.prop('viewportY'),\n      width: regl.prop('viewportWidth'),\n      height: regl.prop('viewportHeight')\n    },\n    dither: false,\n    vert: vertexShaderSource,\n    frag: fragmentShaderSource,\n    primitive: 'lines',\n    lineWidth: 1,\n    attributes: attributes,\n    uniforms: {\n      resolution: regl.prop('resolution'),\n      viewBoxPos: regl.prop('viewBoxPos'),\n      viewBoxSize: regl.prop('viewBoxSize'),\n      dim0A: regl.prop('dim0A'),\n      dim1A: regl.prop('dim1A'),\n      dim0B: regl.prop('dim0B'),\n      dim1B: regl.prop('dim1B'),\n      dim0C: regl.prop('dim0C'),\n      dim1C: regl.prop('dim1C'),\n      dim0D: regl.prop('dim0D'),\n      dim1D: regl.prop('dim1D'),\n      loA: regl.prop('loA'),\n      hiA: regl.prop('hiA'),\n      loB: regl.prop('loB'),\n      hiB: regl.prop('hiB'),\n      loC: regl.prop('loC'),\n      hiC: regl.prop('hiC'),\n      loD: regl.prop('loD'),\n      hiD: regl.prop('hiD'),\n      palette: paletteTexture,\n      contextColor: regl.prop('contextColor'),\n      mask: regl.prop('maskTexture'),\n      drwLayer: regl.prop('drwLayer'),\n      maskHeight: regl.prop('maskHeight')\n    },\n    offset: regl.prop('offset'),\n    count: regl.prop('count')\n  });\n\n  function update(dNew) {\n    model = dNew.model;\n    vm = dNew.viewModel;\n    initialDims = vm.dimensions.slice();\n    sampleCount = initialDims[0] ? initialDims[0].values.length : 0;\n    var lines = model.lines;\n    var color = isPick ? lines.color.map(function (_, i) {\n      return i / lines.color.length;\n    }) : lines.color;\n    var points = makePoints(sampleCount, initialDims, color);\n    setAttributes(attributes, sampleCount, points);\n\n    if (!isContext && !isPick) {\n      paletteTexture = regl.texture(Lib.extendFlat({\n        data: palette(model.unitToColor, 255)\n      }, paletteTextureConfig));\n    }\n  }\n\n  function makeConstraints(isContext) {\n    var i, j, k;\n    var limits = [[], []];\n\n    for (k = 0; k < 64; k++) {\n      var p = !isContext && k < initialDims.length ? initialDims[k].brush.filter.getBounds() : [-Infinity, Infinity];\n      limits[0][k] = p[0];\n      limits[1][k] = p[1];\n    }\n\n    var len = maskHeight * 8;\n    var mask = new Array(len);\n\n    for (i = 0; i < len; i++) {\n      mask[i] = 255;\n    }\n\n    if (!isContext) {\n      for (i = 0; i < initialDims.length; i++) {\n        var u = i % 8;\n        var v = (i - u) / 8;\n        var bitMask = Math.pow(2, u);\n        var dim = initialDims[i];\n        var ranges = dim.brush.filter.get();\n        if (ranges.length < 2) continue; // bail if the bounding box based filter is sufficient\n\n        var prevEnd = expandedPixelRange(ranges[0])[1];\n\n        for (j = 1; j < ranges.length; j++) {\n          var nextRange = expandedPixelRange(ranges[j]);\n\n          for (k = prevEnd + 1; k < nextRange[0]; k++) {\n            mask[k * 8 + v] &= ~bitMask;\n          }\n\n          prevEnd = Math.max(prevEnd, nextRange[1]);\n        }\n      }\n    }\n\n    var textureData = {\n      // 8 units x 8 bits = 64 bits, just sufficient for the almost 64 dimensions we support\n      shape: [8, maskHeight],\n      format: 'alpha',\n      type: 'uint8',\n      mag: 'nearest',\n      min: 'nearest',\n      data: mask\n    };\n    if (maskTexture) maskTexture(textureData);else maskTexture = regl.texture(textureData);\n    return {\n      maskTexture: maskTexture,\n      maskHeight: maskHeight,\n      loA: limits[0].slice(0, 16),\n      loB: limits[0].slice(16, 32),\n      loC: limits[0].slice(32, 48),\n      loD: limits[0].slice(48, 64),\n      hiA: limits[1].slice(0, 16),\n      hiB: limits[1].slice(16, 32),\n      hiC: limits[1].slice(32, 48),\n      hiD: limits[1].slice(48, 64)\n    };\n  }\n\n  function renderGLParcoords(panels, setChanged, clearOnly) {\n    var panelCount = panels.length;\n    var i;\n    var leftmost;\n    var rightmost;\n    var lowestX = Infinity;\n    var highestX = -Infinity;\n\n    for (i = 0; i < panelCount; i++) {\n      if (panels[i].dim0.canvasX < lowestX) {\n        lowestX = panels[i].dim0.canvasX;\n        leftmost = i;\n      }\n\n      if (panels[i].dim1.canvasX > highestX) {\n        highestX = panels[i].dim1.canvasX;\n        rightmost = i;\n      }\n    }\n\n    if (panelCount === 0) {\n      // clear canvas here, as the panel iteration below will not enter the loop body\n      clear(regl, 0, 0, model.canvasWidth, model.canvasHeight);\n    }\n\n    var constraints = makeConstraints(isContext);\n\n    for (i = 0; i < panelCount; i++) {\n      var p = panels[i];\n      var i0 = p.dim0.crossfilterDimensionIndex;\n      var i1 = p.dim1.crossfilterDimensionIndex;\n      var x = p.canvasX;\n      var y = p.canvasY;\n      var nextX = x + p.panelSizeX;\n\n      if (setChanged || !prevAxisOrder[i0] || prevAxisOrder[i0][0] !== x || prevAxisOrder[i0][1] !== nextX) {\n        prevAxisOrder[i0] = [x, nextX];\n        var item = makeItem(model, leftmost, rightmost, i, i0, i1, x, y, p.panelSizeX, p.panelSizeY, p.dim0.crossfilterDimensionIndex, isContext ? 0 : isPick ? 2 : 1, constraints);\n        renderState.clearOnly = clearOnly;\n        var blockLineCount = setChanged ? model.lines.blockLineCount : sampleCount;\n        renderBlock(regl, glAes, renderState, blockLineCount, sampleCount, item);\n      }\n    }\n  }\n\n  function readPixel(canvasX, canvasY) {\n    regl.read({\n      x: canvasX,\n      y: canvasY,\n      width: 1,\n      height: 1,\n      data: dataPixel\n    });\n    return dataPixel;\n  }\n\n  function readPixels(canvasX, canvasY, width, height) {\n    var pixelArray = new Uint8Array(4 * width * height);\n    regl.read({\n      x: canvasX,\n      y: canvasY,\n      width: width,\n      height: height,\n      data: pixelArray\n    });\n    return pixelArray;\n  }\n\n  function destroy() {\n    canvasGL.style['pointer-events'] = 'none';\n    paletteTexture.destroy();\n    if (maskTexture) maskTexture.destroy();\n\n    for (var k in attributes) attributes[k].destroy();\n  }\n\n  return {\n    render: renderGLParcoords,\n    readPixel: readPixel,\n    readPixels: readPixels,\n    destroy: destroy,\n    update: update\n  };\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/parcoords/lines.js"],"names":["glslify","require","vertexShaderSource","fragmentShaderSource","maxDim","maxDimensionCount","Lib","depthLimitEpsilon","maskHeight","dummyPixel","Uint8Array","dataPixel","paletteTextureConfig","shape","format","type","mag","min","ensureDraw","regl","read","x","y","width","height","data","clear","gl","_gl","enable","SCISSOR_TEST","scissor","color","depth","renderBlock","glAes","renderState","blockLineCount","sampleCount","item","rafKey","key","render","blockNumber","count","Math","window","cancelAnimationFrame","currentRafs","scissorX","scissorY","scissorWidth","viewBoxSize","clearOnly","offset","requestAnimationFrame","drawCompleted","adjustDepth","d","max","palette","unitToColor","opacity","result","Array","i","concat","calcPickColor","rgbIndex","makePoints","dims","points","n","k","length","paddedUnitValues","makeVecAttr","vecIndex","pointPairs","j","q","v","pad2","num","s","substr","getAttrName","setAttributes","attributes","emptyAttributes","buffer","usage","makeItem","model","leftmost","rightmost","itemNumber","i0","i1","panelSizeX","panelSizeY","crossfilterDimensionIndex","drwLayer","constraints","overdrag","lines","canvasOverdrag","domain","canvasWidth","canvasHeight","deselectedLinesColor","deselectedLines","itemModel","extendFlat","resolution","viewBoxPos","dim0A","slice","dim0B","dim0C","dim0D","dim1A","dim1B","dim1C","dim1D","contextColor","pow","pad","l","layoutWidth","b","layoutHeight","scissorHeight","viewportX","viewportY","viewportWidth","viewportHeight","expandedPixelRange","bounds","dh","a","floor","ceil","module","exports","canvasGL","isContext","context","isPick","pick","vm","initialDims","maskTexture","paletteTexture","texture","prevAxisOrder","update","profile","blend","func","srcRGB","dstRGB","srcAlpha","dstAlpha","equation","rgb","alpha","mask","range","cull","face","box","prop","viewport","dither","vert","frag","primitive","lineWidth","uniforms","loA","hiA","loB","hiB","loC","hiC","loD","hiD","dNew","viewModel","dimensions","values","map","_","makeConstraints","limits","p","brush","filter","getBounds","Infinity","len","u","bitMask","dim","ranges","get","prevEnd","nextRange","textureData","renderGLParcoords","panels","setChanged","panelCount","lowestX","highestX","dim0","canvasX","dim1","canvasY","nextX","readPixel","readPixels","pixelArray","destroy","style"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar glslify = require('glslify');\nvar vertexShaderSource = glslify('./shaders/vertex.glsl');\nvar fragmentShaderSource = glslify('./shaders/fragment.glsl');\nvar maxDim = require('./constants').maxDimensionCount;\n\nvar Lib = require('../../lib');\n\n// don't change; otherwise near/far plane lines are lost\nvar depthLimitEpsilon = 1e-6;\n\n// precision of multiselect is the full range divided into this many parts\nvar maskHeight = 2048;\n\nvar dummyPixel = new Uint8Array(4);\nvar dataPixel = new Uint8Array(4);\n\nvar paletteTextureConfig = {\n    shape: [256, 1],\n    format: 'rgba',\n    type: 'uint8',\n    mag: 'nearest',\n    min: 'nearest'\n};\n\nfunction ensureDraw(regl) {\n    regl.read({\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1,\n        data: dummyPixel\n    });\n}\n\nfunction clear(regl, x, y, width, height) {\n    var gl = regl._gl;\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(x, y, width, height);\n    regl.clear({color: [0, 0, 0, 0], depth: 1}); // clearing is done in scissored panel only\n}\n\nfunction renderBlock(regl, glAes, renderState, blockLineCount, sampleCount, item) {\n    var rafKey = item.key;\n\n    function render(blockNumber) {\n        var count = Math.min(blockLineCount, sampleCount - blockNumber * blockLineCount);\n\n        if(blockNumber === 0) {\n            // stop drawing possibly stale glyphs before clearing\n            window.cancelAnimationFrame(renderState.currentRafs[rafKey]);\n            delete renderState.currentRafs[rafKey];\n            clear(regl, item.scissorX, item.scissorY, item.scissorWidth, item.viewBoxSize[1]);\n        }\n\n        if(renderState.clearOnly) {\n            return;\n        }\n\n        item.count = 2 * count;\n        item.offset = 2 * blockNumber * blockLineCount;\n        glAes(item);\n\n        if(blockNumber * blockLineCount + count < sampleCount) {\n            renderState.currentRafs[rafKey] = window.requestAnimationFrame(function() {\n                render(blockNumber + 1);\n            });\n        }\n\n        renderState.drawCompleted = false;\n    }\n\n    if(!renderState.drawCompleted) {\n        ensureDraw(regl);\n        renderState.drawCompleted = true;\n    }\n\n    // start with rendering item 0; recursion handles the rest\n    render(0);\n}\n\nfunction adjustDepth(d) {\n    // WebGL matrix operations use floats with limited precision, potentially causing a number near a border of [0, 1]\n    // to end up slightly outside the border. With an epsilon, we reduce the chance that a line gets clipped by the\n    // near or the far plane.\n    return Math.max(depthLimitEpsilon, Math.min(1 - depthLimitEpsilon, d));\n}\n\nfunction palette(unitToColor, opacity) {\n    var result = new Array(256);\n    for(var i = 0; i < 256; i++) {\n        result[i] = unitToColor(i / 255).concat(opacity);\n    }\n    return result;\n}\n\n// Maps the sample index [0...sampleCount - 1] to a range of [0, 1] as the shader expects colors in the [0, 1] range.\n// but first it shifts the sample index by 0, 8 or 16 bits depending on rgbIndex [0..2]\n// with the end result that each line will be of a unique color, making it possible for the pick handler\n// to uniquely identify which line is hovered over (bijective mapping).\n// The inverse, i.e. readPixel is invoked from 'parcoords.js'\nfunction calcPickColor(i, rgbIndex) {\n    return (i >>> 8 * rgbIndex) % 256 / 255;\n}\n\nfunction makePoints(sampleCount, dims, color) {\n    var points = new Array(sampleCount * (maxDim + 4));\n    var n = 0;\n    for(var i = 0; i < sampleCount; i++) {\n        for(var k = 0; k < maxDim; k++) {\n            points[n++] = (k < dims.length) ? dims[k].paddedUnitValues[i] : 0.5;\n        }\n        points[n++] = calcPickColor(i, 2);\n        points[n++] = calcPickColor(i, 1);\n        points[n++] = calcPickColor(i, 0);\n        points[n++] = adjustDepth(color[i]);\n    }\n    return points;\n}\n\nfunction makeVecAttr(vecIndex, sampleCount, points) {\n    var pointPairs = new Array(sampleCount * 8);\n    var n = 0;\n    for(var i = 0; i < sampleCount; i++) {\n        for(var j = 0; j < 2; j++) {\n            for(var k = 0; k < 4; k++) {\n                var q = vecIndex * 4 + k;\n                var v = points[i * 64 + q];\n                if(q === 63 && j === 0) {\n                    v *= -1;\n                }\n                pointPairs[n++] = v;\n            }\n        }\n    }\n    return pointPairs;\n}\n\nfunction pad2(num) {\n    var s = '0' + num;\n    return s.substr(s.length - 2);\n}\n\nfunction getAttrName(i) {\n    return (i < maxDim) ? 'p' + pad2(i + 1) + '_' + pad2(i + 4) : 'colors';\n}\n\nfunction setAttributes(attributes, sampleCount, points) {\n    for(var i = 0; i <= maxDim; i += 4) {\n        attributes[getAttrName(i)](makeVecAttr(i / 4, sampleCount, points));\n    }\n}\n\nfunction emptyAttributes(regl) {\n    var attributes = {};\n    for(var i = 0; i <= maxDim; i += 4) {\n        attributes[getAttrName(i)] = regl.buffer({usage: 'dynamic', type: 'float', data: new Uint8Array(0)});\n    }\n    return attributes;\n}\n\nfunction makeItem(model, leftmost, rightmost, itemNumber, i0, i1, x, y, panelSizeX, panelSizeY, crossfilterDimensionIndex, drwLayer, constraints) {\n    var dims = [[], []];\n    for(var k = 0; k < 64; k++) {\n        dims[0][k] = (k === i0) ? 1 : 0;\n        dims[1][k] = (k === i1) ? 1 : 0;\n    }\n\n    var overdrag = model.lines.canvasOverdrag;\n    var domain = model.domain;\n    var canvasWidth = model.canvasWidth;\n    var canvasHeight = model.canvasHeight;\n\n    var deselectedLinesColor = model.deselectedLines.color;\n\n    var itemModel = Lib.extendFlat({\n        key: crossfilterDimensionIndex,\n        resolution: [canvasWidth, canvasHeight],\n        viewBoxPos: [x + overdrag, y],\n        viewBoxSize: [panelSizeX, panelSizeY],\n        i0: i0,\n        i1: i1,\n\n        dim0A: dims[0].slice(0, 16),\n        dim0B: dims[0].slice(16, 32),\n        dim0C: dims[0].slice(32, 48),\n        dim0D: dims[0].slice(48, 64),\n        dim1A: dims[1].slice(0, 16),\n        dim1B: dims[1].slice(16, 32),\n        dim1C: dims[1].slice(32, 48),\n        dim1D: dims[1].slice(48, 64),\n\n        drwLayer: drwLayer,\n        contextColor: [\n            deselectedLinesColor[0] / 255,\n            deselectedLinesColor[1] / 255,\n            deselectedLinesColor[2] / 255,\n            deselectedLinesColor[3] < 1 ?\n                deselectedLinesColor[3] :\n                Math.max(1 / 255, Math.pow(1 / model.lines.color.length, 1 / 3))\n        ],\n\n        scissorX: (itemNumber === leftmost ? 0 : x + overdrag) + (model.pad.l - overdrag) + model.layoutWidth * domain.x[0],\n        scissorWidth: (itemNumber === rightmost ? canvasWidth - x + overdrag : panelSizeX + 0.5) + (itemNumber === leftmost ? x + overdrag : 0),\n        scissorY: y + model.pad.b + model.layoutHeight * domain.y[0],\n        scissorHeight: panelSizeY,\n\n        viewportX: model.pad.l - overdrag + model.layoutWidth * domain.x[0],\n        viewportY: model.pad.b + model.layoutHeight * domain.y[0],\n        viewportWidth: canvasWidth,\n        viewportHeight: canvasHeight\n    }, constraints);\n\n    return itemModel;\n}\n\nfunction expandedPixelRange(bounds) {\n    var dh = maskHeight - 1;\n    var a = Math.max(0, Math.floor(bounds[0] * dh), 0);\n    var b = Math.min(dh, Math.ceil(bounds[1] * dh), dh);\n    return [\n        Math.min(a, b),\n        Math.max(a, b)\n    ];\n}\n\nmodule.exports = function(canvasGL, d) {\n    // context & pick describe which canvas we're talking about - won't change with new data\n    var isContext = d.context;\n    var isPick = d.pick;\n\n    var regl = d.regl;\n\n    var renderState = {\n        currentRafs: {},\n        drawCompleted: true,\n        clearOnly: false\n    };\n\n    // state to be set by update and used later\n    var model;\n    var vm;\n    var initialDims;\n    var sampleCount;\n    var attributes = emptyAttributes(regl);\n    var maskTexture;\n    var paletteTexture = regl.texture(paletteTextureConfig);\n\n    var prevAxisOrder = [];\n\n    update(d);\n\n    var glAes = regl({\n\n        profile: false,\n\n        blend: {\n            enable: isContext,\n            func: {\n                srcRGB: 'src alpha',\n                dstRGB: 'one minus src alpha',\n                srcAlpha: 1,\n                dstAlpha: 1 // 'one minus src alpha'\n            },\n            equation: {\n                rgb: 'add',\n                alpha: 'add'\n            },\n            color: [0, 0, 0, 0]\n        },\n\n        depth: {\n            enable: !isContext,\n            mask: true,\n            func: 'less',\n            range: [0, 1]\n        },\n\n        // for polygons\n        cull: {\n            enable: true,\n            face: 'back'\n        },\n\n        scissor: {\n            enable: true,\n            box: {\n                x: regl.prop('scissorX'),\n                y: regl.prop('scissorY'),\n                width: regl.prop('scissorWidth'),\n                height: regl.prop('scissorHeight')\n            }\n        },\n\n        viewport: {\n            x: regl.prop('viewportX'),\n            y: regl.prop('viewportY'),\n            width: regl.prop('viewportWidth'),\n            height: regl.prop('viewportHeight')\n        },\n\n        dither: false,\n\n        vert: vertexShaderSource,\n\n        frag: fragmentShaderSource,\n\n        primitive: 'lines',\n        lineWidth: 1,\n        attributes: attributes,\n        uniforms: {\n            resolution: regl.prop('resolution'),\n            viewBoxPos: regl.prop('viewBoxPos'),\n            viewBoxSize: regl.prop('viewBoxSize'),\n            dim0A: regl.prop('dim0A'),\n            dim1A: regl.prop('dim1A'),\n            dim0B: regl.prop('dim0B'),\n            dim1B: regl.prop('dim1B'),\n            dim0C: regl.prop('dim0C'),\n            dim1C: regl.prop('dim1C'),\n            dim0D: regl.prop('dim0D'),\n            dim1D: regl.prop('dim1D'),\n            loA: regl.prop('loA'),\n            hiA: regl.prop('hiA'),\n            loB: regl.prop('loB'),\n            hiB: regl.prop('hiB'),\n            loC: regl.prop('loC'),\n            hiC: regl.prop('hiC'),\n            loD: regl.prop('loD'),\n            hiD: regl.prop('hiD'),\n            palette: paletteTexture,\n            contextColor: regl.prop('contextColor'),\n            mask: regl.prop('maskTexture'),\n            drwLayer: regl.prop('drwLayer'),\n            maskHeight: regl.prop('maskHeight')\n        },\n        offset: regl.prop('offset'),\n        count: regl.prop('count')\n    });\n\n    function update(dNew) {\n        model = dNew.model;\n        vm = dNew.viewModel;\n        initialDims = vm.dimensions.slice();\n        sampleCount = initialDims[0] ? initialDims[0].values.length : 0;\n\n        var lines = model.lines;\n        var color = isPick ? lines.color.map(function(_, i) {return i / lines.color.length;}) : lines.color;\n\n        var points = makePoints(sampleCount, initialDims, color);\n        setAttributes(attributes, sampleCount, points);\n\n        if(!isContext && !isPick) {\n            paletteTexture = regl.texture(Lib.extendFlat({\n                data: palette(model.unitToColor, 255)\n            }, paletteTextureConfig));\n        }\n    }\n\n    function makeConstraints(isContext) {\n        var i, j, k;\n\n        var limits = [[], []];\n        for(k = 0; k < 64; k++) {\n            var p = (!isContext && k < initialDims.length) ?\n                initialDims[k].brush.filter.getBounds() : [-Infinity, Infinity];\n\n            limits[0][k] = p[0];\n            limits[1][k] = p[1];\n        }\n\n        var len = maskHeight * 8;\n        var mask = new Array(len);\n        for(i = 0; i < len; i++) {\n            mask[i] = 255;\n        }\n        if(!isContext) {\n            for(i = 0; i < initialDims.length; i++) {\n                var u = i % 8;\n                var v = (i - u) / 8;\n                var bitMask = Math.pow(2, u);\n                var dim = initialDims[i];\n                var ranges = dim.brush.filter.get();\n                if(ranges.length < 2) continue; // bail if the bounding box based filter is sufficient\n\n                var prevEnd = expandedPixelRange(ranges[0])[1];\n                for(j = 1; j < ranges.length; j++) {\n                    var nextRange = expandedPixelRange(ranges[j]);\n                    for(k = prevEnd + 1; k < nextRange[0]; k++) {\n                        mask[k * 8 + v] &= ~bitMask;\n                    }\n                    prevEnd = Math.max(prevEnd, nextRange[1]);\n                }\n            }\n        }\n\n        var textureData = {\n            // 8 units x 8 bits = 64 bits, just sufficient for the almost 64 dimensions we support\n            shape: [8, maskHeight],\n            format: 'alpha',\n            type: 'uint8',\n            mag: 'nearest',\n            min: 'nearest',\n            data: mask\n        };\n        if(maskTexture) maskTexture(textureData);\n        else maskTexture = regl.texture(textureData);\n\n        return {\n            maskTexture: maskTexture,\n            maskHeight: maskHeight,\n            loA: limits[0].slice(0, 16),\n            loB: limits[0].slice(16, 32),\n            loC: limits[0].slice(32, 48),\n            loD: limits[0].slice(48, 64),\n            hiA: limits[1].slice(0, 16),\n            hiB: limits[1].slice(16, 32),\n            hiC: limits[1].slice(32, 48),\n            hiD: limits[1].slice(48, 64),\n        };\n    }\n\n    function renderGLParcoords(panels, setChanged, clearOnly) {\n        var panelCount = panels.length;\n        var i;\n\n        var leftmost;\n        var rightmost;\n        var lowestX = Infinity;\n        var highestX = -Infinity;\n\n        for(i = 0; i < panelCount; i++) {\n            if(panels[i].dim0.canvasX < lowestX) {\n                lowestX = panels[i].dim0.canvasX;\n                leftmost = i;\n            }\n            if(panels[i].dim1.canvasX > highestX) {\n                highestX = panels[i].dim1.canvasX;\n                rightmost = i;\n            }\n        }\n\n        if(panelCount === 0) {\n            // clear canvas here, as the panel iteration below will not enter the loop body\n            clear(regl, 0, 0, model.canvasWidth, model.canvasHeight);\n        }\n        var constraints = makeConstraints(isContext);\n\n        for(i = 0; i < panelCount; i++) {\n            var p = panels[i];\n            var i0 = p.dim0.crossfilterDimensionIndex;\n            var i1 = p.dim1.crossfilterDimensionIndex;\n            var x = p.canvasX;\n            var y = p.canvasY;\n            var nextX = x + p.panelSizeX;\n            if(setChanged ||\n                !prevAxisOrder[i0] ||\n                prevAxisOrder[i0][0] !== x ||\n                prevAxisOrder[i0][1] !== nextX\n            ) {\n                prevAxisOrder[i0] = [x, nextX];\n\n                var item = makeItem(\n                    model,\n                    leftmost, rightmost, i, i0, i1, x, y,\n                    p.panelSizeX, p.panelSizeY,\n                    p.dim0.crossfilterDimensionIndex,\n                    isContext ? 0 : isPick ? 2 : 1,\n                    constraints\n                );\n\n                renderState.clearOnly = clearOnly;\n\n                var blockLineCount = setChanged ? model.lines.blockLineCount : sampleCount;\n                renderBlock(\n                    regl, glAes, renderState, blockLineCount, sampleCount, item\n                );\n            }\n        }\n    }\n\n    function readPixel(canvasX, canvasY) {\n        regl.read({\n            x: canvasX,\n            y: canvasY,\n            width: 1,\n            height: 1,\n            data: dataPixel\n        });\n        return dataPixel;\n    }\n\n    function readPixels(canvasX, canvasY, width, height) {\n        var pixelArray = new Uint8Array(4 * width * height);\n        regl.read({\n            x: canvasX,\n            y: canvasY,\n            width: width,\n            height: height,\n            data: pixelArray\n        });\n        return pixelArray;\n    }\n\n    function destroy() {\n        canvasGL.style['pointer-events'] = 'none';\n        paletteTexture.destroy();\n        if(maskTexture) maskTexture.destroy();\n        for(var k in attributes) attributes[k].destroy();\n    }\n\n    return {\n        render: renderGLParcoords,\n        readPixel: readPixel,\n        readPixels: readPixels,\n        destroy: destroy,\n        update: update\n    };\n};\n"]},"metadata":{},"sourceType":"script"}