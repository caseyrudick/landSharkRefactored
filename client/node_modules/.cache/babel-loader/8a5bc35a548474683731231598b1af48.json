{"ast":null,"code":"import _toConsumableArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import{connect}from\"react-redux\";import Container from\"react-bootstrap/esm/Container\";import Form from\"react-bootstrap/Form\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Button from\"react-bootstrap/Button\";import'react-datasheet/lib/react-datasheet.css';import ReactDataSheet from\"react-datasheet\";import Plot from\"react-plotly.js\";import{isNumber}from\"lodash\";import _ from'lodash';import saveSurveysToReduxStore from\"../ActionCreators/saveSurveysToReduxStore\";var ExistingPVA=function ExistingPVA(_ref){var savePlansToReduxStoreReducer=_ref.savePlansToReduxStoreReducer,getHardLinesFromDynamoDbReducer=_ref.getHardLinesFromDynamoDbReducer,saveSurveysToReduxStoreReducer=_ref.saveSurveysToReduxStoreReducer,getSurveysFromDynamoDbReducer=_ref.getSurveysFromDynamoDbReducer,getWellPlansFromDynamoDbReducer=_ref.getWellPlansFromDynamoDbReducer,activeWell=_ref.activeWell,getLeaseLinesFromDynamoDbReducer=_ref.getLeaseLinesFromDynamoDbReducer;console.log(getWellPlansFromDynamoDbReducer.response.Items);var createEastingCoordinates=function createEastingCoordinates(data){var polyLine=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(polyLine){if(data.length===0){return[];}else{var result=data.map(function(row,index){return data[index][2].value;}).slice(1);return result;}}else{if(data.length===0){return[];}else{return data.map(function(lineItem,index){return parseInt(lineItem[\"Easting\"]);}).slice(1);}}};var createNorthingCoordinates=function createNorthingCoordinates(data){var polyLine=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(polyLine){if(data.length===0){return[];}else{return data.map(function(row,index){return data[index][1].value;}).slice(1);}}else{if(data.length===0){return[];}else{return data.map(function(lineItem,index){return parseInt(lineItem[\"Northing\"]);}).slice(1);}}};var createTVDCoordinates=function createTVDCoordinates(data){if(data.length===0){return[];}else{return data.map(function(lineItem,index){return parseInt(lineItem[\"TVD\"])*-1;});}};var createSectCoordinates=function createSectCoordinates(data){if(data.length===0){return[];}else{var sectCoordinates=data.map(function(lineItem,index){return parseInt(lineItem.VS);});console.log(sectCoordinates);return sectCoordinates;}};var convertNumberStringsToNumbersAndSort=function convertNumberStringsToNumbersAndSort(data,dataSource){var dataCopy=_toConsumableArray(data);dataCopy.map(function(element,index){switch(dataSource){case'Plan':dataCopy[index].Plan_Number=parseInt(dataCopy[index].Plan_Line_Number);break;case'Survey':dataCopy[index].Survey_Number=parseInt(dataCopy[index].Survey_Number);break;case'Hard_Line':dataCopy[index].Hard_Line_Number.S=parseInt(dataCopy[index].Hard_Line_Number.S);break;case'Lease_Line':dataCopy[index].Lease_Line_Number.S=parseInt(dataCopy[index].Lease_Line_Number.S);break;default:}});switch(dataSource){case'Plan':return _.orderBy(dataCopy,['Plan_Line_Number'],['asc']);case'Survey':return _.orderBy(dataCopy,['SurveyNumber'],['asc']);case'Hard_Line':return _.orderBy(dataCopy,['Hard_Line_Number'],['asc']);case'Lease_Line':return _.orderBy(dataCopy,['Lease_Line_Number'],['asc']);default:}};var renderSectionView=function renderSectionView(){return/*#__PURE__*/_jsx(Plot,{data:[{x:createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items,\"Plan\")),y:createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items,\"Plan\")),type:\"scatter\",mode:\"lines+markers\",marker:{color:\"blue\"},name:\"Plan\"}// {\n//   x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Surveys\")),\n//   y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Surveys\")),\n//   type: \"scatter\",\n//   mode: \"lines+markers\",\n//   marker: {color: \"Red\"},\n//   name: \"Surveys\"\n// },\n],layout:{width:1000,height:800,title:'Section View'}});};var renderPlanView=function renderPlanView(){return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Col,{xs:2,children:/*#__PURE__*/_jsx(Form,{className:\"mt-7\",children:/*#__PURE__*/_jsx(Form.Group,{controlId:\"formBasicEmail\",children:/*#__PURE__*/_jsx(Form.Control,{className:\"mt-3\",type:\"float\",disabled:true,placeholder:\"Enter VS Here\",onChange:function onChange(event){return event.target.value;}})})})}),/*#__PURE__*/_jsx(Plot,{data:[{x:createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items,\"Plan\")),y:createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items,\"Plan\")),type:\"scatter\",mode:\"lines+markers\",marker:{color:\"blue\"},name:\"Plan\"}//         {\n//           x: createEastingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n//           y: createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n//           type: \"scatter\",\n//           mode: \"lines+markers\",\n//           marker: {color: \"red\"},\n//           name: \"Surveys\"\n//         },\n//         {\n//           x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n//           y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n//           type: \"scatter\",\n//           mode: \"lines+markers\",\n//           marker: {color: \"black\"},\n//           name: \"Lease Lines\"\n//         },\n//         {\n//           x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n//           y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n//           type: \"scatter\",\n//           mode: \"lines+markers\",\n//           marker: {color: \"red\"},\n//           name: \"Hard Lines\"\n//         },\n],layout:{width:1000,height:800,title:'Plan View'}})]});};if(getLeaseLinesFromDynamoDbReducer.status===\"received\"&&getWellPlansFromDynamoDbReducer.status===\"received\"){return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[activeWell.response.Operator.S,\" - \",activeWell.response.Rig.S,\" - \",activeWell.response.Well_Name.S]}),renderSectionView(),renderPlanView()]});// <Container>\n//   {renderPlanView()} \n// </Container>\n}else{return\"Data Loading\";}};var mapStateToProps=function mapStateToProps(_ref2){var savePlansToReduxStoreReducer=_ref2.savePlansToReduxStoreReducer,getHardLinesFromDynamoDbReducer=_ref2.getHardLinesFromDynamoDbReducer,saveSurveysToReduxStoreReducer=_ref2.saveSurveysToReduxStoreReducer,getSurveysFromDynamoDbReducer=_ref2.getSurveysFromDynamoDbReducer,getWellPlansFromDynamoDbReducer=_ref2.getWellPlansFromDynamoDbReducer,activeWell=_ref2.activeWell,getLeaseLinesFromDynamoDbReducer=_ref2.getLeaseLinesFromDynamoDbReducer;return{getWellPlansFromDynamoDbReducer:getWellPlansFromDynamoDbReducer,activeWell:activeWell,getLeaseLinesFromDynamoDbReducer:getLeaseLinesFromDynamoDbReducer,getSurveysFromDynamoDbReducer:getSurveysFromDynamoDbReducer,saveSurveysToReduxStoreReducer:saveSurveysToReduxStoreReducer,getHardLinesFromDynamoDbReducer:getHardLinesFromDynamoDbReducer,savePlansToReduxStoreReducer:savePlansToReduxStoreReducer};};export default connect(mapStateToProps,{})(ExistingPVA);","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","isNumber","_","saveSurveysToReduxStore","ExistingPVA","savePlansToReduxStoreReducer","getHardLinesFromDynamoDbReducer","saveSurveysToReduxStoreReducer","getSurveysFromDynamoDbReducer","getWellPlansFromDynamoDbReducer","activeWell","getLeaseLinesFromDynamoDbReducer","console","log","response","Items","createEastingCoordinates","data","polyLine","length","result","map","row","index","value","slice","lineItem","parseInt","createNorthingCoordinates","createTVDCoordinates","createSectCoordinates","sectCoordinates","VS","convertNumberStringsToNumbersAndSort","dataSource","dataCopy","element","Plan_Number","Plan_Line_Number","Survey_Number","Hard_Line_Number","S","Lease_Line_Number","orderBy","renderSectionView","x","y","type","mode","marker","color","name","width","height","title","renderPlanView","event","target","status","Operator","Rig","Well_Name","mapStateToProps"],"mappings":"kSAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,+BAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,sBAAjB,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CACA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CAEA,MAAO,yCAAP,CACA,MAAOC,CAAAA,cAAP,KAA2B,iBAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,iBAAjB,CACA,OAASC,QAAT,KAAyB,QAAzB,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CACA,MAAOC,CAAAA,uBAAP,KAAoC,2CAApC,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAOqB,IANvCC,CAAAA,4BAMuC,MANvCA,4BAMuC,CALvCC,+BAKuC,MALvCA,+BAKuC,CAJvCC,8BAIuC,MAJvCA,8BAIuC,CAHvCC,6BAGuC,MAHvCA,6BAGuC,CAFvCC,+BAEuC,MAFvCA,+BAEuC,CADvCC,UACuC,MADvCA,UACuC,CAAvCC,gCAAuC,MAAvCA,gCAAuC,CAGzCC,OAAO,CAACC,GAAR,CAAYJ,+BAA+B,CAACK,QAAhC,CAAyCC,KAArD,EAEE,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,IAAD,CAA4B,IAArBC,CAAAA,QAAqB,2DAAV,KAAU,CAC3D,GAAIA,QAAJ,CAAc,CACZ,GAAID,IAAI,CAACE,MAAL,GAAgB,CAApB,CAAuB,CACrB,MAAO,EAAP,CACD,CAFD,IAEO,CACL,GAAIC,CAAAA,MAAM,CAAGH,IAAI,CAACI,GAAL,CAAS,SAACC,GAAD,CAAMC,KAAN,QAAgBN,CAAAA,IAAI,CAACM,KAAD,CAAJ,CAAY,CAAZ,EAAeC,KAA/B,EAAT,EAA+CC,KAA/C,CAAqD,CAArD,CAAb,CACA,MAAOL,CAAAA,MAAP,CACD,CACF,CAPD,IAOO,CACL,GAAIH,IAAI,CAACE,MAAL,GAAgB,CAApB,CAAuB,CACrB,MAAO,EAAP,CACD,CAFD,IAEO,CACL,MAAOF,CAAAA,IAAI,CAACI,GAAL,CAAS,SAACK,QAAD,CAAWH,KAAX,CAAqB,CACnC,MAAOI,CAAAA,QAAQ,CAACD,QAAQ,CAAC,SAAD,CAAT,CAAf,CACC,CAFI,EAEFD,KAFE,CAEI,CAFJ,CAAP,CAID,CACF,CACF,CAlBD,CAoBA,GAAMG,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACX,IAAD,CAA4B,IAArBC,CAAAA,QAAqB,2DAAV,KAAU,CAC5D,GAAIA,QAAJ,CAAc,CACZ,GAAID,IAAI,CAACE,MAAL,GAAgB,CAApB,CAAuB,CACrB,MAAO,EAAP,CACD,CAFD,IAEQ,CACJ,MAAOF,CAAAA,IAAI,CAACI,GAAL,CAAS,SAACC,GAAD,CAAMC,KAAN,QAAgBN,CAAAA,IAAI,CAACM,KAAD,CAAJ,CAAY,CAAZ,EAAeC,KAA/B,EAAT,EAA+CC,KAA/C,CAAqD,CAArD,CAAP,CACH,CACF,CAND,IAMO,CACL,GAAIR,IAAI,CAACE,MAAL,GAAgB,CAApB,CAAuB,CACrB,MAAO,EAAP,CACD,CAFD,IAEO,CACL,MAAOF,CAAAA,IAAI,CAACI,GAAL,CAAS,SAACK,QAAD,CAAWH,KAAX,CAAqB,CACnC,MAAOI,CAAAA,QAAQ,CAACD,QAAQ,CAAC,UAAD,CAAT,CAAf,CACC,CAFI,EAEFD,KAFE,CAEI,CAFJ,CAAP,CAGD,CACF,CACF,CAhBD,CAkBA,GAAMI,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACZ,IAAD,CAAU,CACrC,GAAIA,IAAI,CAACE,MAAL,GAAgB,CAApB,CAAuB,CACrB,MAAO,EAAP,CACD,CAFD,IAEO,CACH,MAAOF,CAAAA,IAAI,CAACI,GAAL,CAAS,SAACK,QAAD,CAAWH,KAAX,CAAqB,CACnC,MAAOI,CAAAA,QAAQ,CAACD,QAAQ,CAAC,KAAD,CAAT,CAAR,CAA2B,CAAC,CAAnC,CACG,CAFE,CAAP,CAGH,CACF,CARD,CAUA,GAAMI,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACb,IAAD,CAAU,CACtC,GAAIA,IAAI,CAACE,MAAL,GAAgB,CAApB,CAAuB,CACrB,MAAO,EAAP,CACD,CAFD,IAEO,CACL,GAAMY,CAAAA,eAAe,CAAGd,IAAI,CAACI,GAAL,CAAS,SAACK,QAAD,CAAWH,KAAX,CAAqB,CACpD,MAAOI,CAAAA,QAAQ,CAACD,QAAQ,CAACM,EAAV,CAAf,CACG,CAFmB,CAAxB,CAGApB,OAAO,CAACC,GAAR,CAAYkB,eAAZ,EACA,MAAOA,CAAAA,eAAP,CACD,CACF,CAVD,CAYA,GAAME,CAAAA,oCAAoC,CAAG,QAAvCA,CAAAA,oCAAuC,CAAChB,IAAD,CAAOiB,UAAP,CAAsB,CACjE,GAAIC,CAAAA,QAAQ,oBAAOlB,IAAP,CAAZ,CACAkB,QAAQ,CAACd,GAAT,CAAa,SAACe,OAAD,CAAUb,KAAV,CAAoB,CAC/B,OAAQW,UAAR,EACE,IAAK,MAAL,CACEC,QAAQ,CAACZ,KAAD,CAAR,CAAgBc,WAAhB,CAA8BV,QAAQ,CAACQ,QAAQ,CAACZ,KAAD,CAAR,CAAgBe,gBAAjB,CAAtC,CACA,MACF,IAAK,QAAL,CACEH,QAAQ,CAACZ,KAAD,CAAR,CAAgBgB,aAAhB,CAAgCZ,QAAQ,CAACQ,QAAQ,CAACZ,KAAD,CAAR,CAAgBgB,aAAjB,CAAxC,CACA,MACF,IAAK,WAAL,CACEJ,QAAQ,CAACZ,KAAD,CAAR,CAAgBiB,gBAAhB,CAAiCC,CAAjC,CAAqCd,QAAQ,CAACQ,QAAQ,CAACZ,KAAD,CAAR,CAAgBiB,gBAAhB,CAAiCC,CAAlC,CAA7C,CACA,MACF,IAAK,YAAL,CACEN,QAAQ,CAACZ,KAAD,CAAR,CAAgBmB,iBAAhB,CAAkCD,CAAlC,CAAsCd,QAAQ,CAACQ,QAAQ,CAACZ,KAAD,CAAR,CAAgBmB,iBAAhB,CAAkCD,CAAnC,CAA9C,CACA,MACF,QAbF,CAgBD,CAjBD,EAkBA,OAAQP,UAAR,EACE,IAAK,MAAL,CACE,MAAOhC,CAAAA,CAAC,CAACyC,OAAF,CAAUR,QAAV,CAAoB,CAAC,kBAAD,CAApB,CAA0C,CAAC,KAAD,CAA1C,CAAP,CACF,IAAK,QAAL,CACE,MAAOjC,CAAAA,CAAC,CAACyC,OAAF,CAAUR,QAAV,CAAoB,CAAC,cAAD,CAApB,CAAsC,CAAC,KAAD,CAAtC,CAAP,CACF,IAAK,WAAL,CACE,MAAOjC,CAAAA,CAAC,CAACyC,OAAF,CAAUR,QAAV,CAAoB,CAAC,kBAAD,CAApB,CAA0C,CAAC,KAAD,CAA1C,CAAP,CACF,IAAK,YAAL,CACE,MAAOjC,CAAAA,CAAC,CAACyC,OAAF,CAAUR,QAAV,CAAoB,CAAC,mBAAD,CAApB,CAA2C,CAAC,KAAD,CAA3C,CAAP,CACF,QATF,CAYD,CAhCD,CAkCA,GAAMS,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,mBACE,KAAC,IAAD,EACA,IAAI,CAAE,CACJ,CACEC,CAAC,CAAEf,qBAAqB,CAACG,oCAAoC,CAACxB,+BAA+B,CAACK,QAAhC,CAAyCC,KAA1C,CAAiD,MAAjD,CAArC,CAD1B,CAEE+B,CAAC,CAAEjB,oBAAoB,CAACI,oCAAoC,CAACxB,+BAA+B,CAACK,QAAhC,CAAyCC,KAA1C,CAAiD,MAAjD,CAArC,CAFzB,CAGEgC,IAAI,CAAE,SAHR,CAIEC,IAAI,CAAE,eAJR,CAKEC,MAAM,CAAE,CAACC,KAAK,CAAE,MAAR,CALV,CAMEC,IAAI,CAAE,MANR,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBI,CADN,CAmBA,MAAM,CAAK,CAACC,KAAK,CAAE,IAAR,CAAcC,MAAM,CAAE,GAAtB,CAA2BC,KAAK,CAAE,cAAlC,CAnBX,EADF,CAuBD,CAxBD,CA0BA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,mBACE,MAAC,SAAD,yBACE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACE,KAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,uBACE,KAAC,IAAD,CAAM,KAAN,EAAY,SAAS,CAAC,gBAAtB,uBACE,KAAC,IAAD,CAAM,OAAN,EAAc,SAAS,CAAC,MAAxB,CAA+B,IAAI,CAAC,OAApC,CAA4C,QAAQ,KAApD,CAAqD,WAAW,CAAC,eAAjE,CAAiF,QAAQ,CAAE,kBAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,MAAN,CAAajC,KAAjB,EAAhG,EADF,EADF,EADF,EADF,cASA,KAAC,IAAD,EACE,IAAI,CAAE,CACJ,CACEqB,CAAC,CAAE7B,wBAAwB,CAACiB,oCAAoC,CAACxB,+BAA+B,CAACK,QAAhC,CAAyCC,KAA1C,CAAiD,MAAjD,CAArC,CAD7B,CAEE+B,CAAC,CAAElB,yBAAyB,CAACK,oCAAoC,CAACxB,+BAA+B,CAACK,QAAhC,CAAyCC,KAA1C,CAAiD,MAAjD,CAArC,CAF9B,CAGEgC,IAAI,CAAE,SAHR,CAIEC,IAAI,CAAE,eAJR,CAKEC,MAAM,CAAE,CAACC,KAAK,CAAE,MAAR,CALV,CAMEC,IAAI,CAAE,MANR,CAQR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCY,CADR,CAmCE,MAAM,CAAK,CAACC,KAAK,CAAE,IAAR,CAAcC,MAAM,CAAE,GAAtB,CAA2BC,KAAK,CAAE,WAAlC,CAnCb,EATA,GADF,CAiDD,CAlDD,CAuDA,GAAI3C,gCAAgC,CAAC+C,MAAjC,GAA4C,UAA5C,EAA0DjD,+BAA+B,CAACiD,MAAhC,GAA2C,UAAzG,CAAqH,CACnH,mBACE,MAAC,SAAD,yBACE,sBAAKhD,UAAU,CAACI,QAAX,CAAoB6C,QAApB,CAA6BlB,CAAlC,OAAwC/B,UAAU,CAACI,QAAX,CAAoB8C,GAApB,CAAwBnB,CAAhE,OAAsE/B,UAAU,CAACI,QAAX,CAAoB+C,SAApB,CAA8BpB,CAApG,GADF,CAEGG,iBAAiB,EAFpB,CAGGW,cAAc,EAHjB,GADF,CAQE;AACA;AACA;AAEH,CAbD,IAaO,CACL,MACE,cADF,CAGD,CAGF,CA/MD,CAiNA,GAAMO,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,OAOgB,IANtCzD,CAAAA,4BAMsC,OANtCA,4BAMsC,CALtCC,+BAKsC,OALtCA,+BAKsC,CAJtCC,8BAIsC,OAJtCA,8BAIsC,CAHtCC,6BAGsC,OAHtCA,6BAGsC,CAFtCC,+BAEsC,OAFtCA,+BAEsC,CADtCC,UACsC,OADtCA,UACsC,CAAtCC,gCAAsC,OAAtCA,gCAAsC,CACtC,MAAO,CACLF,+BAA+B,CAA/BA,+BADK,CAELC,UAAU,CAAVA,UAFK,CAGLC,gCAAgC,CAAhCA,gCAHK,CAILH,6BAA6B,CAA7BA,6BAJK,CAKLD,8BAA8B,CAA9BA,8BALK,CAMLD,+BAA+B,CAA/BA,+BANK,CAOLD,4BAA4B,CAA5BA,4BAPK,CAAP,CASD,CAjBD,CAmBA,cAAeZ,CAAAA,OAAO,CAACqE,eAAD,CAAkB,EAAlB,CAAP,CAA8B1D,WAA9B,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport _ from 'lodash';\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({ \n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer, \n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer }) => {\n\n\nconsole.log(getWellPlansFromDynamoDbReducer.response.Items)\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        return result\n      }\n    } else {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Easting\"])\n          }).slice(1)\n\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (data.length === 0) {\n        return []\n      }  else {\n          return data.map((row, index) => data[index][1].value).slice(1)\n      }\n    } else {\n      if (data.length === 0) {\n        return []\n      } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"Northing\"])\n          }).slice(1)\n      }\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n        return data.map((lineItem, index) => {\n          return parseInt(lineItem[\"TVD\"]) *-1\n            })\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      const sectCoordinates = data.map((lineItem, index) => {\n        return parseInt(lineItem.VS)\n          })\n      console.log(sectCoordinates)\n      return sectCoordinates\n    }\n  }\n\n  const convertNumberStringsToNumbersAndSort = (data, dataSource) => {\n    let dataCopy = [...data]\n    dataCopy.map((element, index) => {\n      switch (dataSource) {\n        case 'Plan':\n          dataCopy[index].Plan_Number = parseInt(dataCopy[index].Plan_Line_Number)\n          break;\n        case 'Survey':\n          dataCopy[index].Survey_Number = parseInt(dataCopy[index].Survey_Number)\n          break;\n        case 'Hard_Line':\n          dataCopy[index].Hard_Line_Number.S = parseInt(dataCopy[index].Hard_Line_Number.S)\n          break;\n        case 'Lease_Line':\n          dataCopy[index].Lease_Line_Number.S = parseInt(dataCopy[index].Lease_Line_Number.S)\n          break;\n        default:\n\n      }\n    })\n    switch (dataSource) {\n      case 'Plan':\n        return _.orderBy(dataCopy, ['Plan_Line_Number'], ['asc'])\n      case 'Survey':\n        return _.orderBy(dataCopy, ['SurveyNumber'], ['asc'])\n      case 'Hard_Line':\n        return _.orderBy(dataCopy, ['Hard_Line_Number'], ['asc'])\n      case 'Lease_Line':\n        return _.orderBy(dataCopy, ['Lease_Line_Number'], ['asc'])\n      default:\n\n    }\n  }\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        }\n        // {\n        //   x: createSectCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Surveys\")),\n        //   y: createTVDCoordinates(convertNumberStringsToNumbersAndSort(getSurveysFromDynamoDbReducer.response.Items, \"Surveys\")),\n        //   type: \"scatter\",\n        //   mode: \"lines+markers\",\n        //   marker: {color: \"Red\"},\n        //   name: \"Surveys\"\n        // },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n\n  const renderPlanView = () => {\n    return (\n      <Container>\n        <Col xs={2}>\n          <Form className=\"mt-7\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n            </Form.Group>\n          </Form>\n        </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            y: createNorthingCoordinates(convertNumberStringsToNumbersAndSort(getWellPlansFromDynamoDbReducer.response.Items, \"Plan\")),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n  //         {\n  //           x: createEastingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n  //           y: createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"red\"},\n  //           name: \"Surveys\"\n  //         },\n  //         {\n  //           x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n  //           y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"black\"},\n  //           name: \"Lease Lines\"\n  //         },\n  //         {\n  //           x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n  //           y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n  //           type: \"scatter\",\n  //           mode: \"lines+markers\",\n  //           marker: {color: \"red\"},\n  //           name: \"Hard Lines\"\n  //         },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n      </Container>\n    )\n  }\n\n  \n\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.response.Operator.S} - {activeWell.response.Rig.S} - {activeWell.response.Well_Name.S}</h3>\n        {renderSectionView()}\n        {renderPlanView()} \n      </Container>\n    )\n      \n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    \n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer}) => {\n  return {\n    getWellPlansFromDynamoDbReducer, \n    activeWell,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}