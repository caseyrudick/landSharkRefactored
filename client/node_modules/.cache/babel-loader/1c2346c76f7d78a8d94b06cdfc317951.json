{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PVA.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\";\nimport _, { get } from \"lodash\";\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\";\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\";\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\";\n\nconst PVA = ({\n  saveSurveysToReduxStoreReducer,\n  saveHardLinesToReduxStoreReducer,\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer,\n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [planNorthing, setPlanNorthing] = useState([]);\n  const [planEasting, setPlanEasting] = useState([]);\n  const [surveyNorthing, setSurveyNorthing] = useState([]);\n  const [surveyEasting, setSurveyEasting] = useState([]);\n  const [TVDCoordinates, setTVDCoordinates] = useState([]);\n  const [sectCoordinates, setSectCoordinates] = useState([]);\n  useEffect(() => {\n    const determinePlanNorthingCoordinates = () => {\n      if (getWellPlansFromDynamoDbReducer.response.Count === 0) {\n        setPlanNorthing(createNorthingCoordinates(savePlansToReduxStoreReducer.response));\n      } else {\n        setPlanNorthing(createNorthingCoordinates(getWellPlansFromDynamoDbReducer.response.Items, false, true));\n      }\n    };\n\n    determinePlanNorthingCoordinates();\n  }, [getWellPlansFromDynamoDbReducer.response.Items]);\n  useEffect(() => {\n    const determineSurveyNorthingCoordinates = () => {\n      if (getSurveysFromDynamoDbReducer.response.Count === 0) {\n        setSurveyNorthing(createNorthingCoordinates(saveSurveysToReduxStoreReducer.response));\n      } else {\n        setSurveyNorthing(createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.Items, false, true));\n      }\n    };\n\n    determineSurveyNorthingCoordinates();\n  }, [getSurveysFromDynamoDbReducer.response.Items]);\n\n  const createNorthingCoordinates = (data, polyLine = false, existingValues = false) => {\n    if (polyLine && !existingValues) {\n      // if (Object.keys(data).length === 0) {\n      //   return []\n      // } else {\n      return data.map((row, index) => data[index][1].value).slice(1);\n    } else if (polyLine && existingValues) {\n      return data.map(value => parseInt(value.Northing));\n    } else if (!polyLine && existingValues) {\n      return data.map(value => parseInt(value.Northing));\n    } else {\n      return data.map((row, idx) => data[idx][5].value).slice(1);\n    }\n  };\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1); // console.log(\"easting\" + result)\n\n        return result;\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1); // console.log(\"easting\" + result)\n\n        return result;\n      }\n    }\n  };\n\n  const createTVDCoordiantes = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((row, index) => data[index][4].value * -1).slice(1);\n    }\n  };\n\n  const createSectCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((row, index) => data[index][7].value).slice(1);\n    }\n  };\n\n  const renderSectionView = () => {\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: planNorthing,\n        y: planEasting,\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      } // {\n      //   x: createTVDCoordiantes(saveSurveysToReduxStoreReducer.response),\n      //   y: createSectCoordinates(saveSurveysToReduxStoreReducer.response),\n      //   type: \"scatter\",\n      //   mode: \"lines+markers\",\n      //   marker: {color: \"Red\"},\n      //   name: \"Surveys\"\n      // },\n      ],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Section View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n        y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createEastingCoordinates(saveSurveysToReduxStoreReducer.response),\n        y: createNorthingCoordinates(saveSurveysToReduxStoreReducer.response),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        },\n        name: \"Surveys\"\n      }, {\n        x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n        y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"black\"\n        },\n        name: \"Lease Lines\"\n      }, {\n        x: createEastingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n        y: createNorthingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        },\n        name: \"Lease Lines\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Plan View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: renderSectionView()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PVA, \"A/JYqVVEHotOa6mPmWrDzNC1H9Q=\");\n\n_c = PVA;\n\nconst mapStateToProps = ({\n  saveHardLinesToReduxStoreReducer,\n  saveSurveysToReduxStoreReducer,\n  savePlansToReduxStoreReducer,\n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer,\n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer,\n    saveLeaseLinesToReduxStoreReducer,\n    activeWell,\n    saveHardLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n    getWellPlansFromDynamoDbReducer,\n    getLeaseLinesFromDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savePlansToReduxStore,\n  saveLeaseLinesToReduxStore,\n  saveWellInfoToReduxStore\n})(PVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"PVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PVA.js"],"names":["React","useEffect","useState","Container","Plot","connect","_","get","savePlansToReduxStore","saveLeaseLinesToReduxStore","saveWellInfoToReduxStore","PVA","saveSurveysToReduxStoreReducer","saveHardLinesToReduxStoreReducer","savePlansToReduxStoreReducer","saveLeaseLinesToReduxStoreReducer","getWellPlansFromDynamoDbReducer","getLeaseLinesFromDynamoDbReducer","getHardLinesFromDynamoDbReducer","getSurveysFromDynamoDbReducer","activeWell","planNorthing","setPlanNorthing","planEasting","setPlanEasting","surveyNorthing","setSurveyNorthing","surveyEasting","setSurveyEasting","TVDCoordinates","setTVDCoordinates","sectCoordinates","setSectCoordinates","determinePlanNorthingCoordinates","response","Count","createNorthingCoordinates","Items","determineSurveyNorthingCoordinates","data","polyLine","existingValues","map","row","index","value","slice","parseInt","Northing","idx","createEastingCoordinates","Object","keys","length","console","log","result","createTVDCoordiantes","createSectCoordinates","renderSectionView","x","y","type","mode","marker","color","name","width","height","title","renderPlanView","grid","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Plot from 'react-plotly.js';\nimport { connect } from \"react-redux\"\nimport _, { get } from \"lodash\"\nimport savePlansToReduxStore from \"../ActionCreators/savePlansToReduxStore\"\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n\n\nconst PVA = ({\n  saveSurveysToReduxStoreReducer, \n  saveHardLinesToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer, \n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer,\n  activeWell\n}) => {\n\n  const [planNorthing, setPlanNorthing] = useState([])\n  const [planEasting, setPlanEasting] = useState([])\n  const [surveyNorthing, setSurveyNorthing] = useState([])\n  const [surveyEasting, setSurveyEasting] = useState([])\n  const [TVDCoordinates, setTVDCoordinates] = useState([])\n  const [sectCoordinates, setSectCoordinates] = useState([])\n\n\n  useEffect(() => {\n    const determinePlanNorthingCoordinates = () => {\n      if (getWellPlansFromDynamoDbReducer.response.Count === 0) {\n        setPlanNorthing(createNorthingCoordinates(savePlansToReduxStoreReducer.response))\n      } else {\n        setPlanNorthing(createNorthingCoordinates(getWellPlansFromDynamoDbReducer.response.Items, false, true))\n      }\n    }\n    determinePlanNorthingCoordinates()\n  }, [getWellPlansFromDynamoDbReducer.response.Items])\n\n  useEffect(() => {\n    const determineSurveyNorthingCoordinates = () => {\n      if (getSurveysFromDynamoDbReducer.response.Count === 0) {\n        setSurveyNorthing(createNorthingCoordinates(saveSurveysToReduxStoreReducer.response))\n      } else {\n        setSurveyNorthing(createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.Items, false, true))\n      }\n    }\n    determineSurveyNorthingCoordinates()\n  },[getSurveysFromDynamoDbReducer.response.Items])\n\n\n\n  const createNorthingCoordinates = (data, polyLine = false, existingValues = false) => {\n    if (polyLine && !existingValues) {\n      // if (Object.keys(data).length === 0) {\n      //   return []\n      // } else {\n      return data.map((row, index) => data[index][1].value).slice(1)\n    } \n    else if (polyLine && existingValues) {\n      return data.map(value => parseInt(value.Northing))\n    } \n    else if (!polyLine && existingValues) {\n        return data.map(value => parseInt(value.Northing))\n    }\n    else {\n        return data.map((row, idx) => data[idx][5].value).slice(1)\n    }\n  }\n\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        // console.log(\"easting\" + result)\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1)\n        // console.log(\"easting\" + result)\n        return result\n      }\n    }\n  }  \n  \n\n\n  const createTVDCoordiantes = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][4].value * -1 ).slice(1)\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => data[index][7].value).slice(1)\n    }\n  }\n  \n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: planNorthing,\n          y: planEasting,\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        // {\n        //   x: createTVDCoordiantes(saveSurveysToReduxStoreReducer.response),\n        //   y: createSectCoordinates(saveSurveysToReduxStoreReducer.response),\n        //   type: \"scatter\",\n        //   mode: \"lines+markers\",\n        //   marker: {color: \"Red\"},\n        //   name: \"Surveys\"\n        // },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n  const renderPlanView = () => {\n    // if (\n    //   Object.keys(savePlansToReduxStoreReducer.response).length === 0 && Object.keys(save)\n    // )\n    return (\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(savePlansToReduxStoreReducer.response),\n            y: createNorthingCoordinates(savePlansToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(saveSurveysToReduxStoreReducer.response),\n            y: createNorthingCoordinates(saveSurveysToReduxStoreReducer.response),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveLeaseLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            y: createNorthingCoordinates(saveHardLinesToReduxStoreReducer.response.grid, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Lease Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n    )\n  }\n\n  return (\n    <Container>\n      {renderSectionView()}\n      {/* {renderPlanView()} */}\n    </Container>\n  )\n\n}\n\nconst mapStateToProps = ({\n  saveHardLinesToReduxStoreReducer, \n  saveSurveysToReduxStoreReducer, \n  savePlansToReduxStoreReducer, \n  saveLeaseLinesToReduxStoreReducer,\n  getWellPlansFromDynamoDbReducer, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  getSurveysFromDynamoDbReducer, \n  activeWell\n}) => {\n  return {\n    savePlansToReduxStoreReducer, \n    saveLeaseLinesToReduxStoreReducer, \n    activeWell,\n    saveHardLinesToReduxStoreReducer,\n    saveSurveysToReduxStoreReducer,\n    getWellPlansFromDynamoDbReducer, \n    getLeaseLinesFromDynamoDbReducer,\n    getHardLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer, \n  }\n}\n\nexport default connect(mapStateToProps, { savePlansToReduxStore, saveLeaseLinesToReduxStore, saveWellInfoToReduxStore })(PVA)"]},"metadata":{},"sourceType":"module"}