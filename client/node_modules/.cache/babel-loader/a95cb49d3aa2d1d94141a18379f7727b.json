{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport Plot from \"react-plotly.js\";\nimport { isNumber } from \"lodash\";\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\";\n\nconst ExistingPVA = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1);\n        return result;\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1);\n        return result;\n      }\n    }\n  };\n\n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return [];\n      } else {\n        return data.map((row, index) => data[index][1].value).slice(1);\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\");\n        return [];\n      } else {\n        return data.map((row, index) => data[index][5].value).slice(1);\n      }\n    }\n  };\n\n  const createTVDCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((row, index) => {\n        return parseInt(data[index][4].value) * -1;\n      }).slice(1);\n    }\n  };\n\n  const createSectCoordinates = data => {\n    if (data.length === 0) {\n      return [];\n    } else {\n      return data.map((row, index) => {\n        return parseInt(data[index][7].value);\n      }).slice(1);\n    }\n  };\n\n  const renderSectionView = () => {\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: createSectCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n        y: createTVDCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"blue\"\n        },\n        name: \"Plan\"\n      }, {\n        x: createSectCoordinates(getSurveysFromDynamoDbReducer.response.data),\n        y: createTVDCoordinates(getSurveysFromDynamoDbReducer.response.data),\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"Red\"\n        },\n        name: \"Surveys\"\n      }],\n      layout: {\n        width: 1000,\n        height: 800,\n        title: 'Section View'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderPlanView = () => {\n    return (\n      /*#__PURE__*/\n      // <Container>\n      //   <Col xs={2}>\n      //     <Form className=\"mt-7\">\n      //       <Form.Group controlId=\"formBasicEmail\">\n      //         <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n      //       </Form.Group>\n      //     </Form>\n      //   </Col>\n      _jsxDEV(Plot, {\n        data: [{\n          x: createEastingCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n          y: createNorthingCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"blue\"\n          },\n          name: \"Plan\"\n        }, {\n          x: createEastingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n          y: createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          },\n          name: \"Surveys\"\n        }, {\n          x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n          y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"black\"\n          },\n          name: \"Lease Lines\"\n        }, {\n          x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n          y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {\n            color: \"red\"\n          },\n          name: \"Hard Lines\"\n        }],\n        layout: {\n          width: 1000,\n          height: 800,\n          title: 'Plan View'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this) // </Container>\n\n    );\n  };\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [activeWell.response.Operator.S, \" - \", activeWell.response.Rig.S, \" - \", activeWell.response.Well_Name.S]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), renderSectionView(), renderPlanView()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this); // <Container>\n    //   {renderPlanView()} \n    // </Container>\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_c = ExistingPVA;\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer,\n  getWellPlansFromDynamoDbReducer,\n  activeWell,\n  getLeaseLinesFromDynamoDbReducer\n}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell: activeWell.response.data,\n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","isNumber","saveSurveysToReduxStore","ExistingPVA","savePlansToReduxStoreReducer","getHardLinesFromDynamoDbReducer","saveSurveysToReduxStoreReducer","getSurveysFromDynamoDbReducer","getWellPlansFromDynamoDbReducer","activeWell","getLeaseLinesFromDynamoDbReducer","createEastingCoordinates","data","polyLine","Object","keys","length","console","log","result","map","row","index","value","slice","createNorthingCoordinates","createTVDCoordinates","parseInt","createSectCoordinates","renderSectionView","x","response","y","type","mode","marker","color","name","width","height","title","renderPlanView","status","Operator","S","Rig","Well_Name","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"react-plotly.js\"\nimport { isNumber } from \"lodash\"\nimport saveSurveysToReduxStore from \"../ActionCreators/saveSurveysToReduxStore\"\n\nconst ExistingPVA = ({ \n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer, \n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer }) => {\n\n  const createEastingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][2].value).slice(1)\n        return result\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n        let result = data.map((row, index) => data[index][6].value).slice(1)\n        return result\n      }\n    }\n  }  \n  \n  const createNorthingCoordinates = (data, polyLine = false) => {\n    if (polyLine) {\n      if (Object.keys(data).length === 0) {\n        return []\n      } else {\n          return data.map((row, index) => data[index][1].value).slice(1)\n      }\n    } else {\n      if (Object.keys(data).length === 0) {\n        console.log(\"nada\")\n        return []\n      } else {\n          return data.map((row, index) => data[index][5].value).slice(1)\n      }\n    }\n  }\n\n  const createTVDCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n        return data.map((row, index) => {\n          return parseInt(data[index][4].value) * -1\n            }).slice(1)\n    }\n  } \n\n  const createSectCoordinates = (data) => {\n    if (data.length === 0) {\n      return []\n    } else {\n      return data.map((row, index) => {\n        return parseInt(data[index][7].value)\n          }).slice(1)\n    }\n  }\n\n  const renderSectionView = () => {\n    return (\n      <Plot\n      data={[\n        {\n          x: createSectCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n          y: createTVDCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"blue\"},\n          name: \"Plan\"\n        },\n        {\n          x: createSectCoordinates(getSurveysFromDynamoDbReducer.response.data),\n          y: createTVDCoordinates(getSurveysFromDynamoDbReducer.response.data),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          marker: {color: \"Red\"},\n          name: \"Surveys\"\n        },\n      ]}\n      layout = { {width: 1000, height: 800, title: 'Section View'} }\n      />\n    )\n  }\n\n  const renderPlanView = () => {\n    return (\n      // <Container>\n      //   <Col xs={2}>\n      //     <Form className=\"mt-7\">\n      //       <Form.Group controlId=\"formBasicEmail\">\n      //         <Form.Control className=\"mt-3\" type=\"float\" disabled placeholder=\"Enter VS Here\" onChange={event => event.target.value}/>\n      //       </Form.Group>\n      //     </Form>\n      //   </Col>\n\n      <Plot\n        data={[\n          {\n            x: createEastingCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n            y: createNorthingCoordinates(getWellPlansFromDynamoDbReducer.response.data),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"blue\"},\n            name: \"Plan\"\n          },\n          {\n            x: createEastingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n            y: createNorthingCoordinates(getSurveysFromDynamoDbReducer.response.data),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Surveys\"\n          },\n          {\n            x: createEastingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n            y: createNorthingCoordinates(getLeaseLinesFromDynamoDbReducer.response.data, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"black\"},\n            name: \"Lease Lines\"\n          },\n          {\n            x: createEastingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n            y: createNorthingCoordinates(getHardLinesFromDynamoDbReducer.response.data, true),\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: {color: \"red\"},\n            name: \"Hard Lines\"\n          },\n        ]}\n        layout = { {width: 1000, height: 800, title: 'Plan View'} }\n        />\n      // </Container>\n    )\n  }\n\n  \n\n\n  if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        <h3>{activeWell.response.Operator.S} - {activeWell.response.Rig.S} - {activeWell.response.Well_Name.S}</h3>\n        {renderSectionView()}\n        {renderPlanView()} \n      </Container>\n    )\n      \n      // <Container>\n      //   {renderPlanView()} \n      // </Container>\n    \n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({\n  savePlansToReduxStoreReducer, \n  getHardLinesFromDynamoDbReducer, \n  saveSurveysToReduxStoreReducer,\n  getSurveysFromDynamoDbReducer, \n  getWellPlansFromDynamoDbReducer, \n  activeWell, \n  getLeaseLinesFromDynamoDbReducer}) => {\n  return {\n    getWellPlansFromDynamoDbReducer, \n    activeWell: activeWell.response.data, \n    getLeaseLinesFromDynamoDbReducer,\n    getSurveysFromDynamoDbReducer,\n    saveSurveysToReduxStoreReducer,\n    getHardLinesFromDynamoDbReducer,\n    savePlansToReduxStoreReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}