{"ast":null,"code":"import _toConsumableArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import{connect}from\"react-redux\";import Container from\"react-bootstrap/esm/Container\";import Form from\"react-bootstrap/Form\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Button from\"react-bootstrap/Button\";import'react-datasheet/lib/react-datasheet.css';import ReactDataSheet from\"react-datasheet\";var ExistingPlans=function ExistingPlans(_ref){var getWellPlansFromDynamoDbReducer=_ref.getWellPlansFromDynamoDbReducer,activeWell=_ref.activeWell;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),plans=_useState2[0],setPlans=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),grid=_useState4[0],setGrid=_useState4[1];useEffect(function(){if(getWellPlansFromDynamoDbReducer.status===\"received\"){createCopies();}},[getWellPlansFromDynamoDbReducer.response.Items]);useEffect(function(){createReactDataSheetGridFromPlans();},[plans]);var createCopies=function createCopies(){setPlans(_toConsumableArray(getWellPlansFromDynamoDbReducer.response.Items));// createReactDataSheetGridFromPlans();\n};var createReactDataSheetGridFromPlans=function createReactDataSheetGridFromPlans(){var dataSheetHeader=[[{value:'',readOnly:true,width:'3rem'},{value:'Measured Depth',readOnly:true,width:'10rem'},{value:'Inclination',readOnly:true,width:'7rem'},{value:'Azimuth',readOnly:true,width:'7rem'},{value:'TVD',readOnly:true,width:'7rem'},{value:'NS',readOnly:true,width:'7rem'},{value:'EW',readOnly:true,width:'7rem'},{value:'SECT',readOnly:true,width:'7rem'},{value:'DLS',readOnly:true,width:'7rem'}]];var plansCopy=_toConsumableArray(plans);plansCopy.forEach(function(planLineItem,idx){var newRow=[];newRow[0]={value:idx+1,width:\"4rem\",readOnly:true};newRow[1]={value:parseInt(planLineItem.MD),width:\"10rem\"};newRow[2]={value:parseInt(planLineItem.INC),width:\"7rem\"};newRow[3]={value:parseInt(planLineItem.AZM),width:\"7rem\"};newRow[4]={value:parseInt(planLineItem.TVD),width:\"7rem\"};newRow[5]={value:parseInt(planLineItem.Northing),width:\"7rem\"};newRow[6]={value:parseInt(planLineItem.Easting),width:\"7rem\"};newRow[7]={value:parseInt(planLineItem.VS),width:\"7rem\"};newRow[8]={value:parseInt(planLineItem.DLS),width:\"7rem\"};dataSheetHeader.push(newRow);});setGrid(dataSheetHeader);// console.log(grid);\n// setGrid(result)\n};var renderMain=function renderMain(){if(getWellPlansFromDynamoDbReducer.status===\"received\"){var _activeWell$response=activeWell.response,Operator=_activeWell$response.Operator,Rig=_activeWell$response.Rig,Well_Name=_activeWell$response.Well_Name;return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"my-4\",children:[Operator.S,\" - \",Rig.S,\" - \",Well_Name.S]}),/*#__PURE__*/_jsx(ReactDataSheet,{data:grid,valueRenderer:function valueRenderer(cell){return cell.value;},width:true})]});}};if(getWellPlansFromDynamoDbReducer.status===\"received\"){return/*#__PURE__*/_jsx(Container,{children:renderMain()});}else{return\"error\";}};var mapStateToProps=function mapStateToProps(_ref2){var getWellPlansFromDynamoDbReducer=_ref2.getWellPlansFromDynamoDbReducer,activeWell=_ref2.activeWell;return{getWellPlansFromDynamoDbReducer:getWellPlansFromDynamoDbReducer,activeWell:activeWell};};export default connect(mapStateToProps,{})(ExistingPlans);","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","ExistingPlans","getWellPlansFromDynamoDbReducer","activeWell","plans","setPlans","grid","setGrid","status","createCopies","response","Items","createReactDataSheetGridFromPlans","dataSheetHeader","value","readOnly","width","plansCopy","forEach","planLineItem","idx","newRow","parseInt","MD","INC","AZM","TVD","Northing","Easting","VS","DLS","push","renderMain","Operator","Rig","Well_Name","S","cell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\n\n\nconst ExistingPlans = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  let [plans, setPlans] = useState([]);\n  let [grid, setGrid] = useState([]);\n  \n  useEffect(()=> {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      createCopies();\n    }\n  },[getWellPlansFromDynamoDbReducer.response.Items]);\n\n  useEffect(() => {\n    createReactDataSheetGridFromPlans();\n  }, [plans])\n\n\n  const createCopies = () => {\n    setPlans([...getWellPlansFromDynamoDbReducer.response.Items])\n    // createReactDataSheetGridFromPlans();\n  }\n  \n  const createReactDataSheetGridFromPlans = () => {\n    let dataSheetHeader = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    let plansCopy = [...plans];\n    plansCopy.forEach((planLineItem, idx) => {\n      let newRow = [];\n      newRow[0] = {value: idx+1, width: \"4rem\", readOnly: true}\n      newRow[1] = {value: parseInt(planLineItem.MD), width: \"10rem\"}\n      newRow[2] = {value: parseInt(planLineItem.INC), width: \"7rem\"}\n      newRow[3] = {value: parseInt(planLineItem.AZM), width: \"7rem\"}\n      newRow[4] = {value: parseInt(planLineItem.TVD), width: \"7rem\"}\n      newRow[5] = {value: parseInt(planLineItem.Northing), width: \"7rem\"}\n      newRow[6] = {value: parseInt(planLineItem.Easting), width: \"7rem\"}\n      newRow[7] = {value: parseInt(planLineItem.VS), width: \"7rem\"}\n      newRow[8] = {value: parseInt(planLineItem.DLS), width: \"7rem\"}\n      dataSheetHeader.push(newRow)      \n    })\n    setGrid(dataSheetHeader);\n    // console.log(grid);\n    // setGrid(result)\n  }\n\n  \n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const { Operator, Rig, Well_Name} = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n          <ReactDataSheet data={grid} valueRenderer={cell => cell.value} width/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n\n}\n\n\n\n\n\nconst mapStateToProps = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPlans)"]},"metadata":{},"sourceType":"module"}