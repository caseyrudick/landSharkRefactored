{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport saveWellPlansToJSONDb from \"../ActionCreators/saveWellPlansToJSONDb\";\n\nconst Plans = ({\n  currentWell,\n  currentWellId,\n  saveWellPlansToJSONDb\n}) => {\n  _s();\n\n  const [editGrid, setEditGrid] = useState(true);\n  const initialGrid = [[{\n    value: '',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Measured Depth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Inclination\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Azimuth\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"TVD\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: '7rem'\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 2,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 3,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 4,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 5,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }], [{\n    value: 6,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }, {\n    value: 0,\n    readOnly: true\n  }]];\n  const [grid, setGrid] = useState(initialGrid);\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]); // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \n\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...grid[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n  };\n\n  const addNewRow = () => {\n    const localGrid = [{\n      value: grid.length + 1,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    setGrid([...grid, localGrid]);\n  };\n\n  const editPlans = () => {\n    setEditGrid(!editGrid);\n    const gridNew = grid.map(row => [...row]);\n\n    for (let row = 1; row < gridNew.length; row++) {\n      for (let col = 1; col < gridNew[row].length; col++) {\n        gridNew[row][col].readOnly = editGrid;\n      }\n    }\n\n    setGrid(gridNew);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createNewPlan = () => {\n    let wellPlans = currentWell.plans;\n    let wellPlanCount = wellPlans.length;\n    let newWellPlanNumberAndPlan = {\n      \"id\": wellPlanCount += 1,\n      \"planDetails\": grid\n    };\n    const activeWellCopy = { ...currentWell\n    };\n    activeWellCopy.plans.push(newWellPlanNumberAndPlan);\n    console.log(activeWellCopy);\n    saveWellPlansToJSONDb(activeWellCopy, currentWellId); // saveNewPlanToReduxStore(activeWellCopy);\n    // postPlansToJSONdb(activeWellCopy)\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      xs: 30,\n      children: `${currentWell.operator} - ${currentWell.rig} - ${currentWell.well}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      xs: 30,\n      children: /*#__PURE__*/_jsxDEV(ReactDataSheet, {\n        data: grid,\n        valueRenderer: cell => cell.value,\n        onCellsChanged: onCellsChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"mt-4 mb-4\",\n      onClick: () => addNewRow(),\n      children: \"Add a Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"danger\",\n      className: \"my-4 ml-4\",\n      onClick: () => removeRow(),\n      children: \"Remove a Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"info\",\n      className: \"my-4 ml-4\",\n      onClick: () => editPlans(),\n      children: \"Edit Plans\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"info\",\n      className: \"my-4 ml-4\",\n      onClick: () => createNewPlan(),\n      children: \"Create New Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Plans, \"piVfIKaKPVfVeQesDU+uQCbvI/Y=\");\n\n_c = Plans;\n\nconst mapStateToProps = ({\n  postWellInfoToJSONDbReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  const currentWell = postWellInfoToJSONDbReducer.response;\n  let currentWellId = \"\";\n\n  for (let well in getWellsFromJSONDbReducer.response) {\n    let wellInfo = getWellsFromJSONDbReducer.response[well];\n\n    if (wellInfo.operator === currentWell.operator && wellInfo.well === currentWell.well) {\n      currentWellId = wellInfo.id;\n    }\n  }\n\n  return {\n    currentWellId,\n    currentWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveWellPlansToJSONDb\n})(Plans); // const mapStateToProps = ({activeWell}) => {\n//   console.log(activeWell.payload)\n//   const currentlyActiveWell = Object.values(activeWell.payload[0])\n//   const wellInfo = `${activeWell.operator} - ${activeWell.rig} - ${activeWell.well}`;\n//   const wellPlans= activeWell.plans\n//   return {\n//     currentlyActiveWell,\n//     wellInfo,\n//     wellPlans\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Plans.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveWellPlansToJSONDb","Plans","currentWell","currentWellId","editGrid","setEditGrid","initialGrid","value","readOnly","width","grid","setGrid","onCellsChanged","changes","gridNew","map","row","forEach","cell","col","addNewRow","localGrid","length","editPlans","removeRow","newGrid","pop","createNewPlan","wellPlans","plans","wellPlanCount","newWellPlanNumberAndPlan","activeWellCopy","push","console","log","operator","rig","well","mapStateToProps","postWellInfoToJSONDbReducer","getWellsFromJSONDbReducer","response","wellInfo","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveWellPlansToJSONDb from \"../ActionCreators/saveWellPlansToJSONDb\"\n\nconst Plans = ({currentWell, currentWellId, saveWellPlansToJSONDb}) => {\n  const [editGrid, setEditGrid] = useState(true)\n  const initialGrid = [\n    [{value: '', readOnly: true, width: '7rem'}, {value:\"Measured Depth\", readOnly: true, width: '7rem'}, {value:\"Inclination\", readOnly: true, width: '7rem'}, {value:\"Azimuth\", readOnly: true, width: '7rem'}, {value:\"TVD\", readOnly: true, width: '7rem'}, {value:\"Northing\", readOnly: true, width: '7rem'}, {value:\"Easting\", readOnly: true, width: '7rem'}],\n    [{value: 1, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 2, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 3, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 4, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 5, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    [{value: 6, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}, {value: 0, readOnly: true}],\n    ];\n\n  const [grid, setGrid] = useState(initialGrid);\n\n  const onCellsChanged = changes => {\n    // iterate through existing grid to get a copy and not mutate current as we iterate over\n    const gridNew = grid.map(row => [...row]);\n    // iterate through the changes.  Each change is a cell, each cell is an object\n    // with cell (previousVal), row, col, currentVal\n    // mutate the value of the newGrid[row#][col#] to the new value \n    changes.forEach(({ cell, row, col, value }) => {\n      gridNew[row][col] = { ...grid[row][col], value };\n    });\n    setGrid(gridNew)\n  };\n\n  const addNewRow = () => {\n    const localGrid = [{value: grid.length + 1, readOnly: true}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}, {value: 0}]\n    setGrid([...grid, localGrid])\n  };\n\n  const editPlans = () => {\n    setEditGrid(!editGrid)\n    const gridNew = grid.map(row => [...row]);\n    for (let row = 1; row < gridNew.length; row ++) {\n      for (let col = 1; col < gridNew[row].length; col ++) {\n        gridNew[row][col].readOnly = editGrid;\n      }\n    }\n    setGrid(gridNew);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  const createNewPlan = () => {\n      let wellPlans = currentWell.plans\n      let wellPlanCount = wellPlans.length;\n      let newWellPlanNumberAndPlan = {\n        \"id\": wellPlanCount += 1,\n        \"planDetails\": grid\n      };\n      const activeWellCopy = {...currentWell};\n      activeWellCopy.plans.push(newWellPlanNumberAndPlan);\n      console.log(activeWellCopy)\n      saveWellPlansToJSONDb(activeWellCopy, currentWellId)\n      // saveNewPlanToReduxStore(activeWellCopy);\n      // postPlansToJSONdb(activeWellCopy)\n  };\n\n\n\n  return (\n    <Container>\n      <Col xs={30}>{`${currentWell.operator} - ${currentWell.rig} - ${currentWell.well}`}</Col>\n      <Col xs={30}>\n    <ReactDataSheet\n        data={grid}\n        valueRenderer={(cell) => cell.value}\n        onCellsChanged={onCellsChanged}\n       \n    />\n    </Col>\n    <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n    <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n    <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n    <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n    </Container>\n  )\n}\n\nconst mapStateToProps = ({postWellInfoToJSONDbReducer, getWellsFromJSONDbReducer}) => {\n  const currentWell = postWellInfoToJSONDbReducer.response\n  let currentWellId = \"\"\n  for (let well in getWellsFromJSONDbReducer.response) {\n    let wellInfo = getWellsFromJSONDbReducer.response[well]\n    if (wellInfo.operator === currentWell.operator && wellInfo.well === currentWell.well) {\n      currentWellId = wellInfo.id\n    }\n  }\n  \n  return {\n    currentWellId,\n    currentWell\n  }\n}\n\nexport default connect(mapStateToProps, { saveWellPlansToJSONDb})(Plans)\n\n\n// const mapStateToProps = ({activeWell}) => {\n//   console.log(activeWell.payload)\n//   const currentlyActiveWell = Object.values(activeWell.payload[0])\n//   const wellInfo = `${activeWell.operator} - ${activeWell.rig} - ${activeWell.well}`;\n//   const wellPlans= activeWell.plans\n//   return {\n//     currentlyActiveWell,\n//     wellInfo,\n//     wellPlans\n//   }\n// }"]},"metadata":{},"sourceType":"module"}