{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict'; // projection names to d3 function name\n\nexports.projNames = {\n  // d3.geo.projection\n  'equirectangular': 'equirectangular',\n  'mercator': 'mercator',\n  'orthographic': 'orthographic',\n  'natural earth': 'naturalEarth',\n  'kavrayskiy7': 'kavrayskiy7',\n  'miller': 'miller',\n  'robinson': 'robinson',\n  'eckert4': 'eckert4',\n  'azimuthal equal area': 'azimuthalEqualArea',\n  'azimuthal equidistant': 'azimuthalEquidistant',\n  'conic equal area': 'conicEqualArea',\n  'conic conformal': 'conicConformal',\n  'conic equidistant': 'conicEquidistant',\n  'gnomonic': 'gnomonic',\n  'stereographic': 'stereographic',\n  'mollweide': 'mollweide',\n  'hammer': 'hammer',\n  'transverse mercator': 'transverseMercator',\n  'albers usa': 'albersUsa',\n  'winkel tripel': 'winkel3',\n  'aitoff': 'aitoff',\n  'sinusoidal': 'sinusoidal'\n}; // name of the axes\n\nexports.axesNames = ['lonaxis', 'lataxis']; // max longitudinal angular span (EXPERIMENTAL)\n\nexports.lonaxisSpan = {\n  'orthographic': 180,\n  'azimuthal equal area': 360,\n  'azimuthal equidistant': 360,\n  'conic conformal': 180,\n  'gnomonic': 160,\n  'stereographic': 180,\n  'transverse mercator': 180,\n  '*': 360\n}; // max latitudinal angular span (EXPERIMENTAL)\n\nexports.lataxisSpan = {\n  'conic conformal': 150,\n  'stereographic': 179.5,\n  '*': 180\n}; // defaults for each scope\n\nexports.scopeDefaults = {\n  world: {\n    lonaxisRange: [-180, 180],\n    lataxisRange: [-90, 90],\n    projType: 'equirectangular',\n    projRotate: [0, 0, 0]\n  },\n  usa: {\n    lonaxisRange: [-180, -50],\n    lataxisRange: [15, 80],\n    projType: 'albers usa'\n  },\n  europe: {\n    lonaxisRange: [-30, 60],\n    lataxisRange: [30, 85],\n    projType: 'conic conformal',\n    projRotate: [15, 0, 0],\n    projParallels: [0, 60]\n  },\n  asia: {\n    lonaxisRange: [22, 160],\n    lataxisRange: [-15, 55],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  },\n  africa: {\n    lonaxisRange: [-30, 60],\n    lataxisRange: [-40, 40],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  },\n  'north america': {\n    lonaxisRange: [-180, -45],\n    lataxisRange: [5, 85],\n    projType: 'conic conformal',\n    projRotate: [-100, 0, 0],\n    projParallels: [29.5, 45.5]\n  },\n  'south america': {\n    lonaxisRange: [-100, -30],\n    lataxisRange: [-60, 15],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  }\n}; // angular pad to avoid rounding error around clip angles\n\nexports.clipPad = 1e-3; // map projection precision\n\nexports.precision = 0.1; // default land and water fill colors\n\nexports.landColor = '#F0DC82';\nexports.waterColor = '#3399FF'; // locationmode to layer name\n\nexports.locationmodeToLayer = {\n  'ISO-3': 'countries',\n  'USA-states': 'subunits',\n  'country names': 'countries'\n}; // SVG element for a sphere (use to frame maps)\n\nexports.sphereSVG = {\n  type: 'Sphere'\n}; // N.B. base layer names must be the same as in the topojson files\n// base layer with a fill color\n\nexports.fillLayers = {\n  ocean: 1,\n  land: 1,\n  lakes: 1\n}; // base layer with a only a line color\n\nexports.lineLayers = {\n  subunits: 1,\n  countries: 1,\n  coastlines: 1,\n  rivers: 1,\n  frame: 1\n};\nexports.layers = ['bg', 'ocean', 'land', 'lakes', 'subunits', 'countries', 'coastlines', 'rivers', 'lataxis', 'lonaxis', 'frame', 'backplot', 'frontplot'];\nexports.layersForChoropleth = ['bg', 'ocean', 'land', 'subunits', 'countries', 'coastlines', 'lataxis', 'lonaxis', 'frame', 'backplot', 'rivers', 'lakes', 'frontplot'];\nexports.layerNameToAdjective = {\n  ocean: 'ocean',\n  land: 'land',\n  lakes: 'lake',\n  subunits: 'subunit',\n  countries: 'country',\n  coastlines: 'coastline',\n  rivers: 'river',\n  frame: 'frame'\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plots/geo/constants.js"],"names":["exports","projNames","axesNames","lonaxisSpan","lataxisSpan","scopeDefaults","world","lonaxisRange","lataxisRange","projType","projRotate","usa","europe","projParallels","asia","africa","clipPad","precision","landColor","waterColor","locationmodeToLayer","sphereSVG","type","fillLayers","ocean","land","lakes","lineLayers","subunits","countries","coastlines","rivers","frame","layers","layersForChoropleth","layerNameToAdjective"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n// projection names to d3 function name\nexports.projNames = {\n    // d3.geo.projection\n    'equirectangular': 'equirectangular',\n    'mercator': 'mercator',\n    'orthographic': 'orthographic',\n    'natural earth': 'naturalEarth',\n    'kavrayskiy7': 'kavrayskiy7',\n    'miller': 'miller',\n    'robinson': 'robinson',\n    'eckert4': 'eckert4',\n    'azimuthal equal area': 'azimuthalEqualArea',\n    'azimuthal equidistant': 'azimuthalEquidistant',\n    'conic equal area': 'conicEqualArea',\n    'conic conformal': 'conicConformal',\n    'conic equidistant': 'conicEquidistant',\n    'gnomonic': 'gnomonic',\n    'stereographic': 'stereographic',\n    'mollweide': 'mollweide',\n    'hammer': 'hammer',\n    'transverse mercator': 'transverseMercator',\n    'albers usa': 'albersUsa',\n    'winkel tripel': 'winkel3',\n    'aitoff': 'aitoff',\n    'sinusoidal': 'sinusoidal'\n};\n\n// name of the axes\nexports.axesNames = ['lonaxis', 'lataxis'];\n\n// max longitudinal angular span (EXPERIMENTAL)\nexports.lonaxisSpan = {\n    'orthographic': 180,\n    'azimuthal equal area': 360,\n    'azimuthal equidistant': 360,\n    'conic conformal': 180,\n    'gnomonic': 160,\n    'stereographic': 180,\n    'transverse mercator': 180,\n    '*': 360\n};\n\n// max latitudinal angular span (EXPERIMENTAL)\nexports.lataxisSpan = {\n    'conic conformal': 150,\n    'stereographic': 179.5,\n    '*': 180\n};\n\n// defaults for each scope\nexports.scopeDefaults = {\n    world: {\n        lonaxisRange: [-180, 180],\n        lataxisRange: [-90, 90],\n        projType: 'equirectangular',\n        projRotate: [0, 0, 0]\n    },\n    usa: {\n        lonaxisRange: [-180, -50],\n        lataxisRange: [15, 80],\n        projType: 'albers usa'\n    },\n    europe: {\n        lonaxisRange: [-30, 60],\n        lataxisRange: [30, 85],\n        projType: 'conic conformal',\n        projRotate: [15, 0, 0],\n        projParallels: [0, 60]\n    },\n    asia: {\n        lonaxisRange: [22, 160],\n        lataxisRange: [-15, 55],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    },\n    africa: {\n        lonaxisRange: [-30, 60],\n        lataxisRange: [-40, 40],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    },\n    'north america': {\n        lonaxisRange: [-180, -45],\n        lataxisRange: [5, 85],\n        projType: 'conic conformal',\n        projRotate: [-100, 0, 0],\n        projParallels: [29.5, 45.5]\n    },\n    'south america': {\n        lonaxisRange: [-100, -30],\n        lataxisRange: [-60, 15],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    }\n};\n\n// angular pad to avoid rounding error around clip angles\nexports.clipPad = 1e-3;\n\n// map projection precision\nexports.precision = 0.1;\n\n// default land and water fill colors\nexports.landColor = '#F0DC82';\nexports.waterColor = '#3399FF';\n\n// locationmode to layer name\nexports.locationmodeToLayer = {\n    'ISO-3': 'countries',\n    'USA-states': 'subunits',\n    'country names': 'countries'\n};\n\n// SVG element for a sphere (use to frame maps)\nexports.sphereSVG = {type: 'Sphere'};\n\n// N.B. base layer names must be the same as in the topojson files\n\n// base layer with a fill color\nexports.fillLayers = {\n    ocean: 1,\n    land: 1,\n    lakes: 1\n};\n\n// base layer with a only a line color\nexports.lineLayers = {\n    subunits: 1,\n    countries: 1,\n    coastlines: 1,\n    rivers: 1,\n    frame: 1\n};\n\nexports.layers = [\n    'bg',\n    'ocean', 'land', 'lakes',\n    'subunits', 'countries', 'coastlines', 'rivers',\n    'lataxis', 'lonaxis', 'frame',\n    'backplot',\n    'frontplot'\n];\n\nexports.layersForChoropleth = [\n    'bg',\n    'ocean', 'land',\n    'subunits', 'countries', 'coastlines',\n    'lataxis', 'lonaxis', 'frame',\n    'backplot',\n    'rivers', 'lakes',\n    'frontplot'\n];\n\nexports.layerNameToAdjective = {\n    ocean: 'ocean',\n    land: 'land',\n    lakes: 'lake',\n    subunits: 'subunit',\n    countries: 'country',\n    coastlines: 'coastline',\n    rivers: 'river',\n    frame: 'frame'\n};\n"]},"metadata":{},"sourceType":"script"}