{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar colorbarAttrs = require('../colorbar/attributes');\n\nvar counterRegex = require('../../lib/regex').counter;\n\nvar palettes = require('./scales.js').scales;\n\nvar paletteStr = Object.keys(palettes);\n\nfunction code(s) {\n  return '`' + s + '`';\n}\n/**\n * Make colorscale attribute declarations for\n *\n * - colorscale,\n * - (c|z)auto, (c|z)min, (c|z)max,\n * - autocolorscale, reversescale,\n * - showscale (optionally)\n * - color (optionally)\n *\n * @param {string} context (dflt: '', i.e. from trace root):\n *     the container this is in ('', *marker*, *marker.line* etc)\n *\n * @param {object} opts:\n *   - cLetter {string} (dflt: 'c'):\n *     leading letter for 'min', 'max and 'auto' attribute (either 'z' or 'c')\n *\n *   - colorAttr {string} (dflt: 'z' if `cLetter: 'z'`, 'color' if `cLetter: 'c'`):\n *     (for descriptions) sets the name of the color attribute that maps to the colorscale.\n *\n *     N.B. if `colorAttr: 'color'`, we include the `color` declaration here.\n *\n *   - onlyIfNumerical {string} (dflt: false' if `cLetter: 'z'`, true if `cLetter: 'c'`):\n *     (for descriptions) set to true if colorscale attribute only\n *\n *   - colorscaleDflt {string}:\n *     overrides the colorscale dflt\n *\n *   - autoColorDflt {boolean} (dflt true):\n *     normally autocolorscale.dflt is `true`, but pass `false` to override\n *\n *   - noScale {boolean} (dflt: true if `context: 'marker.line'`, false otherwise):\n *     set to `false` to not include showscale attribute (e.g. for 'marker.line')\n *\n *   - showScaleDflt {boolean} (dflt: true if `cLetter: 'z'`, false otherwise)\n *\n *   - editTypeOverride {boolean} (dflt: ''):\n *     most of these attributes already require a recalc, but the ones that do not\n *     have editType *style* or *plot* unless you override (presumably with *calc*)\n *\n *   - anim {boolean) (dflt: undefined): is 'color' animatable?\n *\n * @return {object}\n */\n\n\nmodule.exports = function colorScaleAttrs(context, opts) {\n  context = context || '';\n  opts = opts || {};\n  var cLetter = opts.cLetter || 'c';\n  var onlyIfNumerical = 'onlyIfNumerical' in opts ? opts.onlyIfNumerical : Boolean(context);\n  var noScale = 'noScale' in opts ? opts.noScale : context === 'marker.line';\n  var showScaleDflt = 'showScaleDflt' in opts ? opts.showScaleDflt : cLetter === 'z';\n  var colorscaleDflt = typeof opts.colorscaleDflt === 'string' ? palettes[opts.colorscaleDflt] : null;\n  var editTypeOverride = opts.editTypeOverride || '';\n  var contextHead = context ? context + '.' : '';\n  var colorAttr, colorAttrFull;\n\n  if ('colorAttr' in opts) {\n    colorAttr = opts.colorAttr;\n    colorAttrFull = opts.colorAttr;\n  } else {\n    colorAttr = {\n      z: 'z',\n      c: 'color'\n    }[cLetter];\n    colorAttrFull = 'in ' + code(contextHead + colorAttr);\n  }\n\n  var effectDesc = onlyIfNumerical ? ' Has an effect only if ' + colorAttrFull + 'is set to a numerical array.' : '';\n  var auto = cLetter + 'auto';\n  var min = cLetter + 'min';\n  var max = cLetter + 'max';\n  var mid = cLetter + 'mid';\n  var autoFull = code(contextHead + auto);\n  var minFull = code(contextHead + min);\n  var maxFull = code(contextHead + max);\n  var minmaxFull = minFull + ' and ' + maxFull;\n  var autoImpliedEdits = {};\n  autoImpliedEdits[min] = autoImpliedEdits[max] = undefined;\n  var minmaxImpliedEdits = {};\n  minmaxImpliedEdits[auto] = false;\n  var attrs = {};\n\n  if (colorAttr === 'color') {\n    attrs.color = {\n      valType: 'color',\n      arrayOk: true,\n      role: 'style',\n      editType: editTypeOverride || 'style',\n      description: ['Sets the', context, 'color.', ' It accepts either a specific color', ' or an array of numbers that are mapped to the colorscale', ' relative to the max and min values of the array or relative to', ' ' + minmaxFull + ' if set.'].join('')\n    };\n\n    if (opts.anim) {\n      attrs.color.anim = true;\n    }\n  }\n\n  attrs[auto] = {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    editType: 'calc',\n    impliedEdits: autoImpliedEdits,\n    description: ['Determines whether or not the color domain is computed', ' with respect to the input data (here ' + colorAttrFull + ') or the bounds set in', ' ', minmaxFull, ' ', effectDesc, ' Defaults to `false` when ', minmaxFull, ' are set by the user.'].join('')\n  };\n  attrs[min] = {\n    valType: 'number',\n    role: 'info',\n    dflt: null,\n    editType: editTypeOverride || 'plot',\n    impliedEdits: minmaxImpliedEdits,\n    description: ['Sets the lower bound of the color domain.', effectDesc, ' Value should have the same units as ', colorAttrFull, ' and if set, ', maxFull, ' must be set as well.'].join('')\n  };\n  attrs[max] = {\n    valType: 'number',\n    role: 'info',\n    dflt: null,\n    editType: editTypeOverride || 'plot',\n    impliedEdits: minmaxImpliedEdits,\n    description: ['Sets the upper bound of the color domain.', effectDesc, ' Value should have the same units as ', colorAttrFull, ' and if set, ', minFull, ' must be set as well.'].join('')\n  };\n  attrs[mid] = {\n    valType: 'number',\n    role: 'info',\n    dflt: null,\n    editType: 'calc',\n    impliedEdits: autoImpliedEdits,\n    description: ['Sets the mid-point of the color domain by scaling ', minFull, ' and/or ', maxFull, ' to be equidistant to this point.', effectDesc, ' Value should have the same units as ', colorAttrFull, '. ', 'Has no effect when ', autoFull, ' is `false`.'].join('')\n  };\n  attrs.colorscale = {\n    valType: 'colorscale',\n    role: 'style',\n    editType: 'calc',\n    dflt: colorscaleDflt,\n    impliedEdits: {\n      autocolorscale: false\n    },\n    description: ['Sets the colorscale.', effectDesc, ' The colorscale must be an array containing', ' arrays mapping a normalized value to an', ' rgb, rgba, hex, hsl, hsv, or named color string.', ' At minimum, a mapping for the lowest (0) and highest (1)', ' values are required. For example,', ' `[[0, \\'rgb(0,0,255)\\'], [1, \\'rgb(255,0,0)\\']]`.', ' To control the bounds of the colorscale in color space,', ' use', minmaxFull, '.', ' Alternatively, `colorscale` may be a palette name string', ' of the following list: ' + paletteStr + '.'].join('')\n  };\n  attrs.autocolorscale = {\n    valType: 'boolean',\n    role: 'style',\n    // gets overrode in 'heatmap' & 'surface' for backwards comp.\n    dflt: opts.autoColorDflt === false ? false : true,\n    editType: 'calc',\n    impliedEdits: {\n      colorscale: undefined\n    },\n    description: ['Determines whether the colorscale is a default palette (`autocolorscale: true`)', ' or the palette determined by ', code(contextHead + 'colorscale'), '.', effectDesc, ' In case `colorscale` is unspecified or `autocolorscale` is true, the default ', ' palette will be chosen according to whether numbers in the `color` array are', ' all positive, all negative or mixed.'].join('')\n  };\n  attrs.reversescale = {\n    valType: 'boolean',\n    role: 'style',\n    dflt: false,\n    editType: 'plot',\n    description: ['Reverses the color mapping if true.', effectDesc, ' If true, ', minFull, ' will correspond to the last color', ' in the array and ', maxFull, ' will correspond to the first color.'].join('')\n  };\n\n  if (!noScale) {\n    attrs.showscale = {\n      valType: 'boolean',\n      role: 'info',\n      dflt: showScaleDflt,\n      editType: 'calc',\n      description: ['Determines whether or not a colorbar is displayed for this trace.', effectDesc].join('')\n    };\n    attrs.colorbar = colorbarAttrs;\n  }\n\n  if (!opts.noColorAxis) {\n    attrs.coloraxis = {\n      valType: 'subplotid',\n      role: 'info',\n      regex: counterRegex('coloraxis'),\n      dflt: null,\n      editType: 'calc',\n      description: ['Sets a reference to a shared color axis.', 'References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc.', 'Settings for these shared color axes are set in the layout, under', '`layout.coloraxis`, `layout.coloraxis2`, etc.', 'Note that multiple color scales can be linked to the same color axis.'].join(' ')\n    };\n  }\n\n  return attrs;\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/components/colorscale/attributes.js"],"names":["colorbarAttrs","require","counterRegex","counter","palettes","scales","paletteStr","Object","keys","code","s","module","exports","colorScaleAttrs","context","opts","cLetter","onlyIfNumerical","Boolean","noScale","showScaleDflt","colorscaleDflt","editTypeOverride","contextHead","colorAttr","colorAttrFull","z","c","effectDesc","auto","min","max","mid","autoFull","minFull","maxFull","minmaxFull","autoImpliedEdits","undefined","minmaxImpliedEdits","attrs","color","valType","arrayOk","role","editType","description","join","anim","dflt","impliedEdits","colorscale","autocolorscale","autoColorDflt","reversescale","showscale","colorbar","noColorAxis","coloraxis","regex"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorbarAttrs = require('../colorbar/attributes');\nvar counterRegex = require('../../lib/regex').counter;\n\nvar palettes = require('./scales.js').scales;\nvar paletteStr = Object.keys(palettes);\n\nfunction code(s) {\n    return '`' + s + '`';\n}\n\n/**\n * Make colorscale attribute declarations for\n *\n * - colorscale,\n * - (c|z)auto, (c|z)min, (c|z)max,\n * - autocolorscale, reversescale,\n * - showscale (optionally)\n * - color (optionally)\n *\n * @param {string} context (dflt: '', i.e. from trace root):\n *     the container this is in ('', *marker*, *marker.line* etc)\n *\n * @param {object} opts:\n *   - cLetter {string} (dflt: 'c'):\n *     leading letter for 'min', 'max and 'auto' attribute (either 'z' or 'c')\n *\n *   - colorAttr {string} (dflt: 'z' if `cLetter: 'z'`, 'color' if `cLetter: 'c'`):\n *     (for descriptions) sets the name of the color attribute that maps to the colorscale.\n *\n *     N.B. if `colorAttr: 'color'`, we include the `color` declaration here.\n *\n *   - onlyIfNumerical {string} (dflt: false' if `cLetter: 'z'`, true if `cLetter: 'c'`):\n *     (for descriptions) set to true if colorscale attribute only\n *\n *   - colorscaleDflt {string}:\n *     overrides the colorscale dflt\n *\n *   - autoColorDflt {boolean} (dflt true):\n *     normally autocolorscale.dflt is `true`, but pass `false` to override\n *\n *   - noScale {boolean} (dflt: true if `context: 'marker.line'`, false otherwise):\n *     set to `false` to not include showscale attribute (e.g. for 'marker.line')\n *\n *   - showScaleDflt {boolean} (dflt: true if `cLetter: 'z'`, false otherwise)\n *\n *   - editTypeOverride {boolean} (dflt: ''):\n *     most of these attributes already require a recalc, but the ones that do not\n *     have editType *style* or *plot* unless you override (presumably with *calc*)\n *\n *   - anim {boolean) (dflt: undefined): is 'color' animatable?\n *\n * @return {object}\n */\nmodule.exports = function colorScaleAttrs(context, opts) {\n    context = context || '';\n    opts = opts || {};\n\n    var cLetter = opts.cLetter || 'c';\n    var onlyIfNumerical = ('onlyIfNumerical' in opts) ? opts.onlyIfNumerical : Boolean(context);\n    var noScale = ('noScale' in opts) ? opts.noScale : context === 'marker.line';\n    var showScaleDflt = ('showScaleDflt' in opts) ? opts.showScaleDflt : cLetter === 'z';\n    var colorscaleDflt = typeof opts.colorscaleDflt === 'string' ? palettes[opts.colorscaleDflt] : null;\n    var editTypeOverride = opts.editTypeOverride || '';\n    var contextHead = context ? (context + '.') : '';\n\n    var colorAttr, colorAttrFull;\n\n    if('colorAttr' in opts) {\n        colorAttr = opts.colorAttr;\n        colorAttrFull = opts.colorAttr;\n    } else {\n        colorAttr = {z: 'z', c: 'color'}[cLetter];\n        colorAttrFull = 'in ' + code(contextHead + colorAttr);\n    }\n\n    var effectDesc = onlyIfNumerical ?\n        ' Has an effect only if ' + colorAttrFull + 'is set to a numerical array.' :\n        '';\n\n    var auto = cLetter + 'auto';\n    var min = cLetter + 'min';\n    var max = cLetter + 'max';\n    var mid = cLetter + 'mid';\n    var autoFull = code(contextHead + auto);\n    var minFull = code(contextHead + min);\n    var maxFull = code(contextHead + max);\n    var minmaxFull = minFull + ' and ' + maxFull;\n    var autoImpliedEdits = {};\n    autoImpliedEdits[min] = autoImpliedEdits[max] = undefined;\n    var minmaxImpliedEdits = {};\n    minmaxImpliedEdits[auto] = false;\n\n    var attrs = {};\n\n    if(colorAttr === 'color') {\n        attrs.color = {\n            valType: 'color',\n            arrayOk: true,\n            role: 'style',\n            editType: editTypeOverride || 'style',\n            description: [\n                'Sets the', context, 'color.',\n                ' It accepts either a specific color',\n                ' or an array of numbers that are mapped to the colorscale',\n                ' relative to the max and min values of the array or relative to',\n                ' ' + minmaxFull + ' if set.'\n            ].join('')\n        };\n\n        if(opts.anim) {\n            attrs.color.anim = true;\n        }\n    }\n\n    attrs[auto] = {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        impliedEdits: autoImpliedEdits,\n        description: [\n            'Determines whether or not the color domain is computed',\n            ' with respect to the input data (here ' + colorAttrFull + ') or the bounds set in',\n            ' ', minmaxFull,\n            ' ', effectDesc,\n            ' Defaults to `false` when ', minmaxFull, ' are set by the user.'\n        ].join('')\n    };\n\n    attrs[min] = {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: editTypeOverride || 'plot',\n        impliedEdits: minmaxImpliedEdits,\n        description: [\n            'Sets the lower bound of the color domain.',\n            effectDesc,\n            ' Value should have the same units as ', colorAttrFull,\n            ' and if set, ', maxFull, ' must be set as well.'\n        ].join('')\n    };\n\n    attrs[max] = {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: editTypeOverride || 'plot',\n        impliedEdits: minmaxImpliedEdits,\n        description: [\n            'Sets the upper bound of the color domain.',\n            effectDesc,\n            ' Value should have the same units as ', colorAttrFull,\n            ' and if set, ', minFull, ' must be set as well.'\n        ].join('')\n    };\n\n    attrs[mid] = {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: 'calc',\n        impliedEdits: autoImpliedEdits,\n        description: [\n            'Sets the mid-point of the color domain by scaling ', minFull,\n            ' and/or ', maxFull, ' to be equidistant to this point.',\n            effectDesc,\n            ' Value should have the same units as ', colorAttrFull, '. ',\n            'Has no effect when ', autoFull, ' is `false`.'\n        ].join('')\n    };\n\n    attrs.colorscale = {\n        valType: 'colorscale',\n        role: 'style',\n        editType: 'calc',\n        dflt: colorscaleDflt,\n        impliedEdits: {autocolorscale: false},\n        description: [\n            'Sets the colorscale.',\n            effectDesc,\n            ' The colorscale must be an array containing',\n            ' arrays mapping a normalized value to an',\n            ' rgb, rgba, hex, hsl, hsv, or named color string.',\n            ' At minimum, a mapping for the lowest (0) and highest (1)',\n            ' values are required. For example,',\n            ' `[[0, \\'rgb(0,0,255)\\'], [1, \\'rgb(255,0,0)\\']]`.',\n            ' To control the bounds of the colorscale in color space,',\n            ' use', minmaxFull, '.',\n            ' Alternatively, `colorscale` may be a palette name string',\n            ' of the following list: ' + paletteStr + '.'\n        ].join('')\n    };\n\n    attrs.autocolorscale = {\n        valType: 'boolean',\n        role: 'style',\n        // gets overrode in 'heatmap' & 'surface' for backwards comp.\n        dflt: opts.autoColorDflt === false ? false : true,\n        editType: 'calc',\n        impliedEdits: {colorscale: undefined},\n        description: [\n            'Determines whether the colorscale is a default palette (`autocolorscale: true`)',\n            ' or the palette determined by ', code(contextHead + 'colorscale'), '.',\n            effectDesc,\n            ' In case `colorscale` is unspecified or `autocolorscale` is true, the default ',\n            ' palette will be chosen according to whether numbers in the `color` array are',\n            ' all positive, all negative or mixed.'\n        ].join('')\n    };\n\n    attrs.reversescale = {\n        valType: 'boolean',\n        role: 'style',\n        dflt: false,\n        editType: 'plot',\n        description: [\n            'Reverses the color mapping if true.',\n            effectDesc,\n            ' If true, ', minFull, ' will correspond to the last color',\n            ' in the array and ', maxFull, ' will correspond to the first color.'\n        ].join('')\n    };\n\n    if(!noScale) {\n        attrs.showscale = {\n            valType: 'boolean',\n            role: 'info',\n            dflt: showScaleDflt,\n            editType: 'calc',\n            description: [\n                'Determines whether or not a colorbar is displayed for this trace.',\n                effectDesc\n            ].join('')\n        };\n\n        attrs.colorbar = colorbarAttrs;\n    }\n\n    if(!opts.noColorAxis) {\n        attrs.coloraxis = {\n            valType: 'subplotid',\n            role: 'info',\n            regex: counterRegex('coloraxis'),\n            dflt: null,\n            editType: 'calc',\n            description: [\n                'Sets a reference to a shared color axis.',\n                'References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc.',\n                'Settings for these shared color axes are set in the layout, under',\n                '`layout.coloraxis`, `layout.coloraxis2`, etc.',\n                'Note that multiple color scales can be linked to the same color axis.'\n            ].join(' ')\n        };\n    }\n\n    return attrs;\n};\n"]},"metadata":{},"sourceType":"script"}