{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\n\nvar DATE_FORMAT_LINK = require('../../constants/docs').TIME_FORMAT_LINK;\n\nmodule.exports = {\n  color: {\n    valType: 'color',\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets default for all colors associated with this axis', 'all at once: line, font, tick, and grid colors.', 'Grid color is lightened by blending this with the plot background', 'Individual pieces can override this.'].join(' ')\n  },\n  smoothing: {\n    valType: 'number',\n    dflt: 1,\n    min: 0,\n    max: 1.3,\n    role: 'info',\n    editType: 'calc'\n  },\n  title: {\n    text: {\n      valType: 'string',\n      dflt: '',\n      role: 'info',\n      editType: 'calc',\n      description: ['Sets the title of this axis.', 'Note that before the existence of `title.text`, the title\\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')\n    },\n    font: fontAttrs({\n      editType: 'calc',\n      description: ['Sets this axis\\' title font.', 'Note that the title\\'s font used to be set', 'by the now deprecated `titlefont` attribute.'].join(' ')\n    }),\n    // TODO how is this different than `title.standoff`\n    offset: {\n      valType: 'number',\n      role: 'info',\n      dflt: 10,\n      editType: 'calc',\n      description: ['An additional amount by which to offset the title from the tick', 'labels, given in pixels.', 'Note that this used to be set', 'by the now deprecated `titleoffset` attribute.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  type: {\n    valType: 'enumerated',\n    // '-' means we haven't yet run autotype or couldn't find any data\n    // it gets turned into linear in gd._fullLayout but not copied back\n    // to gd.data like the others are.\n    values: ['-', 'linear', 'date', 'category'],\n    dflt: '-',\n    role: 'info',\n    editType: 'calc',\n    description: ['Sets the axis type.', 'By default, plotly attempts to determined the axis type', 'by looking into the data of the traces that referenced', 'the axis in question.'].join(' ')\n  },\n  autotypenumbers: axesAttrs.autotypenumbers,\n  autorange: {\n    valType: 'enumerated',\n    values: [true, false, 'reversed'],\n    dflt: true,\n    role: 'style',\n    editType: 'calc',\n    description: ['Determines whether or not the range of this axis is', 'computed in relation to the input data.', 'See `rangemode` for more info.', 'If `range` is provided, then `autorange` is set to *false*.'].join(' ')\n  },\n  rangemode: {\n    valType: 'enumerated',\n    values: ['normal', 'tozero', 'nonnegative'],\n    dflt: 'normal',\n    role: 'style',\n    editType: 'calc',\n    description: ['If *normal*, the range is computed in relation to the extrema', 'of the input data.', 'If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.'].join(' ')\n  },\n  range: {\n    valType: 'info_array',\n    role: 'info',\n    editType: 'calc',\n    items: [{\n      valType: 'any',\n      editType: 'calc'\n    }, {\n      valType: 'any',\n      editType: 'calc'\n    }],\n    description: ['Sets the range of this axis.', 'If the axis `type` is *log*, then you must take the log of your', 'desired range (e.g. to set the range from 1 to 100,', 'set the range from 0 to 2).', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')\n  },\n  fixedrange: {\n    valType: 'boolean',\n    dflt: false,\n    role: 'info',\n    editType: 'calc',\n    description: ['Determines whether or not this axis is zoom-able.', 'If true, then zoom is disabled.'].join(' ')\n  },\n  cheatertype: {\n    valType: 'enumerated',\n    values: ['index', 'value'],\n    dflt: 'value',\n    role: 'info',\n    editType: 'calc'\n  },\n  tickmode: {\n    valType: 'enumerated',\n    values: ['linear', 'array'],\n    dflt: 'array',\n    role: 'info',\n    editType: 'calc'\n  },\n  nticks: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    role: 'style',\n    editType: 'calc',\n    description: ['Specifies the maximum number of ticks for the particular axis.', 'The actual number of ticks will be chosen automatically to be', 'less than or equal to `nticks`.', 'Has an effect only if `tickmode` is set to *auto*.'].join(' ')\n  },\n  tickvals: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values at which ticks on this axis appear.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `ticktext`.'].join(' ')\n  },\n  ticktext: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the text displayed at the ticks position via `tickvals`.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `tickvals`.'].join(' ')\n  },\n  showticklabels: {\n    valType: 'enumerated',\n    values: ['start', 'end', 'both', 'none'],\n    dflt: 'start',\n    role: 'style',\n    editType: 'calc',\n    description: ['Determines whether axis labels are drawn on the low side,', 'the high side, both, or neither side of the axis.'].join(' ')\n  },\n  tickfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the tick font.'\n  }),\n  tickangle: {\n    valType: 'angle',\n    dflt: 'auto',\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets the angle of the tick labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the tick labels', 'vertically.'].join(' ')\n  },\n  tickprefix: {\n    valType: 'string',\n    dflt: '',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets a tick label prefix.'\n  },\n  showtickprefix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    role: 'style',\n    editType: 'calc',\n    description: ['If *all*, all tick labels are displayed with a prefix.', 'If *first*, only the first tick is displayed with a prefix.', 'If *last*, only the last tick is displayed with a suffix.', 'If *none*, tick prefixes are hidden.'].join(' ')\n  },\n  ticksuffix: {\n    valType: 'string',\n    dflt: '',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets a tick label suffix.'\n  },\n  showticksuffix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    role: 'style',\n    editType: 'calc',\n    description: 'Same as `showtickprefix` but for tick suffixes.'\n  },\n  showexponent: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    role: 'style',\n    editType: 'calc',\n    description: ['If *all*, all exponents are shown besides their significands.', 'If *first*, only the exponent of the first tick is shown.', 'If *last*, only the exponent of the last tick is shown.', 'If *none*, no exponents appear.'].join(' ')\n  },\n  exponentformat: {\n    valType: 'enumerated',\n    values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n    dflt: 'B',\n    role: 'style',\n    editType: 'calc',\n    description: ['Determines a formatting rule for the tick exponents.', 'For example, consider the number 1,000,000,000.', 'If *none*, it appears as 1,000,000,000.', 'If *e*, 1e+9.', 'If *E*, 1E+9.', 'If *power*, 1x10^9 (with 9 in a super script).', 'If *SI*, 1G.', 'If *B*, 1B.'].join(' ')\n  },\n  minexponent: {\n    valType: 'number',\n    dflt: 3,\n    min: 0,\n    role: 'style',\n    editType: 'calc',\n    description: ['Hide SI prefix for 10^n if |n| is below this number'].join(' ')\n  },\n  separatethousands: {\n    valType: 'boolean',\n    dflt: false,\n    role: 'style',\n    editType: 'calc',\n    description: ['If \"true\", even 4-digit integers are separated'].join(' ')\n  },\n  tickformat: {\n    valType: 'string',\n    dflt: '',\n    role: 'style',\n    editType: 'calc',\n    description: ['Sets the tick label formatting rule using d3 formatting mini-languages', 'which are very similar to those in Python. For numbers, see:', FORMAT_LINK, 'And for dates see:', DATE_FORMAT_LINK, 'We add one item to d3\\'s date formatter: *%{n}f* for fractional seconds', 'with n digits. For example, *2016-10-13 09:15:23.456* with tickformat', '*%H~%M~%S.%2f* would display *09~15~23.46*'].join(' ')\n  },\n  tickformatstops: overrideAll(axesAttrs.tickformatstops, 'calc', 'from-root'),\n  categoryorder: {\n    valType: 'enumerated',\n    values: ['trace', 'category ascending', 'category descending', 'array'\n    /* , 'value ascending', 'value descending'*/\n    // value ascending / descending to be implemented later\n    ],\n    dflt: 'trace',\n    role: 'info',\n    editType: 'calc',\n    description: ['Specifies the ordering logic for the case of categorical variables.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.',\n    /* 'Set `categoryorder` to *value ascending* or *value descending* if order should be determined by the',\n    'numerical order of the values.',*/\n    // // value ascending / descending to be implemented later\n    'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n  },\n  categoryarray: {\n    valType: 'data_array',\n    role: 'info',\n    editType: 'calc',\n    description: ['Sets the order in which categories on this axis appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n  },\n  labelpadding: {\n    valType: 'integer',\n    role: 'style',\n    dflt: 10,\n    editType: 'calc',\n    description: 'Extra padding between label and the axis'\n  },\n  labelprefix: {\n    valType: 'string',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets a axis label prefix.'\n  },\n  labelsuffix: {\n    valType: 'string',\n    dflt: '',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets a axis label suffix.'\n  },\n  // lines and grids\n  showline: {\n    valType: 'boolean',\n    dflt: false,\n    role: 'style',\n    editType: 'calc',\n    description: ['Determines whether or not a line bounding this axis is drawn.'].join(' ')\n  },\n  linecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the axis line color.'\n  },\n  linewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  gridcolor: {\n    valType: 'color',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the axis line color.'\n  },\n  gridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  showgrid: {\n    valType: 'boolean',\n    role: 'style',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not grid lines are drawn.', 'If *true*, the grid lines are drawn at every tick mark.'].join(' ')\n  },\n  minorgridcount: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    role: 'info',\n    editType: 'calc',\n    description: 'Sets the number of minor grid ticks per major grid tick'\n  },\n  minorgridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the width (in px) of the grid lines.'\n  },\n  minorgridcolor: {\n    valType: 'color',\n    dflt: colorAttrs.lightLine,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the color of the grid lines.'\n  },\n  startline: {\n    valType: 'boolean',\n    role: 'style',\n    editType: 'calc',\n    description: ['Determines whether or not a line is drawn at along the starting value', 'of this axis.', 'If *true*, the start line is drawn on top of the grid lines.'].join(' ')\n  },\n  startlinecolor: {\n    valType: 'color',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the line color of the start line.'\n  },\n  startlinewidth: {\n    valType: 'number',\n    dflt: 1,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the width (in px) of the start line.'\n  },\n  endline: {\n    valType: 'boolean',\n    role: 'style',\n    editType: 'calc',\n    description: ['Determines whether or not a line is drawn at along the final value', 'of this axis.', 'If *true*, the end line is drawn on top of the grid lines.'].join(' ')\n  },\n  endlinewidth: {\n    valType: 'number',\n    dflt: 1,\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the width (in px) of the end line.'\n  },\n  endlinecolor: {\n    valType: 'color',\n    role: 'style',\n    editType: 'calc',\n    description: 'Sets the line color of the end line.'\n  },\n  tick0: {\n    valType: 'number',\n    min: 0,\n    dflt: 0,\n    role: 'info',\n    editType: 'calc',\n    description: 'The starting index of grid lines along the axis'\n  },\n  dtick: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'info',\n    editType: 'calc',\n    description: 'The stride between grid lines along the axis'\n  },\n  arraytick0: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    role: 'info',\n    editType: 'calc',\n    description: 'The starting index of grid lines along the axis'\n  },\n  arraydtick: {\n    valType: 'integer',\n    min: 1,\n    dflt: 1,\n    role: 'info',\n    editType: 'calc',\n    description: 'The stride between grid lines along the axis'\n  },\n  _deprecated: {\n    title: {\n      valType: 'string',\n      role: 'info',\n      editType: 'calc',\n      description: ['Deprecated in favor of `title.text`.', 'Note that value of `title` is no longer a simple', '*string* but a set of sub-attributes.'].join(' ')\n    },\n    titlefont: fontAttrs({\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.font`.'\n    }),\n    titleoffset: {\n      valType: 'number',\n      role: 'info',\n      dflt: 10,\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.offset`.'\n    }\n  },\n  editType: 'calc'\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/carpet/axis_attributes.js"],"names":["fontAttrs","require","colorAttrs","axesAttrs","overrideAll","FORMAT_LINK","DATE_FORMAT_LINK","TIME_FORMAT_LINK","module","exports","color","valType","role","editType","description","join","smoothing","dflt","min","max","title","text","font","offset","type","values","autotypenumbers","autorange","rangemode","range","items","fixedrange","cheatertype","tickmode","nticks","tickvals","ticktext","showticklabels","tickfont","tickangle","tickprefix","showtickprefix","ticksuffix","showticksuffix","showexponent","exponentformat","minexponent","separatethousands","tickformat","tickformatstops","categoryorder","categoryarray","labelpadding","labelprefix","labelsuffix","showline","linecolor","defaultLine","linewidth","gridcolor","gridwidth","showgrid","minorgridcount","minorgridwidth","minorgridcolor","lightLine","startline","startlinecolor","startlinewidth","endline","endlinewidth","endlinecolor","tick0","dtick","arraytick0","arraydtick","_deprecated","titlefont","titleoffset"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar FORMAT_LINK = require('../../constants/docs').FORMAT_LINK;\nvar DATE_FORMAT_LINK = require('../../constants/docs').TIME_FORMAT_LINK;\n\nmodule.exports = {\n    color: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets default for all colors associated with this axis',\n            'all at once: line, font, tick, and grid colors.',\n            'Grid color is lightened by blending this with the plot background',\n            'Individual pieces can override this.'\n        ].join(' ')\n    },\n    smoothing: {\n        valType: 'number',\n        dflt: 1,\n        min: 0,\n        max: 1.3,\n        role: 'info',\n        editType: 'calc'\n    },\n    title: {\n        text: {\n            valType: 'string',\n            dflt: '',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Sets the title of this axis.',\n                'Note that before the existence of `title.text`, the title\\'s',\n                'contents used to be defined as the `title` attribute itself.',\n                'This behavior has been deprecated.'\n            ].join(' ')\n        },\n        font: fontAttrs({\n            editType: 'calc',\n            description: [\n                'Sets this axis\\' title font.',\n                'Note that the title\\'s font used to be set',\n                'by the now deprecated `titlefont` attribute.'\n            ].join(' ')\n        }),\n        // TODO how is this different than `title.standoff`\n        offset: {\n            valType: 'number',\n            role: 'info',\n            dflt: 10,\n            editType: 'calc',\n            description: [\n                'An additional amount by which to offset the title from the tick',\n                'labels, given in pixels.',\n                'Note that this used to be set',\n                'by the now deprecated `titleoffset` attribute.'\n            ].join(' '),\n        },\n        editType: 'calc',\n    },\n    type: {\n        valType: 'enumerated',\n        // '-' means we haven't yet run autotype or couldn't find any data\n        // it gets turned into linear in gd._fullLayout but not copied back\n        // to gd.data like the others are.\n        values: ['-', 'linear', 'date', 'category'],\n        dflt: '-',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the axis type.',\n            'By default, plotly attempts to determined the axis type',\n            'by looking into the data of the traces that referenced',\n            'the axis in question.'\n        ].join(' ')\n    },\n    autotypenumbers: axesAttrs.autotypenumbers,\n    autorange: {\n        valType: 'enumerated',\n        values: [true, false, 'reversed'],\n        dflt: true,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not the range of this axis is',\n            'computed in relation to the input data.',\n            'See `rangemode` for more info.',\n            'If `range` is provided, then `autorange` is set to *false*.'\n        ].join(' ')\n    },\n    rangemode: {\n        valType: 'enumerated',\n        values: ['normal', 'tozero', 'nonnegative'],\n        dflt: 'normal',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data.',\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.'\n        ].join(' ')\n    },\n    range: {\n        valType: 'info_array',\n        role: 'info',\n        editType: 'calc',\n        items: [\n            {valType: 'any', editType: 'calc'},\n            {valType: 'any', editType: 'calc'}\n        ],\n        description: [\n            'Sets the range of this axis.',\n            'If the axis `type` is *log*, then you must take the log of your',\n            'desired range (e.g. to set the range from 1 to 100,',\n            'set the range from 0 to 2).',\n            'If the axis `type` is *date*, it should be date strings,',\n            'like date data, though Date objects and unix milliseconds',\n            'will be accepted and converted to strings.',\n            'If the axis `type` is *category*, it should be numbers,',\n            'using the scale where each category is assigned a serial',\n            'number from zero in the order it appears.'\n        ].join(' ')\n    },\n\n    fixedrange: {\n        valType: 'boolean',\n        dflt: false,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Determines whether or not this axis is zoom-able.',\n            'If true, then zoom is disabled.'\n        ].join(' ')\n    },\n    cheatertype: {\n        valType: 'enumerated',\n        values: ['index', 'value'],\n        dflt: 'value',\n        role: 'info',\n        editType: 'calc'\n    },\n    tickmode: {\n        valType: 'enumerated',\n        values: ['linear', 'array'],\n        dflt: 'array',\n        role: 'info',\n        editType: 'calc'\n    },\n    nticks: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Specifies the maximum number of ticks for the particular axis.',\n            'The actual number of ticks will be chosen automatically to be',\n            'less than or equal to `nticks`.',\n            'Has an effect only if `tickmode` is set to *auto*.'\n        ].join(' ')\n    },\n    tickvals: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the values at which ticks on this axis appear.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `ticktext`.'\n        ].join(' ')\n    },\n    ticktext: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the text displayed at the ticks position via `tickvals`.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `tickvals`.'\n        ].join(' ')\n    },\n    showticklabels: {\n        valType: 'enumerated',\n        values: ['start', 'end', 'both', 'none'],\n        dflt: 'start',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether axis labels are drawn on the low side,',\n            'the high side, both, or neither side of the axis.'\n        ].join(' ')\n    },\n    tickfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the tick font.'\n    }),\n    tickangle: {\n        valType: 'angle',\n        dflt: 'auto',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the angle of the tick labels with respect to the horizontal.',\n            'For example, a `tickangle` of -90 draws the tick labels',\n            'vertically.'\n        ].join(' ')\n    },\n    tickprefix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a tick label prefix.'\n    },\n    showtickprefix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *all*, all tick labels are displayed with a prefix.',\n            'If *first*, only the first tick is displayed with a prefix.',\n            'If *last*, only the last tick is displayed with a suffix.',\n            'If *none*, tick prefixes are hidden.'\n        ].join(' ')\n    },\n    ticksuffix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a tick label suffix.'\n    },\n    showticksuffix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        role: 'style',\n        editType: 'calc',\n        description: 'Same as `showtickprefix` but for tick suffixes.'\n    },\n    showexponent: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *all*, all exponents are shown besides their significands.',\n            'If *first*, only the exponent of the first tick is shown.',\n            'If *last*, only the exponent of the last tick is shown.',\n            'If *none*, no exponents appear.'\n        ].join(' ')\n    },\n    exponentformat: {\n        valType: 'enumerated',\n        values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n        dflt: 'B',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines a formatting rule for the tick exponents.',\n            'For example, consider the number 1,000,000,000.',\n            'If *none*, it appears as 1,000,000,000.',\n            'If *e*, 1e+9.',\n            'If *E*, 1E+9.',\n            'If *power*, 1x10^9 (with 9 in a super script).',\n            'If *SI*, 1G.',\n            'If *B*, 1B.'\n        ].join(' ')\n    },\n    minexponent: {\n        valType: 'number',\n        dflt: 3,\n        min: 0,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Hide SI prefix for 10^n if |n| is below this number'\n        ].join(' ')\n    },\n    separatethousands: {\n        valType: 'boolean',\n        dflt: false,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If \"true\", even 4-digit integers are separated'\n        ].join(' ')\n    },\n    tickformat: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the tick label formatting rule using d3 formatting mini-languages',\n            'which are very similar to those in Python. For numbers, see:',\n            FORMAT_LINK,\n            'And for dates see:',\n            DATE_FORMAT_LINK,\n            'We add one item to d3\\'s date formatter: *%{n}f* for fractional seconds',\n            'with n digits. For example, *2016-10-13 09:15:23.456* with tickformat',\n            '*%H~%M~%S.%2f* would display *09~15~23.46*'\n        ].join(' ')\n    },\n    tickformatstops: overrideAll(axesAttrs.tickformatstops, 'calc', 'from-root'),\n    categoryorder: {\n        valType: 'enumerated',\n        values: [\n            'trace', 'category ascending', 'category descending', 'array'\n            /* , 'value ascending', 'value descending'*/ // value ascending / descending to be implemented later\n        ],\n        dflt: 'trace',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Specifies the ordering logic for the case of categorical variables.',\n            'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n            'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n            'the alphanumerical order of the category names.',\n            /* 'Set `categoryorder` to *value ascending* or *value descending* if order should be determined by the',\n            'numerical order of the values.',*/ // // value ascending / descending to be implemented later\n            'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n            'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n            'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'\n        ].join(' ')\n    },\n    categoryarray: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the order in which categories on this axis appear.',\n            'Only has an effect if `categoryorder` is set to *array*.',\n            'Used with `categoryorder`.'\n        ].join(' ')\n    },\n    labelpadding: {\n        valType: 'integer',\n        role: 'style',\n        dflt: 10,\n        editType: 'calc',\n        description: 'Extra padding between label and the axis'\n    },\n    labelprefix: {\n        valType: 'string',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a axis label prefix.'\n    },\n    labelsuffix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a axis label suffix.'\n    },\n    // lines and grids\n    showline: {\n        valType: 'boolean',\n        dflt: false,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line bounding this axis is drawn.'\n        ].join(' ')\n    },\n    linecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the axis line color.'\n    },\n    linewidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    gridcolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the axis line color.'\n    },\n    gridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    showgrid: {\n        valType: 'boolean',\n        role: 'style',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not grid lines are drawn.',\n            'If *true*, the grid lines are drawn at every tick mark.'\n        ].join(' ')\n    },\n    minorgridcount: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'calc',\n        description: 'Sets the number of minor grid ticks per major grid tick'\n    },\n    minorgridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the grid lines.'\n    },\n    minorgridcolor: {\n        valType: 'color',\n        dflt: colorAttrs.lightLine,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the color of the grid lines.'\n    },\n    startline: {\n        valType: 'boolean',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line is drawn at along the starting value',\n            'of this axis.',\n            'If *true*, the start line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    startlinecolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the line color of the start line.'\n    },\n    startlinewidth: {\n        valType: 'number',\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the start line.'\n    },\n    endline: {\n        valType: 'boolean',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line is drawn at along the final value',\n            'of this axis.',\n            'If *true*, the end line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    endlinewidth: {\n        valType: 'number',\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the end line.'\n    },\n    endlinecolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the line color of the end line.'\n    },\n    tick0: {\n        valType: 'number',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'calc',\n        description: 'The starting index of grid lines along the axis'\n    },\n    dtick: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'info',\n        editType: 'calc',\n        description: 'The stride between grid lines along the axis'\n    },\n    arraytick0: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'calc',\n        description: 'The starting index of grid lines along the axis'\n    },\n    arraydtick: {\n        valType: 'integer',\n        min: 1,\n        dflt: 1,\n        role: 'info',\n        editType: 'calc',\n        description: 'The stride between grid lines along the axis'\n    },\n\n    _deprecated: {\n        title: {\n            valType: 'string',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Deprecated in favor of `title.text`.',\n                'Note that value of `title` is no longer a simple',\n                '*string* but a set of sub-attributes.'\n            ].join(' ')\n        },\n        titlefont: fontAttrs({\n            editType: 'calc',\n            description: 'Deprecated in favor of `title.font`.'\n        }),\n        titleoffset: {\n            valType: 'number',\n            role: 'info',\n            dflt: 10,\n            editType: 'calc',\n            description: 'Deprecated in favor of `title.offset`.'\n        }\n    },\n\n    editType: 'calc'\n};\n"]},"metadata":{},"sourceType":"script"}