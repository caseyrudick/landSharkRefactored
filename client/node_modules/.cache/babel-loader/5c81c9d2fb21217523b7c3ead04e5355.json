{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingWellPlans = ({\n  getWellPlansFromJSONDbReducer\n}) => {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  const [grid, setGrid] = useState([]); // useEffect(()=> {\n  //   if (getWellPlansFromJSONDbReducer.status === \"received\") {\n  //     let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //     setPlans(planFromReducerCopy)\n  //     // convertSurveyNumberStringsToNumbers();\n  //   }\n  // },[getWellPlansFromJSONDbReducer.status])\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const createGridFromPlans = () => {\n    let plansCopy = [...getWellPlansFromJSONDbReducer.response];\n    let gridFromPlans = [[{\n      value: '',\n      readOnly: true,\n      width: '3rem'\n    }, {\n      value: 'Measured Depth',\n      readOnly: true,\n      width: '10rem'\n    }, {\n      value: 'Inclination',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'Azimuth',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'TVD',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'NS',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'EW',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'SECT',\n      readOnly: true,\n      width: '7rem'\n    }, {\n      value: 'DLS',\n      readOnly: true,\n      width: '7rem'\n    }]]; // const plansCopy = [...plans]\n\n    plansCopy.forEach((row, index) => {\n      // console.log(\"row:\")\n      // console.log(row)\n      if (index === 0) {\n        return null;\n      }\n\n      const planRow = [{\n        readOnly: true,\n        value: row[0].value\n      }, {\n        readOnly: true,\n        value: row[1].value\n      }, {\n        readOnly: true,\n        value: row[2].value\n      }, {\n        readOnly: true,\n        value: row[3].value\n      }, {\n        readOnly: true,\n        value: row[4].value\n      }, {\n        readOnly: true,\n        value: row[5].value\n      }, {\n        readOnly: true,\n        value: row[6].value\n      }, {\n        readOnly: true,\n        value: row[7].value\n      }, {\n        readOnly: true,\n        value: row[8].value\n      }];\n      gridFromPlans.push(planRow);\n    }); // setGrid(gridFromPlans)\n\n    console.log('heres the mapped grid');\n    console.log(gridFromPlans);\n  };\n\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    createGridFromPlans();\n  }\n\n  return \"existing plans\"; // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n  //     </Col>\n  //   </Container>\n  // )\n};\n\n_s(ExistingWellPlans, \"Qej1zxRGIb8kHIhvS5SQrshsYLk=\");\n\n_c = ExistingWellPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromJSONDbReducer,\n  saveActiveWellToReduxStoreReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb\n})(ExistingWellPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingWellPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getWellPlansFromJSONDb","ExistingWellPlans","getWellPlansFromJSONDbReducer","plans","setPlans","grid","setGrid","createGridFromPlans","plansCopy","response","gridFromPlans","value","readOnly","width","forEach","row","index","planRow","push","console","log","status","mapStateToProps","saveActiveWellToReduxStoreReducer","getWellsFromJSONDbReducer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingWellPlans = ({getWellPlansFromJSONDbReducer}) => {\n  const [plans, setPlans] = useState([])\n  const [grid, setGrid] = useState([])\n\n  // useEffect(()=> {\n  //   if (getWellPlansFromJSONDbReducer.status === \"received\") {\n  //     let planFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //     setPlans(planFromReducerCopy)\n  //     // convertSurveyNumberStringsToNumbers();\n  //   }\n    \n  // },[getWellPlansFromJSONDbReducer.status])\n\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const createGridFromPlans = () => {\n    let plansCopy = [...getWellPlansFromJSONDbReducer.response]\n\n    let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n    // const plansCopy = [...plans]\n    plansCopy.forEach((row, index) => {\n      // console.log(\"row:\")\n      // console.log(row)\n      if (index === 0) {\n        return null\n      }\n      const planRow = [\n      {readOnly: true, value: row[0].value}, \n      {readOnly: true, value: row[1].value},\n      {readOnly: true, value: row[2].value},\n      {readOnly: true, value: row[3].value},\n      {readOnly: true, value: row[4].value},\n      {readOnly: true, value: row[5].value},\n      {readOnly: true, value: row[6].value},\n      {readOnly: true, value: row[7].value},\n      {readOnly: true, value: row[8].value},\n      ]\n      gridFromPlans.push(planRow)\n    })\n    // setGrid(gridFromPlans)\n    console.log('heres the mapped grid')\n    console.log(gridFromPlans)\n  }\n  if (getWellPlansFromJSONDbReducer.status === \"received\") {\n    createGridFromPlans()\n  }\n\n\n  return (\n    \n    \"existing plans\"\n  )\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, saveActiveWellToReduxStoreReducer, getWellsFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingWellPlans)"]},"metadata":{},"sourceType":"module"}