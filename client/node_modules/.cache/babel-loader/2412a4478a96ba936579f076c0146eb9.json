{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar FORMAT_LINK = require('../constants/docs').FORMAT_LINK;\n\nvar DATE_FORMAT_LINK = require('../constants/docs').DATE_FORMAT_LINK;\n\nvar templateFormatStringDescription = ['Variables are inserted using %{variable}, for example \"y: %{y}\".', 'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\".', FORMAT_LINK, 'for details on the formatting syntax.', 'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\".', DATE_FORMAT_LINK, 'for details on the date formatting syntax.'].join(' ');\n\nfunction describeVariables(extra) {\n  var descPart = extra.description ? ' ' + extra.description : '';\n  var keys = extra.keys || [];\n\n  if (keys.length > 0) {\n    var quotedKeys = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      quotedKeys[i] = '`' + keys[i] + '`';\n    }\n\n    descPart = descPart + 'Finally, the template string has access to ';\n\n    if (keys.length === 1) {\n      descPart = 'variable ' + quotedKeys[0];\n    } else {\n      descPart = 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';\n    }\n  }\n\n  return descPart;\n}\n\nexports.hovertemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var hovertemplate = {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: opts.editType || 'none',\n    description: ['Template string used for rendering the information that appear on hover box.', 'Note that this will override `hoverinfo`.', templateFormatStringDescription, 'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.', 'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart, 'Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\".', 'To hide the secondary box completely, use an empty tag `<extra></extra>`.'].join(' ')\n  };\n\n  if (opts.arrayOk !== false) {\n    hovertemplate.arrayOk = true;\n  }\n\n  return hovertemplate;\n};\n\nexports.texttemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var texttemplate = {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: opts.editType || 'calc',\n    description: ['Template string used for rendering the information text that appear on points.', 'Note that this will override `textinfo`.', templateFormatStringDescription, 'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart].join(' ')\n  };\n\n  if (opts.arrayOk !== false) {\n    texttemplate.arrayOk = true;\n  }\n\n  return texttemplate;\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plots/template_attributes.js"],"names":["FORMAT_LINK","require","DATE_FORMAT_LINK","templateFormatStringDescription","join","describeVariables","extra","descPart","description","keys","length","quotedKeys","i","slice","exports","hovertemplateAttrs","opts","hovertemplate","valType","role","dflt","editType","arrayOk","texttemplateAttrs","texttemplate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6BD,WAA/C;;AACA,IAAIE,gBAAgB,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,gBAApD;;AAEA,IAAIC,+BAA+B,GAAG,CAClC,kEADkC,EAElC,wGAFkC,EAGlCH,WAHkC,EAIlC,uCAJkC,EAKlC,qHALkC,EAMlCE,gBANkC,EAOlC,4CAPkC,EAQpCE,IARoC,CAQ/B,GAR+B,CAAtC;;AAUA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,MAAIC,QAAQ,GAAGD,KAAK,CAACE,WAAN,GAAoB,MAAMF,KAAK,CAACE,WAAhC,GAA8C,EAA7D;AACA,MAAIC,IAAI,GAAGH,KAAK,CAACG,IAAN,IAAc,EAAzB;;AACA,MAAGA,IAAI,CAACC,MAAL,GAAc,CAAjB,EAAoB;AAChB,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,IAAI,CAACC,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACjCD,MAAAA,UAAU,CAACC,CAAD,CAAV,GAAgB,MAAMH,IAAI,CAACG,CAAD,CAAV,GAAgB,GAAhC;AACH;;AACDL,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,6CAAtB;;AACA,QAAGE,IAAI,CAACC,MAAL,KAAgB,CAAnB,EAAsB;AAClBH,MAAAA,QAAQ,GAAG,cAAcI,UAAU,CAAC,CAAD,CAAnC;AACH,KAFD,MAEO;AACHJ,MAAAA,QAAQ,GAAG,eAAeI,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,EAAwBT,IAAxB,CAA6B,IAA7B,CAAf,GAAoD,OAApD,GAA8DO,UAAU,CAACE,KAAX,CAAiB,CAAC,CAAlB,CAA9D,GAAqF,GAAhG;AACH;AACJ;;AACD,SAAON,QAAP;AACH;;AAEDO,OAAO,CAACC,kBAAR,GAA6B,UAASC,IAAT,EAAeV,KAAf,EAAsB;AAC/CU,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAV,EAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AAEA,MAAIC,QAAQ,GAAGF,iBAAiB,CAACC,KAAD,CAAhC;AAEA,MAAIW,aAAa,GAAG;AAChBC,IAAAA,OAAO,EAAE,QADO;AAEhBC,IAAAA,IAAI,EAAE,MAFU;AAGhBC,IAAAA,IAAI,EAAE,EAHU;AAIhBC,IAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAL,IAAiB,MAJX;AAKhBb,IAAAA,WAAW,EAAE,CACT,8EADS,EAET,2CAFS,EAGTL,+BAHS,EAIT,iKAJS,EAKT,mHALS,EAMTI,QANS,EAOT,sHAPS,EAQT,2EARS,EASXH,IATW,CASN,GATM;AALG,GAApB;;AAiBA,MAAGY,IAAI,CAACM,OAAL,KAAiB,KAApB,EAA2B;AACvBL,IAAAA,aAAa,CAACK,OAAd,GAAwB,IAAxB;AACH;;AAED,SAAOL,aAAP;AACH,CA5BD;;AA8BAH,OAAO,CAACS,iBAAR,GAA4B,UAASP,IAAT,EAAeV,KAAf,EAAsB;AAC9CU,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAV,EAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AAEA,MAAIC,QAAQ,GAAGF,iBAAiB,CAACC,KAAD,CAAhC;AAEA,MAAIkB,YAAY,GAAG;AACfN,IAAAA,OAAO,EAAE,QADM;AAEfC,IAAAA,IAAI,EAAE,MAFS;AAGfC,IAAAA,IAAI,EAAE,EAHS;AAIfC,IAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAL,IAAiB,MAJZ;AAKfb,IAAAA,WAAW,EAAE,CACT,gFADS,EAET,0CAFS,EAGTL,+BAHS,EAIT,qGAJS,EAKTI,QALS,EAMXH,IANW,CAMN,GANM;AALE,GAAnB;;AAcA,MAAGY,IAAI,CAACM,OAAL,KAAiB,KAApB,EAA2B;AACvBE,IAAAA,YAAY,CAACF,OAAb,GAAuB,IAAvB;AACH;;AACD,SAAOE,YAAP;AACH,CAxBD","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar FORMAT_LINK = require('../constants/docs').FORMAT_LINK;\nvar DATE_FORMAT_LINK = require('../constants/docs').DATE_FORMAT_LINK;\n\nvar templateFormatStringDescription = [\n    'Variables are inserted using %{variable}, for example \"y: %{y}\".',\n    'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\".',\n    FORMAT_LINK,\n    'for details on the formatting syntax.',\n    'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\".',\n    DATE_FORMAT_LINK,\n    'for details on the date formatting syntax.'\n].join(' ');\n\nfunction describeVariables(extra) {\n    var descPart = extra.description ? ' ' + extra.description : '';\n    var keys = extra.keys || [];\n    if(keys.length > 0) {\n        var quotedKeys = [];\n        for(var i = 0; i < keys.length; i++) {\n            quotedKeys[i] = '`' + keys[i] + '`';\n        }\n        descPart = descPart + 'Finally, the template string has access to ';\n        if(keys.length === 1) {\n            descPart = 'variable ' + quotedKeys[0];\n        } else {\n            descPart = 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';\n        }\n    }\n    return descPart;\n}\n\nexports.hovertemplateAttrs = function(opts, extra) {\n    opts = opts || {};\n    extra = extra || {};\n\n    var descPart = describeVariables(extra);\n\n    var hovertemplate = {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: opts.editType || 'none',\n        description: [\n            'Template string used for rendering the information that appear on hover box.',\n            'Note that this will override `hoverinfo`.',\n            templateFormatStringDescription,\n            'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.',\n            'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.',\n            descPart,\n            'Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\".',\n            'To hide the secondary box completely, use an empty tag `<extra></extra>`.'\n        ].join(' ')\n    };\n\n    if(opts.arrayOk !== false) {\n        hovertemplate.arrayOk = true;\n    }\n\n    return hovertemplate;\n};\n\nexports.texttemplateAttrs = function(opts, extra) {\n    opts = opts || {};\n    extra = extra || {};\n\n    var descPart = describeVariables(extra);\n\n    var texttemplate = {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: opts.editType || 'calc',\n        description: [\n            'Template string used for rendering the information text that appear on points.',\n            'Note that this will override `textinfo`.',\n            templateFormatStringDescription,\n            'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.',\n            descPart\n        ].join(' ')\n    };\n\n    if(opts.arrayOk !== false) {\n        texttemplate.arrayOk = true;\n    }\n    return texttemplate;\n};\n"]},"metadata":{},"sourceType":"script"}