{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\n// react\nimport React, { useState, useEffect } from 'react'; // react-bootstrap\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown'; // other libs/imports\n\nimport { connect } from 'react-redux';\nimport _ from 'lodash'; // images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\n\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"; // import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\n\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\";\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\";\nimport { saveSelectedAsActiveWell } from \"../ActionCreators/saveActiveWellToReduxStore\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst Home = ({\n  getWellPlansFromJSONDb,\n  saveSelectedAsActiveWell,\n  postWellInfoToJSONDb,\n  saveWellInfoToReduxStore,\n  saveWellInfoToReduxStoreReducer,\n  getWellsFromJSONDb,\n  getWellsFromJSONDbReducer\n}) => {\n  _s();\n\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n  useEffect(() => {\n    setTimeout(getWellsFromJSONDb, 1000);\n  }, []);\n\n  const renderWellNames = () => {\n    let renderedWells;\n\n    if (getWellsFromJSONDbReducer.status === \"received\") {\n      let wells = getWellsFromJSONDbReducer.response;\n      return /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n        children: wells.map(well => {\n          return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            href: \"\",\n            onClick: () => setActiveWell(`${well.operator} - ${well.rig} - ${well.well}`),\n            children: [well.operator, \" - \", well.rig, \" - \", well.well]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    } else {\n      return \"Data loading\";\n    }\n  };\n\n  const createNewWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Add new well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Operator\",\n        onChange: event => setOperator(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Rig\",\n        onChange: event => setRig(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Well\",\n        onChange: event => setWell(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"County\",\n        onChange: event => setCounty(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"State\",\n        onChange: event => setUSstate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Northing\",\n        onChange: event => setNorthing(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mt-3\",\n        placeholder: \"Easting\",\n        onChange: event => setEasting(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"info\",\n        disabled: operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false,\n        onClick: () => handleNewWellSubmit(),\n        children: \"Submit and begin adding well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      // plans: [],\n      county,\n      uSstate,\n      northing,\n      easting\n    }; // postWellInfoToJSONDb(wellInfo)\n\n    saveWellInfoToReduxStore(wellInfo);\n    getWellsFromJSONDb();\n  };\n\n  const handleFetchData = () => {\n    getWellPlansFromJSONDb(activeWell); // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n    // setTimeout(getWellLeaseLinesFromDynamoDb(selectedWell), 1500);\n    // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n    // setTimeout(getOffsets(selectedWell), 2500);\n  };\n\n  const selectExistingWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select Existing Well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: activeWell ? activeWell : `Select Well:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this), renderWellNames()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"mt-4\",\n        variant: \"success\",\n        disabled: activeWell === \"None\" ? true : false,\n        onClick: handleFetchData(),\n        children: \"Fetch well data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderSelectWell = () => {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        children: \"Select existing well\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        children: /*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          variant: \"primary\",\n          id: \"dropdown-basic\",\n          children: [\"Selected Well: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: activeWell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [createNewWell(), selectExistingWell()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 7\n  }, this); //  }\n};\n\n_s(Home, \"fWUv5S1uO61BorIxo+Iw1TR9Xls=\");\n\n_c = Home;\n\nconst mapStateToProps = ({\n  saveActiveWellToReduxStoreReducer,\n  saveWellInfoToReduxStoreReducer,\n  postWellInfoToJSONDbReducer,\n  getWellsFromJSONDbReducer\n}) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    getWellsFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb,\n  saveSelectedAsActiveWell,\n  saveWellInfoToReduxStore,\n  postWellInfoToJSONDb,\n  getWellsFromJSONDb\n})(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/Home.js"],"names":["React","useState","useEffect","Container","Row","Col","Button","Form","Dropdown","connect","_","saveWellInfoToReduxStore","postWellInfoToJSONDb","getWellsFromJSONDb","saveSelectedAsActiveWell","getWellPlansFromJSONDb","Home","saveWellInfoToReduxStoreReducer","getWellsFromJSONDbReducer","activeWell","setActiveWell","operator","setOperator","rig","setRig","well","setWell","county","setCounty","uSstate","setUSstate","northing","setNorthing","easting","setEasting","setTimeout","renderWellNames","renderedWells","status","wells","response","map","createNewWell","event","target","value","handleNewWellSubmit","wellInfo","handleFetchData","selectExistingWell","renderSelectWell","mapStateToProps","saveActiveWellToReduxStoreReducer","postWellInfoToJSONDbReducer"],"mappings":"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","sourcesContent":["// react\nimport React, { useState, useEffect } from 'react';\n// react-bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\n// other libs/imports\nimport { connect } from 'react-redux';\nimport _ from 'lodash'\n// images\n// components\n// action creators\n// import getWellNamesFromDynamoDb from 'ActionCreators/getWellNamesFromDynamoDb';\nimport saveWellInfoToReduxStore from \"../ActionCreators/saveWellInfoToReduxStore\"\n// import getWellPlansFromDynamoDb from 'ActionCreators/getWellPlansFromDynamoDb';\nimport postWellInfoToJSONDb from \"../ActionCreators/postWellInfoToJSONDb\"\nimport getWellsFromJSONDb from \"../ActionCreators/getWellsFromJSONDb\"\nimport {saveSelectedAsActiveWell} from \"../ActionCreators/saveActiveWellToReduxStore\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\n\nconst Home = ({ getWellPlansFromJSONDb ,saveSelectedAsActiveWell, postWellInfoToJSONDb, saveWellInfoToReduxStore, saveWellInfoToReduxStoreReducer, getWellsFromJSONDb, getWellsFromJSONDbReducer}) => {\n  const [activeWell, setActiveWell] = useState('None');\n  const [operator, setOperator] = useState('');\n  const [rig, setRig] = useState('');\n  const [well, setWell] = useState('');\n  const [county, setCounty] = useState('');\n  const [uSstate, setUSstate] = useState('');\n  const [northing, setNorthing] = useState('');\n  const [easting, setEasting] = useState('');\n\n\n  useEffect(() => {\n    \n    setTimeout(getWellsFromJSONDb, 1000);\n  }, []);\n\n  const renderWellNames = () => {\n    let renderedWells;\n    if (getWellsFromJSONDbReducer.status === \"received\") {\n      let wells = getWellsFromJSONDbReducer.response\n      return (\n        <Dropdown.Menu>\n          {wells.map(well => {\n            return (\n              <Dropdown.Item href=\"\" onClick={()=> setActiveWell(`${well.operator} - ${well.rig} - ${well.well}`)}>\n                {well.operator} - {well.rig} - {well.well}\n              </Dropdown.Item>\n            )\n          })}\n        </Dropdown.Menu>\n      )\n    }\n    else {\n      return \"Data loading\"\n    }\n  }\n\n  const createNewWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Add new well data</h3>\n        <Form.Control className=\"mt-3\" placeholder=\"Operator\" onChange={event => setOperator(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Rig\" onChange={event => setRig(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Well\" onChange={event => setWell(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"County\" onChange={event => setCounty(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"State\" onChange={event => setUSstate(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Northing\" onChange={event => setNorthing(event.target.value)} />\n        <Form.Control className=\"mt-3\" placeholder=\"Easting\" onChange={event => setEasting(event.target.value)} />\n        <Button className=\"mt-4\" variant=\"info\" disabled={ operator === \"\" || rig === \"\" || well === \"\" || county === \"\" || uSstate === \"\" ? true : false } onClick={()=>handleNewWellSubmit()}>Submit and begin adding well data</Button>\n      </Col>\n    )\n  }\n\n  const handleNewWellSubmit = () => {\n    const wellInfo = {\n      operator,\n      rig,\n      well,\n      // plans: [],\n      county,\n      uSstate,\n      northing,\n      easting\n    }\n    // postWellInfoToJSONDb(wellInfo)\n    saveWellInfoToReduxStore(wellInfo)\n    getWellsFromJSONDb()\n  }\n\n  const handleFetchData = () => {\n\n\n    getWellPlansFromJSONDb(activeWell)\n    // setTimeout(getWellHardLinesFromDynamoDb(selectedWell), 1000);\n    // setTimeout(getWellLeaseLinesFromDynamoDb(selectedWell), 1500);\n    // setTimeout(getWellSurveysFromDynamoDb(selectedWell), 2000);\n    // setTimeout(getOffsets(selectedWell), 2500);\n  }\n\n\n\n  const selectExistingWell = () => {\n    return (\n      <Col>\n      <h3 className=\"my-4\">Select Existing Well</h3>\n      <Dropdown>\n        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n          {activeWell ? activeWell : `Select Well:`}\n        </Dropdown.Toggle>\n        {renderWellNames()}\n      </Dropdown>\n      <Button className=\"mt-4\" variant=\"success\" disabled={ activeWell === \"None\" ? true : false } onClick={handleFetchData()}>Fetch well data</Button>\n      </Col>\n    )\n  }\n\n\n\n  const renderSelectWell = () => {\n    return (\n      <Col>\n        <h3 className=\"my-4\">Select existing well</h3>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n            Selected Well: <strong>{activeWell}</strong>\n          </Dropdown.Toggle>\n          {/* // {renderWellNames()} */}\n        </Dropdown>\n        \n      </Col>\n    )\n  }\n\n\n  \n  return (\n      <Container>\n        <Row>\n          {createNewWell()}\n          {selectExistingWell()}\n        </Row>\n      </Container>\n    )\n//  }\n}\n\nconst mapStateToProps = ({ saveActiveWellToReduxStoreReducer ,saveWellInfoToReduxStoreReducer, postWellInfoToJSONDbReducer, getWellsFromJSONDbReducer }) => {\n  return {\n    saveWellInfoToReduxStoreReducer,\n    postWellInfoToJSONDbReducer,\n    getWellsFromJSONDbReducer,\n  };\n};\n\nexport default connect(mapStateToProps, { getWellPlansFromJSONDb, saveSelectedAsActiveWell, saveWellInfoToReduxStore, postWellInfoToJSONDb, getWellsFromJSONDb })(Home);\n"]},"metadata":{},"sourceType":"module"}