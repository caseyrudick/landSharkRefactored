{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import{connect}from\"react-redux\";import Container from\"react-bootstrap/esm/Container\";import Form from\"react-bootstrap/Form\";import Row from\"react-bootstrap/Row\";import Col from\"react-bootstrap/Col\";import Button from\"react-bootstrap/Button\";import'react-datasheet/lib/react-datasheet.css';import ReactDataSheet from\"react-datasheet\";import ExistingLeaseLines from\"./ExistingLeaseLines\";import ExistingHardLines from\"./ExistingHardLines\";import LeaseLines from\"./LeaseLines\";import HardLines from\"./HardLines\";var PolyLines=function PolyLines(_ref){var saveWellInfoToReduxStoreReducer=_ref.saveWellInfoToReduxStoreReducer,getLeaseLinesFromDynamoDbReducer=_ref.getLeaseLinesFromDynamoDbReducer,getHardLinesFromDynamoDbReducer=_ref.getHardLinesFromDynamoDbReducer,activeWell=_ref.activeWell;var renderWellData=function renderWellData(){if(saveWellInfoToReduxStoreReducer.status===\"received\"){var _saveWellInfoToReduxS=saveWellInfoToReduxStoreReducer.response,well=_saveWellInfoToReduxS.well,rig=_saveWellInfoToReduxS.rig,operator=_saveWellInfoToReduxS.operator;return/*#__PURE__*/_jsxs(\"h3\",{className:\"hy-4\",children:[\" \",operator,\" - \",rig,\" - \",well]});}else if(activeWell.status===\"received\"){var _activeWell$response=activeWell.response,Well_Name=_activeWell$response.Well_Name,Rig=_activeWell$response.Rig,Operator=_activeWell$response.Operator;return/*#__PURE__*/_jsxs(\"h3\",{className:\"hy-4\",children:[\" \",Operator.S,\" - \",Rig.S,\" - \",Well_Name.S]});}else{return\"No well data\";}};var renderLeaseLineGrid=function renderLeaseLineGrid(){var existingLeaseLines=getLeaseLinesFromDynamoDbReducer.response.Count>0;if(existingLeaseLines){return/*#__PURE__*/_jsx(ExistingLeaseLines,{});}else{return/*#__PURE__*/_jsx(LeaseLines,{});}};var renderHardLineGrid=function renderHardLineGrid(){var existingHardLines=getHardLinesFromDynamoDbReducer.response.Count>0;if(existingHardLines){return/*#__PURE__*/_jsx(ExistingHardLines,{});}else{return/*#__PURE__*/_jsx(HardLines,{});}};return/*#__PURE__*/_jsxs(Container,{children:[renderWellData(),/*#__PURE__*/_jsxs(Row,{className:\"mt-4\",children:[/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Lease Lines\"}),renderLeaseLineGrid()]}),/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Hard Lines\"}),renderHardLineGrid()]})]})]});};// if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"received\") {\n//   console.log(\"existing lease and existing hard\")\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           <ExistingLeaseLines/>\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           <ExistingHardLines/>\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// } else if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"\") {\n//   console.log(\"existing lease and new hard\")\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           <ExistingLeaseLines/>\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           <HardLines/>\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// } else if (getHardLinesFromDynamoDbReducer.status === \"received\" && getLeaseLinesFromDynamoDbReducer.status === \"\") {\n//   console.log(\"existing hard and new lease\")\n//   return (\n//     <Container>\n//     {renderWellData()}\n//     <Row className=\"mt-4\">\n//       <Col>\n//         <h4>Lease Lines</h4>\n//         <LeaseLines/>\n//       </Col>\n//       <Col>\n//         <h4>Hard Lines</h4>\n//         <ExistingHardLines/>\n//       </Col>\n//     </Row>\n//   </Container>\n//   )\n// } else {\n//   console.log(\"both new lease and hard\")\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           <LeaseLines/>\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           <HardLines/>\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\nvar mapStateToProps=function mapStateToProps(_ref2){var saveWellInfoToReduxStoreReducer=_ref2.saveWellInfoToReduxStoreReducer,activeWell=_ref2.activeWell,getHardLinesFromDynamoDbReducer=_ref2.getHardLinesFromDynamoDbReducer,getLeaseLinesFromDynamoDbReducer=_ref2.getLeaseLinesFromDynamoDbReducer;return{activeWell:activeWell,getLeaseLinesFromDynamoDbReducer:getLeaseLinesFromDynamoDbReducer,getHardLinesFromDynamoDbReducer:getHardLinesFromDynamoDbReducer,saveWellInfoToReduxStoreReducer:saveWellInfoToReduxStoreReducer};};export default connect(mapStateToProps)(PolyLines);// import React, { useEffect, useState } from \"react\"\n// import { connect } from \"react-redux\"\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import ExistingLeaseLines from \"./ExistingLeaseLines\"\n// import ExistingHardLines from \"./ExistingHardLines\"\n// import LeaseLines from \"./LeaseLines\"\n// import HardLines from \"./HardLines\"\n// const PolyLines = ({saveWellInfoToReduxStoreReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer,}) => {\n//   const renderWellData = () => {\n//     if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n//       const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n//     }\n//     else if (activeWell.status === \"received\") {\n//       const { Well_Name, Rig, Operator} = activeWell.response\n//       return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n//     } else {\n//       return \"No well data\"\n//     }\n//   }\n//   const renderLeaseLines = () => {\n//     // if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getLeaseLinesFromJSONDbReducer.response) {\n//     //   return <ExistingLeaseLines/>\n//     // } else {\n//       return <LeaseLines/>\n//     // }\n//   }\n//   const renderHardLines = () => {\n//     // if (getHardLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.response) {\n//     //   return <ExistingHardLines/>\n//     // } else {\n//       return <HardLines/>\n//     // }\n//   }\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           {renderLeaseLines()}\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           {renderHardLines()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n// const mapStateToProps = ({saveWellInfoToReduxStoreReducer, getHardLinesFromDynamoDbReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer}) => {\n//  return {\n//   saveWellInfoToReduxStoreReducer,\n//   getHardLinesFromDynamoDbReducer,\n//   // getLeaseLinesFromJSONDbReducer,\n//   // getHardLinesFromJSONDbReducer,\n//   activeWell, \n//  }\n// }\n// export default connect(mapStateToProps)(PolyLines)\n// // import React, { useState, useEffect } from \"react\"\n// // //bootstrap\n// // import Container from \"react-bootstrap/esm/Container\";\n// // import Form from \"react-bootstrap/Form\"\n// // import Row from \"react-bootstrap/Row\"\n// // import Col from \"react-bootstrap/Col\"\n// // import Button from \"react-bootstrap/Button\"\n// // import 'react-datasheet/lib/react-datasheet.css';\n// // import { connect } from \"react-redux\"\n// // import ReactDataSheet from 'react-datasheet';\n// // // actionCreators\n// // import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// // import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n// // const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n// //   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n// //   // set up initial grid\n// //   // create local state to setGrid\n// //   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// //   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// //   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// //   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n// //   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n// //   const initialGrid = [\n// //     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n// //     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n// //   ]\n// //   const [grid, setGrid] = useState(initialGrid)\n// //   const renderWellHeader = () => {\n// //     if (activeWell.status === \"received\") {\n// //       // const {operator, rig, well} = activeWell.response\n// //       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n// //     } else {\n// //       return \"No Well Data\"\n// //     }\n// //   }\n// //   const onCellsChanged = changes => {\n// //     const gridNew = grid.map(row => [...row])\n// //     changes.forEach(({cell, row, col, value}) => {\n// //       gridNew[row][col] = {...grid[row][col], value}\n// //     });\n// //     setGrid(gridNew);\n// //   }\n// //   const handleSubmit = () => {\n// //     const wellInfoAndLeaseLines = {\n// //       operator,\n// //       rig, \n// //       well, \n// //       county,\n// //       usState, \n// //       northing,\n// //       easting,\n// //       grid\n// //     }\n// //     // const activeWell\n// //     // saveLeaseLinesToJSON \n// //     checkTest()\n// //     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n// //     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n// //   }\n// //   const checkTest = () => {\n// //     console.log(\"whyyy\")\n// //   }\n// //   const renderRowsButtons = () => {\n// //     return (\n// //       <Row>\n// //         <Col xs={10} className=\"my-4\">\n// //           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n// //             Submit\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n// //             Add a Row\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n// //             Remove a Row\n// //           </Button>\n// //         </Col>\n// //       </Row>\n// //     )\n// //   }\n// //   const addRow = () => {\n// //     const gridLength = grid.length\n// //     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n// //     const newGrid = [...grid, newRow]\n// //     setGrid(newGrid)\n// //   }\n// //   const removeRow = () => {\n// //     const newGrid = [...grid]\n// //     newGrid.pop()\n// //     setGrid(newGrid)\n// //   }\n// //   return (\n// //     <Container>\n// //       <Row>\n// //         <Col xs={10}>\n// //           {renderWellHeader()}\n// //           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n// //           {renderRowsButtons()}\n// //         </Col>\n// //       </Row>\n// //     </Container>\n// //   )\n// // }\n// // const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n// //   return {\n// //     activeWell,\n// //     postLeaseLinesToJSONDbReducer,\n// //   }\n// // }\n// // export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/PolyLines.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","ExistingLeaseLines","ExistingHardLines","LeaseLines","HardLines","PolyLines","saveWellInfoToReduxStoreReducer","getLeaseLinesFromDynamoDbReducer","getHardLinesFromDynamoDbReducer","activeWell","renderWellData","status","response","well","rig","operator","Well_Name","Rig","Operator","S","renderLeaseLineGrid","existingLeaseLines","Count","renderHardLineGrid","existingHardLines","mapStateToProps"],"mappings":"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":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport ExistingLeaseLines from \"./ExistingLeaseLines\"\nimport ExistingHardLines from \"./ExistingHardLines\"\nimport LeaseLines from \"./LeaseLines\"\nimport HardLines from \"./HardLines\"\n\n\nconst PolyLines = ({saveWellInfoToReduxStoreReducer, getLeaseLinesFromDynamoDbReducer, getHardLinesFromDynamoDbReducer, activeWell}) => {\n  \n  const renderWellData = () => {\n    if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n      const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n      return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n    }\n    else if (activeWell.status === \"received\") {\n      const { Well_Name, Rig, Operator} = activeWell.response\n      return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n    } else {\n      return \"No well data\"\n    }\n  }\n  \n\n  const renderLeaseLineGrid = () => {\n    const existingLeaseLines = getLeaseLinesFromDynamoDbReducer.response.Count > 0;\n    if (existingLeaseLines) {\n      return <ExistingLeaseLines/>\n    } else {\n      return <LeaseLines/>\n      }\n  }\n\n  const renderHardLineGrid = () => {\n    const existingHardLines = getHardLinesFromDynamoDbReducer.response.Count > 0;\n    if (existingHardLines) {\n      return <ExistingHardLines/>\n    } else {\n      return <HardLines/>\n      }\n  }\n\n  return (\n    <Container>\n      {renderWellData()}\n      <Row className=\"mt-4\">\n        <Col>\n          <h4>Lease Lines</h4>\n          {renderLeaseLineGrid()}\n        </Col>\n        <Col>\n        <h4>Hard Lines</h4>\n          {renderHardLineGrid()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\n  // if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"received\") {\n  //   console.log(\"existing lease and existing hard\")\n  //   return (\n  //     <Container>\n  //       {renderWellData()}\n  //       <Row className=\"mt-4\">\n  //         <Col>\n  //           <h4>Lease Lines</h4>\n  //           <ExistingLeaseLines/>\n  //         </Col>\n  //         <Col>\n  //         <h4>Hard Lines</h4>\n  //           <ExistingHardLines/>\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //   )\n  // } else if (getLeaseLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.status === \"\") {\n  //   console.log(\"existing lease and new hard\")\n  //   return (\n  //     <Container>\n  //       {renderWellData()}\n  //       <Row className=\"mt-4\">\n  //         <Col>\n  //           <h4>Lease Lines</h4>\n  //           <ExistingLeaseLines/>\n  //         </Col>\n  //         <Col>\n  //         <h4>Hard Lines</h4>\n  //           <HardLines/>\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //   )\n  // } else if (getHardLinesFromDynamoDbReducer.status === \"received\" && getLeaseLinesFromDynamoDbReducer.status === \"\") {\n  //   console.log(\"existing hard and new lease\")\n  //   return (\n  //     <Container>\n  //     {renderWellData()}\n  //     <Row className=\"mt-4\">\n  //       <Col>\n  //         <h4>Lease Lines</h4>\n  //         <LeaseLines/>\n  //       </Col>\n  //       <Col>\n  //         <h4>Hard Lines</h4>\n  //         <ExistingHardLines/>\n  //       </Col>\n  //     </Row>\n  //   </Container>\n  //   )\n  // } else {\n  //   console.log(\"both new lease and hard\")\n  //   return (\n  //     <Container>\n  //       {renderWellData()}\n  //       <Row className=\"mt-4\">\n  //         <Col>\n  //           <h4>Lease Lines</h4>\n  //           <LeaseLines/>\n  //         </Col>\n  //         <Col>\n  //         <h4>Hard Lines</h4>\n  //           <HardLines/>\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //   )\n  // }\n\n\n\n\nconst mapStateToProps = ({saveWellInfoToReduxStoreReducer, activeWell, getHardLinesFromDynamoDbReducer, getLeaseLinesFromDynamoDbReducer}) => {\n return {\n  activeWell, \n  getLeaseLinesFromDynamoDbReducer,\n  getHardLinesFromDynamoDbReducer,\n  saveWellInfoToReduxStoreReducer\n }\n}\n\nexport default connect(mapStateToProps)(PolyLines)\n\n// import React, { useEffect, useState } from \"react\"\n// import { connect } from \"react-redux\"\n\n// import Container from \"react-bootstrap/esm/Container\"\n// import Form from \"react-bootstrap/Form\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\n// import Button from \"react-bootstrap/Button\"\n\n// import 'react-datasheet/lib/react-datasheet.css'\n// import ReactDataSheet from \"react-datasheet\"\n// import ExistingLeaseLines from \"./ExistingLeaseLines\"\n// import ExistingHardLines from \"./ExistingHardLines\"\n// import LeaseLines from \"./LeaseLines\"\n// import HardLines from \"./HardLines\"\n\n// const PolyLines = ({saveWellInfoToReduxStoreReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer,}) => {\n//   const renderWellData = () => {\n//     if (saveWellInfoToReduxStoreReducer.status === \"received\") {\n//       const { well, rig, operator} = saveWellInfoToReduxStoreReducer.response\n//       return <h3 className=\"hy-4\"> {operator} - {rig} - {well}</h3>\n//     }\n//     else if (activeWell.status === \"received\") {\n//       const { Well_Name, Rig, Operator} = activeWell.response\n//       return <h3 className=\"hy-4\"> {Operator.S} - {Rig.S} - {Well_Name.S}</h3>\n//     } else {\n//       return \"No well data\"\n//     }\n//   }\n  \n//   const renderLeaseLines = () => {\n//     // if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getLeaseLinesFromJSONDbReducer.response) {\n//     //   return <ExistingLeaseLines/>\n//     // } else {\n//       return <LeaseLines/>\n//     // }\n//   }\n\n//   const renderHardLines = () => {\n//     // if (getHardLinesFromDynamoDbReducer.status === \"received\" && getHardLinesFromDynamoDbReducer.response) {\n//     //   return <ExistingHardLines/>\n//     // } else {\n//       return <HardLines/>\n//     // }\n//   }\n\n//   return (\n//     <Container>\n//       {renderWellData()}\n//       <Row className=\"mt-4\">\n//         <Col>\n//           <h4>Lease Lines</h4>\n//           {renderLeaseLines()}\n//         </Col>\n//         <Col>\n//         <h4>Hard Lines</h4>\n//           {renderHardLines()}\n//         </Col>\n//       </Row>\n//     </Container>\n//   )\n// }\n\n// const mapStateToProps = ({saveWellInfoToReduxStoreReducer, getHardLinesFromDynamoDbReducer, activeWell, getLeaseLinesFromJSONDbReducer, getHardLinesFromJSONDbReducer}) => {\n//  return {\n//   saveWellInfoToReduxStoreReducer,\n//   getHardLinesFromDynamoDbReducer,\n//   // getLeaseLinesFromJSONDbReducer,\n//   // getHardLinesFromJSONDbReducer,\n//   activeWell, \n//  }\n// }\n\n// export default connect(mapStateToProps)(PolyLines)\n\n\n\n\n// // import React, { useState, useEffect } from \"react\"\n// // //bootstrap\n// // import Container from \"react-bootstrap/esm/Container\";\n// // import Form from \"react-bootstrap/Form\"\n// // import Row from \"react-bootstrap/Row\"\n// // import Col from \"react-bootstrap/Col\"\n// // import Button from \"react-bootstrap/Button\"\n\n// // import 'react-datasheet/lib/react-datasheet.css';\n// // import { connect } from \"react-redux\"\n// // import ReactDataSheet from 'react-datasheet';\n\n// // // actionCreators\n// // import saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\n// // import postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\n// // const LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n// //   const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n// //   // set up initial grid\n// //   // create local state to setGrid\n// //   // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n// //   // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n// //   // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n// //   // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n// //   // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n// //   const initialGrid = [\n// //     [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n// //     [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n// //     [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n// //   ]\n// //   const [grid, setGrid] = useState(initialGrid)\n\n// //   const renderWellHeader = () => {\n// //     if (activeWell.status === \"received\") {\n// //       // const {operator, rig, well} = activeWell.response\n// //       return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n// //     } else {\n// //       return \"No Well Data\"\n// //     }\n// //   }\n\n// //   const onCellsChanged = changes => {\n// //     const gridNew = grid.map(row => [...row])\n// //     changes.forEach(({cell, row, col, value}) => {\n// //       gridNew[row][col] = {...grid[row][col], value}\n// //     });\n// //     setGrid(gridNew);\n    \n// //   }\n\n// //   const handleSubmit = () => {\n// //     const wellInfoAndLeaseLines = {\n// //       operator,\n// //       rig, \n// //       well, \n// //       county,\n// //       usState, \n// //       northing,\n// //       easting,\n// //       grid\n// //     }\n// //     // const activeWell\n// //     // saveLeaseLinesToJSON \n// //     checkTest()\n// //     postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n// //     saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n// //   }\n\n// //   const checkTest = () => {\n// //     console.log(\"whyyy\")\n// //   }\n\n// //   const renderRowsButtons = () => {\n// //     return (\n// //       <Row>\n// //         <Col xs={10} className=\"my-4\">\n// //           <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n// //             Submit\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n// //             Add a Row\n// //           </Button>\n// //           <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n// //             Remove a Row\n// //           </Button>\n\n// //         </Col>\n// //       </Row>\n// //     )\n// //   }\n\n// //   const addRow = () => {\n// //     const gridLength = grid.length\n// //     const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n// //     const newGrid = [...grid, newRow]\n// //     setGrid(newGrid)\n// //   }\n\n// //   const removeRow = () => {\n// //     const newGrid = [...grid]\n// //     newGrid.pop()\n// //     setGrid(newGrid)\n// //   }\n  \n\n// //   return (\n// //     <Container>\n// //       <Row>\n// //         <Col xs={10}>\n// //           {renderWellHeader()}\n// //           <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n// //           {renderRowsButtons()}\n// //         </Col>\n// //       </Row>\n// //     </Container>\n// //   )\n// // }\n\n// // const mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n// //   return {\n// //     activeWell,\n// //     postLeaseLinesToJSONDbReducer,\n// //   }\n// // }\n\n// // export default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)"]},"metadata":{},"sourceType":"module"}