{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar barAttrs = require('../bar/attributes');\n\nvar lineAttrs = require('../scatter/attributes').line;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar Color = require('../../components/color');\n\nfunction directionAttrs(dirTxt) {\n  return {\n    marker: {\n      color: extendFlat({}, barAttrs.marker.color, {\n        arrayOk: false,\n        editType: 'style',\n        description: 'Sets the marker color of all ' + dirTxt + ' values.'\n      }),\n      line: {\n        color: extendFlat({}, barAttrs.marker.line.color, {\n          arrayOk: false,\n          editType: 'style',\n          description: 'Sets the line color of all ' + dirTxt + ' values.'\n        }),\n        width: extendFlat({}, barAttrs.marker.line.width, {\n          arrayOk: false,\n          editType: 'style',\n          description: 'Sets the line width of all ' + dirTxt + ' values.'\n        }),\n        editType: 'style'\n      },\n      editType: 'style'\n    },\n    editType: 'style'\n  };\n}\n\nmodule.exports = {\n  measure: {\n    valType: 'data_array',\n    dflt: [],\n    role: 'info',\n    editType: 'calc',\n    description: ['An array containing types of values.', 'By default the values are considered as \\'relative\\'.', 'However; it is possible to use \\'total\\' to compute the sums.', 'Also \\'absolute\\' could be applied to reset the computed total', 'or to declare an initial value where needed.'].join(' ')\n  },\n  base: {\n    valType: 'number',\n    dflt: null,\n    arrayOk: false,\n    role: 'info',\n    editType: 'calc',\n    description: ['Sets where the bar base is drawn (in position axis units).'].join(' ')\n  },\n  x: barAttrs.x,\n  x0: barAttrs.x0,\n  dx: barAttrs.dx,\n  y: barAttrs.y,\n  y0: barAttrs.y0,\n  dy: barAttrs.dy,\n  xperiod: barAttrs.xperiod,\n  yperiod: barAttrs.yperiod,\n  xperiod0: barAttrs.xperiod0,\n  yperiod0: barAttrs.yperiod0,\n  xperiodalignment: barAttrs.xperiodalignment,\n  yperiodalignment: barAttrs.yperiodalignment,\n  hovertext: barAttrs.hovertext,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['name', 'x', 'y', 'text', 'initial', 'delta', 'final']\n  }),\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'initial', 'delta', 'final'],\n    extras: ['none'],\n    role: 'info',\n    editType: 'plot',\n    arrayOk: false,\n    description: ['Determines which trace information appear on the graph.', 'In the case of having multiple waterfalls, totals', 'are computed separately (per trace).'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label'])\n  }),\n  text: barAttrs.text,\n  textposition: barAttrs.textposition,\n  insidetextanchor: barAttrs.insidetextanchor,\n  textangle: barAttrs.textangle,\n  textfont: barAttrs.textfont,\n  insidetextfont: barAttrs.insidetextfont,\n  outsidetextfont: barAttrs.outsidetextfont,\n  constraintext: barAttrs.constraintext,\n  cliponaxis: barAttrs.cliponaxis,\n  orientation: barAttrs.orientation,\n  offset: barAttrs.offset,\n  width: barAttrs.width,\n  increasing: directionAttrs('increasing'),\n  decreasing: directionAttrs('decreasing'),\n  totals: directionAttrs('intermediate sums and total'),\n  connector: {\n    line: {\n      color: extendFlat({}, lineAttrs.color, {\n        dflt: Color.defaultLine\n      }),\n      width: extendFlat({}, lineAttrs.width, {\n        editType: 'plot' // i.e. to adjust bars is mode: 'between'. See https://github.com/plotly/plotly.js/issues/3787\n\n      }),\n      dash: lineAttrs.dash,\n      editType: 'plot'\n    },\n    mode: {\n      valType: 'enumerated',\n      values: ['spanning', 'between'],\n      dflt: 'between',\n      role: 'info',\n      editType: 'plot',\n      description: ['Sets the shape of connector lines.'].join(' ')\n    },\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      role: 'info',\n      editType: 'plot',\n      description: ['Determines if connector lines are drawn. '].join(' ')\n    },\n    editType: 'plot'\n  },\n  offsetgroup: barAttrs.offsetgroup,\n  alignmentgroup: barAttrs.alignmentgroup\n};","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/waterfall/attributes.js"],"names":["barAttrs","require","lineAttrs","line","baseAttrs","hovertemplateAttrs","texttemplateAttrs","constants","extendFlat","Color","directionAttrs","dirTxt","marker","color","arrayOk","editType","description","width","module","exports","measure","valType","dflt","role","join","base","x","x0","dx","y","y0","dy","xperiod","yperiod","xperiod0","yperiod0","xperiodalignment","yperiodalignment","hovertext","hovertemplate","keys","eventDataKeys","hoverinfo","flags","textinfo","extras","texttemplate","concat","text","textposition","insidetextanchor","textangle","textfont","insidetextfont","outsidetextfont","constraintext","cliponaxis","orientation","offset","increasing","decreasing","totals","connector","defaultLine","dash","mode","values","visible","offsetgroup","alignmentgroup"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar barAttrs = require('../bar/attributes');\nvar lineAttrs = require('../scatter/attributes').line;\nvar baseAttrs = require('../../plots/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar Color = require('../../components/color');\n\nfunction directionAttrs(dirTxt) {\n    return {\n        marker: {\n            color: extendFlat({}, barAttrs.marker.color, {\n                arrayOk: false,\n                editType: 'style',\n                description: 'Sets the marker color of all ' + dirTxt + ' values.'\n            }),\n            line: {\n                color: extendFlat({}, barAttrs.marker.line.color, {\n                    arrayOk: false,\n                    editType: 'style',\n                    description: 'Sets the line color of all ' + dirTxt + ' values.'\n                }),\n                width: extendFlat({}, barAttrs.marker.line.width, {\n                    arrayOk: false,\n                    editType: 'style',\n                    description: 'Sets the line width of all ' + dirTxt + ' values.'\n                }),\n                editType: 'style',\n            },\n            editType: 'style'\n        },\n        editType: 'style'\n    };\n}\n\nmodule.exports = {\n    measure: {\n        valType: 'data_array',\n        dflt: [],\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'An array containing types of values.',\n            'By default the values are considered as \\'relative\\'.',\n            'However; it is possible to use \\'total\\' to compute the sums.',\n            'Also \\'absolute\\' could be applied to reset the computed total',\n            'or to declare an initial value where needed.'\n        ].join(' ')\n    },\n\n    base: {\n        valType: 'number',\n        dflt: null,\n        arrayOk: false,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets where the bar base is drawn (in position axis units).'\n        ].join(' ')\n    },\n\n    x: barAttrs.x,\n    x0: barAttrs.x0,\n    dx: barAttrs.dx,\n    y: barAttrs.y,\n    y0: barAttrs.y0,\n    dy: barAttrs.dy,\n\n    xperiod: barAttrs.xperiod,\n    yperiod: barAttrs.yperiod,\n    xperiod0: barAttrs.xperiod0,\n    yperiod0: barAttrs.yperiod0,\n    xperiodalignment: barAttrs.xperiodalignment,\n    yperiodalignment: barAttrs.yperiodalignment,\n\n    hovertext: barAttrs.hovertext,\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: constants.eventDataKeys\n    }),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['name', 'x', 'y', 'text', 'initial', 'delta', 'final']\n    }),\n\n    textinfo: {\n        valType: 'flaglist',\n        flags: ['label', 'text', 'initial', 'delta', 'final'],\n        extras: ['none'],\n        role: 'info',\n        editType: 'plot',\n        arrayOk: false,\n        description: [\n            'Determines which trace information appear on the graph.',\n            'In the case of having multiple waterfalls, totals',\n            'are computed separately (per trace).'\n        ].join(' ')\n    },\n    // TODO: incorporate `label` and `value` in the eventData\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: constants.eventDataKeys.concat(['label'])\n    }),\n    text: barAttrs.text,\n    textposition: barAttrs.textposition,\n    insidetextanchor: barAttrs.insidetextanchor,\n    textangle: barAttrs.textangle,\n    textfont: barAttrs.textfont,\n    insidetextfont: barAttrs.insidetextfont,\n    outsidetextfont: barAttrs.outsidetextfont,\n    constraintext: barAttrs.constraintext,\n\n    cliponaxis: barAttrs.cliponaxis,\n    orientation: barAttrs.orientation,\n\n    offset: barAttrs.offset,\n    width: barAttrs.width,\n\n    increasing: directionAttrs('increasing'),\n    decreasing: directionAttrs('decreasing'),\n    totals: directionAttrs('intermediate sums and total'),\n\n    connector: {\n        line: {\n            color: extendFlat({}, lineAttrs.color, {dflt: Color.defaultLine}),\n            width: extendFlat({}, lineAttrs.width, {\n                editType: 'plot', // i.e. to adjust bars is mode: 'between'. See https://github.com/plotly/plotly.js/issues/3787\n            }),\n            dash: lineAttrs.dash,\n            editType: 'plot'\n        },\n        mode: {\n            valType: 'enumerated',\n            values: ['spanning', 'between'],\n            dflt: 'between',\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Sets the shape of connector lines.'\n            ].join(' ')\n        },\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Determines if connector lines are drawn. '\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n\n    offsetgroup: barAttrs.offsetgroup,\n    alignmentgroup: barAttrs.alignmentgroup\n};\n"]},"metadata":{},"sourceType":"script"}