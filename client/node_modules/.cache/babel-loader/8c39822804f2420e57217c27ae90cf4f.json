{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../registry');\n\nvar Lib = require('../lib');\n\nvar baseAttributes = require('../plots/attributes');\n\nvar baseLayoutAttributes = require('../plots/layout_attributes');\n\nvar frameAttributes = require('../plots/frame_attributes');\n\nvar animationAttributes = require('../plots/animation_attributes');\n\nvar configAttributes = require('./plot_config').configAttributes; // polar attributes are not part of the Registry yet\n\n\nvar polarAreaAttrs = require('../plots/polar/legacy/area_attributes');\n\nvar polarAxisAttrs = require('../plots/polar/legacy/axis_attributes');\n\nvar editTypes = require('./edit_types');\n\nvar extendFlat = Lib.extendFlat;\nvar extendDeepAll = Lib.extendDeepAll;\nvar isPlainObject = Lib.isPlainObject;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar nestedProperty = Lib.nestedProperty;\nvar valObjectMeta = Lib.valObjectMeta;\nvar IS_SUBPLOT_OBJ = '_isSubplotObj';\nvar IS_LINKED_TO_ARRAY = '_isLinkedToArray';\nvar ARRAY_ATTR_REGEXPS = '_arrayAttrRegexps';\nvar DEPRECATED = '_deprecated';\nvar UNDERSCORE_ATTRS = [IS_SUBPLOT_OBJ, IS_LINKED_TO_ARRAY, ARRAY_ATTR_REGEXPS, DEPRECATED];\nexports.IS_SUBPLOT_OBJ = IS_SUBPLOT_OBJ;\nexports.IS_LINKED_TO_ARRAY = IS_LINKED_TO_ARRAY;\nexports.DEPRECATED = DEPRECATED;\nexports.UNDERSCORE_ATTRS = UNDERSCORE_ATTRS;\n/** Outputs the full plotly.js plot schema\n *\n * @return {object}\n *  - defs\n *  - traces\n *  - layout\n *  - transforms\n *  - frames\n *  - animations\n *  - config\n */\n\nexports.get = function () {\n  var traces = {};\n  Registry.allTypes.concat('area').forEach(function (type) {\n    traces[type] = getTraceAttributes(type);\n  });\n  var transforms = {};\n  Object.keys(Registry.transformsRegistry).forEach(function (type) {\n    transforms[type] = getTransformAttributes(type);\n  });\n  return {\n    defs: {\n      valObjects: valObjectMeta,\n      metaKeys: UNDERSCORE_ATTRS.concat(['description', 'role', 'editType', 'impliedEdits']),\n      editType: {\n        traces: editTypes.traces,\n        layout: editTypes.layout\n      },\n      impliedEdits: {\n        description: ['Sometimes when an attribute is changed, other attributes', 'must be altered as well in order to achieve the intended', 'result. For example, when `range` is specified, it is', 'important to set `autorange` to `false` or the new `range`', 'value would be lost in the redraw. `impliedEdits` is the', 'mechanism to do this: `impliedEdits: {autorange: false}`.', 'Each key is a relative paths to the attribute string to', 'change, using *^* to ascend into the parent container,', 'for example `range[0]` has `impliedEdits: {*^autorange*: false}`.', 'A value of `undefined` means that the attribute will not be', 'changed, but its previous value should be recorded in case', 'we want to reverse this change later. For example, `autorange`', 'has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined}', 'because the range will likely be changed by redraw.'].join(' ')\n      }\n    },\n    traces: traces,\n    layout: getLayoutAttributes(),\n    transforms: transforms,\n    frames: getFramesAttributes(),\n    animation: formatAttributes(animationAttributes),\n    config: formatAttributes(configAttributes)\n  };\n};\n/**\n * Crawl the attribute tree, recursively calling a callback function\n *\n * @param {object} attrs\n *  The node of the attribute tree (e.g. the root) from which recursion originates\n * @param {Function} callback\n *  A callback function with the signature:\n *          @callback callback\n *          @param {object} attr an attribute\n *          @param {String} attrName name string\n *          @param {object[]} attrs all the attributes\n *          @param {Number} level the recursion level, 0 at the root\n *          @param {String} fullAttrString full attribute name (ie 'marker.line')\n * @param {Number} [specifiedLevel]\n *  The level in the tree, in order to let the callback function detect descend or backtrack,\n *  typically unsupplied (implied 0), just used by the self-recursive call.\n *  The necessity arises because the tree traversal is not controlled by callback return values.\n *  The decision to not use callback return values for controlling tree pruning arose from\n *  the goal of keeping the crawler backwards compatible. Observe that one of the pruning conditions\n *  precedes the callback call.\n * @param {string} [attrString]\n *  the path to the current attribute, as an attribute string (ie 'marker.line')\n *  typically unsupplied, but you may supply it if you want to disambiguate which attrs tree you\n *  are starting from\n *\n * @return {object} transformOut\n *  copy of transformIn that contains attribute defaults\n */\n\n\nexports.crawl = function (attrs, callback, specifiedLevel, attrString) {\n  var level = specifiedLevel || 0;\n  attrString = attrString || '';\n  Object.keys(attrs).forEach(function (attrName) {\n    var attr = attrs[attrName];\n    if (UNDERSCORE_ATTRS.indexOf(attrName) !== -1) return;\n    var fullAttrString = (attrString ? attrString + '.' : '') + attrName;\n    callback(attr, attrName, attrs, level, fullAttrString);\n    if (exports.isValObject(attr)) return;\n\n    if (isPlainObject(attr) && attrName !== 'impliedEdits') {\n      exports.crawl(attr, callback, level + 1, fullAttrString);\n    }\n  });\n};\n/** Is object a value object (or a container object)?\n *\n * @param {object} obj\n * @return {boolean}\n *  returns true for a valid value object and\n *  false for tree nodes in the attribute hierarchy\n */\n\n\nexports.isValObject = function (obj) {\n  return obj && obj.valType !== undefined;\n};\n/**\n * Find all data array attributes in a given trace object - including\n * `arrayOk` attributes.\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n *\n * @return {array} arrayAttributes\n *  list of array attributes for the given trace\n */\n\n\nexports.findArrayAttributes = function (trace) {\n  var arrayAttributes = [];\n  var stack = [];\n  var isArrayStack = [];\n  var baseContainer, baseAttrName;\n\n  function callback(attr, attrName, attrs, level) {\n    stack = stack.slice(0, level).concat([attrName]);\n    isArrayStack = isArrayStack.slice(0, level).concat([attr && attr._isLinkedToArray]);\n    var splittableAttr = attr && (attr.valType === 'data_array' || attr.arrayOk === true) && !(stack[level - 1] === 'colorbar' && (attrName === 'ticktext' || attrName === 'tickvals')); // Manually exclude 'colorbar.tickvals' and 'colorbar.ticktext' for now\n    // which are declared as `valType: 'data_array'` but scale independently of\n    // the coordinate arrays.\n    //\n    // Down the road, we might want to add a schema field (e.g `uncorrelatedArray: true`)\n    // to distinguish attributes of the likes.\n\n    if (!splittableAttr) return;\n    crawlIntoTrace(baseContainer, 0, '');\n  }\n\n  function crawlIntoTrace(container, i, astrPartial) {\n    var item = container[stack[i]];\n    var newAstrPartial = astrPartial + stack[i];\n\n    if (i === stack.length - 1) {\n      if (isArrayOrTypedArray(item)) {\n        arrayAttributes.push(baseAttrName + newAstrPartial);\n      }\n    } else {\n      if (isArrayStack[i]) {\n        if (Array.isArray(item)) {\n          for (var j = 0; j < item.length; j++) {\n            if (isPlainObject(item[j])) {\n              crawlIntoTrace(item[j], i + 1, newAstrPartial + '[' + j + '].');\n            }\n          }\n        }\n      } else if (isPlainObject(item)) {\n        crawlIntoTrace(item, i + 1, newAstrPartial + '.');\n      }\n    }\n  }\n\n  baseContainer = trace;\n  baseAttrName = '';\n  exports.crawl(baseAttributes, callback);\n\n  if (trace._module && trace._module.attributes) {\n    exports.crawl(trace._module.attributes, callback);\n  }\n\n  var transforms = trace.transforms;\n\n  if (transforms) {\n    for (var i = 0; i < transforms.length; i++) {\n      var transform = transforms[i];\n      var module = transform._module;\n\n      if (module) {\n        baseAttrName = 'transforms[' + i + '].';\n        baseContainer = transform;\n        exports.crawl(module.attributes, callback);\n      }\n    }\n  }\n\n  return arrayAttributes;\n};\n/*\n * Find the valObject for one attribute in an existing trace\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n * @param {object} parts\n *  an array of parts, like ['transforms', 1, 'value']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\n\n\nexports.getTraceValObject = function (trace, parts) {\n  var head = parts[0];\n  var i = 1; // index to start recursing from\n\n  var moduleAttrs, valObject;\n\n  if (head === 'transforms') {\n    if (parts.length === 1) {\n      return baseAttributes.transforms;\n    }\n\n    var transforms = trace.transforms;\n    if (!Array.isArray(transforms) || !transforms.length) return false;\n    var tNum = parts[1];\n\n    if (!isIndex(tNum) || tNum >= transforms.length) {\n      return false;\n    }\n\n    moduleAttrs = (Registry.transformsRegistry[transforms[tNum].type] || {}).attributes;\n    valObject = moduleAttrs && moduleAttrs[parts[2]];\n    i = 3; // start recursing only inside the transform\n  } else if (trace.type === 'area') {\n    valObject = polarAreaAttrs[head];\n  } else {\n    // first look in the module for this trace\n    // components have already merged their trace attributes in here\n    var _module = trace._module;\n    if (!_module) _module = (Registry.modules[trace.type || baseAttributes.type.dflt] || {})._module;\n    if (!_module) return false;\n    moduleAttrs = _module.attributes;\n    valObject = moduleAttrs && moduleAttrs[head]; // then look in the subplot attributes\n\n    if (!valObject) {\n      var subplotModule = _module.basePlotModule;\n\n      if (subplotModule && subplotModule.attributes) {\n        valObject = subplotModule.attributes[head];\n      }\n    } // finally look in the global attributes\n\n\n    if (!valObject) valObject = baseAttributes[head];\n  }\n\n  return recurseIntoValObject(valObject, parts, i);\n};\n/*\n * Find the valObject for one layout attribute\n *\n * @param {array} parts\n *  an array of parts, like ['annotations', 1, 'x']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\n\n\nexports.getLayoutValObject = function (fullLayout, parts) {\n  var valObject = layoutHeadAttr(fullLayout, parts[0]);\n  return recurseIntoValObject(valObject, parts, 1);\n};\n\nfunction layoutHeadAttr(fullLayout, head) {\n  var i, key, _module, attributes; // look for attributes of the subplot types used on the plot\n\n\n  var basePlotModules = fullLayout._basePlotModules;\n\n  if (basePlotModules) {\n    var out;\n\n    for (i = 0; i < basePlotModules.length; i++) {\n      _module = basePlotModules[i];\n\n      if (_module.attrRegex && _module.attrRegex.test(head)) {\n        // if a module defines overrides, these take precedence\n        // initially this is to allow gl2d different editTypes from svg cartesian\n        if (_module.layoutAttrOverrides) return _module.layoutAttrOverrides; // otherwise take the first attributes we find\n\n        if (!out && _module.layoutAttributes) out = _module.layoutAttributes;\n      } // a module can also override the behavior of base (and component) module layout attrs\n      // again see gl2d for initial use case\n\n\n      var baseOverrides = _module.baseLayoutAttrOverrides;\n      if (baseOverrides && head in baseOverrides) return baseOverrides[head];\n    }\n\n    if (out) return out;\n  } // look for layout attributes contributed by traces on the plot\n\n\n  var modules = fullLayout._modules;\n\n  if (modules) {\n    for (i = 0; i < modules.length; i++) {\n      attributes = modules[i].layoutAttributes;\n\n      if (attributes && head in attributes) {\n        return attributes[head];\n      }\n    }\n  }\n  /*\n   * Next look in components.\n   * Components that define a schema have already merged this into\n   * base and subplot attribute defs, so ignore these.\n   * Others (older style) all put all their attributes\n   * inside a container matching the module `name`\n   * eg `attributes` (array) or `legend` (object)\n   */\n\n\n  for (key in Registry.componentsRegistry) {\n    _module = Registry.componentsRegistry[key];\n\n    if (_module.name === 'colorscale' && head.indexOf('coloraxis') === 0) {\n      return _module.layoutAttributes[head];\n    } else if (!_module.schema && head === _module.name) {\n      return _module.layoutAttributes;\n    }\n  }\n\n  if (head in baseLayoutAttributes) return baseLayoutAttributes[head]; // Polar doesn't populate _modules or _basePlotModules\n  // just fall back on these when the others fail\n\n  if (head === 'radialaxis' || head === 'angularaxis') {\n    return polarAxisAttrs[head];\n  }\n\n  return polarAxisAttrs.layout[head] || false;\n}\n\nfunction recurseIntoValObject(valObject, parts, i) {\n  if (!valObject) return false;\n\n  if (valObject._isLinkedToArray) {\n    // skip array index, abort if we try to dive into an array without an index\n    if (isIndex(parts[i])) i++;else if (i < parts.length) return false;\n  } // now recurse as far as we can. Occasionally we have an attribute\n  // setting an internal part below what's in the schema; just return\n  // the innermost schema item we find.\n\n\n  for (; i < parts.length; i++) {\n    var newValObject = valObject[parts[i]];\n    if (isPlainObject(newValObject)) valObject = newValObject;else break;\n    if (i === parts.length - 1) break;\n\n    if (valObject._isLinkedToArray) {\n      i++;\n      if (!isIndex(parts[i])) return false;\n    } else if (valObject.valType === 'info_array') {\n      i++;\n      var index = parts[i];\n      if (!isIndex(index)) return false;\n      var items = valObject.items;\n\n      if (Array.isArray(items)) {\n        if (index >= items.length) return false;\n\n        if (valObject.dimensions === 2) {\n          i++;\n          if (parts.length === i) return valObject;\n          var index2 = parts[i];\n          if (!isIndex(index2)) return false;\n          valObject = items[index][index2];\n        } else valObject = items[index];\n      } else {\n        valObject = items;\n      }\n    }\n  }\n\n  return valObject;\n} // note: this is different from Lib.isIndex, this one doesn't accept numeric\n// strings, only actual numbers.\n\n\nfunction isIndex(val) {\n  return val === Math.round(val) && val >= 0;\n}\n\nfunction getTraceAttributes(type) {\n  var _module, basePlotModule;\n\n  if (type === 'area') {\n    _module = {\n      attributes: polarAreaAttrs\n    };\n    basePlotModule = {};\n  } else {\n    _module = Registry.modules[type]._module, basePlotModule = _module.basePlotModule;\n  }\n\n  var attributes = {}; // make 'type' the first attribute in the object\n\n  attributes.type = null;\n  var copyBaseAttributes = extendDeepAll({}, baseAttributes);\n  var copyModuleAttributes = extendDeepAll({}, _module.attributes); // prune global-level trace attributes that are already defined in a trace\n\n  exports.crawl(copyModuleAttributes, function (attr, attrName, attrs, level, fullAttrString) {\n    nestedProperty(copyBaseAttributes, fullAttrString).set(undefined); // Prune undefined attributes\n\n    if (attr === undefined) nestedProperty(copyModuleAttributes, fullAttrString).set(undefined);\n  }); // base attributes (same for all trace types)\n\n  extendDeepAll(attributes, copyBaseAttributes); // prune-out base attributes based on trace module categories\n\n  if (Registry.traceIs(type, 'noOpacity')) {\n    delete attributes.opacity;\n  }\n\n  if (!Registry.traceIs(type, 'showLegend')) {\n    delete attributes.showlegend;\n    delete attributes.legendgroup;\n  }\n\n  if (Registry.traceIs(type, 'noHover')) {\n    delete attributes.hoverinfo;\n    delete attributes.hoverlabel;\n  }\n\n  if (!_module.selectPoints) {\n    delete attributes.selectedpoints;\n  } // module attributes\n\n\n  extendDeepAll(attributes, copyModuleAttributes); // subplot attributes\n\n  if (basePlotModule.attributes) {\n    extendDeepAll(attributes, basePlotModule.attributes);\n  } // 'type' gets overwritten by baseAttributes; reset it here\n\n\n  attributes.type = type;\n  var out = {\n    meta: _module.meta || {},\n    categories: _module.categories || {},\n    animatable: Boolean(_module.animatable),\n    type: type,\n    attributes: formatAttributes(attributes)\n  }; // trace-specific layout attributes\n\n  if (_module.layoutAttributes) {\n    var layoutAttributes = {};\n    extendDeepAll(layoutAttributes, _module.layoutAttributes);\n    out.layoutAttributes = formatAttributes(layoutAttributes);\n  } // drop anim:true in non-animatable modules\n\n\n  if (!_module.animatable) {\n    exports.crawl(out, function (attr) {\n      if (exports.isValObject(attr) && 'anim' in attr) {\n        delete attr.anim;\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction getLayoutAttributes() {\n  var layoutAttributes = {};\n\n  var key, _module; // global layout attributes\n\n\n  extendDeepAll(layoutAttributes, baseLayoutAttributes); // add base plot module layout attributes\n\n  for (key in Registry.subplotsRegistry) {\n    _module = Registry.subplotsRegistry[key];\n    if (!_module.layoutAttributes) continue;\n\n    if (Array.isArray(_module.attr)) {\n      for (var i = 0; i < _module.attr.length; i++) {\n        handleBasePlotModule(layoutAttributes, _module, _module.attr[i]);\n      }\n    } else {\n      var astr = _module.attr === 'subplot' ? _module.name : _module.attr;\n      handleBasePlotModule(layoutAttributes, _module, astr);\n    }\n  } // polar layout attributes\n\n\n  layoutAttributes = assignPolarLayoutAttrs(layoutAttributes); // add registered components layout attributes\n\n  for (key in Registry.componentsRegistry) {\n    _module = Registry.componentsRegistry[key];\n    var schema = _module.schema;\n\n    if (schema && (schema.subplots || schema.layout)) {\n      /*\n       * Components with defined schema have already been merged in at register time\n       * but a few components define attributes that apply only to xaxis\n       * not yaxis (rangeselector, rangeslider) - delete from y schema.\n       * Note that the input attributes for xaxis/yaxis are the same object\n       * so it's not possible to only add them to xaxis from the start.\n       * If we ever have such asymmetry the other way, or anywhere else,\n       * we will need to extend both this code and mergeComponentAttrsToSubplot\n       * (which will not find yaxis only for example)\n       */\n      var subplots = schema.subplots;\n\n      if (subplots && subplots.xaxis && !subplots.yaxis) {\n        for (var xkey in subplots.xaxis) {\n          delete layoutAttributes.yaxis[xkey];\n        }\n      }\n    } else if (_module.name === 'colorscale') {\n      extendDeepAll(layoutAttributes, _module.layoutAttributes);\n    } else if (_module.layoutAttributes) {\n      // older style without schema need to be explicitly merged in now\n      insertAttrs(layoutAttributes, _module.layoutAttributes, _module.name);\n    }\n  }\n\n  return {\n    layoutAttributes: formatAttributes(layoutAttributes)\n  };\n}\n\nfunction getTransformAttributes(type) {\n  var _module = Registry.transformsRegistry[type];\n  var attributes = extendDeepAll({}, _module.attributes); // add registered components transform attributes\n\n  Object.keys(Registry.componentsRegistry).forEach(function (k) {\n    var _module = Registry.componentsRegistry[k];\n\n    if (_module.schema && _module.schema.transforms && _module.schema.transforms[type]) {\n      Object.keys(_module.schema.transforms[type]).forEach(function (v) {\n        insertAttrs(attributes, _module.schema.transforms[type][v], v);\n      });\n    }\n  });\n  return {\n    attributes: formatAttributes(attributes)\n  };\n}\n\nfunction getFramesAttributes() {\n  var attrs = {\n    frames: extendDeepAll({}, frameAttributes)\n  };\n  formatAttributes(attrs);\n  return attrs.frames;\n}\n\nfunction formatAttributes(attrs) {\n  mergeValTypeAndRole(attrs);\n  formatArrayContainers(attrs);\n  stringify(attrs);\n  return attrs;\n}\n\nfunction mergeValTypeAndRole(attrs) {\n  function makeSrcAttr(attrName) {\n    return {\n      valType: 'string',\n      role: 'info',\n      description: ['Sets the source reference on Chart Studio Cloud for ', attrName, '.'].join(' '),\n      editType: 'none'\n    };\n  }\n\n  function callback(attr, attrName, attrs) {\n    if (exports.isValObject(attr)) {\n      if (attr.valType === 'data_array') {\n        // all 'data_array' attrs have role 'data'\n        attr.role = 'data'; // all 'data_array' attrs have a corresponding 'src' attr\n\n        attrs[attrName + 'src'] = makeSrcAttr(attrName);\n      } else if (attr.arrayOk === true) {\n        // all 'arrayOk' attrs have a corresponding 'src' attr\n        attrs[attrName + 'src'] = makeSrcAttr(attrName);\n      }\n    } else if (isPlainObject(attr)) {\n      // all attrs container objects get role 'object'\n      attr.role = 'object';\n    }\n  }\n\n  exports.crawl(attrs, callback);\n}\n\nfunction formatArrayContainers(attrs) {\n  function callback(attr, attrName, attrs) {\n    if (!attr) return;\n    var itemName = attr[IS_LINKED_TO_ARRAY];\n    if (!itemName) return;\n    delete attr[IS_LINKED_TO_ARRAY];\n    attrs[attrName] = {\n      items: {}\n    };\n    attrs[attrName].items[itemName] = attr;\n    attrs[attrName].role = 'object';\n  }\n\n  exports.crawl(attrs, callback);\n} // this can take around 10ms and should only be run from PlotSchema.get(),\n// to ensure JSON.stringify(PlotSchema.get()) gives the intended result.\n\n\nfunction stringify(attrs) {\n  function walk(attr) {\n    for (var k in attr) {\n      if (isPlainObject(attr[k])) {\n        walk(attr[k]);\n      } else if (Array.isArray(attr[k])) {\n        for (var i = 0; i < attr[k].length; i++) {\n          walk(attr[k][i]);\n        }\n      } else {\n        // as JSON.stringify(/test/) // => {}\n        if (attr[k] instanceof RegExp) {\n          attr[k] = attr[k].toString();\n        }\n      }\n    }\n  }\n\n  walk(attrs);\n}\n\nfunction assignPolarLayoutAttrs(layoutAttributes) {\n  extendFlat(layoutAttributes, {\n    radialaxis: polarAxisAttrs.radialaxis,\n    angularaxis: polarAxisAttrs.angularaxis\n  });\n  extendFlat(layoutAttributes, polarAxisAttrs.layout);\n  return layoutAttributes;\n}\n\nfunction handleBasePlotModule(layoutAttributes, _module, astr) {\n  var np = nestedProperty(layoutAttributes, astr);\n  var attrs = extendDeepAll({}, _module.layoutAttributes);\n  attrs[IS_SUBPLOT_OBJ] = true;\n  np.set(attrs);\n}\n\nfunction insertAttrs(baseAttrs, newAttrs, astr) {\n  var np = nestedProperty(baseAttrs, astr);\n  np.set(extendDeepAll(np.get() || {}, newAttrs));\n}","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/plot_api/plot_schema.js"],"names":["Registry","require","Lib","baseAttributes","baseLayoutAttributes","frameAttributes","animationAttributes","configAttributes","polarAreaAttrs","polarAxisAttrs","editTypes","extendFlat","extendDeepAll","isPlainObject","isArrayOrTypedArray","nestedProperty","valObjectMeta","IS_SUBPLOT_OBJ","IS_LINKED_TO_ARRAY","ARRAY_ATTR_REGEXPS","DEPRECATED","UNDERSCORE_ATTRS","exports","get","traces","allTypes","concat","forEach","type","getTraceAttributes","transforms","Object","keys","transformsRegistry","getTransformAttributes","defs","valObjects","metaKeys","editType","layout","impliedEdits","description","join","getLayoutAttributes","frames","getFramesAttributes","animation","formatAttributes","config","crawl","attrs","callback","specifiedLevel","attrString","level","attrName","attr","indexOf","fullAttrString","isValObject","obj","valType","undefined","findArrayAttributes","trace","arrayAttributes","stack","isArrayStack","baseContainer","baseAttrName","slice","_isLinkedToArray","splittableAttr","arrayOk","crawlIntoTrace","container","i","astrPartial","item","newAstrPartial","length","push","Array","isArray","j","_module","attributes","transform","module","getTraceValObject","parts","head","moduleAttrs","valObject","tNum","isIndex","modules","dflt","subplotModule","basePlotModule","recurseIntoValObject","getLayoutValObject","fullLayout","layoutHeadAttr","key","basePlotModules","_basePlotModules","out","attrRegex","test","layoutAttrOverrides","layoutAttributes","baseOverrides","baseLayoutAttrOverrides","_modules","componentsRegistry","name","schema","newValObject","index","items","dimensions","index2","val","Math","round","copyBaseAttributes","copyModuleAttributes","set","traceIs","opacity","showlegend","legendgroup","hoverinfo","hoverlabel","selectPoints","selectedpoints","meta","categories","animatable","Boolean","anim","subplotsRegistry","handleBasePlotModule","astr","assignPolarLayoutAttrs","subplots","xaxis","yaxis","xkey","insertAttrs","k","v","mergeValTypeAndRole","formatArrayContainers","stringify","makeSrcAttr","role","itemName","walk","RegExp","toString","radialaxis","angularaxis","np","baseAttrs","newAttrs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAIE,cAAc,GAAGF,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,4BAAD,CAAlC;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,2BAAD,CAA7B;;AACA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,+BAAD,CAAjC;;AACA,IAAIM,gBAAgB,GAAGN,OAAO,CAAC,eAAD,CAAP,CAAyBM,gBAAhD,C,CAEA;;;AACA,IAAIC,cAAc,GAAGP,OAAO,CAAC,uCAAD,CAA5B;;AACA,IAAIQ,cAAc,GAAGR,OAAO,CAAC,uCAAD,CAA5B;;AAEA,IAAIS,SAAS,GAAGT,OAAO,CAAC,cAAD,CAAvB;;AAEA,IAAIU,UAAU,GAAGT,GAAG,CAACS,UAArB;AACA,IAAIC,aAAa,GAAGV,GAAG,CAACU,aAAxB;AACA,IAAIC,aAAa,GAAGX,GAAG,CAACW,aAAxB;AACA,IAAIC,mBAAmB,GAAGZ,GAAG,CAACY,mBAA9B;AACA,IAAIC,cAAc,GAAGb,GAAG,CAACa,cAAzB;AACA,IAAIC,aAAa,GAAGd,GAAG,CAACc,aAAxB;AAEA,IAAIC,cAAc,GAAG,eAArB;AACA,IAAIC,kBAAkB,GAAG,kBAAzB;AACA,IAAIC,kBAAkB,GAAG,mBAAzB;AACA,IAAIC,UAAU,GAAG,aAAjB;AACA,IAAIC,gBAAgB,GAAG,CAACJ,cAAD,EAAiBC,kBAAjB,EAAqCC,kBAArC,EAAyDC,UAAzD,CAAvB;AAEAE,OAAO,CAACL,cAAR,GAAyBA,cAAzB;AACAK,OAAO,CAACJ,kBAAR,GAA6BA,kBAA7B;AACAI,OAAO,CAACF,UAAR,GAAqBA,UAArB;AACAE,OAAO,CAACD,gBAAR,GAA2BA,gBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,GAAR,GAAc,YAAW;AACrB,MAAIC,MAAM,GAAG,EAAb;AAEAxB,EAAAA,QAAQ,CAACyB,QAAT,CAAkBC,MAAlB,CAAyB,MAAzB,EAAiCC,OAAjC,CAAyC,UAASC,IAAT,EAAe;AACpDJ,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAeC,kBAAkB,CAACD,IAAD,CAAjC;AACH,GAFD;AAIA,MAAIE,UAAU,GAAG,EAAjB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYhC,QAAQ,CAACiC,kBAArB,EAAyCN,OAAzC,CAAiD,UAASC,IAAT,EAAe;AAC5DE,IAAAA,UAAU,CAACF,IAAD,CAAV,GAAmBM,sBAAsB,CAACN,IAAD,CAAzC;AACH,GAFD;AAIA,SAAO;AACHO,IAAAA,IAAI,EAAE;AACFC,MAAAA,UAAU,EAAEpB,aADV;AAEFqB,MAAAA,QAAQ,EAAEhB,gBAAgB,CAACK,MAAjB,CAAwB,CAAC,aAAD,EAAgB,MAAhB,EAAwB,UAAxB,EAAoC,cAApC,CAAxB,CAFR;AAGFY,MAAAA,QAAQ,EAAE;AACNd,QAAAA,MAAM,EAAEd,SAAS,CAACc,MADZ;AAENe,QAAAA,MAAM,EAAE7B,SAAS,CAAC6B;AAFZ,OAHR;AAOFC,MAAAA,YAAY,EAAE;AACVC,QAAAA,WAAW,EAAE,CACT,0DADS,EAET,0DAFS,EAGT,uDAHS,EAIT,4DAJS,EAKT,0DALS,EAMT,2DANS,EAOT,yDAPS,EAQT,wDARS,EAST,mEATS,EAUT,6DAVS,EAWT,4DAXS,EAYT,gEAZS,EAaT,kEAbS,EAcT,qDAdS,EAeXC,IAfW,CAeN,GAfM;AADH;AAPZ,KADH;AA4BHlB,IAAAA,MAAM,EAAEA,MA5BL;AA6BHe,IAAAA,MAAM,EAAEI,mBAAmB,EA7BxB;AA+BHb,IAAAA,UAAU,EAAEA,UA/BT;AAiCHc,IAAAA,MAAM,EAAEC,mBAAmB,EAjCxB;AAkCHC,IAAAA,SAAS,EAAEC,gBAAgB,CAACzC,mBAAD,CAlCxB;AAoCH0C,IAAAA,MAAM,EAAED,gBAAgB,CAACxC,gBAAD;AApCrB,GAAP;AAsCH,CAnDD;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAe,OAAO,CAAC2B,KAAR,GAAgB,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,cAA1B,EAA0CC,UAA1C,EAAsD;AAClE,MAAIC,KAAK,GAAGF,cAAc,IAAI,CAA9B;AACAC,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEAtB,EAAAA,MAAM,CAACC,IAAP,CAAYkB,KAAZ,EAAmBvB,OAAnB,CAA2B,UAAS4B,QAAT,EAAmB;AAC1C,QAAIC,IAAI,GAAGN,KAAK,CAACK,QAAD,CAAhB;AAEA,QAAGlC,gBAAgB,CAACoC,OAAjB,CAAyBF,QAAzB,MAAuC,CAAC,CAA3C,EAA8C;AAE9C,QAAIG,cAAc,GAAG,CAACL,UAAU,GAAGA,UAAU,GAAG,GAAhB,GAAsB,EAAjC,IAAuCE,QAA5D;AACAJ,IAAAA,QAAQ,CAACK,IAAD,EAAOD,QAAP,EAAiBL,KAAjB,EAAwBI,KAAxB,EAA+BI,cAA/B,CAAR;AAEA,QAAGpC,OAAO,CAACqC,WAAR,CAAoBH,IAApB,CAAH,EAA8B;;AAE9B,QAAG3C,aAAa,CAAC2C,IAAD,CAAb,IAAuBD,QAAQ,KAAK,cAAvC,EAAuD;AACnDjC,MAAAA,OAAO,CAAC2B,KAAR,CAAcO,IAAd,EAAoBL,QAApB,EAA8BG,KAAK,GAAG,CAAtC,EAAyCI,cAAzC;AACH;AACJ,GAbD;AAcH,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApC,OAAO,CAACqC,WAAR,GAAsB,UAASC,GAAT,EAAc;AAChC,SAAOA,GAAG,IAAIA,GAAG,CAACC,OAAJ,KAAgBC,SAA9B;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxC,OAAO,CAACyC,mBAAR,GAA8B,UAASC,KAAT,EAAgB;AAC1C,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,aAAJ,EAAmBC,YAAnB;;AAEA,WAASlB,QAAT,CAAkBK,IAAlB,EAAwBD,QAAxB,EAAkCL,KAAlC,EAAyCI,KAAzC,EAAgD;AAC5CY,IAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAehB,KAAf,EAAsB5B,MAAtB,CAA6B,CAAC6B,QAAD,CAA7B,CAAR;AACAY,IAAAA,YAAY,GAAGA,YAAY,CAACG,KAAb,CAAmB,CAAnB,EAAsBhB,KAAtB,EAA6B5B,MAA7B,CAAoC,CAAC8B,IAAI,IAAIA,IAAI,CAACe,gBAAd,CAApC,CAAf;AAEA,QAAIC,cAAc,GACdhB,IAAI,KACHA,IAAI,CAACK,OAAL,KAAiB,YAAjB,IAAiCL,IAAI,CAACiB,OAAL,KAAiB,IAD/C,CAAJ,IAEA,EAAEP,KAAK,CAACZ,KAAK,GAAG,CAAT,CAAL,KAAqB,UAArB,KAAoCC,QAAQ,KAAK,UAAb,IAA2BA,QAAQ,KAAK,UAA5E,CAAF,CAHJ,CAJ4C,CAU5C;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAG,CAACiB,cAAJ,EAAoB;AAEpBE,IAAAA,cAAc,CAACN,aAAD,EAAgB,CAAhB,EAAmB,EAAnB,CAAd;AACH;;AAED,WAASM,cAAT,CAAwBC,SAAxB,EAAmCC,CAAnC,EAAsCC,WAAtC,EAAmD;AAC/C,QAAIC,IAAI,GAAGH,SAAS,CAACT,KAAK,CAACU,CAAD,CAAN,CAApB;AACA,QAAIG,cAAc,GAAGF,WAAW,GAAGX,KAAK,CAACU,CAAD,CAAxC;;AACA,QAAGA,CAAC,KAAKV,KAAK,CAACc,MAAN,GAAe,CAAxB,EAA2B;AACvB,UAAGlE,mBAAmB,CAACgE,IAAD,CAAtB,EAA8B;AAC1Bb,QAAAA,eAAe,CAACgB,IAAhB,CAAqBZ,YAAY,GAAGU,cAApC;AACH;AACJ,KAJD,MAIO;AACH,UAAGZ,YAAY,CAACS,CAAD,CAAf,EAAoB;AAChB,YAAGM,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAH,EAAwB;AACpB,eAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,IAAI,CAACE,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACjC,gBAAGvE,aAAa,CAACiE,IAAI,CAACM,CAAD,CAAL,CAAhB,EAA2B;AACvBV,cAAAA,cAAc,CAACI,IAAI,CAACM,CAAD,CAAL,EAAUR,CAAC,GAAG,CAAd,EAAiBG,cAAc,GAAG,GAAjB,GAAuBK,CAAvB,GAA2B,IAA5C,CAAd;AACH;AACJ;AACJ;AACJ,OARD,MAQO,IAAGvE,aAAa,CAACiE,IAAD,CAAhB,EAAwB;AAC3BJ,QAAAA,cAAc,CAACI,IAAD,EAAOF,CAAC,GAAG,CAAX,EAAcG,cAAc,GAAG,GAA/B,CAAd;AACH;AACJ;AACJ;;AAEDX,EAAAA,aAAa,GAAGJ,KAAhB;AACAK,EAAAA,YAAY,GAAG,EAAf;AACA/C,EAAAA,OAAO,CAAC2B,KAAR,CAAc9C,cAAd,EAA8BgD,QAA9B;;AACA,MAAGa,KAAK,CAACqB,OAAN,IAAiBrB,KAAK,CAACqB,OAAN,CAAcC,UAAlC,EAA8C;AAC1ChE,IAAAA,OAAO,CAAC2B,KAAR,CAAce,KAAK,CAACqB,OAAN,CAAcC,UAA5B,EAAwCnC,QAAxC;AACH;;AAED,MAAIrB,UAAU,GAAGkC,KAAK,CAAClC,UAAvB;;AACA,MAAGA,UAAH,EAAe;AACX,SAAI,IAAI8C,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG9C,UAAU,CAACkD,MAA9B,EAAsCJ,CAAC,EAAvC,EAA2C;AACvC,UAAIW,SAAS,GAAGzD,UAAU,CAAC8C,CAAD,CAA1B;AACA,UAAIY,MAAM,GAAGD,SAAS,CAACF,OAAvB;;AAEA,UAAGG,MAAH,EAAW;AACPnB,QAAAA,YAAY,GAAG,gBAAgBO,CAAhB,GAAoB,IAAnC;AACAR,QAAAA,aAAa,GAAGmB,SAAhB;AAEAjE,QAAAA,OAAO,CAAC2B,KAAR,CAAcuC,MAAM,CAACF,UAArB,EAAiCnC,QAAjC;AACH;AACJ;AACJ;;AAED,SAAOc,eAAP;AACH,CAzED;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3C,OAAO,CAACmE,iBAAR,GAA4B,UAASzB,KAAT,EAAgB0B,KAAhB,EAAuB;AAC/C,MAAIC,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB;AACA,MAAId,CAAC,GAAG,CAAR,CAF+C,CAEpC;;AACX,MAAIgB,WAAJ,EAAiBC,SAAjB;;AAEA,MAAGF,IAAI,KAAK,YAAZ,EAA0B;AACtB,QAAGD,KAAK,CAACV,MAAN,KAAiB,CAApB,EAAuB;AACnB,aAAO7E,cAAc,CAAC2B,UAAtB;AACH;;AACD,QAAIA,UAAU,GAAGkC,KAAK,CAAClC,UAAvB;AACA,QAAG,CAACoD,KAAK,CAACC,OAAN,CAAcrD,UAAd,CAAD,IAA8B,CAACA,UAAU,CAACkD,MAA7C,EAAqD,OAAO,KAAP;AACrD,QAAIc,IAAI,GAAGJ,KAAK,CAAC,CAAD,CAAhB;;AACA,QAAG,CAACK,OAAO,CAACD,IAAD,CAAR,IAAkBA,IAAI,IAAIhE,UAAU,CAACkD,MAAxC,EAAgD;AAC5C,aAAO,KAAP;AACH;;AACDY,IAAAA,WAAW,GAAG,CAAC5F,QAAQ,CAACiC,kBAAT,CAA4BH,UAAU,CAACgE,IAAD,CAAV,CAAiBlE,IAA7C,KAAsD,EAAvD,EAA2D0D,UAAzE;AACAO,IAAAA,SAAS,GAAGD,WAAW,IAAIA,WAAW,CAACF,KAAK,CAAC,CAAD,CAAN,CAAtC;AACAd,IAAAA,CAAC,GAAG,CAAJ,CAZsB,CAYf;AACV,GAbD,MAaO,IAAGZ,KAAK,CAACpC,IAAN,KAAe,MAAlB,EAA0B;AAC7BiE,IAAAA,SAAS,GAAGrF,cAAc,CAACmF,IAAD,CAA1B;AACH,GAFM,MAEA;AACH;AACA;AACA,QAAIN,OAAO,GAAGrB,KAAK,CAACqB,OAApB;AACA,QAAG,CAACA,OAAJ,EAAaA,OAAO,GAAG,CAACrF,QAAQ,CAACgG,OAAT,CAAiBhC,KAAK,CAACpC,IAAN,IAAczB,cAAc,CAACyB,IAAf,CAAoBqE,IAAnD,KAA4D,EAA7D,EAAiEZ,OAA3E;AACb,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEbO,IAAAA,WAAW,GAAGP,OAAO,CAACC,UAAtB;AACAO,IAAAA,SAAS,GAAGD,WAAW,IAAIA,WAAW,CAACD,IAAD,CAAtC,CARG,CAUH;;AACA,QAAG,CAACE,SAAJ,EAAe;AACX,UAAIK,aAAa,GAAGb,OAAO,CAACc,cAA5B;;AACA,UAAGD,aAAa,IAAIA,aAAa,CAACZ,UAAlC,EAA8C;AAC1CO,QAAAA,SAAS,GAAGK,aAAa,CAACZ,UAAd,CAAyBK,IAAzB,CAAZ;AACH;AACJ,KAhBE,CAkBH;;;AACA,QAAG,CAACE,SAAJ,EAAeA,SAAS,GAAG1F,cAAc,CAACwF,IAAD,CAA1B;AAClB;;AAED,SAAOS,oBAAoB,CAACP,SAAD,EAAYH,KAAZ,EAAmBd,CAAnB,CAA3B;AACH,CA3CD;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtD,OAAO,CAAC+E,kBAAR,GAA6B,UAASC,UAAT,EAAqBZ,KAArB,EAA4B;AACrD,MAAIG,SAAS,GAAGU,cAAc,CAACD,UAAD,EAAaZ,KAAK,CAAC,CAAD,CAAlB,CAA9B;AAEA,SAAOU,oBAAoB,CAACP,SAAD,EAAYH,KAAZ,EAAmB,CAAnB,CAA3B;AACH,CAJD;;AAMA,SAASa,cAAT,CAAwBD,UAAxB,EAAoCX,IAApC,EAA0C;AACtC,MAAIf,CAAJ,EAAO4B,GAAP,EAAYnB,OAAZ,EAAqBC,UAArB,CADsC,CAGtC;;;AACA,MAAImB,eAAe,GAAGH,UAAU,CAACI,gBAAjC;;AACA,MAAGD,eAAH,EAAoB;AAChB,QAAIE,GAAJ;;AACA,SAAI/B,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG6B,eAAe,CAACzB,MAA/B,EAAuCJ,CAAC,EAAxC,EAA4C;AACxCS,MAAAA,OAAO,GAAGoB,eAAe,CAAC7B,CAAD,CAAzB;;AACA,UAAGS,OAAO,CAACuB,SAAR,IAAqBvB,OAAO,CAACuB,SAAR,CAAkBC,IAAlB,CAAuBlB,IAAvB,CAAxB,EAAsD;AAClD;AACA;AACA,YAAGN,OAAO,CAACyB,mBAAX,EAAgC,OAAOzB,OAAO,CAACyB,mBAAf,CAHkB,CAKlD;;AACA,YAAG,CAACH,GAAD,IAAQtB,OAAO,CAAC0B,gBAAnB,EAAqCJ,GAAG,GAAGtB,OAAO,CAAC0B,gBAAd;AACxC,OATuC,CAWxC;AACA;;;AACA,UAAIC,aAAa,GAAG3B,OAAO,CAAC4B,uBAA5B;AACA,UAAGD,aAAa,IAAIrB,IAAI,IAAIqB,aAA5B,EAA2C,OAAOA,aAAa,CAACrB,IAAD,CAApB;AAC9C;;AACD,QAAGgB,GAAH,EAAQ,OAAOA,GAAP;AACX,GAxBqC,CA0BtC;;;AACA,MAAIX,OAAO,GAAGM,UAAU,CAACY,QAAzB;;AACA,MAAGlB,OAAH,EAAY;AACR,SAAIpB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGoB,OAAO,CAAChB,MAAvB,EAA+BJ,CAAC,EAAhC,EAAoC;AAChCU,MAAAA,UAAU,GAAGU,OAAO,CAACpB,CAAD,CAAP,CAAWmC,gBAAxB;;AACA,UAAGzB,UAAU,IAAIK,IAAI,IAAIL,UAAzB,EAAqC;AACjC,eAAOA,UAAU,CAACK,IAAD,CAAjB;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,OAAIa,GAAJ,IAAWxG,QAAQ,CAACmH,kBAApB,EAAwC;AACpC9B,IAAAA,OAAO,GAAGrF,QAAQ,CAACmH,kBAAT,CAA4BX,GAA5B,CAAV;;AACA,QAAGnB,OAAO,CAAC+B,IAAR,KAAiB,YAAjB,IAAiCzB,IAAI,CAAClC,OAAL,CAAa,WAAb,MAA8B,CAAlE,EAAqE;AACjE,aAAO4B,OAAO,CAAC0B,gBAAR,CAAyBpB,IAAzB,CAAP;AACH,KAFD,MAEO,IAAG,CAACN,OAAO,CAACgC,MAAT,IAAoB1B,IAAI,KAAKN,OAAO,CAAC+B,IAAxC,EAA+C;AAClD,aAAO/B,OAAO,CAAC0B,gBAAf;AACH;AACJ;;AAED,MAAGpB,IAAI,IAAIvF,oBAAX,EAAiC,OAAOA,oBAAoB,CAACuF,IAAD,CAA3B,CAtDK,CAwDtC;AACA;;AACA,MAAGA,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,aAArC,EAAoD;AAChD,WAAOlF,cAAc,CAACkF,IAAD,CAArB;AACH;;AACD,SAAOlF,cAAc,CAAC8B,MAAf,CAAsBoD,IAAtB,KAA+B,KAAtC;AACH;;AAED,SAASS,oBAAT,CAA8BP,SAA9B,EAAyCH,KAAzC,EAAgDd,CAAhD,EAAmD;AAC/C,MAAG,CAACiB,SAAJ,EAAe,OAAO,KAAP;;AAEf,MAAGA,SAAS,CAACtB,gBAAb,EAA+B;AAC3B;AACA,QAAGwB,OAAO,CAACL,KAAK,CAACd,CAAD,CAAN,CAAV,EAAsBA,CAAC,GAAvB,KACK,IAAGA,CAAC,GAAGc,KAAK,CAACV,MAAb,EAAqB,OAAO,KAAP;AAC7B,GAP8C,CAS/C;AACA;AACA;;;AACA,SAAMJ,CAAC,GAAGc,KAAK,CAACV,MAAhB,EAAwBJ,CAAC,EAAzB,EAA6B;AACzB,QAAI0C,YAAY,GAAGzB,SAAS,CAACH,KAAK,CAACd,CAAD,CAAN,CAA5B;AACA,QAAG/D,aAAa,CAACyG,YAAD,CAAhB,EAAgCzB,SAAS,GAAGyB,YAAZ,CAAhC,KACK;AAEL,QAAG1C,CAAC,KAAKc,KAAK,CAACV,MAAN,GAAe,CAAxB,EAA2B;;AAE3B,QAAGa,SAAS,CAACtB,gBAAb,EAA+B;AAC3BK,MAAAA,CAAC;AACD,UAAG,CAACmB,OAAO,CAACL,KAAK,CAACd,CAAD,CAAN,CAAX,EAAuB,OAAO,KAAP;AAC1B,KAHD,MAGO,IAAGiB,SAAS,CAAChC,OAAV,KAAsB,YAAzB,EAAuC;AAC1Ce,MAAAA,CAAC;AACD,UAAI2C,KAAK,GAAG7B,KAAK,CAACd,CAAD,CAAjB;AACA,UAAG,CAACmB,OAAO,CAACwB,KAAD,CAAX,EAAoB,OAAO,KAAP;AAEpB,UAAIC,KAAK,GAAG3B,SAAS,CAAC2B,KAAtB;;AACA,UAAGtC,KAAK,CAACC,OAAN,CAAcqC,KAAd,CAAH,EAAyB;AACrB,YAAGD,KAAK,IAAIC,KAAK,CAACxC,MAAlB,EAA0B,OAAO,KAAP;;AAC1B,YAAGa,SAAS,CAAC4B,UAAV,KAAyB,CAA5B,EAA+B;AAC3B7C,UAAAA,CAAC;AACD,cAAGc,KAAK,CAACV,MAAN,KAAiBJ,CAApB,EAAuB,OAAOiB,SAAP;AACvB,cAAI6B,MAAM,GAAGhC,KAAK,CAACd,CAAD,CAAlB;AACA,cAAG,CAACmB,OAAO,CAAC2B,MAAD,CAAX,EAAqB,OAAO,KAAP;AACrB7B,UAAAA,SAAS,GAAG2B,KAAK,CAACD,KAAD,CAAL,CAAaG,MAAb,CAAZ;AACH,SAND,MAMO7B,SAAS,GAAG2B,KAAK,CAACD,KAAD,CAAjB;AACV,OATD,MASO;AACH1B,QAAAA,SAAS,GAAG2B,KAAZ;AACH;AACJ;AACJ;;AAED,SAAO3B,SAAP;AACH,C,CAED;AACA;;;AACA,SAASE,OAAT,CAAiB4B,GAAjB,EAAsB;AAClB,SAAOA,GAAG,KAAKC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAR,IAA2BA,GAAG,IAAI,CAAzC;AACH;;AAED,SAAS9F,kBAAT,CAA4BD,IAA5B,EAAkC;AAC9B,MAAIyD,OAAJ,EAAac,cAAb;;AAEA,MAAGvE,IAAI,KAAK,MAAZ,EAAoB;AAChByD,IAAAA,OAAO,GAAG;AAAEC,MAAAA,UAAU,EAAE9E;AAAd,KAAV;AACA2F,IAAAA,cAAc,GAAG,EAAjB;AACH,GAHD,MAGO;AACHd,IAAAA,OAAO,GAAGrF,QAAQ,CAACgG,OAAT,CAAiBpE,IAAjB,EAAuByD,OAAjC,EACAc,cAAc,GAAGd,OAAO,CAACc,cADzB;AAEH;;AAED,MAAIb,UAAU,GAAG,EAAjB,CAX8B,CAa9B;;AACAA,EAAAA,UAAU,CAAC1D,IAAX,GAAkB,IAAlB;AAEA,MAAIkG,kBAAkB,GAAGlH,aAAa,CAAC,EAAD,EAAKT,cAAL,CAAtC;AACA,MAAI4H,oBAAoB,GAAGnH,aAAa,CAAC,EAAD,EAAKyE,OAAO,CAACC,UAAb,CAAxC,CAjB8B,CAmB9B;;AACAhE,EAAAA,OAAO,CAAC2B,KAAR,CAAc8E,oBAAd,EAAoC,UAASvE,IAAT,EAAeD,QAAf,EAAyBL,KAAzB,EAAgCI,KAAhC,EAAuCI,cAAvC,EAAuD;AACvF3C,IAAAA,cAAc,CAAC+G,kBAAD,EAAqBpE,cAArB,CAAd,CAAmDsE,GAAnD,CAAuDlE,SAAvD,EADuF,CAEvF;;AACA,QAAGN,IAAI,KAAKM,SAAZ,EAAuB/C,cAAc,CAACgH,oBAAD,EAAuBrE,cAAvB,CAAd,CAAqDsE,GAArD,CAAyDlE,SAAzD;AAC1B,GAJD,EApB8B,CA0B9B;;AACAlD,EAAAA,aAAa,CAAC0E,UAAD,EAAawC,kBAAb,CAAb,CA3B8B,CA6B9B;;AACA,MAAG9H,QAAQ,CAACiI,OAAT,CAAiBrG,IAAjB,EAAuB,WAAvB,CAAH,EAAwC;AACpC,WAAO0D,UAAU,CAAC4C,OAAlB;AACH;;AACD,MAAG,CAAClI,QAAQ,CAACiI,OAAT,CAAiBrG,IAAjB,EAAuB,YAAvB,CAAJ,EAA0C;AACtC,WAAO0D,UAAU,CAAC6C,UAAlB;AACA,WAAO7C,UAAU,CAAC8C,WAAlB;AACH;;AACD,MAAGpI,QAAQ,CAACiI,OAAT,CAAiBrG,IAAjB,EAAuB,SAAvB,CAAH,EAAsC;AAClC,WAAO0D,UAAU,CAAC+C,SAAlB;AACA,WAAO/C,UAAU,CAACgD,UAAlB;AACH;;AACD,MAAG,CAACjD,OAAO,CAACkD,YAAZ,EAA0B;AACtB,WAAOjD,UAAU,CAACkD,cAAlB;AACH,GA3C6B,CA6C9B;;;AACA5H,EAAAA,aAAa,CAAC0E,UAAD,EAAayC,oBAAb,CAAb,CA9C8B,CAgD9B;;AACA,MAAG5B,cAAc,CAACb,UAAlB,EAA8B;AAC1B1E,IAAAA,aAAa,CAAC0E,UAAD,EAAaa,cAAc,CAACb,UAA5B,CAAb;AACH,GAnD6B,CAqD9B;;;AACAA,EAAAA,UAAU,CAAC1D,IAAX,GAAkBA,IAAlB;AAEA,MAAI+E,GAAG,GAAG;AACN8B,IAAAA,IAAI,EAAEpD,OAAO,CAACoD,IAAR,IAAgB,EADhB;AAENC,IAAAA,UAAU,EAAErD,OAAO,CAACqD,UAAR,IAAsB,EAF5B;AAGNC,IAAAA,UAAU,EAAEC,OAAO,CAACvD,OAAO,CAACsD,UAAT,CAHb;AAIN/G,IAAAA,IAAI,EAAEA,IAJA;AAKN0D,IAAAA,UAAU,EAAEvC,gBAAgB,CAACuC,UAAD;AALtB,GAAV,CAxD8B,CAgE9B;;AACA,MAAGD,OAAO,CAAC0B,gBAAX,EAA6B;AACzB,QAAIA,gBAAgB,GAAG,EAAvB;AAEAnG,IAAAA,aAAa,CAACmG,gBAAD,EAAmB1B,OAAO,CAAC0B,gBAA3B,CAAb;AACAJ,IAAAA,GAAG,CAACI,gBAAJ,GAAuBhE,gBAAgB,CAACgE,gBAAD,CAAvC;AACH,GAtE6B,CAwE9B;;;AACA,MAAG,CAAC1B,OAAO,CAACsD,UAAZ,EAAwB;AACpBrH,IAAAA,OAAO,CAAC2B,KAAR,CAAc0D,GAAd,EAAmB,UAASnD,IAAT,EAAe;AAC9B,UAAGlC,OAAO,CAACqC,WAAR,CAAoBH,IAApB,KAA6B,UAAUA,IAA1C,EAAgD;AAC5C,eAAOA,IAAI,CAACqF,IAAZ;AACH;AACJ,KAJD;AAKH;;AAED,SAAOlC,GAAP;AACH;;AAED,SAAShE,mBAAT,GAA+B;AAC3B,MAAIoE,gBAAgB,GAAG,EAAvB;;AACA,MAAIP,GAAJ,EAASnB,OAAT,CAF2B,CAI3B;;;AACAzE,EAAAA,aAAa,CAACmG,gBAAD,EAAmB3G,oBAAnB,CAAb,CAL2B,CAO3B;;AACA,OAAIoG,GAAJ,IAAWxG,QAAQ,CAAC8I,gBAApB,EAAsC;AAClCzD,IAAAA,OAAO,GAAGrF,QAAQ,CAAC8I,gBAAT,CAA0BtC,GAA1B,CAAV;AAEA,QAAG,CAACnB,OAAO,CAAC0B,gBAAZ,EAA8B;;AAE9B,QAAG7B,KAAK,CAACC,OAAN,CAAcE,OAAO,CAAC7B,IAAtB,CAAH,EAAgC;AAC5B,WAAI,IAAIoB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGS,OAAO,CAAC7B,IAAR,CAAawB,MAAhC,EAAwCJ,CAAC,EAAzC,EAA6C;AACzCmE,QAAAA,oBAAoB,CAAChC,gBAAD,EAAmB1B,OAAnB,EAA4BA,OAAO,CAAC7B,IAAR,CAAaoB,CAAb,CAA5B,CAApB;AACH;AACJ,KAJD,MAIO;AACH,UAAIoE,IAAI,GAAG3D,OAAO,CAAC7B,IAAR,KAAiB,SAAjB,GAA6B6B,OAAO,CAAC+B,IAArC,GAA4C/B,OAAO,CAAC7B,IAA/D;AACAuF,MAAAA,oBAAoB,CAAChC,gBAAD,EAAmB1B,OAAnB,EAA4B2D,IAA5B,CAApB;AACH;AACJ,GArB0B,CAuB3B;;;AACAjC,EAAAA,gBAAgB,GAAGkC,sBAAsB,CAAClC,gBAAD,CAAzC,CAxB2B,CA0B3B;;AACA,OAAIP,GAAJ,IAAWxG,QAAQ,CAACmH,kBAApB,EAAwC;AACpC9B,IAAAA,OAAO,GAAGrF,QAAQ,CAACmH,kBAAT,CAA4BX,GAA5B,CAAV;AACA,QAAIa,MAAM,GAAGhC,OAAO,CAACgC,MAArB;;AAEA,QAAGA,MAAM,KAAKA,MAAM,CAAC6B,QAAP,IAAmB7B,MAAM,CAAC9E,MAA/B,CAAT,EAAiD;AAC7C;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,UAAI2G,QAAQ,GAAG7B,MAAM,CAAC6B,QAAtB;;AACA,UAAGA,QAAQ,IAAIA,QAAQ,CAACC,KAArB,IAA8B,CAACD,QAAQ,CAACE,KAA3C,EAAkD;AAC9C,aAAI,IAAIC,IAAR,IAAgBH,QAAQ,CAACC,KAAzB,EAAgC;AAC5B,iBAAOpC,gBAAgB,CAACqC,KAAjB,CAAuBC,IAAvB,CAAP;AACH;AACJ;AACJ,KAjBD,MAiBO,IAAGhE,OAAO,CAAC+B,IAAR,KAAiB,YAApB,EAAkC;AACrCxG,MAAAA,aAAa,CAACmG,gBAAD,EAAmB1B,OAAO,CAAC0B,gBAA3B,CAAb;AACH,KAFM,MAEA,IAAG1B,OAAO,CAAC0B,gBAAX,EAA6B;AAChC;AACAuC,MAAAA,WAAW,CAACvC,gBAAD,EAAmB1B,OAAO,CAAC0B,gBAA3B,EAA6C1B,OAAO,CAAC+B,IAArD,CAAX;AACH;AACJ;;AAED,SAAO;AACHL,IAAAA,gBAAgB,EAAEhE,gBAAgB,CAACgE,gBAAD;AAD/B,GAAP;AAGH;;AAED,SAAS7E,sBAAT,CAAgCN,IAAhC,EAAsC;AAClC,MAAIyD,OAAO,GAAGrF,QAAQ,CAACiC,kBAAT,CAA4BL,IAA5B,CAAd;AACA,MAAI0D,UAAU,GAAG1E,aAAa,CAAC,EAAD,EAAKyE,OAAO,CAACC,UAAb,CAA9B,CAFkC,CAIlC;;AACAvD,EAAAA,MAAM,CAACC,IAAP,CAAYhC,QAAQ,CAACmH,kBAArB,EAAyCxF,OAAzC,CAAiD,UAAS4H,CAAT,EAAY;AACzD,QAAIlE,OAAO,GAAGrF,QAAQ,CAACmH,kBAAT,CAA4BoC,CAA5B,CAAd;;AAEA,QAAGlE,OAAO,CAACgC,MAAR,IAAkBhC,OAAO,CAACgC,MAAR,CAAevF,UAAjC,IAA+CuD,OAAO,CAACgC,MAAR,CAAevF,UAAf,CAA0BF,IAA1B,CAAlD,EAAmF;AAC/EG,MAAAA,MAAM,CAACC,IAAP,CAAYqD,OAAO,CAACgC,MAAR,CAAevF,UAAf,CAA0BF,IAA1B,CAAZ,EAA6CD,OAA7C,CAAqD,UAAS6H,CAAT,EAAY;AAC7DF,QAAAA,WAAW,CAAChE,UAAD,EAAaD,OAAO,CAACgC,MAAR,CAAevF,UAAf,CAA0BF,IAA1B,EAAgC4H,CAAhC,CAAb,EAAiDA,CAAjD,CAAX;AACH,OAFD;AAGH;AACJ,GARD;AAUA,SAAO;AACHlE,IAAAA,UAAU,EAAEvC,gBAAgB,CAACuC,UAAD;AADzB,GAAP;AAGH;;AAED,SAASzC,mBAAT,GAA+B;AAC3B,MAAIK,KAAK,GAAG;AACRN,IAAAA,MAAM,EAAEhC,aAAa,CAAC,EAAD,EAAKP,eAAL;AADb,GAAZ;AAIA0C,EAAAA,gBAAgB,CAACG,KAAD,CAAhB;AAEA,SAAOA,KAAK,CAACN,MAAb;AACH;;AAED,SAASG,gBAAT,CAA0BG,KAA1B,EAAiC;AAC7BuG,EAAAA,mBAAmB,CAACvG,KAAD,CAAnB;AACAwG,EAAAA,qBAAqB,CAACxG,KAAD,CAArB;AACAyG,EAAAA,SAAS,CAACzG,KAAD,CAAT;AAEA,SAAOA,KAAP;AACH;;AAED,SAASuG,mBAAT,CAA6BvG,KAA7B,EAAoC;AAChC,WAAS0G,WAAT,CAAqBrG,QAArB,EAA+B;AAC3B,WAAO;AACHM,MAAAA,OAAO,EAAE,QADN;AAEHgG,MAAAA,IAAI,EAAE,MAFH;AAGHpH,MAAAA,WAAW,EAAE,CACT,sDADS,EAETc,QAFS,EAEC,GAFD,EAGXb,IAHW,CAGN,GAHM,CAHV;AAOHJ,MAAAA,QAAQ,EAAE;AAPP,KAAP;AASH;;AAED,WAASa,QAAT,CAAkBK,IAAlB,EAAwBD,QAAxB,EAAkCL,KAAlC,EAAyC;AACrC,QAAG5B,OAAO,CAACqC,WAAR,CAAoBH,IAApB,CAAH,EAA8B;AAC1B,UAAGA,IAAI,CAACK,OAAL,KAAiB,YAApB,EAAkC;AAC9B;AACAL,QAAAA,IAAI,CAACqG,IAAL,GAAY,MAAZ,CAF8B,CAG9B;;AACA3G,QAAAA,KAAK,CAACK,QAAQ,GAAG,KAAZ,CAAL,GAA0BqG,WAAW,CAACrG,QAAD,CAArC;AACH,OALD,MAKO,IAAGC,IAAI,CAACiB,OAAL,KAAiB,IAApB,EAA0B;AAC7B;AACAvB,QAAAA,KAAK,CAACK,QAAQ,GAAG,KAAZ,CAAL,GAA0BqG,WAAW,CAACrG,QAAD,CAArC;AACH;AACJ,KAVD,MAUO,IAAG1C,aAAa,CAAC2C,IAAD,CAAhB,EAAwB;AAC3B;AACAA,MAAAA,IAAI,CAACqG,IAAL,GAAY,QAAZ;AACH;AACJ;;AAEDvI,EAAAA,OAAO,CAAC2B,KAAR,CAAcC,KAAd,EAAqBC,QAArB;AACH;;AAED,SAASuG,qBAAT,CAA+BxG,KAA/B,EAAsC;AAClC,WAASC,QAAT,CAAkBK,IAAlB,EAAwBD,QAAxB,EAAkCL,KAAlC,EAAyC;AACrC,QAAG,CAACM,IAAJ,EAAU;AAEV,QAAIsG,QAAQ,GAAGtG,IAAI,CAACtC,kBAAD,CAAnB;AAEA,QAAG,CAAC4I,QAAJ,EAAc;AAEd,WAAOtG,IAAI,CAACtC,kBAAD,CAAX;AAEAgC,IAAAA,KAAK,CAACK,QAAD,CAAL,GAAkB;AAAEiE,MAAAA,KAAK,EAAE;AAAT,KAAlB;AACAtE,IAAAA,KAAK,CAACK,QAAD,CAAL,CAAgBiE,KAAhB,CAAsBsC,QAAtB,IAAkCtG,IAAlC;AACAN,IAAAA,KAAK,CAACK,QAAD,CAAL,CAAgBsG,IAAhB,GAAuB,QAAvB;AACH;;AAEDvI,EAAAA,OAAO,CAAC2B,KAAR,CAAcC,KAAd,EAAqBC,QAArB;AACH,C,CAED;AACA;;;AACA,SAASwG,SAAT,CAAmBzG,KAAnB,EAA0B;AACtB,WAAS6G,IAAT,CAAcvG,IAAd,EAAoB;AAChB,SAAI,IAAI+F,CAAR,IAAa/F,IAAb,EAAmB;AACf,UAAG3C,aAAa,CAAC2C,IAAI,CAAC+F,CAAD,CAAL,CAAhB,EAA2B;AACvBQ,QAAAA,IAAI,CAACvG,IAAI,CAAC+F,CAAD,CAAL,CAAJ;AACH,OAFD,MAEO,IAAGrE,KAAK,CAACC,OAAN,CAAc3B,IAAI,CAAC+F,CAAD,CAAlB,CAAH,EAA2B;AAC9B,aAAI,IAAI3E,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGpB,IAAI,CAAC+F,CAAD,CAAJ,CAAQvE,MAA3B,EAAmCJ,CAAC,EAApC,EAAwC;AACpCmF,UAAAA,IAAI,CAACvG,IAAI,CAAC+F,CAAD,CAAJ,CAAQ3E,CAAR,CAAD,CAAJ;AACH;AACJ,OAJM,MAIA;AACH;AACA,YAAGpB,IAAI,CAAC+F,CAAD,CAAJ,YAAmBS,MAAtB,EAA8B;AAC1BxG,UAAAA,IAAI,CAAC+F,CAAD,CAAJ,GAAU/F,IAAI,CAAC+F,CAAD,CAAJ,CAAQU,QAAR,EAAV;AACH;AACJ;AACJ;AACJ;;AAEDF,EAAAA,IAAI,CAAC7G,KAAD,CAAJ;AACH;;AAED,SAAS+F,sBAAT,CAAgClC,gBAAhC,EAAkD;AAC9CpG,EAAAA,UAAU,CAACoG,gBAAD,EAAmB;AACzBmD,IAAAA,UAAU,EAAEzJ,cAAc,CAACyJ,UADF;AAEzBC,IAAAA,WAAW,EAAE1J,cAAc,CAAC0J;AAFH,GAAnB,CAAV;AAKAxJ,EAAAA,UAAU,CAACoG,gBAAD,EAAmBtG,cAAc,CAAC8B,MAAlC,CAAV;AAEA,SAAOwE,gBAAP;AACH;;AAED,SAASgC,oBAAT,CAA8BhC,gBAA9B,EAAgD1B,OAAhD,EAAyD2D,IAAzD,EAA+D;AAC3D,MAAIoB,EAAE,GAAGrJ,cAAc,CAACgG,gBAAD,EAAmBiC,IAAnB,CAAvB;AACA,MAAI9F,KAAK,GAAGtC,aAAa,CAAC,EAAD,EAAKyE,OAAO,CAAC0B,gBAAb,CAAzB;AAEA7D,EAAAA,KAAK,CAACjC,cAAD,CAAL,GAAwB,IAAxB;AACAmJ,EAAAA,EAAE,CAACpC,GAAH,CAAO9E,KAAP;AACH;;AAED,SAASoG,WAAT,CAAqBe,SAArB,EAAgCC,QAAhC,EAA0CtB,IAA1C,EAAgD;AAC5C,MAAIoB,EAAE,GAAGrJ,cAAc,CAACsJ,SAAD,EAAYrB,IAAZ,CAAvB;AAEAoB,EAAAA,EAAE,CAACpC,GAAH,CAAOpH,aAAa,CAACwJ,EAAE,CAAC7I,GAAH,MAAY,EAAb,EAAiB+I,QAAjB,CAApB;AACH","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../registry');\nvar Lib = require('../lib');\n\nvar baseAttributes = require('../plots/attributes');\nvar baseLayoutAttributes = require('../plots/layout_attributes');\nvar frameAttributes = require('../plots/frame_attributes');\nvar animationAttributes = require('../plots/animation_attributes');\nvar configAttributes = require('./plot_config').configAttributes;\n\n// polar attributes are not part of the Registry yet\nvar polarAreaAttrs = require('../plots/polar/legacy/area_attributes');\nvar polarAxisAttrs = require('../plots/polar/legacy/axis_attributes');\n\nvar editTypes = require('./edit_types');\n\nvar extendFlat = Lib.extendFlat;\nvar extendDeepAll = Lib.extendDeepAll;\nvar isPlainObject = Lib.isPlainObject;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar nestedProperty = Lib.nestedProperty;\nvar valObjectMeta = Lib.valObjectMeta;\n\nvar IS_SUBPLOT_OBJ = '_isSubplotObj';\nvar IS_LINKED_TO_ARRAY = '_isLinkedToArray';\nvar ARRAY_ATTR_REGEXPS = '_arrayAttrRegexps';\nvar DEPRECATED = '_deprecated';\nvar UNDERSCORE_ATTRS = [IS_SUBPLOT_OBJ, IS_LINKED_TO_ARRAY, ARRAY_ATTR_REGEXPS, DEPRECATED];\n\nexports.IS_SUBPLOT_OBJ = IS_SUBPLOT_OBJ;\nexports.IS_LINKED_TO_ARRAY = IS_LINKED_TO_ARRAY;\nexports.DEPRECATED = DEPRECATED;\nexports.UNDERSCORE_ATTRS = UNDERSCORE_ATTRS;\n\n/** Outputs the full plotly.js plot schema\n *\n * @return {object}\n *  - defs\n *  - traces\n *  - layout\n *  - transforms\n *  - frames\n *  - animations\n *  - config\n */\nexports.get = function() {\n    var traces = {};\n\n    Registry.allTypes.concat('area').forEach(function(type) {\n        traces[type] = getTraceAttributes(type);\n    });\n\n    var transforms = {};\n\n    Object.keys(Registry.transformsRegistry).forEach(function(type) {\n        transforms[type] = getTransformAttributes(type);\n    });\n\n    return {\n        defs: {\n            valObjects: valObjectMeta,\n            metaKeys: UNDERSCORE_ATTRS.concat(['description', 'role', 'editType', 'impliedEdits']),\n            editType: {\n                traces: editTypes.traces,\n                layout: editTypes.layout\n            },\n            impliedEdits: {\n                description: [\n                    'Sometimes when an attribute is changed, other attributes',\n                    'must be altered as well in order to achieve the intended',\n                    'result. For example, when `range` is specified, it is',\n                    'important to set `autorange` to `false` or the new `range`',\n                    'value would be lost in the redraw. `impliedEdits` is the',\n                    'mechanism to do this: `impliedEdits: {autorange: false}`.',\n                    'Each key is a relative paths to the attribute string to',\n                    'change, using *^* to ascend into the parent container,',\n                    'for example `range[0]` has `impliedEdits: {*^autorange*: false}`.',\n                    'A value of `undefined` means that the attribute will not be',\n                    'changed, but its previous value should be recorded in case',\n                    'we want to reverse this change later. For example, `autorange`',\n                    'has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined}',\n                    'because the range will likely be changed by redraw.'\n                ].join(' ')\n            }\n        },\n\n        traces: traces,\n        layout: getLayoutAttributes(),\n\n        transforms: transforms,\n\n        frames: getFramesAttributes(),\n        animation: formatAttributes(animationAttributes),\n\n        config: formatAttributes(configAttributes)\n    };\n};\n\n/**\n * Crawl the attribute tree, recursively calling a callback function\n *\n * @param {object} attrs\n *  The node of the attribute tree (e.g. the root) from which recursion originates\n * @param {Function} callback\n *  A callback function with the signature:\n *          @callback callback\n *          @param {object} attr an attribute\n *          @param {String} attrName name string\n *          @param {object[]} attrs all the attributes\n *          @param {Number} level the recursion level, 0 at the root\n *          @param {String} fullAttrString full attribute name (ie 'marker.line')\n * @param {Number} [specifiedLevel]\n *  The level in the tree, in order to let the callback function detect descend or backtrack,\n *  typically unsupplied (implied 0), just used by the self-recursive call.\n *  The necessity arises because the tree traversal is not controlled by callback return values.\n *  The decision to not use callback return values for controlling tree pruning arose from\n *  the goal of keeping the crawler backwards compatible. Observe that one of the pruning conditions\n *  precedes the callback call.\n * @param {string} [attrString]\n *  the path to the current attribute, as an attribute string (ie 'marker.line')\n *  typically unsupplied, but you may supply it if you want to disambiguate which attrs tree you\n *  are starting from\n *\n * @return {object} transformOut\n *  copy of transformIn that contains attribute defaults\n */\nexports.crawl = function(attrs, callback, specifiedLevel, attrString) {\n    var level = specifiedLevel || 0;\n    attrString = attrString || '';\n\n    Object.keys(attrs).forEach(function(attrName) {\n        var attr = attrs[attrName];\n\n        if(UNDERSCORE_ATTRS.indexOf(attrName) !== -1) return;\n\n        var fullAttrString = (attrString ? attrString + '.' : '') + attrName;\n        callback(attr, attrName, attrs, level, fullAttrString);\n\n        if(exports.isValObject(attr)) return;\n\n        if(isPlainObject(attr) && attrName !== 'impliedEdits') {\n            exports.crawl(attr, callback, level + 1, fullAttrString);\n        }\n    });\n};\n\n/** Is object a value object (or a container object)?\n *\n * @param {object} obj\n * @return {boolean}\n *  returns true for a valid value object and\n *  false for tree nodes in the attribute hierarchy\n */\nexports.isValObject = function(obj) {\n    return obj && obj.valType !== undefined;\n};\n\n/**\n * Find all data array attributes in a given trace object - including\n * `arrayOk` attributes.\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n *\n * @return {array} arrayAttributes\n *  list of array attributes for the given trace\n */\nexports.findArrayAttributes = function(trace) {\n    var arrayAttributes = [];\n    var stack = [];\n    var isArrayStack = [];\n    var baseContainer, baseAttrName;\n\n    function callback(attr, attrName, attrs, level) {\n        stack = stack.slice(0, level).concat([attrName]);\n        isArrayStack = isArrayStack.slice(0, level).concat([attr && attr._isLinkedToArray]);\n\n        var splittableAttr = (\n            attr &&\n            (attr.valType === 'data_array' || attr.arrayOk === true) &&\n            !(stack[level - 1] === 'colorbar' && (attrName === 'ticktext' || attrName === 'tickvals'))\n        );\n\n        // Manually exclude 'colorbar.tickvals' and 'colorbar.ticktext' for now\n        // which are declared as `valType: 'data_array'` but scale independently of\n        // the coordinate arrays.\n        //\n        // Down the road, we might want to add a schema field (e.g `uncorrelatedArray: true`)\n        // to distinguish attributes of the likes.\n\n        if(!splittableAttr) return;\n\n        crawlIntoTrace(baseContainer, 0, '');\n    }\n\n    function crawlIntoTrace(container, i, astrPartial) {\n        var item = container[stack[i]];\n        var newAstrPartial = astrPartial + stack[i];\n        if(i === stack.length - 1) {\n            if(isArrayOrTypedArray(item)) {\n                arrayAttributes.push(baseAttrName + newAstrPartial);\n            }\n        } else {\n            if(isArrayStack[i]) {\n                if(Array.isArray(item)) {\n                    for(var j = 0; j < item.length; j++) {\n                        if(isPlainObject(item[j])) {\n                            crawlIntoTrace(item[j], i + 1, newAstrPartial + '[' + j + '].');\n                        }\n                    }\n                }\n            } else if(isPlainObject(item)) {\n                crawlIntoTrace(item, i + 1, newAstrPartial + '.');\n            }\n        }\n    }\n\n    baseContainer = trace;\n    baseAttrName = '';\n    exports.crawl(baseAttributes, callback);\n    if(trace._module && trace._module.attributes) {\n        exports.crawl(trace._module.attributes, callback);\n    }\n\n    var transforms = trace.transforms;\n    if(transforms) {\n        for(var i = 0; i < transforms.length; i++) {\n            var transform = transforms[i];\n            var module = transform._module;\n\n            if(module) {\n                baseAttrName = 'transforms[' + i + '].';\n                baseContainer = transform;\n\n                exports.crawl(module.attributes, callback);\n            }\n        }\n    }\n\n    return arrayAttributes;\n};\n\n/*\n * Find the valObject for one attribute in an existing trace\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n * @param {object} parts\n *  an array of parts, like ['transforms', 1, 'value']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\nexports.getTraceValObject = function(trace, parts) {\n    var head = parts[0];\n    var i = 1; // index to start recursing from\n    var moduleAttrs, valObject;\n\n    if(head === 'transforms') {\n        if(parts.length === 1) {\n            return baseAttributes.transforms;\n        }\n        var transforms = trace.transforms;\n        if(!Array.isArray(transforms) || !transforms.length) return false;\n        var tNum = parts[1];\n        if(!isIndex(tNum) || tNum >= transforms.length) {\n            return false;\n        }\n        moduleAttrs = (Registry.transformsRegistry[transforms[tNum].type] || {}).attributes;\n        valObject = moduleAttrs && moduleAttrs[parts[2]];\n        i = 3; // start recursing only inside the transform\n    } else if(trace.type === 'area') {\n        valObject = polarAreaAttrs[head];\n    } else {\n        // first look in the module for this trace\n        // components have already merged their trace attributes in here\n        var _module = trace._module;\n        if(!_module) _module = (Registry.modules[trace.type || baseAttributes.type.dflt] || {})._module;\n        if(!_module) return false;\n\n        moduleAttrs = _module.attributes;\n        valObject = moduleAttrs && moduleAttrs[head];\n\n        // then look in the subplot attributes\n        if(!valObject) {\n            var subplotModule = _module.basePlotModule;\n            if(subplotModule && subplotModule.attributes) {\n                valObject = subplotModule.attributes[head];\n            }\n        }\n\n        // finally look in the global attributes\n        if(!valObject) valObject = baseAttributes[head];\n    }\n\n    return recurseIntoValObject(valObject, parts, i);\n};\n\n/*\n * Find the valObject for one layout attribute\n *\n * @param {array} parts\n *  an array of parts, like ['annotations', 1, 'x']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\nexports.getLayoutValObject = function(fullLayout, parts) {\n    var valObject = layoutHeadAttr(fullLayout, parts[0]);\n\n    return recurseIntoValObject(valObject, parts, 1);\n};\n\nfunction layoutHeadAttr(fullLayout, head) {\n    var i, key, _module, attributes;\n\n    // look for attributes of the subplot types used on the plot\n    var basePlotModules = fullLayout._basePlotModules;\n    if(basePlotModules) {\n        var out;\n        for(i = 0; i < basePlotModules.length; i++) {\n            _module = basePlotModules[i];\n            if(_module.attrRegex && _module.attrRegex.test(head)) {\n                // if a module defines overrides, these take precedence\n                // initially this is to allow gl2d different editTypes from svg cartesian\n                if(_module.layoutAttrOverrides) return _module.layoutAttrOverrides;\n\n                // otherwise take the first attributes we find\n                if(!out && _module.layoutAttributes) out = _module.layoutAttributes;\n            }\n\n            // a module can also override the behavior of base (and component) module layout attrs\n            // again see gl2d for initial use case\n            var baseOverrides = _module.baseLayoutAttrOverrides;\n            if(baseOverrides && head in baseOverrides) return baseOverrides[head];\n        }\n        if(out) return out;\n    }\n\n    // look for layout attributes contributed by traces on the plot\n    var modules = fullLayout._modules;\n    if(modules) {\n        for(i = 0; i < modules.length; i++) {\n            attributes = modules[i].layoutAttributes;\n            if(attributes && head in attributes) {\n                return attributes[head];\n            }\n        }\n    }\n\n    /*\n     * Next look in components.\n     * Components that define a schema have already merged this into\n     * base and subplot attribute defs, so ignore these.\n     * Others (older style) all put all their attributes\n     * inside a container matching the module `name`\n     * eg `attributes` (array) or `legend` (object)\n     */\n    for(key in Registry.componentsRegistry) {\n        _module = Registry.componentsRegistry[key];\n        if(_module.name === 'colorscale' && head.indexOf('coloraxis') === 0) {\n            return _module.layoutAttributes[head];\n        } else if(!_module.schema && (head === _module.name)) {\n            return _module.layoutAttributes;\n        }\n    }\n\n    if(head in baseLayoutAttributes) return baseLayoutAttributes[head];\n\n    // Polar doesn't populate _modules or _basePlotModules\n    // just fall back on these when the others fail\n    if(head === 'radialaxis' || head === 'angularaxis') {\n        return polarAxisAttrs[head];\n    }\n    return polarAxisAttrs.layout[head] || false;\n}\n\nfunction recurseIntoValObject(valObject, parts, i) {\n    if(!valObject) return false;\n\n    if(valObject._isLinkedToArray) {\n        // skip array index, abort if we try to dive into an array without an index\n        if(isIndex(parts[i])) i++;\n        else if(i < parts.length) return false;\n    }\n\n    // now recurse as far as we can. Occasionally we have an attribute\n    // setting an internal part below what's in the schema; just return\n    // the innermost schema item we find.\n    for(; i < parts.length; i++) {\n        var newValObject = valObject[parts[i]];\n        if(isPlainObject(newValObject)) valObject = newValObject;\n        else break;\n\n        if(i === parts.length - 1) break;\n\n        if(valObject._isLinkedToArray) {\n            i++;\n            if(!isIndex(parts[i])) return false;\n        } else if(valObject.valType === 'info_array') {\n            i++;\n            var index = parts[i];\n            if(!isIndex(index)) return false;\n\n            var items = valObject.items;\n            if(Array.isArray(items)) {\n                if(index >= items.length) return false;\n                if(valObject.dimensions === 2) {\n                    i++;\n                    if(parts.length === i) return valObject;\n                    var index2 = parts[i];\n                    if(!isIndex(index2)) return false;\n                    valObject = items[index][index2];\n                } else valObject = items[index];\n            } else {\n                valObject = items;\n            }\n        }\n    }\n\n    return valObject;\n}\n\n// note: this is different from Lib.isIndex, this one doesn't accept numeric\n// strings, only actual numbers.\nfunction isIndex(val) {\n    return val === Math.round(val) && val >= 0;\n}\n\nfunction getTraceAttributes(type) {\n    var _module, basePlotModule;\n\n    if(type === 'area') {\n        _module = { attributes: polarAreaAttrs };\n        basePlotModule = {};\n    } else {\n        _module = Registry.modules[type]._module,\n        basePlotModule = _module.basePlotModule;\n    }\n\n    var attributes = {};\n\n    // make 'type' the first attribute in the object\n    attributes.type = null;\n\n    var copyBaseAttributes = extendDeepAll({}, baseAttributes);\n    var copyModuleAttributes = extendDeepAll({}, _module.attributes);\n\n    // prune global-level trace attributes that are already defined in a trace\n    exports.crawl(copyModuleAttributes, function(attr, attrName, attrs, level, fullAttrString) {\n        nestedProperty(copyBaseAttributes, fullAttrString).set(undefined);\n        // Prune undefined attributes\n        if(attr === undefined) nestedProperty(copyModuleAttributes, fullAttrString).set(undefined);\n    });\n\n    // base attributes (same for all trace types)\n    extendDeepAll(attributes, copyBaseAttributes);\n\n    // prune-out base attributes based on trace module categories\n    if(Registry.traceIs(type, 'noOpacity')) {\n        delete attributes.opacity;\n    }\n    if(!Registry.traceIs(type, 'showLegend')) {\n        delete attributes.showlegend;\n        delete attributes.legendgroup;\n    }\n    if(Registry.traceIs(type, 'noHover')) {\n        delete attributes.hoverinfo;\n        delete attributes.hoverlabel;\n    }\n    if(!_module.selectPoints) {\n        delete attributes.selectedpoints;\n    }\n\n    // module attributes\n    extendDeepAll(attributes, copyModuleAttributes);\n\n    // subplot attributes\n    if(basePlotModule.attributes) {\n        extendDeepAll(attributes, basePlotModule.attributes);\n    }\n\n    // 'type' gets overwritten by baseAttributes; reset it here\n    attributes.type = type;\n\n    var out = {\n        meta: _module.meta || {},\n        categories: _module.categories || {},\n        animatable: Boolean(_module.animatable),\n        type: type,\n        attributes: formatAttributes(attributes),\n    };\n\n    // trace-specific layout attributes\n    if(_module.layoutAttributes) {\n        var layoutAttributes = {};\n\n        extendDeepAll(layoutAttributes, _module.layoutAttributes);\n        out.layoutAttributes = formatAttributes(layoutAttributes);\n    }\n\n    // drop anim:true in non-animatable modules\n    if(!_module.animatable) {\n        exports.crawl(out, function(attr) {\n            if(exports.isValObject(attr) && 'anim' in attr) {\n                delete attr.anim;\n            }\n        });\n    }\n\n    return out;\n}\n\nfunction getLayoutAttributes() {\n    var layoutAttributes = {};\n    var key, _module;\n\n    // global layout attributes\n    extendDeepAll(layoutAttributes, baseLayoutAttributes);\n\n    // add base plot module layout attributes\n    for(key in Registry.subplotsRegistry) {\n        _module = Registry.subplotsRegistry[key];\n\n        if(!_module.layoutAttributes) continue;\n\n        if(Array.isArray(_module.attr)) {\n            for(var i = 0; i < _module.attr.length; i++) {\n                handleBasePlotModule(layoutAttributes, _module, _module.attr[i]);\n            }\n        } else {\n            var astr = _module.attr === 'subplot' ? _module.name : _module.attr;\n            handleBasePlotModule(layoutAttributes, _module, astr);\n        }\n    }\n\n    // polar layout attributes\n    layoutAttributes = assignPolarLayoutAttrs(layoutAttributes);\n\n    // add registered components layout attributes\n    for(key in Registry.componentsRegistry) {\n        _module = Registry.componentsRegistry[key];\n        var schema = _module.schema;\n\n        if(schema && (schema.subplots || schema.layout)) {\n            /*\n             * Components with defined schema have already been merged in at register time\n             * but a few components define attributes that apply only to xaxis\n             * not yaxis (rangeselector, rangeslider) - delete from y schema.\n             * Note that the input attributes for xaxis/yaxis are the same object\n             * so it's not possible to only add them to xaxis from the start.\n             * If we ever have such asymmetry the other way, or anywhere else,\n             * we will need to extend both this code and mergeComponentAttrsToSubplot\n             * (which will not find yaxis only for example)\n             */\n            var subplots = schema.subplots;\n            if(subplots && subplots.xaxis && !subplots.yaxis) {\n                for(var xkey in subplots.xaxis) {\n                    delete layoutAttributes.yaxis[xkey];\n                }\n            }\n        } else if(_module.name === 'colorscale') {\n            extendDeepAll(layoutAttributes, _module.layoutAttributes);\n        } else if(_module.layoutAttributes) {\n            // older style without schema need to be explicitly merged in now\n            insertAttrs(layoutAttributes, _module.layoutAttributes, _module.name);\n        }\n    }\n\n    return {\n        layoutAttributes: formatAttributes(layoutAttributes)\n    };\n}\n\nfunction getTransformAttributes(type) {\n    var _module = Registry.transformsRegistry[type];\n    var attributes = extendDeepAll({}, _module.attributes);\n\n    // add registered components transform attributes\n    Object.keys(Registry.componentsRegistry).forEach(function(k) {\n        var _module = Registry.componentsRegistry[k];\n\n        if(_module.schema && _module.schema.transforms && _module.schema.transforms[type]) {\n            Object.keys(_module.schema.transforms[type]).forEach(function(v) {\n                insertAttrs(attributes, _module.schema.transforms[type][v], v);\n            });\n        }\n    });\n\n    return {\n        attributes: formatAttributes(attributes)\n    };\n}\n\nfunction getFramesAttributes() {\n    var attrs = {\n        frames: extendDeepAll({}, frameAttributes)\n    };\n\n    formatAttributes(attrs);\n\n    return attrs.frames;\n}\n\nfunction formatAttributes(attrs) {\n    mergeValTypeAndRole(attrs);\n    formatArrayContainers(attrs);\n    stringify(attrs);\n\n    return attrs;\n}\n\nfunction mergeValTypeAndRole(attrs) {\n    function makeSrcAttr(attrName) {\n        return {\n            valType: 'string',\n            role: 'info',\n            description: [\n                'Sets the source reference on Chart Studio Cloud for ',\n                attrName, '.'\n            ].join(' '),\n            editType: 'none'\n        };\n    }\n\n    function callback(attr, attrName, attrs) {\n        if(exports.isValObject(attr)) {\n            if(attr.valType === 'data_array') {\n                // all 'data_array' attrs have role 'data'\n                attr.role = 'data';\n                // all 'data_array' attrs have a corresponding 'src' attr\n                attrs[attrName + 'src'] = makeSrcAttr(attrName);\n            } else if(attr.arrayOk === true) {\n                // all 'arrayOk' attrs have a corresponding 'src' attr\n                attrs[attrName + 'src'] = makeSrcAttr(attrName);\n            }\n        } else if(isPlainObject(attr)) {\n            // all attrs container objects get role 'object'\n            attr.role = 'object';\n        }\n    }\n\n    exports.crawl(attrs, callback);\n}\n\nfunction formatArrayContainers(attrs) {\n    function callback(attr, attrName, attrs) {\n        if(!attr) return;\n\n        var itemName = attr[IS_LINKED_TO_ARRAY];\n\n        if(!itemName) return;\n\n        delete attr[IS_LINKED_TO_ARRAY];\n\n        attrs[attrName] = { items: {} };\n        attrs[attrName].items[itemName] = attr;\n        attrs[attrName].role = 'object';\n    }\n\n    exports.crawl(attrs, callback);\n}\n\n// this can take around 10ms and should only be run from PlotSchema.get(),\n// to ensure JSON.stringify(PlotSchema.get()) gives the intended result.\nfunction stringify(attrs) {\n    function walk(attr) {\n        for(var k in attr) {\n            if(isPlainObject(attr[k])) {\n                walk(attr[k]);\n            } else if(Array.isArray(attr[k])) {\n                for(var i = 0; i < attr[k].length; i++) {\n                    walk(attr[k][i]);\n                }\n            } else {\n                // as JSON.stringify(/test/) // => {}\n                if(attr[k] instanceof RegExp) {\n                    attr[k] = attr[k].toString();\n                }\n            }\n        }\n    }\n\n    walk(attrs);\n}\n\nfunction assignPolarLayoutAttrs(layoutAttributes) {\n    extendFlat(layoutAttributes, {\n        radialaxis: polarAxisAttrs.radialaxis,\n        angularaxis: polarAxisAttrs.angularaxis\n    });\n\n    extendFlat(layoutAttributes, polarAxisAttrs.layout);\n\n    return layoutAttributes;\n}\n\nfunction handleBasePlotModule(layoutAttributes, _module, astr) {\n    var np = nestedProperty(layoutAttributes, astr);\n    var attrs = extendDeepAll({}, _module.layoutAttributes);\n\n    attrs[IS_SUBPLOT_OBJ] = true;\n    np.set(attrs);\n}\n\nfunction insertAttrs(baseAttrs, newAttrs, astr) {\n    var np = nestedProperty(baseAttrs, astr);\n\n    np.set(extendDeepAll(np.get() || {}, newAttrs));\n}\n"]},"metadata":{},"sourceType":"script"}