{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/LeaseLines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //bootstrap\n\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\";\nimport ReactDataSheet from 'react-datasheet'; // actionCreators\n\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\";\nimport postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\";\n\nconst LeaseLines = ({\n  activeWell,\n  saveLeaseLinesToReduxStore,\n  postLeaseLinesToJSONDb\n}) => {\n  _s();\n\n  const {\n    operator,\n    rig,\n    well,\n    county,\n    usState,\n    northing,\n    easting\n  } = activeWell.response; // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialLeaseLineRecords = [[{\n    value: \"\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Northing\",\n    readOnly: true,\n    width: \"7rem\"\n  }, {\n    value: \"Easting\",\n    readOnly: true,\n    width: \"7rem\"\n  }], [{\n    value: 1,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 2,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 3,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 4,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 5,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 6,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 7,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 8,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }], [{\n    value: 9,\n    readOnly: true\n  }, {\n    value: 0\n  }, {\n    value: 0\n  }]];\n  const [grid, setGrid] = useState(initialLeaseLineRecords); // const renderWellHeader = () => {\n  //   if (activeWell.status === \"received\") {\n  //     // const {operator, rig, well} = activeWell.response\n  //     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No Well Data\"\n  //   }\n  // }\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row]);\n    changes.forEach(({\n      cell,\n      row,\n      col,\n      value\n    }) => {\n      gridNew[row][col] = { ...grid[row][col],\n        value\n      };\n    });\n    setGrid(gridNew);\n  };\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig,\n      well,\n      county,\n      usState,\n      northing,\n      easting,\n      grid\n    }; // const activeWell\n    // saveLeaseLinesToJSON \n\n    checkTest();\n    postLeaseLinesToJSONDb(wellInfoAndLeaseLines);\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines);\n  };\n\n  const checkTest = () => {\n    console.log(\"whyyy\");\n  };\n\n  const renderRowsButtons = () => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          className: \"my-4\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: addRow,\n          children: \"Add a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"ml-4\",\n          onClick: removeRow,\n          children: \"Remove a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  };\n\n  const addRow = () => {\n    const gridLength = grid.length;\n    const newRow = [{\n      value: gridLength,\n      readOnly: true\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }];\n    const newGrid = [...grid, newRow];\n    setGrid(newGrid);\n  };\n\n  const removeRow = () => {\n    const newGrid = [...grid];\n    newGrid.pop();\n    setGrid(newGrid);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 10,\n        children: [/*#__PURE__*/_jsxDEV(ReactDataSheet, {\n          data: grid,\n          valueRenderer: cell => cell.value,\n          onCellsChanged: onCellsChanged\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), renderRowsButtons()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LeaseLines, \"1yoOdoc297cIU9QJYiQhz7b6o4s=\");\n\n_c = LeaseLines;\n\nconst mapStateToProps = ({\n  activeWell,\n  postLeaseLinesToJSONDbReducer\n}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveLeaseLinesToReduxStore,\n  postLeaseLinesToJSONDb\n})(LeaseLines);\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaseLines\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/LeaseLines.js"],"names":["React","useState","useEffect","Container","Form","Row","Col","Button","connect","ReactDataSheet","saveLeaseLinesToReduxStore","postLeaseLinesToJSONDb","LeaseLines","activeWell","operator","rig","well","county","usState","northing","easting","response","initialLeaseLineRecords","value","readOnly","width","grid","setGrid","onCellsChanged","changes","gridNew","map","row","forEach","cell","col","handleSubmit","wellInfoAndLeaseLines","checkTest","console","log","renderRowsButtons","addRow","removeRow","gridLength","length","newRow","newGrid","pop","mapStateToProps","postLeaseLinesToJSONDbReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n//bootstrap\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css';\nimport { connect } from \"react-redux\"\nimport ReactDataSheet from 'react-datasheet';\n\n// actionCreators\nimport saveLeaseLinesToReduxStore from \"../ActionCreators/saveLeaseLinesToReduxStore\"\nimport postLeaseLinesToJSONDb from \"../ActionCreators/postLeaseLinesToJSONDb\"\n\n\nconst LeaseLines = ({activeWell, saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb}) => {\n  const {operator, rig, well, county, usState, northing, easting} = activeWell.response\n  // set up initial grid\n  // create local state to setGrid\n  // renderWellHeader {if (either activeWell or saveWellInfoToRedux)} then destructure out the rig, wellname, operator\n  // render out ReactData sheet data = {grid} valueRenderer={cell=> cell.value} onCellsChanged={onCellsChanged}\n  // render submit button return row col xs={10} className = \"my-4\" button variant=\"info' onClick = handleSubmit\n  // handlesubmit = postLeaseLinesToJSONDb saveHardLinesToRedux\n  // addRows: newGrid =  [...grid, addedRow] setGrid(newGrid)\n\n  const initialLeaseLineRecords = [\n    [{value: \"\", readOnly: true, width: \"7rem\"}, {value: \"Northing\", readOnly: true, width: \"7rem\"}, {value:\"Easting\", readOnly: true, width: \"7rem\"}],\n    [{value: 1, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 2, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 3, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 4, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 5, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 6, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 7, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 8, readOnly: true}, {value: 0}, {value: 0}],\n    [{value: 9, readOnly: true}, {value: 0}, {value: 0}],\n  ]\n  const [grid, setGrid] = useState(initialLeaseLineRecords)\n\n  // const renderWellHeader = () => {\n  //   if (activeWell.status === \"received\") {\n  //     // const {operator, rig, well} = activeWell.response\n  //     return <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n  //   } else {\n  //     return \"No Well Data\"\n  //   }\n  // }\n\n  const onCellsChanged = changes => {\n    const gridNew = grid.map(row => [...row])\n    changes.forEach(({cell, row, col, value}) => {\n      gridNew[row][col] = {...grid[row][col], value}\n    });\n    setGrid(gridNew);\n    \n  }\n\n  const handleSubmit = () => {\n    const wellInfoAndLeaseLines = {\n      operator,\n      rig, \n      well, \n      county,\n      usState, \n      northing,\n      easting,\n      grid\n    }\n    // const activeWell\n    // saveLeaseLinesToJSON \n    checkTest()\n    postLeaseLinesToJSONDb(wellInfoAndLeaseLines)\n    saveLeaseLinesToReduxStore(wellInfoAndLeaseLines)\n\n    \n  }\n\n  const checkTest = () => {\n    console.log(\"whyyy\")\n  }\n\n  const renderRowsButtons = () => {\n    return (\n      <Row>\n        <Col xs={10} className=\"my-4\">\n          <Button variant=\"success\" className=\"my-4\" onClick={handleSubmit}> \n            Submit\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={addRow}>\n            Add a Row\n          </Button>\n          <Button variant=\"primary\" className=\"ml-4\" onClick={removeRow}>\n            Remove a Row\n          </Button>\n\n        </Col>\n      </Row>\n    )\n  }\n\n  const addRow = () => {\n    const gridLength = grid.length\n    const newRow = [{value: gridLength, readOnly: true}, {value: 0}, {value: 0}]\n    const newGrid = [...grid, newRow]\n    setGrid(newGrid)\n  }\n\n  const removeRow = () => {\n    const newGrid = [...grid]\n    newGrid.pop()\n    setGrid(newGrid)\n  }\n  \n\n  return (\n    <Container>\n      <Row>\n        <Col xs={10}>\n          {/* {renderWellHeader()} */}\n          <ReactDataSheet data={grid} valueRenderer={(cell)=> cell.value} onCellsChanged={onCellsChanged}/>\n          {renderRowsButtons()}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = ({activeWell, postLeaseLinesToJSONDbReducer}) => {\n  return {\n    activeWell,\n    postLeaseLinesToJSONDbReducer,\n  }\n}\n\nexport default connect(mapStateToProps, {saveLeaseLinesToReduxStore, postLeaseLinesToJSONDb})(LeaseLines)"]},"metadata":{},"sourceType":"module"}