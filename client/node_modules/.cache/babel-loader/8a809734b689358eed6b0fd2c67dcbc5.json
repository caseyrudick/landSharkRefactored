{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\";\n\nconst ExistingPlans = ({\n  getWellPlansFromDynamoDbReducer,\n  activeWell\n}) => {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromDynamoDbReducer.response.Items];\n      setPlans(planFromReducerCopy);\n      console.log(plans);\n    }\n  }, [getWellPlansFromDynamoDbReducer.status]); // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const plansCopy = [...plans]; // console.log(plansCopy)\n\n  let gridFromPlans = [[{\n    value: '',\n    readOnly: true,\n    width: '3rem'\n  }, {\n    value: 'Measured Depth',\n    readOnly: true,\n    width: '10rem'\n  }, {\n    value: 'Inclination',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'Azimuth',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'TVD',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'NS',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'EW',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'SECT',\n    readOnly: true,\n    width: '7rem'\n  }, {\n    value: 'DLS',\n    readOnly: true,\n    width: '7rem'\n  }]]; // plansFromGrid = plansCopy.map(row => {\n  //   row.map(cell => {\n  //   })\n  // })\n  //   plansCopy.forEach((row, index) => {\n  //     console.log(row)\n  //     // const convertedRow = [\n  //     //   {readOnly: true, value: row[0]}, \n  //     //   {readOnly: true, value: row[1]},\n  //     //   {readOnly: true, value: row[2]},\n  //     //   {readOnly: true, value: row[3]},\n  //     //   {readOnly: true, value: row[4]},\n  //     //   {readOnly: true, value: row[5]},\n  //     //   {readOnly: true, value: row[6]},\n  //     //   {readOnly: true, value: row[7]},\n  //     //   {readOnly: true, value: row[8]},\n  //     // ]\n  //     // gridFromPlans.push(convertedRow)\n  //   })\n  // setGrid(gridFromPlans)\n  // const createGridFromPlans = () => {\n  //   let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n  //   const plansCopy = [...plans]  \n  //   // const plansCopy = [...plans]\n  //   plansCopy.forEach((row, index) => { \n  //     const convertedRow = [\n  //       {readOnly: true, value: row[0]}, \n  //       {readOnly: true, value: row[1]},\n  //       {readOnly: true, value: row[2]},\n  //       {readOnly: true, value: row[3]},\n  //       {readOnly: true, value: row[4]},\n  //       {readOnly: true, value: row[5]},\n  //       {readOnly: true, value: row[6]},\n  //       {readOnly: true, value: row[7]},\n  //       {readOnly: true, value: row[8]},\n  //     ]\n  //     gridFromPlans.push(convertedRow)\n  //   })\n  //   console.log(gridFromPlans)\n  //   setGrid(gridFromPlans)\n  // }\n  // createGridFromPlans()\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const {\n        operator,\n        rig,\n        well\n      } = activeWell.response;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-4\",\n          children: [operator, \" - \", rig, \" - \", well]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: renderMain()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"error\";\n  } // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n  //     </Col>\n  //   </Container>\n  // )\n\n};\n\n_s(ExistingPlans, \"Hid+llYDPO6oRzFGkaZa0XxLAGE=\");\n\n_c = ExistingPlans;\n\nconst mapStateToProps = ({\n  getWellPlansFromDynamoDbReducer,\n  activeWell\n}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getWellPlansFromJSONDb\n})(ExistingPlans);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPlans\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/Work/landsharkfinal/landSharkRefactored/client/src/Components/ExistingPlans.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","getWellPlansFromJSONDb","ExistingPlans","getWellPlansFromDynamoDbReducer","activeWell","plans","setPlans","grid","setGrid","status","planFromReducerCopy","response","Items","console","log","plansCopy","gridFromPlans","value","readOnly","width","renderMain","operator","rig","well","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport getWellPlansFromJSONDb from \"../ActionCreators/getWellPlansFromJSONDb\"\n\nconst ExistingPlans = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  const [plans, setPlans] = useState([])\n  const [grid, setGrid] = useState([])\n  \n  useEffect(()=> {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      let planFromReducerCopy = [...getWellPlansFromDynamoDbReducer.response.Items]\n      setPlans(planFromReducerCopy)\n      console.log(plans)\n    }\n  },[getWellPlansFromDynamoDbReducer.status])\n  \n  \n\n  // useEffect(()=> {\n  //   createGridFromPlans();\n  // },[plans])\n\n  // const convertSurveyNumberStringsToNumbers = () => {\n  //   let plansFromReducerCopy = [...getWellPlansFromJSONDbReducer.response]\n  //   plansFromReducerCopy.map((survey, index) => {\n  //     plansFromReducerCopy[index].\n  //   })\n  //   console.log(getWellPlansFromJSONDbReducer.response)\n  // }\n  // convertSurveyNumberStringsToNumbers()\n\n  const plansCopy = [...plans]\n  // console.log(plansCopy)\n  let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n  // plansFromGrid = plansCopy.map(row => {\n  //   row.map(cell => {\n\n  //   })\n  // })\n\n  //   plansCopy.forEach((row, index) => {\n//     console.log(row)\n//     // const convertedRow = [\n//     //   {readOnly: true, value: row[0]}, \n//     //   {readOnly: true, value: row[1]},\n//     //   {readOnly: true, value: row[2]},\n//     //   {readOnly: true, value: row[3]},\n//     //   {readOnly: true, value: row[4]},\n//     //   {readOnly: true, value: row[5]},\n//     //   {readOnly: true, value: row[6]},\n//     //   {readOnly: true, value: row[7]},\n//     //   {readOnly: true, value: row[8]},\n//     // ]\n//     // gridFromPlans.push(convertedRow)\n//   })\n// setGrid(gridFromPlans)\n\n  // const createGridFromPlans = () => {\n  //   let gridFromPlans = [[{value: '', readOnly: true, width: '3rem'}, {value: 'Measured Depth', readOnly: true, width: '10rem'}, {value: 'Inclination', readOnly: true, width: '7rem'}, {value: 'Azimuth', readOnly: true, width: '7rem'}, {value: 'TVD', readOnly: true, width: '7rem'}, {value: 'NS', readOnly: true, width: '7rem'}, {value: 'EW', readOnly: true, width: '7rem'}, {value: 'SECT', readOnly: true, width: '7rem'}, {value: 'DLS', readOnly: true, width: '7rem'}]]\n  //   const plansCopy = [...plans]  \n  //   // const plansCopy = [...plans]\n  //   plansCopy.forEach((row, index) => { \n  //     const convertedRow = [\n  //       {readOnly: true, value: row[0]}, \n  //       {readOnly: true, value: row[1]},\n  //       {readOnly: true, value: row[2]},\n  //       {readOnly: true, value: row[3]},\n  //       {readOnly: true, value: row[4]},\n  //       {readOnly: true, value: row[5]},\n  //       {readOnly: true, value: row[6]},\n  //       {readOnly: true, value: row[7]},\n  //       {readOnly: true, value: row[8]},\n  //     ]\n  //     gridFromPlans.push(convertedRow)\n  //   })\n  //   console.log(gridFromPlans)\n  //   setGrid(gridFromPlans)\n  // }\n\n\n  // createGridFromPlans()\n\n\n  const renderMain = () => {\n    if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n      const { operator, rig, well } = activeWell.response\n      return (\n        <React.Fragment>\n          <h3 className=\"my-4\">{operator} - {rig} - {well}</h3>\n          {/* <ReactDataSheet data={getWellPlansFromDynamoDbReducer.response.Items} valueRenderer={cell => cell.value} width/> */}\n        </React.Fragment>\n      )\n    }\n  }\n  if (getWellPlansFromDynamoDbReducer.status === \"received\") {\n\n    return (\n      <Container>\n        {renderMain()}\n      </Container>\n    ) \n  } else {\n    return \"error\"\n  }\n  \n\n\n\n  // return (\n  //   <Container>\n  //     <Col>EXISTING PLANS</Col>\n\n  //     <ReactDataSheet\n  //       data={grid}             \n  //       valueRenderer={(cell)=> cell.value}\n  //       onCellsChanged={onCellsChanged}\n  //     ></ReactDataSheet>\n  //     <Col>\n  //   <Button variant=\"primary\" className=\"mt-4 mb-4\" onClick={()=>addNewRow()}>Add a Row</Button>\n  //   <Button variant=\"danger\" className=\"my-4 ml-4\" onClick={()=>removeRow()}>Remove a Row</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>editPlans()}>Edit Plans</Button>\n  //   <Button variant=\"info\" className=\"my-4 ml-4\" onClick={()=>createNewPlan()}>Create New Plan</Button>\n    \n  //     </Col>\n  //   </Container>\n  // )\n}\n\nconst mapStateToProps = ({getWellPlansFromDynamoDbReducer, activeWell}) => {\n  return {\n    getWellPlansFromDynamoDbReducer,\n    activeWell\n  }\n}\n\nexport default connect(mapStateToProps, {getWellPlansFromJSONDb})(ExistingPlans)"]},"metadata":{},"sourceType":"module"}