{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport ReactDataSheet from \"react-datasheet\";\nimport Plot from \"plotly.js\";\n\nconst ExistingPVA = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getLeaseLinesFromJSONDbReducer\n}) => {\n  // const createEastingCoordinates = (polyLine = false, data) => {\n  //   console.log(data)\n  //   if (polyLine) {\n  //     if (Object.keys(data).length === 0) {\n  //       return []\n  //     } else {\n  //       return data.slice(1).filter((row, index) => index !== 0)\n  //         .map((row, index) => data[index][2])\n  //     }\n  //   } else {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][6])\n  //       }\n  //     }\n  //   } \n  //   const createNorthingCoordinates = (polyLine = false, data) => {\n  //     if (polyLine) {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][1])\n  //       }\n  //     } else {\n  //         if (Object.keys(data).length === 0) {\n  //           return []\n  //         } else {\n  //           return data.slice(1).filter((row, index) => index !== 0)           \n  //             .map((row, index) => data[index][5])\n  //         }\n  //       }\n  //     } \n  // const renderPlanView = () => {\n  //   <Plot\n  //     data = {[\n  //       {\n  //         x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"blue\"},\n  //         name: \"Plan\"\n  //       },\n  //       {\n  //         x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"black\"},\n  //         name: \"Lease Lines\"\n  //       }\n  //     ]}\n  //     layout = { {width: 1000, height: 800, title: \"Section View\"} }\n  //   />\n  // }\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    console.log(\"Here's the getLeaseLinesFromJSONDbReducer.status\");\n    console.log(getLeaseLinesFromJSONDbReducer.response);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: \"\\\"TBD\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  } else {\n    return \"Data Loading\";\n  }\n};\n\n_c = ExistingPVA;\n\nconst mapStateToProps = ({\n  getWellPlansFromJSONDbReducer,\n  activeWell,\n  getLeaseLinesFromJSONDbReducer\n}) => {\n  return {\n    getWellPlansFromJSONDbReducer,\n    activeWell,\n    getLeaseLinesFromJSONDbReducer\n  };\n};\n\nexport default connect(mapStateToProps, {})(ExistingPVA);\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingPVA\");","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/src/Components/ExistingPVA.js"],"names":["React","useEffect","useState","connect","Container","Form","Row","Col","Button","ReactDataSheet","Plot","ExistingPVA","getWellPlansFromJSONDbReducer","activeWell","getLeaseLinesFromJSONDbReducer","status","console","log","response","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAO,yCAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,6BAAD;AAAgCC,EAAAA,UAAhC;AAA4CC,EAAAA;AAA5C,CAAD,KAAiF;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAIA,8BAA8B,CAACC,MAA/B,KAA0C,UAA1C,IAAwDH,6BAA6B,CAACG,MAA9B,KAAyC,UAArG,EAAiH;AAC/GC,IAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,8BAA8B,CAACI,QAA3C;AACA,wBACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAVD,MAUO;AACL,WACE,cADF;AAGD;AAGF,CAhFD;;KAAMP,W;;AAkFN,MAAMQ,eAAe,GAAG,CAAC;AAACP,EAAAA,6BAAD;AAAgCC,EAAAA,UAAhC;AAA4CC,EAAAA;AAA5C,CAAD,KAAiF;AACvG,SAAO;AACLF,IAAAA,6BADK;AAC0BC,IAAAA,UAD1B;AACsCC,IAAAA;AADtC,GAAP;AAGD,CAJD;;AAMA,eAAeX,OAAO,CAACgB,eAAD,EAAkB,EAAlB,CAAP,CAA8BR,WAA9B,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\nimport Container from \"react-bootstrap/esm/Container\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nimport 'react-datasheet/lib/react-datasheet.css'\nimport ReactDataSheet from \"react-datasheet\"\nimport Plot from \"plotly.js\"\n\nconst ExistingPVA = ({getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n  // const createEastingCoordinates = (polyLine = false, data) => {\n  //   console.log(data)\n  //   if (polyLine) {\n  //     if (Object.keys(data).length === 0) {\n  //       return []\n  //     } else {\n  //       return data.slice(1).filter((row, index) => index !== 0)\n  //         .map((row, index) => data[index][2])\n  //     }\n  //   } else {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][6])\n  //       }\n  //     }\n  //   } \n  //   const createNorthingCoordinates = (polyLine = false, data) => {\n  //     if (polyLine) {\n  //       if (Object.keys(data).length === 0) {\n  //         return []\n  //       } else {\n  //         return data.slice(1).filter((row, index) => index !== 0)\n  //           .map((row, index) => data[index][1])\n  //       }\n  //     } else {\n  //         if (Object.keys(data).length === 0) {\n  //           return []\n  //         } else {\n  //           return data.slice(1).filter((row, index) => index !== 0)           \n  //             .map((row, index) => data[index][5])\n  //         }\n  //       }\n  //     } \n\n\n  // const renderPlanView = () => {\n  //   <Plot\n  //     data = {[\n  //       {\n  //         x: createEastingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getWellPlansFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"blue\"},\n  //         name: \"Plan\"\n  //       },\n  //       {\n  //         x: createEastingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         y: createNorthingCoordinates(getLeaseLinesFromJSONDbReducer.response),\n  //         type: \"scatter\",\n  //         mode: \"lines+markers\",\n  //         marker: {color: \"black\"},\n  //         name: \"Lease Lines\"\n  //       }\n  //     ]}\n  //     layout = { {width: 1000, height: 800, title: \"Section View\"} }\n  //   />\n  // }\n\n\n  if (getLeaseLinesFromJSONDbReducer.status === \"received\" && getWellPlansFromJSONDbReducer.status === \"received\") {\n    console.log(\"Here's the getLeaseLinesFromJSONDbReducer.status\")\n    console.log(getLeaseLinesFromJSONDbReducer.response)\n    return (\n      <Container>\n        {/* {createEastingCoordinates()} */}\n        \"TBD\"\n        {/* {renderPlanView()} */}\n      </Container>\n    )\n  } else {\n    return (\n      \"Data Loading\"\n    )\n  }\n\n\n}\n\nconst mapStateToProps = ({getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer}) => {\n  return {\n    getWellPlansFromJSONDbReducer, activeWell, getLeaseLinesFromJSONDbReducer\n  }\n}\n\nexport default connect(mapStateToProps, { })(ExistingPVA)"]},"metadata":{},"sourceType":"module"}