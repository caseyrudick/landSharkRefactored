{"ast":null,"code":"/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar scatterGeoAttrs = require('../scattergeo/attributes');\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar defaultLine = require('../../components/color/attributes').defaultLine;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterGeoMarkerLineAttrs = scatterGeoAttrs.marker.line;\nmodule.exports = extendFlat({\n  locations: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the coordinates via location IDs or names.', 'See `locationmode` for more info.'].join(' ')\n  },\n  locationmode: scatterGeoAttrs.locationmode,\n  z: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the color values.'\n  },\n  geojson: extendFlat({}, scatterGeoAttrs.geojson, {\n    description: ['Sets optional GeoJSON data associated with this trace.', 'If not given, the features on the base map are used.', 'It can be set as a valid GeoJSON object or as a URL string.', 'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*', 'with geometries of type *Polygon* or *MultiPolygon*.' // TODO add topojson support with additional 'topojsonobject' attr?\n    // https://github.com/topojson/topojson-specification/blob/master/README.md\n    ].join(' ')\n  }),\n  featureidkey: scatterGeoAttrs.featureidkey,\n  text: extendFlat({}, scatterGeoAttrs.text, {\n    description: 'Sets the text elements associated with each location.'\n  }),\n  hovertext: extendFlat({}, scatterGeoAttrs.hovertext, {\n    description: 'Same as `text`.'\n  }),\n  marker: {\n    line: {\n      color: extendFlat({}, scatterGeoMarkerLineAttrs.color, {\n        dflt: defaultLine\n      }),\n      width: extendFlat({}, scatterGeoMarkerLineAttrs.width, {\n        dflt: 1\n      }),\n      editType: 'calc'\n    },\n    opacity: {\n      valType: 'number',\n      arrayOk: true,\n      min: 0,\n      max: 1,\n      dflt: 1,\n      role: 'style',\n      editType: 'style',\n      description: 'Sets the opacity of the locations.'\n    },\n    editType: 'calc'\n  },\n  selected: {\n    marker: {\n      opacity: scatterGeoAttrs.selected.marker.opacity,\n      editType: 'plot'\n    },\n    editType: 'plot'\n  },\n  unselected: {\n    marker: {\n      opacity: scatterGeoAttrs.unselected.marker.opacity,\n      editType: 'plot'\n    },\n    editType: 'plot'\n  },\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc',\n    flags: ['location', 'z', 'text', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs(),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n}, colorScaleAttrs('', {\n  cLetter: 'z',\n  editTypeOverride: 'calc'\n}));","map":{"version":3,"sources":["/Users/caseyrudick/Documents/landsharkrefactored-copy/client/node_modules/plotly.js/src/traces/choropleth/attributes.js"],"names":["hovertemplateAttrs","require","scatterGeoAttrs","colorScaleAttrs","baseAttrs","defaultLine","extendFlat","scatterGeoMarkerLineAttrs","marker","line","module","exports","locations","valType","editType","description","join","locationmode","z","geojson","featureidkey","text","hovertext","color","dflt","width","opacity","arrayOk","min","max","role","selected","unselected","hoverinfo","flags","hovertemplate","showlegend","cLetter","editTypeOverride"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2020, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar scatterGeoAttrs = require('../scattergeo/attributes');\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar defaultLine = require('../../components/color/attributes').defaultLine;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterGeoMarkerLineAttrs = scatterGeoAttrs.marker.line;\n\nmodule.exports = extendFlat({\n    locations: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the coordinates via location IDs or names.',\n            'See `locationmode` for more info.'\n        ].join(' ')\n    },\n    locationmode: scatterGeoAttrs.locationmode,\n    z: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the color values.'\n    },\n    geojson: extendFlat({}, scatterGeoAttrs.geojson, {\n        description: [\n            'Sets optional GeoJSON data associated with this trace.',\n            'If not given, the features on the base map are used.',\n\n            'It can be set as a valid GeoJSON object or as a URL string.',\n            'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*',\n            'with geometries of type *Polygon* or *MultiPolygon*.'\n\n            // TODO add topojson support with additional 'topojsonobject' attr?\n            // https://github.com/topojson/topojson-specification/blob/master/README.md\n        ].join(' ')\n    }),\n    featureidkey: scatterGeoAttrs.featureidkey,\n\n    text: extendFlat({}, scatterGeoAttrs.text, {\n        description: 'Sets the text elements associated with each location.'\n    }),\n    hovertext: extendFlat({}, scatterGeoAttrs.hovertext, {\n        description: 'Same as `text`.'\n    }),\n    marker: {\n        line: {\n            color: extendFlat({}, scatterGeoMarkerLineAttrs.color, {dflt: defaultLine}),\n            width: extendFlat({}, scatterGeoMarkerLineAttrs.width, {dflt: 1}),\n            editType: 'calc'\n        },\n        opacity: {\n            valType: 'number',\n            arrayOk: true,\n            min: 0,\n            max: 1,\n            dflt: 1,\n            role: 'style',\n            editType: 'style',\n            description: 'Sets the opacity of the locations.'\n        },\n        editType: 'calc'\n    },\n\n    selected: {\n        marker: {\n            opacity: scatterGeoAttrs.selected.marker.opacity,\n            editType: 'plot'\n        },\n        editType: 'plot'\n    },\n    unselected: {\n        marker: {\n            opacity: scatterGeoAttrs.unselected.marker.opacity,\n            editType: 'plot'\n        },\n        editType: 'plot'\n    },\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        editType: 'calc',\n        flags: ['location', 'z', 'text', 'name']\n    }),\n    hovertemplate: hovertemplateAttrs(),\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n},\n\n    colorScaleAttrs('', {\n        cLetter: 'z',\n        editTypeOverride: 'calc'\n    })\n);\n"]},"metadata":{},"sourceType":"script"}